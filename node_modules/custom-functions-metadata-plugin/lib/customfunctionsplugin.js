// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const custom_functions_metadata_1 = require("custom-functions-metadata");
const path = __importStar(require("path"));
const webpack_1 = require("webpack");
/* global require */
const pluginName = "CustomFunctionsMetadataPlugin";
class CustomFunctionsMetadataPlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        const inputFilePath = path.resolve(this.options.input);
        let generateResult;
        compiler.hooks.beforeCompile.tapPromise(pluginName, () => __awaiter(this, void 0, void 0, function* () {
            generateResult = yield (0, custom_functions_metadata_1.generateCustomFunctionsMetadata)(inputFilePath, true);
        }));
        compiler.hooks.compilation.tap(pluginName, (compilation) => {
            if (generateResult.errors.length > 0) {
                generateResult.errors.forEach((err) => compilation.errors.push(new webpack_1.WebpackError(inputFilePath + " " + err)));
            }
            else {
                compilation.assets[this.options.output] = new webpack_1.sources.RawSource(generateResult.metadataJson);
                CustomFunctionsMetadataPlugin.generateResults[this.options.input] =
                    generateResult;
            }
            webpack_1.NormalModule.getCompilationHooks(compilation).beforeLoaders.tap(pluginName, (_, module) => {
                if (module.userRequest.endsWith(inputFilePath)) {
                    module.loaders.push({
                        loader: require.resolve("./loader.js"),
                        options: {
                            input: this.options.input,
                        },
                        ident: null,
                        type: null,
                    });
                }
            });
        });
    }
}
CustomFunctionsMetadataPlugin.generateResults = {};
module.exports = CustomFunctionsMetadataPlugin;
//# sourceMappingURL=customfunctionsplugin.js.map