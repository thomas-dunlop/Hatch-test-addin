"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActivatedV2ResourcePlugins = exports.getActivatedResourcePlugins = exports.getAllV2ResourcePluginMap = exports.getAllResourcePluginMap = exports.getAllV2ResourcePlugins = exports.getAllResourcePlugins = exports.ResourcePluginsV2 = exports.ResourcePlugins = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("./constants");
exports.ResourcePlugins = {
    SpfxPlugin: "SpfxPlugin",
    FrontendPlugin: "FrontendPlugin",
    IdentityPlugin: "IdentityPlugin",
    SqlPlugin: "SqlPlugin",
    BotPlugin: "BotPlugin",
    AadPlugin: "AadPlugin",
    FunctionPlugin: "FunctionPlugin",
    LocalDebugPlugin: "LocalDebugPlugin",
    ApimPlugin: "ApimPlugin",
    AppStudioPlugin: "AppStudioPlugin",
    SimpleAuthPlugin: "SimpleAuthPlugin",
    KeyVaultPlugin: "KeyVaultPlugin",
};
exports.ResourcePluginsV2 = {
    SpfxPlugin: "SpfxPluginV2",
    FrontendPlugin: "FrontendPluginV2",
    IdentityPlugin: "IdentityPluginV2",
    SqlPlugin: "SqlPluginV2",
    BotPlugin: "BotPluginV2",
    AadPlugin: "AadPluginV2",
    FunctionPlugin: "FunctionPluginV2",
    LocalDebugPlugin: "LocalDebugPluginV2",
    ApimPlugin: "ApimPluginV2",
    AppStudioPlugin: "AppStudioPluginV2",
    SimpleAuthPlugin: "SimpleAuthPluginV2",
    KeyVaultPlugin: "KeyVaultPluginV2",
    CICDPlugin: "CICDPluginV2",
};
/**
 * @returns all registered resource plugins
 */
function getAllResourcePlugins() {
    const plugins = [];
    for (const k in exports.ResourcePlugins) {
        const plugin = typedi_1.Container.get(k);
        if (plugin) {
            plugins.push(plugin);
        }
    }
    return plugins;
}
exports.getAllResourcePlugins = getAllResourcePlugins;
/**
 * @returns all resource plugins implemented with v2 API
 */
function getAllV2ResourcePlugins() {
    const plugins = [];
    let k;
    for (k in exports.ResourcePluginsV2) {
        const pluginName = exports.ResourcePluginsV2[k];
        const plugin = typedi_1.Container.get(pluginName);
        if (plugin) {
            plugins.push(plugin);
        }
    }
    return plugins;
}
exports.getAllV2ResourcePlugins = getAllV2ResourcePlugins;
/**
 * @returns all registered resource plugin map
 */
function getAllResourcePluginMap() {
    const map = new Map();
    const allPlugins = getAllResourcePlugins();
    for (const p of allPlugins) {
        map.set(p.name, p);
    }
    return map;
}
exports.getAllResourcePluginMap = getAllResourcePluginMap;
/**
 * @returns a map from plugin name to resource plugin v2
 */
function getAllV2ResourcePluginMap() {
    const map = new Map();
    const allPlugins = getAllV2ResourcePlugins();
    for (const p of allPlugins) {
        map.set(p.name, p);
    }
    return map;
}
exports.getAllV2ResourcePluginMap = getAllV2ResourcePluginMap;
/**
 * return activated resource plugin according to solution settings
 * @param solutionSettings Azure solution settings
 * @returns activated resource plugins
 */
function getActivatedResourcePlugins(solutionSettings) {
    const activatedPlugins = getAllResourcePlugins().filter((p) => p.activate && p.activate(solutionSettings) === true);
    if (activatedPlugins.length === 0) {
        throw new teamsfx_api_1.UserError(constants_1.SolutionSource, constants_1.SolutionError.NoResourcePluginSelected, "No plugin selected");
    }
    return activatedPlugins;
}
exports.getActivatedResourcePlugins = getActivatedResourcePlugins;
/**
 * return activated resource plugin according to solution settings
 * @param projectSettings project settings
 * @returns activated resource plugins
 */
function getActivatedV2ResourcePlugins(projectSettings) {
    var _a;
    const activeResourcePlugins = (_a = projectSettings.solutionSettings) === null || _a === void 0 ? void 0 : _a.activeResourcePlugins;
    if (!activeResourcePlugins)
        return [];
    const activatedPlugins = getAllV2ResourcePlugins().filter((p) => activeResourcePlugins.includes(p.name));
    return activatedPlugins;
}
exports.getActivatedV2ResourcePlugins = getActivatedV2ResourcePlugins;
//# sourceMappingURL=ResourcePluginContainer.js.map