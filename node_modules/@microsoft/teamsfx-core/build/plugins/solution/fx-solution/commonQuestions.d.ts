import { FxError, Result, SolutionConfig, SolutionContext, AzureAccountProvider, SubscriptionInfo, Inputs, UserInteraction, LogProvider, v2, Void, EnvInfo } from "@microsoft/teamsfx-api";
import { ResourceManagementClient } from "@azure/arm-resources";
export declare type AzureSubscription = {
    displayName: string;
    subscriptionId: string;
};
export declare const DefaultResourceGroupLocation = "East US";
export declare type ResourceGroupInfo = {
    createNewResourceGroup: boolean;
    name: string;
    location: string;
};
export declare class CommonQuestions {
    needCreateResourceGroup: boolean;
    resourceNameSuffix: string;
    resourceGroupName: string;
    tenantId: string;
    subscriptionId: string;
    subscriptionName: string;
    location: string;
    teamsAppTenantId: string;
}
/**
 * make sure subscription is correct
 *
 */
export declare function checkSubscription(envInfo: {
    version: 1;
    data: EnvInfo;
} | {
    version: 2;
    data: v2.EnvInfoV2;
}, azureAccountProvider: AzureAccountProvider): Promise<Result<SubscriptionInfo, FxError>>;
/**
 * check m365 tenant is right
 *
 */
export declare function checkM365Tenant(envInfo: {
    version: 1;
    data: EnvInfo;
} | {
    version: 2;
    data: v2.EnvInfoV2;
}, appStudioJson: object): Promise<Result<Void, FxError>>;
/**
 * Ask user to create a new resource group or use an exsiting resource group
 */
export declare function askResourceGroupInfo(ctx: SolutionContext | v2.Context, azureAccountProvider: AzureAccountProvider, rmClient: ResourceManagementClient, inputs: Inputs, ui: UserInteraction, defaultResourceGroupName: string): Promise<Result<ResourceGroupInfo, FxError>>;
export declare function getResourceGroupInfo(ctx: SolutionContext | v2.Context, rmClient: ResourceManagementClient, resourceGroupName: string): Promise<ResourceGroupInfo | undefined>;
/**
 * Asks for userinput and fills the answers in global config.
 *
 * @param config reference to solution config
 * @param dialog communication channel to Core Module
 */
export declare function fillInCommonQuestions(ctx: SolutionContext, appName: string, config: SolutionConfig, azureAccountProvider?: AzureAccountProvider, appStudioJson?: object): Promise<Result<CommonQuestions, FxError>>;
export declare function createNewResourceGroup(azureAccountProvider: AzureAccountProvider, subscriptionId: string, subscriptionName: string, resourceGroupName: string, location: string, logProvider?: LogProvider): Promise<Result<string, FxError>>;
export declare function checkResourceGroupExistence(rmClient: ResourceManagementClient, resourceGroupName: string, subscriptionId: string, subscriptionName: string): Promise<Result<boolean, FxError>>;
//# sourceMappingURL=commonQuestions.d.ts.map