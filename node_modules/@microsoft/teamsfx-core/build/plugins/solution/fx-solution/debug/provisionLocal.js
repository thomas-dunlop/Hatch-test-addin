// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configLocalEnvironment = exports.configLocalDebugSettings = exports.setupLocalEnvironment = exports.setupLocalDebugSettings = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const projectSettingsHelper_1 = require("../../../../common/local/projectSettingsHelper");
const telemetry_1 = require("./util/telemetry");
const error_1 = require("./error");
const codespace_1 = require("./util/codespace");
const ngrok_1 = require("./util/ngrok");
const localEnvProvider_1 = require("../../../../common/local/localEnvProvider");
const localService_1 = require("./util/localService");
const tools_1 = require("../../../../common/tools");
const localCertificateManager_1 = require("../../../../common/local/localCertificateManager");
const constants_1 = require("../../../../common/local/constants");
const debug_1 = require("../../../../component/debug");
async function setupLocalDebugSettings(ctx, inputs, localSettings) {
    var _a, _b, _c;
    const vscEnv = inputs.vscodeEnv;
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(ctx.projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(ctx.projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(ctx.projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(ctx.projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(ctx.projectSetting);
    const skipNgrok = (_a = inputs.checkerInfo) === null || _a === void 0 ? void 0 : _a.skipNgrok;
    const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(ctx.projectSetting);
    const botCapabilities = projectSettingsHelper_1.ProjectSettingsHelper.getBotCapabilities(ctx.projectSetting);
    const telemetryProperties = {
        platform: inputs.platform,
        vscenv: vscEnv,
        frontend: includeFrontend ? "true" : "false",
        function: includeBackend ? "true" : "false",
        bot: includeBot ? "true" : "false",
        auth: includeAAD && includeSimpleAuth ? "true" : "false",
        "skip-ngrok": skipNgrok ? "true" : "false",
        "bot-host-type": includeFuncHostedBot ? constants_1.BotHostTypes.AzureFunctions : constants_1.BotHostTypes.AppService,
        "bot-capabilities": JSON.stringify(botCapabilities),
    };
    telemetry_1.TelemetryUtils.init(ctx.telemetryReporter);
    telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, telemetryProperties);
    try {
        // setup configs used by other plugins
        // TODO: dynamicly determine local ports
        if (inputs.platform === teamsfx_api_1.Platform.VSCode || inputs.platform === teamsfx_api_1.Platform.CLI) {
            const frontendPort = 53000;
            const authPort = 55000;
            let localTabEndpoint;
            let localTabDomain;
            let localAuthEndpoint;
            let localFuncEndpoint;
            if (vscEnv === teamsfx_api_1.VsCodeEnv.codespaceBrowser || vscEnv === teamsfx_api_1.VsCodeEnv.codespaceVsCode) {
                const codespaceName = await codespace_1.getCodespaceName();
                localTabEndpoint = codespace_1.getCodespaceUrl(codespaceName, frontendPort);
                localTabDomain = new URL(localTabEndpoint).host;
                localAuthEndpoint = codespace_1.getCodespaceUrl(codespaceName, authPort);
                localFuncEndpoint = codespace_1.getCodespaceUrl(codespaceName, 7071);
            }
            else {
                localTabDomain = "localhost";
                localTabEndpoint = `https://localhost:${frontendPort}`;
                localAuthEndpoint = `http://localhost:${authPort}`;
                localFuncEndpoint = "http://localhost:7071";
            }
            if (includeAAD) {
                if (!localSettings.auth) {
                    localSettings.auth = {};
                }
                if (includeSimpleAuth) {
                    localSettings.auth.AuthServiceEndpoint = localAuthEndpoint;
                }
            }
            if (includeFrontend) {
                if (!localSettings.frontend) {
                    localSettings.frontend = {};
                }
                localSettings.frontend.tabEndpoint = localTabEndpoint;
                localSettings.frontend.tabDomain = localTabDomain;
            }
            if (includeBackend) {
                if (!localSettings.backend) {
                    localSettings.backend = {};
                }
                localSettings.backend.functionEndpoint = localFuncEndpoint;
            }
            if (includeBot) {
                if (!localSettings.bot) {
                    localSettings.bot = {};
                }
                if (skipNgrok) {
                    const localBotEndpoint = localSettings.bot.botEndpoint;
                    if (localBotEndpoint === undefined) {
                        const error = error_1.LocalBotEndpointNotConfigured();
                        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, error);
                        return teamsfx_api_1.err(error);
                    }
                    const botEndpointRegex = /https:\/\/.*(:\d+)?/g;
                    if (!botEndpointRegex.test(localBotEndpoint)) {
                        const error = error_1.InvalidLocalBotEndpointFormat(localBotEndpoint);
                        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, error);
                        return teamsfx_api_1.err(error);
                    }
                    localSettings.bot.botEndpoint = localBotEndpoint;
                    localSettings.bot.botDomain = localBotEndpoint.slice(8);
                }
                else {
                    const ngrokHttpUrl = await ngrok_1.getNgrokHttpUrl(3978);
                    if (!ngrokHttpUrl) {
                        const error = error_1.NgrokTunnelNotConnected();
                        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, error);
                        return teamsfx_api_1.err(error);
                    }
                    else {
                        localSettings.bot.botEndpoint = ngrokHttpUrl;
                        localSettings.bot.botDomain = ngrokHttpUrl.slice(8);
                    }
                }
            }
        }
        else if (inputs.platform === teamsfx_api_1.Platform.VS) {
            if (includeFrontend) {
                (_b = localSettings.frontend) !== null && _b !== void 0 ? _b : (localSettings.frontend = {});
                localSettings.frontend.tabEndpoint = "https://localhost:44302";
                localSettings.frontend.tabDomain = "localhost";
            }
            if (includeBot) {
                (_c = localSettings.bot) !== null && _c !== void 0 ? _c : (localSettings.bot = {});
                const ngrokHttpUrl = await ngrok_1.getNgrokHttpUrl(5130);
                if (!ngrokHttpUrl) {
                    const error = error_1.NgrokTunnelNotConnected();
                    telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, error);
                    return teamsfx_api_1.err(error);
                }
                localSettings.bot.botEndpoint = ngrokHttpUrl;
                localSettings.bot.botDomain = ngrokHttpUrl.slice(8);
            }
        }
    }
    catch (error) {
        const systemError = error_1.SetupLocalDebugSettingsError(error);
        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, systemError);
        return teamsfx_api_1.err(systemError);
    }
    telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.setupLocalDebugSettings, telemetryProperties);
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.setupLocalDebugSettings = setupLocalDebugSettings;
async function setupLocalEnvironment(ctx, inputs, envInfo) {
    var _a, _b;
    const vscEnv = inputs.vscodeEnv;
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(ctx.projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(ctx.projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(ctx.projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(ctx.projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(ctx.projectSetting);
    const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(ctx.projectSetting);
    const botCapabilities = projectSettingsHelper_1.ProjectSettingsHelper.getBotCapabilities(ctx.projectSetting);
    const config = {
        hasAzureTab: includeFrontend,
        hasApi: includeBackend,
        hasBot: includeBot,
        hasAAD: includeAAD,
        hasSimpleAuth: includeSimpleAuth,
        hasFunctionBot: includeFuncHostedBot,
        botCapabilities: botCapabilities,
        defaultFunctionName: ctx.projectSetting.defaultFunctionName,
        programmingLanguage: ctx.projectSetting.programmingLanguage || "",
        isM365: ctx.projectSetting.isM365,
        skipNgrok: (_a = inputs.checkerInfo) === null || _a === void 0 ? void 0 : _a.skipNgrok,
        vscodeEnv: vscEnv,
        trustDevCert: (_b = inputs.checkerInfo) === null || _b === void 0 ? void 0 : _b.trustDevCert,
    };
    const res = await debug_1.setupLocalEnvironmentCommon(inputs, config, envInfo);
    if (res.isErr()) {
        return teamsfx_api_1.err(res.error);
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.setupLocalEnvironment = setupLocalEnvironment;
async function configLocalDebugSettings(ctx, inputs, localSettings) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(ctx.projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(ctx.projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(ctx.projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(ctx.projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(ctx.projectSetting);
    const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(ctx.projectSetting);
    const botCapabilities = projectSettingsHelper_1.ProjectSettingsHelper.getBotCapabilities(ctx.projectSetting);
    let trustDevCert = (_a = inputs.checkerInfo) === null || _a === void 0 ? void 0 : _a.trustDevCert;
    const telemetryProperties = {
        platform: inputs.platform,
        frontend: includeFrontend ? "true" : "false",
        function: includeBackend ? "true" : "false",
        bot: includeBot ? "true" : "false",
        auth: includeAAD && includeSimpleAuth ? "true" : "false",
        "trust-development-certificate": trustDevCert + "",
        "bot-host-type": includeFuncHostedBot ? constants_1.BotHostTypes.AzureFunctions : constants_1.BotHostTypes.AppService,
        "bot-capabilities": JSON.stringify(botCapabilities),
    };
    telemetry_1.TelemetryUtils.init(ctx.telemetryReporter);
    telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.configLocalDebugSettings, telemetryProperties);
    try {
        if (inputs.platform === teamsfx_api_1.Platform.VSCode || inputs.platform === teamsfx_api_1.Platform.CLI) {
            const localEnvProvider = new localEnvProvider_1.LocalEnvProvider(inputs.projectPath);
            const frontendEnvs = includeFrontend
                ? await localEnvProvider.loadFrontendLocalEnvs(includeBackend, includeAAD)
                : undefined;
            const backendEnvs = includeBackend
                ? await localEnvProvider.loadBackendLocalEnvs()
                : undefined;
            const botEnvs = includeBot ? await localEnvProvider.loadBotLocalEnvs() : undefined;
            // get config for local debug
            const clientId = (_b = localSettings === null || localSettings === void 0 ? void 0 : localSettings.auth) === null || _b === void 0 ? void 0 : _b.clientId;
            const clientSecret = (_c = localSettings === null || localSettings === void 0 ? void 0 : localSettings.auth) === null || _c === void 0 ? void 0 : _c.clientSecret;
            const applicationIdUri = (_d = localSettings === null || localSettings === void 0 ? void 0 : localSettings.auth) === null || _d === void 0 ? void 0 : _d.applicationIdUris;
            const teamsAppTenantId = (_e = localSettings === null || localSettings === void 0 ? void 0 : localSettings.teamsApp) === null || _e === void 0 ? void 0 : _e.tenantId;
            const localAuthEndpoint = (_f = localSettings === null || localSettings === void 0 ? void 0 : localSettings.auth) === null || _f === void 0 ? void 0 : _f.AuthServiceEndpoint;
            const localTabEndpoint = (_g = localSettings === null || localSettings === void 0 ? void 0 : localSettings.frontend) === null || _g === void 0 ? void 0 : _g.tabEndpoint;
            const localFuncEndpoint = (_h = localSettings === null || localSettings === void 0 ? void 0 : localSettings.backend) === null || _h === void 0 ? void 0 : _h.functionEndpoint;
            const localAuthPackagePath = (_j = localSettings === null || localSettings === void 0 ? void 0 : localSettings.auth) === null || _j === void 0 ? void 0 : _j.simpleAuthFilePath;
            if (includeFrontend) {
                frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.Port] = "53000";
                if (includeAAD) {
                    frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.LoginUrl] = `${localTabEndpoint}/auth-start.html`;
                    frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.ClientId] = clientId;
                }
                if (includeSimpleAuth) {
                    frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.TeamsFxEndpoint] = localAuthEndpoint;
                    await localService_1.prepareLocalAuthService(localAuthPackagePath);
                }
                if (includeBackend) {
                    frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.FuncEndpoint] = localFuncEndpoint;
                    frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.FuncName] = ctx.projectSetting
                        .defaultFunctionName;
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.FuncWorkerRuntime] = "node";
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.ClientId] = clientId;
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.ClientSecret] = clientSecret;
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.AuthorityHost] =
                        "https://login.microsoftonline.com";
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.TenantId] = teamsAppTenantId;
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.ApiEndpoint] = localFuncEndpoint;
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.ApplicationIdUri] = applicationIdUri;
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.AllowedAppIds] =
                        tools_1.getAllowedAppIds().join(";");
                }
                // setup local certificate
                try {
                    if (trustDevCert === undefined) {
                        trustDevCert = true;
                    }
                    const certManager = new localCertificateManager_1.LocalCertificateManager(ctx.userInteraction, ctx.logProvider);
                    const localCert = await certManager.setupCertificate(trustDevCert);
                    if (localCert) {
                        localSettings.frontend.sslCertFile = localCert.certPath;
                        localSettings.frontend.sslKeyFile = localCert.keyPath;
                        frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.SslCrtFile] = localCert.certPath;
                        frontendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysFrontend.SslKeyFile] = localCert.keyPath;
                    }
                }
                catch (error) {
                    // do not break if cert error
                }
            }
            if (includeBot) {
                const botId = (_k = localSettings === null || localSettings === void 0 ? void 0 : localSettings.bot) === null || _k === void 0 ? void 0 : _k.botId;
                const botPassword = (_l = localSettings === null || localSettings === void 0 ? void 0 : localSettings.bot) === null || _l === void 0 ? void 0 : _l.botPassword;
                botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.BotId] = botId;
                botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.BotPassword] = botPassword;
                if (includeAAD) {
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.ClientId] = clientId;
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.ClientSecret] = clientSecret;
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.TenantID] = teamsAppTenantId;
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.OauthAuthority] =
                        "https://login.microsoftonline.com";
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.LoginEndpoint] = `${(_m = localSettings === null || localSettings === void 0 ? void 0 : localSettings.bot) === null || _m === void 0 ? void 0 : _m.botEndpoint}/auth-start.html`;
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.ApplicationIdUri] = applicationIdUri;
                }
                if (includeBackend) {
                    backendEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBackend.ApiEndpoint] = localFuncEndpoint;
                    botEnvs.teamsfxLocalEnvs[localEnvProvider_1.EnvKeysBot.ApiEndpoint] = localFuncEndpoint;
                }
            }
            // save .env.teamsfx.local
            await localEnvProvider.saveLocalEnvs(frontendEnvs, backendEnvs, botEnvs);
        }
    }
    catch (error) {
        const systemError = error_1.ConfigLocalDebugSettingsError(error);
        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.configLocalDebugSettings, systemError);
        return teamsfx_api_1.err(systemError);
    }
    telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.configLocalDebugSettings, telemetryProperties);
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.configLocalDebugSettings = configLocalDebugSettings;
async function configLocalEnvironment(ctx, inputs, envInfo) {
    var _a, _b;
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(ctx.projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(ctx.projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(ctx.projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(ctx.projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(ctx.projectSetting);
    const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(ctx.projectSetting);
    const botCapabilities = projectSettingsHelper_1.ProjectSettingsHelper.getBotCapabilities(ctx.projectSetting);
    const config = {
        hasAzureTab: includeFrontend,
        hasApi: includeBackend,
        hasBot: includeBot,
        hasAAD: includeAAD,
        hasSimpleAuth: includeSimpleAuth,
        hasFunctionBot: includeFuncHostedBot,
        botCapabilities: botCapabilities,
        defaultFunctionName: ctx.projectSetting.defaultFunctionName,
        programmingLanguage: ctx.projectSetting.programmingLanguage || "",
        isM365: ctx.projectSetting.isM365,
        skipNgrok: (_a = inputs.checkerInfo) === null || _a === void 0 ? void 0 : _a.skipNgrok,
        trustDevCert: (_b = inputs.checkerInfo) === null || _b === void 0 ? void 0 : _b.trustDevCert,
    };
    const res = await debug_1.configLocalEnvironmentCommon(inputs, config, envInfo);
    if (res.isErr()) {
        return teamsfx_api_1.err(res.error);
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.configLocalEnvironment = configLocalEnvironment;
//# sourceMappingURL=provisionLocal.js.map