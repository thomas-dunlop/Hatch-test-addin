// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateJson = exports.useNewTasks = exports._scaffoldLocalDebugSettings = exports.scaffoldLocalDebugSettings = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const projectSettingsHelper_1 = require("../../../../common/local/projectSettingsHelper");
const localSettingsProvider_1 = require("../../../../common/localSettingsProvider");
const debug_1 = require("../../../../component/debug");
async function scaffoldLocalDebugSettings(ctx, inputs, localSettings, generateLocalSettingsFile = true) {
    return await _scaffoldLocalDebugSettings(ctx.projectSetting, inputs, ctx.telemetryReporter, ctx.logProvider, ctx.cryptoProvider, localSettings, generateLocalSettingsFile);
}
exports.scaffoldLocalDebugSettings = scaffoldLocalDebugSettings;
async function _scaffoldLocalDebugSettings(projectSetting, inputs, telemetryReporter, logProvider, cryptoProvider, localSettings, generateLocalSettingsFile = true) {
    var _a;
    const isSpfx = projectSettingsHelper_1.ProjectSettingsHelper.isSpfx(projectSetting);
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSetting);
    const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(projectSetting);
    const botCapabilities = projectSettingsHelper_1.ProjectSettingsHelper.getBotCapabilities(projectSetting);
    const programmingLanguage = (_a = projectSetting.programmingLanguage) !== null && _a !== void 0 ? _a : "";
    const isM365 = projectSetting.isM365;
    const config = {
        hasAzureTab: includeFrontend,
        hasSPFxTab: isSpfx,
        hasApi: includeBackend,
        hasBot: includeBot,
        hasAAD: includeAAD,
        hasSimpleAuth: includeSimpleAuth,
        hasFunctionBot: includeFuncHostedBot,
        botCapabilities: botCapabilities,
        defaultFunctionName: projectSetting.defaultFunctionName,
        programmingLanguage: programmingLanguage,
        isM365: isM365,
    };
    const res = await debug_1.generateLocalDebugSettingsCommon(inputs, config);
    if (res.isErr()) {
        return teamsfx_api_1.err(res.error);
    }
    return teamsfx_api_1.ok(localSettings);
}
exports._scaffoldLocalDebugSettings = _scaffoldLocalDebugSettings;
async function scaffoldLocalSettingsJson(projectSetting, inputs, cryptoProvider, localSettings) {
    const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(inputs.projectPath);
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSetting);
    if (localSettings !== undefined) {
        // Add local settings for the new added capability/resource
        localSettings = localSettingsProvider.incrementalInitV2(localSettings, includeBackend, includeBot, includeFrontend, includeAAD, includeSimpleAuth);
        await localSettingsProvider.saveJson(localSettings, cryptoProvider);
    }
    else {
        // Initialize a local settings on scaffolding
        localSettings = localSettingsProvider.initV2(includeFrontend, includeBackend, includeBot, includeSimpleAuth, includeAAD);
        await localSettingsProvider.saveJson(localSettings, cryptoProvider);
    }
    return localSettings;
}
async function useNewTasks(projectPath) {
    // for new project or project with "validate-local-prerequisites", use new tasks content
    const tasksJsonPath = `${projectPath}/.vscode/tasks.json`;
    if (await fs.pathExists(tasksJsonPath)) {
        try {
            const tasksContent = await fs.readFile(tasksJsonPath, "utf-8");
            return tasksContent.includes("fx-extension.validate-local-prerequisites");
        }
        catch (error) {
            return false;
        }
    }
    return true;
}
exports.useNewTasks = useNewTasks;
async function updateJson(path, newData, mergeFunc) {
    let finalData;
    if (await fs.pathExists(path)) {
        try {
            const existingData = await fs.readJSON(path);
            finalData = mergeFunc(existingData, newData);
        }
        catch (error) {
            // If failed to parse or edit the existing file, just overwrite completely
            finalData = newData;
        }
    }
    else {
        finalData = newData;
    }
    await fs.writeJSON(path, finalData, {
        spaces: 4,
        EOL: os.EOL,
    });
}
exports.updateJson = updateJson;
//# sourceMappingURL=scaffolding.js.map