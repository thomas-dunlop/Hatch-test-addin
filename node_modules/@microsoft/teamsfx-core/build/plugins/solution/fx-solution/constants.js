"use strict";
/* eslint-disable @typescript-eslint/ban-types */
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTaskFunctionName = exports.AddSsoParameters = exports.Language = exports.FailedToCheckResourceGroupExistenceError = exports.UnauthorizedToCheckResourceGroupError = exports.SolutionSource = exports.SolutionTelemetryComponentName = exports.SolutionTelemetrySuccess = exports.SolutionTelemetryProperty = exports.SolutionTelemetryEvent = exports.CancelError = exports.DoProvisionFirstError = exports.ViewAadAppHelpLink = exports.SharePointManageSiteAdminHelpLink = exports.AzureRoleAssignmentsHelpLink = exports.TEAMS_APP_ID = exports.REMOTE_TEAMS_APP_ID = exports.LOCAL_DEBUG_TEAMS_APP_ID = exports.LOCAL_TENANT_ID = exports.REMOTE_TEAMS_APP_TENANT_ID = exports.REMOTE_CLIENT_SECRET = exports.LOCAL_CLIENT_SECRET = exports.REMOTE_APPLICATION_ID_URIS = exports.LOCAL_APPLICATION_ID_URIS = exports.REMOTE_AAD_ID = exports.LOCAL_DEBUG_AAD_ID = exports.WEB_APPLICATION_INFO_SOURCE = exports.LOCAL_WEB_APPLICATION_INFO_SOURCE = exports.COMPOSE_EXTENSIONS_SECTION = exports.BOT_SECTION = exports.BOT_DOMAIN = exports.LOCAL_DEBUG_BOT_DOMAIN = exports.LOCAL_DEBUG_TAB_DOMAIN = exports.LOCAL_DEBUG_TAB_ENDPOINT = exports.SolutionError = exports.PluginNames = exports.DEFAULT_PERMISSION_REQUEST = exports.SUBSCRIPTION_NAME = exports.SUBSCRIPTION_ID = exports.LOCATION = exports.RESOURCE_GROUP_NAME = exports.TEAMS_FX_RESOURCE_ID_KEY = exports.ARM_TEMPLATE_OUTPUT = exports.DEFAULT_FUNC_NAME = exports.PROGRAMMING_LANGUAGE = exports.SOLUTION_PROVISION_SUCCEEDED = exports.GLOBAL_CONFIG = exports.Void = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const ms_rest_js_1 = require("@azure/ms-rest-js");
const path_1 = tslib_1.__importDefault(require("path"));
exports.Void = {};
/**
 * The key of global config visible to all resource plugins.
 */
exports.GLOBAL_CONFIG = "solution";
// export const SELECTED_PLUGINS = "selectedPlugins";
/**
 * Used to track whether provision succeeded
 * Set to true when provison succeeds, to false when a new resource is added.
 */
exports.SOLUTION_PROVISION_SUCCEEDED = "provisionSucceeded";
/**
 * Config key whose value is either javascript, typescript or csharp.
 */
exports.PROGRAMMING_LANGUAGE = "programmingLanguage";
/**
 * Config key whose value is the default function name for adding a new function.
 */
exports.DEFAULT_FUNC_NAME = "defaultFunctionName";
/**
 * Config key whose value is output of ARM templates deployment.
 */
exports.ARM_TEMPLATE_OUTPUT = "armTemplateOutput";
exports.TEAMS_FX_RESOURCE_ID_KEY = "teamsFxPluginId";
/**
 * Config key whose value is the resource group name of project.
 */
exports.RESOURCE_GROUP_NAME = "resourceGroupName";
/**
 * Config key whose value is the resource group location of project.
 */
exports.LOCATION = "location";
/**
 * Config key whose value is the subscription ID of project.
 */
exports.SUBSCRIPTION_ID = "subscriptionId";
/**
 * Config key whose value is the subscription name of project.
 */
exports.SUBSCRIPTION_NAME = "subscriptionName";
exports.DEFAULT_PERMISSION_REQUEST = [
    {
        resource: "Microsoft Graph",
        delegated: ["User.Read"],
        application: [],
    },
];
var PluginNames;
(function (PluginNames) {
    PluginNames["SQL"] = "fx-resource-azure-sql";
    PluginNames["MSID"] = "fx-resource-identity";
    PluginNames["FE"] = "fx-resource-frontend-hosting";
    PluginNames["SPFX"] = "fx-resource-spfx";
    PluginNames["BOT"] = "fx-resource-bot";
    PluginNames["AAD"] = "fx-resource-aad-app-for-teams";
    PluginNames["FUNC"] = "fx-resource-function";
    PluginNames["SA"] = "fx-resource-simple-auth";
    PluginNames["LDEBUG"] = "fx-resource-local-debug";
    PluginNames["APIM"] = "fx-resource-apim";
    PluginNames["APPST"] = "fx-resource-appstudio";
    PluginNames["SOLUTION"] = "solution";
})(PluginNames = exports.PluginNames || (exports.PluginNames = {}));
var SolutionError;
(function (SolutionError) {
    SolutionError["InvalidSelectedPluginNames"] = "InvalidSelectedPluginNames";
    SolutionError["PluginNotFound"] = "PluginNotFound";
    SolutionError["AADPluginNotEnabled"] = "AADPluginNotEnabled";
    SolutionError["MissingPermissionsJson"] = "MissingPermissionsJson";
    SolutionError["DialogIsNotPresent"] = "DialogIsNotPresent";
    SolutionError["NoResourcePluginSelected"] = "NoResourcePluginSelected";
    SolutionError["NoAppStudioToken"] = "NoAppStudioToken";
    SolutionError["NoTeamsAppTenantId"] = "NoTeamsAppTenantId";
    SolutionError["NoUserName"] = "NoUserName";
    SolutionError["FailedToCreateResourceGroup"] = "FailedToCreateResourceGroup";
    SolutionError["FailedToListResourceGroup"] = "FailedToListResourceGrouop";
    SolutionError["FailedToListResourceGroupLocation"] = "FailedToListResourceGroupLocation";
    SolutionError["FailedToGetResourceGroupInfoInputs"] = "FailedToGetResourceGroupInfoInputs";
    SolutionError["ResourceGroupNotFound"] = "ResourceGroupNotFound";
    SolutionError["SubscriptionNotFound"] = "SubscriptionNotFound";
    SolutionError["NotLoginToAzure"] = "NotLoginToAzure";
    SolutionError["AzureAccountExtensionNotInitialized"] = "AzureAccountExtensionNotInitialized";
    SolutionError["LocalTabEndpointMissing"] = "LocalTabEndpointMissing";
    SolutionError["LocalTabDomainMissing"] = "LocalTabDomainMissing";
    SolutionError["LocalClientIDMissing"] = "LocalDebugClientIDMissing";
    SolutionError["LocalApplicationIdUrisMissing"] = "LocalApplicationIdUrisMissing";
    SolutionError["LocalClientSecretMissing"] = "LocalClientSecretMissing";
    SolutionError["CannotUpdatePermissionForSPFx"] = "CannotUpdatePermissionForSPFx";
    SolutionError["CannotAddResourceForSPFx"] = "CannotAddResourceForSPFx";
    SolutionError["FailedToParseAzureTenantId"] = "FailedToParseAzureTenantId";
    SolutionError["CannotRunProvisionInSPFxProject"] = "CannotRunProvisionInSPFxProject";
    SolutionError["CannotRunThisTaskInSPFxProject"] = "CannotRunThisTaskInSPFxProject";
    SolutionError["FrontendEndpointAndDomainNotFound"] = "FrontendEndpointAndDomainNotFound";
    SolutionError["RemoteClientIdNotFound"] = "RemoteClientIdNotFound";
    SolutionError["AddResourceNotSupport"] = "AddResourceNotSupport";
    SolutionError["AddCapabilityNotSupport"] = "AddCapabilityNotSupport";
    SolutionError["FailedToAddCapability"] = "FailedToAddCapability";
    SolutionError["NoResourceToDeploy"] = "NoResourceToDeploy";
    SolutionError["ProvisionInProgress"] = "ProvisionInProgress";
    SolutionError["DeploymentInProgress"] = "DeploymentInProgress";
    SolutionError["PublishInProgress"] = "PublishInProgress";
    SolutionError["UnknownSolutionRunningState"] = "UnknownSolutionRunningState";
    SolutionError["CannotDeployBeforeProvision"] = "CannotDeployBeforeProvision";
    SolutionError["CannotPublishBeforeProvision"] = "CannotPublishBeforeProvision";
    SolutionError["CannotLocalDebugInDifferentTenant"] = "CannotLocalDebugInDifferentTenant";
    SolutionError["NoSubscriptionFound"] = "NoSubscriptionFound";
    SolutionError["NoSubscriptionSelected"] = "NoSubscriptionSelected";
    SolutionError["FailedToGetParamForRegisterTeamsAppAndAad"] = "FailedToGetParamForRegisterTeamsAppAndAad";
    SolutionError["BotInternalError"] = "BotInternalError";
    SolutionError["InternelError"] = "InternelError";
    SolutionError["RegisterTeamsAppAndAadError"] = "RegisterTeamsAppAndAadError";
    SolutionError["GetLocalDebugConfigError"] = "GetLocalDebugConfigError";
    SolutionError["GetRemoteConfigError"] = "GetRemoteConfigError";
    SolutionError["UnsupportedPlatform"] = "UnsupportedPlatform";
    SolutionError["InvalidInput"] = "InvalidInput";
    SolutionError["FailedToCompileBicepFiles"] = "FailedToCompileBicepFiles";
    SolutionError["FailedToGetAzureCredential"] = "FailedToGetAzureCredential";
    SolutionError["FailedToGenerateArmTemplates"] = "FailedToGenerateArmTemplates";
    SolutionError["FailedToUpdateArmParameters"] = "FailedToUpdateArmTemplates";
    SolutionError["FailedToDeployArmTemplatesToAzure"] = "FailedToDeployArmTemplatesToAzure";
    SolutionError["FailedToPollArmDeploymentStatus"] = "FailedToPollArmDeploymentStatus";
    SolutionError["FailedToValidateArmTemplates"] = "FailedToValidateArmTemplates";
    SolutionError["FailedToRetrieveUserInfo"] = "FailedToRetrieveUserInfo";
    SolutionError["FeatureNotSupported"] = "FeatureNotSupported";
    SolutionError["CannotFindUserInCurrentTenant"] = "CannotFindUserInCurrentTenant";
    SolutionError["FailedToGrantPermission"] = "FailedToGrantPermission";
    SolutionError["FailedToCheckPermission"] = "FailedToCheckPermission";
    SolutionError["FailedToListCollaborator"] = "FailedToListCollaborator";
    SolutionError["EmailCannotBeEmptyOrSame"] = "EmailCannotBeEmptyOrSame";
    SolutionError["FailedToExecuteTasks"] = "FailedToExecuteTasks";
    SolutionError["FailedToGetEnvName"] = "FailedToGetEnvName";
    SolutionError["TeamsAppTenantIdNotRight"] = "TeamsAppTenantIdNotRight";
    SolutionError["AddSsoNotSupported"] = "AddSsoNotSupported";
    SolutionError["NeedEnableFeatureFlag"] = "NeedEnableFeatureFlag";
    SolutionError["SsoEnabled"] = "SsoEnabled";
    SolutionError["InvalidSsoProject"] = "InvalidSsoProject";
    SolutionError["InvalidProjectPath"] = "InvalidProjectPath";
    SolutionError["FailedToCreateAuthFiles"] = "FailedToCreateAuthFiles";
    SolutionError["FailedToUpdateAzureParameters"] = "FailedToUpdateAzureParameters";
    SolutionError["FailedToBackupFiles"] = "FailedToBackupFiles";
})(SolutionError = exports.SolutionError || (exports.SolutionError = {}));
exports.LOCAL_DEBUG_TAB_ENDPOINT = "localTabEndpoint";
exports.LOCAL_DEBUG_TAB_DOMAIN = "localTabDomain";
exports.LOCAL_DEBUG_BOT_DOMAIN = "localBotDomain";
exports.BOT_DOMAIN = "validDomain";
exports.BOT_SECTION = "bots";
exports.COMPOSE_EXTENSIONS_SECTION = "composeExtensions";
exports.LOCAL_WEB_APPLICATION_INFO_SOURCE = "local_applicationIdUris";
exports.WEB_APPLICATION_INFO_SOURCE = "applicationIdUris";
exports.LOCAL_DEBUG_AAD_ID = "local_clientId";
exports.REMOTE_AAD_ID = "clientId";
exports.LOCAL_APPLICATION_ID_URIS = "local_applicationIdUris";
exports.REMOTE_APPLICATION_ID_URIS = "applicationIdUris";
exports.LOCAL_CLIENT_SECRET = "local_clientSecret";
exports.REMOTE_CLIENT_SECRET = "clientSecret";
exports.REMOTE_TEAMS_APP_TENANT_ID = "teamsAppTenantId";
exports.LOCAL_TENANT_ID = "local_tenantId";
// Teams App Id for local debug
exports.LOCAL_DEBUG_TEAMS_APP_ID = "localDebugTeamsAppId";
// Teams App Id for remote
exports.REMOTE_TEAMS_APP_ID = "remoteTeamsAppId";
exports.TEAMS_APP_ID = "teamsAppId";
exports.AzureRoleAssignmentsHelpLink = "https://aka.ms/teamsfx-azure-role-assignments-help-link";
exports.SharePointManageSiteAdminHelpLink = "https://aka.ms/teamsfx-sharepoint-manage-site-admin-help-link";
exports.ViewAadAppHelpLink = "https://aka.ms/teamsfx-view-aad-app";
exports.DoProvisionFirstError = new teamsfx_api_1.UserError("DoProvisionFirst", "DoProvisionFirst", "Solution");
exports.CancelError = new teamsfx_api_1.UserError("Solution", "UserCancel", "UserCancel");
// This is the max length specified in
// https://developer.microsoft.com/en-us/json-schemas/teams/v1.7/MicrosoftTeams.schema.json
var SolutionTelemetryEvent;
(function (SolutionTelemetryEvent) {
    SolutionTelemetryEvent["CreateStart"] = "create-start";
    SolutionTelemetryEvent["Create"] = "create";
    SolutionTelemetryEvent["AddResourceStart"] = "add-resource-start";
    SolutionTelemetryEvent["AddResource"] = "add-resource";
    SolutionTelemetryEvent["AddCapabilityStart"] = "add-capability-start";
    SolutionTelemetryEvent["AddCapability"] = "add-capability";
    SolutionTelemetryEvent["GrantPermissionStart"] = "grant-permission-start";
    SolutionTelemetryEvent["GrantPermission"] = "grant-permission";
    SolutionTelemetryEvent["CheckPermissionStart"] = "check-permission-start";
    SolutionTelemetryEvent["CheckPermission"] = "check-permission";
    SolutionTelemetryEvent["ListCollaboratorStart"] = "list-collaborator-start";
    SolutionTelemetryEvent["ListCollaborator"] = "list-collaborator";
    SolutionTelemetryEvent["GenerateArmTemplateStart"] = "generate-armtemplate-start";
    SolutionTelemetryEvent["GenerateArmTemplate"] = "generate-armtemplate";
    SolutionTelemetryEvent["ArmDeploymentStart"] = "deploy-armtemplate-start";
    SolutionTelemetryEvent["ArmDeployment"] = "deploy-armtemplate";
    SolutionTelemetryEvent["AddSsoStart"] = "add-sso-start";
    SolutionTelemetryEvent["AddSso"] = "add-sso";
    SolutionTelemetryEvent["AddSsoReadme"] = "add-sso-readme";
    SolutionTelemetryEvent["DeployStart"] = "deploy-start";
    SolutionTelemetryEvent["Deploy"] = "deploy";
    SolutionTelemetryEvent["ProvisionStart"] = "provision-start";
    SolutionTelemetryEvent["Provision"] = "provision";
})(SolutionTelemetryEvent = exports.SolutionTelemetryEvent || (exports.SolutionTelemetryEvent = {}));
var SolutionTelemetryProperty;
(function (SolutionTelemetryProperty) {
    SolutionTelemetryProperty["Component"] = "component";
    SolutionTelemetryProperty["Resources"] = "resources";
    SolutionTelemetryProperty["Capabilities"] = "capabilities";
    SolutionTelemetryProperty["Success"] = "success";
    SolutionTelemetryProperty["CollaboratorCount"] = "collaborator-count";
    SolutionTelemetryProperty["AadOwnerCount"] = "aad-owner-count";
    SolutionTelemetryProperty["AadPermission"] = "aad-permission";
    SolutionTelemetryProperty["ArmDeploymentError"] = "arm-deployment-error";
    SolutionTelemetryProperty["TeamsAppPermission"] = "teams-app-permission";
    SolutionTelemetryProperty["ProgrammingLanguage"] = "programming-language";
    SolutionTelemetryProperty["Env"] = "env";
    SolutionTelemetryProperty["IncludeAadManifest"] = "include-aad-manifest";
    SolutionTelemetryProperty["ErrorCode"] = "error-code";
    SolutionTelemetryProperty["ErrorMessage"] = "error-message";
    SolutionTelemetryProperty["HostType"] = "host-type";
    SolutionTelemetryProperty["SubscriptionId"] = "subscription-id";
    SolutionTelemetryProperty["AddTabSso"] = "tab-sso";
    SolutionTelemetryProperty["AddBotSso"] = "bot-sso";
    SolutionTelemetryProperty["M365TenantId"] = "m365-tenant-id";
    SolutionTelemetryProperty["PreviousSubsriptionId"] = "previous-subscription-id";
    SolutionTelemetryProperty["PreviousM365TenantId"] = "previous-m365-tenant-id";
    SolutionTelemetryProperty["ConfirmRes"] = "confirm-res";
})(SolutionTelemetryProperty = exports.SolutionTelemetryProperty || (exports.SolutionTelemetryProperty = {}));
var SolutionTelemetrySuccess;
(function (SolutionTelemetrySuccess) {
    SolutionTelemetrySuccess["Yes"] = "yes";
    SolutionTelemetrySuccess["No"] = "no";
})(SolutionTelemetrySuccess = exports.SolutionTelemetrySuccess || (exports.SolutionTelemetrySuccess = {}));
exports.SolutionTelemetryComponentName = "solution";
exports.SolutionSource = "Solution";
class UnauthorizedToCheckResourceGroupError extends teamsfx_api_1.UserError {
    constructor(resourceGroupName, subscriptionId, subscriptionName) {
        const subscriptionInfoString = subscriptionId + (subscriptionName.length > 0 ? `(${subscriptionName})` : "");
        super(exports.SolutionSource, new.target.name, `Unauthorized to check the existence of resource group '${resourceGroupName}' in subscription '${subscriptionInfoString}'. Please check your Azure subscription.`);
    }
}
exports.UnauthorizedToCheckResourceGroupError = UnauthorizedToCheckResourceGroupError;
class FailedToCheckResourceGroupExistenceError extends teamsfx_api_1.UserError {
    constructor(error, resourceGroupName, subscriptionId, subscriptionName) {
        const subscriptionInfoString = subscriptionId + (subscriptionName.length > 0 ? `(${subscriptionName})` : "");
        const baseErrorMessage = `Failed to check the existence of resource group '${resourceGroupName}' in subscription '${subscriptionInfoString}'`;
        if (error instanceof ms_rest_js_1.RestError) {
            // Avoid sensitive information like request headers in the error message.
            const rawErrorString = JSON.stringify({
                code: error.code,
                statusCode: error.statusCode,
                body: error.body,
                name: error.name,
                message: error.message,
            });
            super(exports.SolutionSource, new.target.name, `${baseErrorMessage}, error: '${rawErrorString}'`);
        }
        else if (error instanceof Error) {
            // Reuse the original error object to prevent losing the stack info
            error.message = `${baseErrorMessage}, error: '${error.message}'`;
            super({ error, source: exports.SolutionSource });
        }
        else {
            super(exports.SolutionSource, new.target.name, `${baseErrorMessage}, error: '${JSON.stringify(error)}'`);
        }
    }
}
exports.FailedToCheckResourceGroupExistenceError = FailedToCheckResourceGroupExistenceError;
var Language;
(function (Language) {
    Language["JavaScript"] = "javascript";
    Language["TypeScript"] = "typescript";
    Language["CSharp"] = "csharp";
})(Language = exports.Language || (exports.Language = {}));
class AddSsoParameters {
}
exports.AddSsoParameters = AddSsoParameters;
AddSsoParameters.filePath = path_1.default.join("plugins", "resource", "aad", "auth");
AddSsoParameters.Bot = "bot";
AddSsoParameters.Tab = "tab";
AddSsoParameters.Readme = "README.md";
AddSsoParameters.ReadmeCSharp = "README.txt";
AddSsoParameters.LearnMore = "Learn More";
AddSsoParameters.LearnMoreUrl = "https://aka.ms/teamsfx-add-sso-readme";
AddSsoParameters.AddSso = "addSso";
AddSsoParameters.AppSettings = "appsettings.json";
AddSsoParameters.AppSettingsDev = "appsettings.Development.json";
AddSsoParameters.AppSettingsToAdd = {
    Authentication: {
        ClientId: "$clientId$",
        ClientSecret: "$client-secret$",
        OAuthAuthority: "$oauthAuthority$",
    },
};
AddSsoParameters.AppSettingsToAddForBot = {
    Authentication: {
        ClientId: "$clientId$",
        ClientSecret: "$client-secret$",
        OAuthAuthority: "$oauthAuthority$",
        ApplicationIdUri: "$applicationIdUri$",
        Bot: {
            InitiateLoginEndpoint: "$initiateLoginEndpoint$",
        },
    },
};
class UserTaskFunctionName {
}
exports.UserTaskFunctionName = UserTaskFunctionName;
UserTaskFunctionName.ConnectExistingApi = "connectExistingApi";
//# sourceMappingURL=constants.js.map