import { Result, FxError, PluginContext } from "@microsoft/teamsfx-api";
export declare type LifecyclesWithContext = [
    OmitThisParameter<(ctx: PluginContext) => Promise<Result<any, FxError>>> | undefined,
    PluginContext,
    string
];
/**
 * Execute plugin lifecycles one by one with its associated context.
 *
 */
export declare function executeSequentially(step: string, lifecycleAndContext: LifecyclesWithContext[]): Promise<Result<any, FxError>>;
/**
 * ConcurrentExecutor will concurrently run the plugin lifecycles with
 * its associated context.
 *
 * Currently, on success, return value is discarded by returning undefined on sucess.
 */
export declare function executeConcurrently(step: string, lifecycleAndContext: LifecyclesWithContext[]): Promise<Result<any, FxError>[]>;
/**
 * Executes preLifecycles, lifecycles, postCycles in order. If one of the steps failes, following steps won't run.
 *
 * @param preLifecycles
 * @param lifecycles
 * @param postLifecycles
 */
export declare function executeLifecycles(preLifecycles: LifecyclesWithContext[], lifecycles: LifecyclesWithContext[], postLifecycles: LifecyclesWithContext[], onPreLifecycleFinished?: (result?: any[]) => Promise<Result<any, FxError>>, onLifecycleFinished?: (result?: Result<any, FxError>[]) => Promise<Result<any, FxError>>, onPostLifecycleFinished?: (result?: any[]) => Promise<Result<any, FxError>>): Promise<Result<any, FxError>>;
//# sourceMappingURL=executor.d.ts.map