"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsAppSolutionV2 = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const common_1 = require("../../../../common");
const constants_1 = require("../../../../common/constants");
const SolutionPluginContainer_1 = require("../../../../core/SolutionPluginContainer");
const checkPermission_1 = require("./checkPermission");
const constants_2 = require("./constants");
const createEnv_1 = require("./createEnv");
const deploy_1 = require("./deploy");
const executeUserTask_1 = require("./executeUserTask");
const generateResourceTemplate_1 = require("./generateResourceTemplate");
const getQuestions_1 = require("./getQuestions");
const grantPermission_1 = require("./grantPermission");
const listCollaborator_1 = require("./listCollaborator");
const provision_1 = require("./provision");
const provisionLocal_1 = require("./provisionLocal");
const publish_1 = require("./publish");
const scaffolding_1 = require("./scaffolding");
let TeamsAppSolutionV2 = class TeamsAppSolutionV2 {
    constructor() {
        this.name = constants_2.TeamsAppSolutionNameV2;
        this.displayName = constants_1.PluginDisplayName.Solution;
        this.scaffoldSourceCode = scaffolding_1.scaffoldSourceCode;
        this.generateResourceTemplate = generateResourceTemplate_1.generateResourceTemplate;
        this.provisionResources = provision_1.provisionResource;
        this.deploy = deploy_1.deploy;
        this.publishApplication = publish_1.publishApplication;
        this.provisionLocalResource = provisionLocal_1.provisionLocalResource;
        this.getQuestionsForScaffolding = common_1.isPreviewFeaturesEnabled()
            ? getQuestions_1.getQuestionsForScaffoldingPreview
            : getQuestions_1.getQuestionsForScaffolding;
        this.executeUserTask = executeUserTask_1.executeUserTask;
        this.createEnv = createEnv_1.createEnv;
        this.getQuestions = getQuestions_1.getQuestions;
        this.getQuestionsForUserTask = getQuestions_1.getQuestionsForUserTask;
        this.grantPermission = (ctx, inputs, envInfo, tokenProvider) => grantPermission_1.grantPermission({ apiVersion: 2, ctx, inputs, envInfo, tokenProvider });
        this.checkPermission = (ctx, inputs, envInfo, tokenProvider) => checkPermission_1.checkPermission({ apiVersion: 2, ctx, inputs, envInfo, tokenProvider });
        this.listCollaborator = (ctx, inputs, envInfo, tokenProvider) => listCollaborator_1.listCollaborator({ apiVersion: 2, ctx, inputs, envInfo, tokenProvider });
    }
};
TeamsAppSolutionV2 = tslib_1.__decorate([
    typedi_1.Service(SolutionPluginContainer_1.SolutionPluginsV2.AzureTeamsSolutionV2)
], TeamsAppSolutionV2);
exports.TeamsAppSolutionV2 = TeamsAppSolutionV2;
//# sourceMappingURL=solution.js.map