import { v2, Inputs, FxError, Result, AzureSolutionSettings, Void, PermissionRequestProvider, Json, SolutionContext, Plugin, ProjectSettings, M365TokenProvider, v3, EnvInfo, TelemetryReporter } from "@microsoft/teamsfx-api";
import { PluginsWithContext } from "../types";
export declare function getSelectedPlugins(projectSettings: ProjectSettings): v2.ResourcePlugin[];
export declare function getAzureSolutionSettings(ctx: v2.Context): AzureSolutionSettings | undefined;
export declare function isAzureProject(azureSettings: AzureSolutionSettings | undefined): boolean;
export declare function isBotProject(azureSettings: AzureSolutionSettings | undefined): boolean;
export interface BotTroubleShootMessage {
    troubleShootLink: string;
    textForLogging: string;
    textForMsgBox: string;
    textForActionButton: string;
}
export declare function getBotTroubleShootMessage(isBot: boolean): BotTroubleShootMessage;
export declare function combineRecords<T>(records: {
    name: string;
    result: T;
}[]): Record<string, T>;
export declare function extractSolutionInputs(record: Json): v2.SolutionInputs;
export declare function setActivatedResourcePluginsV2(projectSettings: ProjectSettings): void;
export declare function ensurePermissionRequest(solutionSettings: AzureSolutionSettings, permissionRequestProvider: PermissionRequestProvider): Promise<Result<Void, FxError>>;
export declare function parseTeamsAppTenantId(appStudioToken?: Record<string, unknown>): Result<string, FxError>;
export declare function parseUserName(appStudioToken?: Record<string, unknown>): Result<string, FxError>;
export declare function checkWhetherLocalDebugM365TenantMatches(envInfo: v3.EnvInfoV3 | EnvInfo | undefined, telemetryReporter: TelemetryReporter | undefined, localDebugTenantId?: string, m365TokenProvider?: M365TokenProvider, projectPath?: string, isLegacyEnv?: boolean): Promise<Result<Void, FxError>>;
export declare function loadTeamsAppTenantIdForLocal(localSettings: v2.LocalSettings, appStudioToken?: Record<string, unknown>, envInfo?: v2.EnvInfoV2): Result<Void, FxError>;
export declare function fillInSolutionSettings(projectSettings: ProjectSettings, answers: Inputs): Result<Void, FxError>;
export declare function checkWetherProvisionSucceeded(config: Json): boolean;
export declare function getPluginAndContextArray(ctx: SolutionContext, selectedPlugins: Plugin[]): PluginsWithContext[];
//# sourceMappingURL=utils.d.ts.map