"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResourceTemplateForPlugins = exports.generateResourceTemplate = void 0;
const common_1 = require("../../../../common");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const arm_1 = require("../arm");
const adaptor_1 = require("./adaptor");
const executeUserTask_1 = require("./executeUserTask");
const utils_1 = require("./utils");
async function generateResourceTemplate(ctx, inputs) {
    executeUserTask_1.showUpdateArmTemplateNotice(ctx.userInteraction);
    const legacyContext = new adaptor_1.ScaffoldingContextAdapter([ctx, inputs]);
    const plugins = utils_1.getSelectedPlugins(ctx.projectSetting).map((plugin) => new adaptor_1.NamedArmResourcePluginAdaptor(plugin));
    const armResult = await arm_1.armV2.generateArmTemplate(legacyContext, plugins);
    return armResult;
}
exports.generateResourceTemplate = generateResourceTemplate;
async function generateResourceTemplateForPlugins(ctx, inputs, plugins) {
    const isVs = common_1.isVSProject(ctx.projectSetting);
    if (isVs) {
        ctx.logProvider.info(localizeUtils_1.getLocalizedString("core.updateArmTemplate.successNotice"));
    }
    else {
        executeUserTask_1.showUpdateArmTemplateNotice(ctx.userInteraction);
    }
    const legacyContext = new adaptor_1.ScaffoldingContextAdapter([ctx, inputs]);
    const armResult = await arm_1.armV2.generateArmTemplate(legacyContext, plugins);
    return armResult;
}
exports.generateResourceTemplateForPlugins = generateResourceTemplateForPlugins;
//# sourceMappingURL=generateResourceTemplate.js.map