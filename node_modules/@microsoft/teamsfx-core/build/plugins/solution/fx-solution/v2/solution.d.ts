import { Func, FxError, Inputs, Json, M365TokenProvider, QTreeNode, Result, TokenProvider, v2, Void } from "@microsoft/teamsfx-api";
import { DeepReadonly, EnvInfoV2 } from "@microsoft/teamsfx-api/build/v2";
import { provisionResource } from "./provision";
export declare class TeamsAppSolutionV2 implements v2.SolutionPlugin {
    name: string;
    displayName: string;
    scaffoldSourceCode: (ctx: v2.Context, inputs: Inputs) => Promise<Result<Void, FxError>>;
    generateResourceTemplate: (ctx: v2.Context, inputs: Inputs) => Promise<Result<Json, FxError>>;
    provisionResources: typeof provisionResource;
    deploy?: (ctx: v2.Context, inputs: Inputs, envInfo: EnvInfoV2, tokenProvider: TokenProvider) => Promise<Result<Void, FxError>>;
    publishApplication: (ctx: v2.Context, inputs: Inputs, envInfo: v2.EnvInfoV2, tokenProvider: M365TokenProvider) => Promise<Result<Void, FxError>>;
    provisionLocalResource?: (ctx: v2.Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, envInfo?: EnvInfoV2) => Promise<v2.FxResult<Json, FxError>>;
    getQuestionsForScaffolding?: (ctx: v2.Context, inputs: Inputs) => Promise<Result<QTreeNode | undefined, FxError>>;
    executeUserTask?: (ctx: v2.Context, inputs: Inputs, func: Func, localSettings: Json, envInfo: EnvInfoV2, tokenProvider: TokenProvider) => Promise<Result<unknown, FxError>>;
    createEnv?: (ctx: v2.Context, inputs: Inputs) => Promise<Result<Void, FxError>>;
    getQuestions?: (ctx: v2.Context, inputs: Inputs, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider) => Promise<Result<QTreeNode | undefined, FxError>>;
    getQuestionsForUserTask?: (ctx: v2.Context, inputs: Inputs, func: Func, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider) => Promise<Result<QTreeNode | undefined, FxError>>;
    grantPermission?: (ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider) => Promise<Result<Json, FxError>>;
    checkPermission?: (ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider) => Promise<Result<Json, FxError>>;
    listCollaborator?: (ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider) => Promise<Result<Json, FxError>>;
}
//# sourceMappingURL=solution.d.ts.map