import { v2, SolutionContext, Inputs, M365TokenProvider, AzureAccountProvider, CryptoProvider, LocalSettings, LogProvider, ProjectSettings, TelemetryReporter, TreeProvider, UserInteraction, PermissionRequestProvider, Json, PluginContext, Result, FxError } from "@microsoft/teamsfx-api";
import { ArmTemplateResult, NamedArmResourcePlugin } from "../../../../common/armInterface";
declare class BaseSolutionContextAdaptor implements SolutionContext {
    envInfo: import("@microsoft/teamsfx-api").EnvInfo;
    root: string;
    targetEnvName?: string | undefined;
    logProvider?: LogProvider | undefined;
    telemetryReporter?: TelemetryReporter | undefined;
    azureAccountProvider?: AzureAccountProvider | undefined;
    m365TokenProvider?: M365TokenProvider | undefined;
    treeProvider?: TreeProvider | undefined;
    answers?: Inputs | undefined;
    projectSettings?: ProjectSettings | undefined;
    localSettings?: LocalSettings | undefined;
    ui?: UserInteraction | undefined;
    cryptoProvider: CryptoProvider;
    permissionRequestProvider?: PermissionRequestProvider;
}
/**
 * An adpator for making API v2 compatible with legacy api.
 */
export declare class ScaffoldingContextAdapter extends BaseSolutionContextAdaptor {
    constructor(params: Parameters<NonNullable<v2.SolutionPlugin["scaffoldSourceCode"]>>);
}
export declare class ProvisionContextAdapter extends BaseSolutionContextAdaptor {
    constructor(params: Parameters<NonNullable<v2.SolutionPlugin["provisionResources"]>>);
    getEnvStateJson(): Json;
}
export declare class CollaboratorContextAdapter extends BaseSolutionContextAdaptor {
    constructor(params: Parameters<NonNullable<v2.SolutionPlugin["grantPermission"]>>);
}
export declare class NamedArmResourcePluginAdaptor implements NamedArmResourcePlugin {
    name: string;
    generateArmTemplates?: (ctx: PluginContext) => Promise<Result<ArmTemplateResult, FxError>>;
    updateArmTemplates?: (ctx: PluginContext) => Promise<Result<ArmTemplateResult, FxError>>;
    constructor(v2Plugin: v2.ResourcePlugin);
    _generateArmTemplates(fn: NonNullable<v2.ResourcePlugin["generateResourceTemplate"]>): (ctx: PluginContext) => Promise<Result<ArmTemplateResult, FxError>>;
    _updateArmTemplates(fn: NonNullable<v2.ResourcePlugin["updateResourceTemplate"]>): (ctx: PluginContext) => Promise<Result<ArmTemplateResult, FxError>>;
}
export {};
//# sourceMappingURL=adaptor.d.ts.map