"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const common_1 = require("../../../../common");
const constants_1 = require("../../../../common/constants");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const projectSettingsHelper_1 = require("../../../../common/projectSettingsHelper");
const deployUtils_1 = require("../../../../component/deployUtils");
const constants_2 = require("../../../resource/aad/constants");
const commonQuestions_1 = require("../commonQuestions");
const constants_3 = require("../constants");
const question_1 = require("../question");
const util_1 = require("../utils/util");
const executor_1 = require("./executor");
const utils_1 = require("./utils");
async function deploy(ctx, inputs, envInfo, tokenProvider) {
    var _a, _b;
    (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(constants_3.SolutionTelemetryEvent.DeployStart, {
        [constants_3.SolutionTelemetryProperty.Component]: constants_3.SolutionTelemetryComponentName,
        [constants_3.SolutionTelemetryProperty.IncludeAadManifest]: (_b = inputs[constants_2.Constants.INCLUDE_AAD_MANIFEST]) !== null && _b !== void 0 ? _b : "no",
    });
    const isDeployAADManifestFromVSCode = inputs[constants_2.Constants.INCLUDE_AAD_MANIFEST] === "yes" && inputs.platform === teamsfx_api_1.Platform.VSCode;
    const provisionOutputs = envInfo.state;
    const inAzureProject = utils_1.isAzureProject(utils_1.getAzureSolutionSettings(ctx));
    const botTroubleShootMsg = utils_1.getBotTroubleShootMessage(utils_1.isBotProject(utils_1.getAzureSolutionSettings(ctx)));
    const provisioned = provisionOutputs[constants_3.GLOBAL_CONFIG][constants_3.SOLUTION_PROVISION_SUCCEEDED] ||
        isDeployAADManifestFromVSCode;
    if (inAzureProject && !provisioned) {
        return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_3.SolutionTelemetryEvent.Deploy, new teamsfx_api_1.UserError(constants_3.SolutionSource, constants_3.SolutionError.CannotDeployBeforeProvision, localizeUtils_1.getDefaultString("core.NotProvisionedNotice", ctx.projectSetting.appName), localizeUtils_1.getLocalizedString("core.NotProvisionedNotice", ctx.projectSetting.appName)), ctx.telemetryReporter));
    }
    if (!inAzureProject) {
        const appStudioTokenJsonRes = await tokenProvider.m365TokenProvider.getJsonObject({
            scopes: common_1.AppStudioScopes,
        });
        const appStudioTokenJson = appStudioTokenJsonRes.isOk()
            ? appStudioTokenJsonRes.value
            : undefined;
        if (appStudioTokenJson) {
            const checkM365 = await commonQuestions_1.checkM365Tenant({ version: 2, data: envInfo }, appStudioTokenJson);
            if (checkM365.isErr()) {
                return checkM365;
            }
        }
        else {
            return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_3.SolutionTelemetryEvent.Deploy, new teamsfx_api_1.SystemError(constants_3.SolutionSource, constants_3.SolutionError.NoAppStudioToken, localizeUtils_1.getDefaultString("core.AppStudioJsonUndefined"), localizeUtils_1.getLocalizedString("core.AppStudioJsonUndefined")), ctx.telemetryReporter));
        }
    }
    else if (envInfo.envName !== "local" && !isDeployAADManifestFromVSCode) {
        const checkAzure = await commonQuestions_1.checkSubscription({ version: 2, data: envInfo }, tokenProvider.azureAccountProvider);
        if (checkAzure.isErr()) {
            return checkAzure;
        }
    }
    const isVsProject = projectSettingsHelper_1.isVSProject(ctx.projectSetting);
    let optionsToDeploy = [];
    if (!isVsProject) {
        optionsToDeploy = inputs[question_1.AzureSolutionQuestionNames.PluginSelectionDeploy];
        if (isDeployAADManifestFromVSCode) {
            optionsToDeploy = [constants_3.PluginNames.AAD];
        }
        if (inputs[constants_2.Constants.INCLUDE_AAD_MANIFEST] !== "yes" && inputs.platform === teamsfx_api_1.Platform.CLI) {
            optionsToDeploy = optionsToDeploy.filter((option) => option !== constants_3.PluginNames.AAD);
        }
        if (optionsToDeploy === undefined || optionsToDeploy.length === 0) {
            return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_3.SolutionTelemetryEvent.Deploy, new teamsfx_api_1.UserError(constants_3.SolutionSource, constants_3.SolutionError.NoResourcePluginSelected, localizeUtils_1.getDefaultString("core.NoPluginSelected"), localizeUtils_1.getLocalizedString("core.NoPluginSelected")), ctx.telemetryReporter));
        }
    }
    const plugins = utils_1.getSelectedPlugins(ctx.projectSetting);
    const thunks = plugins
        .filter((plugin) => !lodash_1.isUndefined(plugin.deploy) && (isVsProject ? true : optionsToDeploy.includes(plugin.name)))
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "deploy",
            thunk: () => 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            plugin.deploy(ctx, Object.assign(Object.assign(Object.assign({}, inputs), utils_1.extractSolutionInputs(provisionOutputs[constants_3.GLOBAL_CONFIG])), { projectPath: inputs.projectPath }), envInfo, tokenProvider),
        };
    });
    const azurePlugins = projectSettingsHelper_1.getAzurePlugins(true);
    const hasAzureResource = thunks.some((thunk) => azurePlugins.includes(thunk.pluginName));
    if (utils_1.isAzureProject(utils_1.getAzureSolutionSettings(ctx)) && hasAzureResource) {
        const consent = await deployUtils_1.deployUtils.askForDeployConsent(ctx, tokenProvider.azureAccountProvider, envInfo);
        if (consent.isErr()) {
            return teamsfx_api_1.err(consent.error);
        }
    }
    if (thunks.length === 0) {
        return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_3.SolutionTelemetryEvent.Deploy, new teamsfx_api_1.UserError(constants_3.SolutionSource, constants_3.SolutionError.NoResourcePluginSelected, localizeUtils_1.getDefaultString("core.InvalidOption", optionsToDeploy.join(", ")), localizeUtils_1.getLocalizedString("core.InvalidOption", optionsToDeploy.join(", "))), ctx.telemetryReporter));
    }
    ctx.logProvider.info(localizeUtils_1.getLocalizedString("core.deploy.selectedPluginsToDeployNotice", constants_1.PluginDisplayName.Solution, JSON.stringify(thunks.map((p) => p.pluginName))));
    ctx.logProvider.info(localizeUtils_1.getLocalizedString("core.deploy.startNotice", constants_1.PluginDisplayName.Solution));
    const result = await executor_1.executeConcurrently(thunks, ctx.logProvider);
    if (result.kind === "success") {
        const appName = ctx.projectSetting.appName;
        if (inAzureProject) {
            let msg = localizeUtils_1.getLocalizedString("core.deploy.successNotice", appName) +
                botTroubleShootMsg.textForLogging;
            if (isDeployAADManifestFromVSCode) {
                msg = localizeUtils_1.getLocalizedString("core.deploy.aadManifestSuccessNotice");
            }
            ctx.logProvider.info(msg);
            if (botTroubleShootMsg.textForLogging && !isDeployAADManifestFromVSCode) {
                // Show a `Learn more` action button for bot trouble shooting.
                ctx.userInteraction
                    .showMessage("info", `${localizeUtils_1.getLocalizedString("core.deploy.successNotice", appName)} ${botTroubleShootMsg.textForMsgBox}`, false, botTroubleShootMsg.textForActionButton)
                    .then((result) => {
                    const userSelected = result.isOk() ? result.value : undefined;
                    if (userSelected === botTroubleShootMsg.textForActionButton) {
                        ctx.userInteraction.openUrl(botTroubleShootMsg.troubleShootLink);
                    }
                });
            }
            else {
                if (isDeployAADManifestFromVSCode) {
                    ctx.userInteraction
                        .showMessage("info", msg, false, localizeUtils_1.getLocalizedString("core.deploy.aadManifestLearnMore"))
                        .then((result) => {
                        var _a;
                        const userSelected = result.isOk() ? result.value : undefined;
                        if (userSelected === localizeUtils_1.getLocalizedString("core.deploy.aadManifestLearnMore")) {
                            (_a = ctx.userInteraction) === null || _a === void 0 ? void 0 : _a.openUrl(constants_3.ViewAadAppHelpLink);
                        }
                    });
                }
                else {
                    ctx.userInteraction.showMessage("info", msg, false);
                }
            }
        }
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    else {
        const msg = localizeUtils_1.getLocalizedString("core.deploy.failNotice", ctx.projectSetting.appName) +
            botTroubleShootMsg.textForLogging;
        ctx.logProvider.info(msg);
        return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_3.SolutionTelemetryEvent.Deploy, result.error, ctx.telemetryReporter));
    }
}
exports.deploy = deploy;
//# sourceMappingURL=deploy.js.map