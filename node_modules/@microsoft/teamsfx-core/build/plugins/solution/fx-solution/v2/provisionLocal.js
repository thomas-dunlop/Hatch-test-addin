"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provisionLocalResource = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const typedi_1 = require("typedi");
const projectSettingsHelper_1 = require("../../../../common/projectSettingsHelper");
const tools_1 = require("../../../../common/tools");
const permissionRequest_1 = require("../../../../core/permissionRequest");
const constants_1 = require("../constants");
const provisionLocal_1 = require("../debug/provisionLocal");
const ResourcePluginContainer_1 = require("../ResourcePluginContainer");
const executor_1 = require("./executor");
const utils_1 = require("./utils");
async function provisionLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo) {
    if (inputs.projectPath === undefined) {
        return new teamsfx_api_1.v2.FxFailure(new teamsfx_api_1.SystemError("Solution", constants_1.SolutionError.InternelError, "projectPath is undefined"));
    }
    const azureSolutionSettings = utils_1.getAzureSolutionSettings(ctx);
    if (utils_1.isAzureProject(azureSolutionSettings)) {
        if (ctx.permissionRequestProvider === undefined) {
            ctx.permissionRequestProvider = new permissionRequest_1.PermissionRequestFileProvider(inputs.projectPath);
        }
        const result = await utils_1.ensurePermissionRequest(azureSolutionSettings, ctx.permissionRequestProvider);
        if (result.isErr()) {
            return new teamsfx_api_1.v2.FxFailure(result.error);
        }
    }
    // Just to trigger M365 login before the concurrent execution of localDebug.
    // Because concurrent execution of localDebug may getAccessToken() concurrently, which
    // causes 2 M365 logins before the token caching in common lib takes effect.
    const appStudioTokenRes = await tokenProvider.m365TokenProvider.getAccessToken({
        scopes: tools_1.AppStudioScopes,
    });
    if (appStudioTokenRes.isErr()) {
        return new teamsfx_api_1.v2.FxFailure(appStudioTokenRes.error);
    }
    // Pop-up window to confirm if local debug in another tenant
    let localDebugTenantId = "";
    localDebugTenantId = envInfo === null || envInfo === void 0 ? void 0 : envInfo.state.solution.teamsAppTenantId;
    const m365TenantMatches = await utils_1.checkWhetherLocalDebugM365TenantMatches(envInfo, ctx.telemetryReporter, localDebugTenantId, tokenProvider.m365TokenProvider, inputs.projectPath);
    if (m365TenantMatches.isErr()) {
        return new teamsfx_api_1.v2.FxFailure(m365TenantMatches.error);
    }
    const plugins = utils_1.getSelectedPlugins(ctx.projectSetting);
    if (projectSettingsHelper_1.isExistingTabApp(ctx.projectSetting)) {
        // for existing tab app, enable app studio plugin when solution settings is empty.
        const appStudioPlugin = typedi_1.Container.get(ResourcePluginContainer_1.ResourcePluginsV2.AppStudioPlugin);
        if (!plugins.find((p) => p.name === appStudioPlugin.name)) {
            plugins.push(appStudioPlugin);
        }
    }
    const provisionLocalResourceThunks = plugins
        .filter((plugin) => !lodash_1.isUndefined(plugin.provisionLocalResource))
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "provisionLocalResource",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            thunk: () => plugin.provisionLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo),
        };
    });
    const provisionResult = await executor_1.executeConcurrently(provisionLocalResourceThunks, ctx.logProvider);
    if (provisionResult.kind !== "success") {
        return provisionResult;
    }
    const localEnvSetupResult = await provisionLocal_1.setupLocalEnvironment(ctx, inputs, envInfo);
    if (localEnvSetupResult.isErr()) {
        return new teamsfx_api_1.v2.FxPartialSuccess(envInfo, localEnvSetupResult.error);
    }
    const aadPlugin = typedi_1.Container.get(ResourcePluginContainer_1.ResourcePluginsV2.AadPlugin);
    if (utils_1.isAzureProject(azureSolutionSettings)) {
        if (plugins.some((plugin) => plugin.name === aadPlugin.name) && aadPlugin.executeUserTask) {
            const result = await aadPlugin.executeUserTask(ctx, inputs, {
                namespace: `${constants_1.PluginNames.SOLUTION}/${constants_1.PluginNames.AAD}`,
                method: "setApplicationInContext",
                params: { isLocal: false },
            }, localSettings, envInfo, tokenProvider);
            if (result.isErr()) {
                return new teamsfx_api_1.v2.FxPartialSuccess(localSettings, result.error);
            }
        }
    }
    const appStudioTokenJsonRes = await tokenProvider.m365TokenProvider.getJsonObject({
        scopes: tools_1.AppStudioScopes,
    });
    const appStudioTokenJson = appStudioTokenJsonRes.isOk() ? appStudioTokenJsonRes.value : undefined;
    const parseTenantIdresult = utils_1.loadTeamsAppTenantIdForLocal(localSettings, appStudioTokenJson, envInfo);
    if (parseTenantIdresult.isErr()) {
        return new teamsfx_api_1.v2.FxFailure(parseTenantIdresult.error);
    }
    const configureLocalResourceThunks = plugins
        .filter((plugin) => !lodash_1.isUndefined(plugin.configureLocalResource))
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "configureLocalResource",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            thunk: () => plugin.configureLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo),
        };
    });
    const configureResourceResult = await executor_1.executeConcurrently(configureLocalResourceThunks, ctx.logProvider);
    if (configureResourceResult.kind !== "success") {
        if (configureResourceResult.kind === "partialSuccess") {
            return new teamsfx_api_1.v2.FxPartialSuccess(localSettings, configureResourceResult.error);
        }
        return new teamsfx_api_1.v2.FxFailure(configureResourceResult.error);
    }
    const localConfigResult = await provisionLocal_1.configLocalEnvironment(ctx, inputs, envInfo);
    if (localConfigResult.isErr()) {
        return new teamsfx_api_1.v2.FxPartialSuccess(envInfo, localConfigResult.error);
    }
    return new teamsfx_api_1.v2.FxSuccess(localSettings);
}
exports.provisionLocalResource = provisionLocalResource;
//# sourceMappingURL=provisionLocal.js.map