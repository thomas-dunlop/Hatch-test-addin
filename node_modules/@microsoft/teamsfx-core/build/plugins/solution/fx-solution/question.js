"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabFeatureIds = exports.BotFeatureIds = exports.getUserEmailQuestion = exports.AskSubscriptionQuestion = exports.DeployPluginSelectQuestion = exports.addCapabilityQuestion = exports.createAddCloudResourceOptions = exports.createAddAzureResourceQuestion = exports.AzureResourcesQuestion = exports.BotNotificationTriggers = exports.BotScenario = exports.CicdOptionItem = exports.ApiConnectionOptionItem = exports.SingleSignOnOptionItem = exports.AzureResourceKeyVaultNewUI = exports.AzureResourceKeyVault = exports.AzureResourceApimNewUI = exports.AzureResourceApim = exports.AzureResourceFunctionNewUI = exports.AzureResourceFunction = exports.AzureResourceSQLNewUI = exports.AzureResourceSQL = exports.HostTypeOptionSPFx = exports.HostTypeOptionAzure = exports.AzureSolutionQuestionNames = exports.M365SearchAppOptionItem = exports.M365SsoLaunchPageOptionItem = exports.TabNonSsoItem = exports.BotSsoItem = exports.TabSsoItem = exports.TabSPFxNewUIItem = exports.TabSPFxItem = exports.MessageExtensionNewUIItem = exports.MessageExtensionItem = exports.ExistingTabOptionItem = exports.WorkflowOptionItem = exports.CommandAndResponseOptionItem = exports.NotificationOptionItem = exports.BotNewUIOptionItem = exports.BotOptionItem = exports.TabNewUIOptionItem = exports.TabOptionItem = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const featureFlags_1 = require("../../../common/featureFlags");
const localizeUtils_1 = require("../../../common/localizeUtils");
exports.TabOptionItem = {
    id: "Tab",
    label: localizeUtils_1.getLocalizedString("core.TabOption.label"),
    cliName: "tab",
    description: localizeUtils_1.getLocalizedString("core.TabOption.description"),
    detail: localizeUtils_1.getLocalizedString("core.TabOption.detail"),
};
exports.TabNewUIOptionItem = {
    id: "Tab",
    label: `$(browser) ${localizeUtils_1.getLocalizedString("core.TabOption.labelNew")}`,
    cliName: "tab",
    detail: localizeUtils_1.getLocalizedString("core.TabOption.detailNew"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
    data: "https://aka.ms/teamsfx-tab-with-sso",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.BotOptionItem = {
    id: "Bot",
    label: "Bot",
    cliName: "bot",
    description: localizeUtils_1.getLocalizedString("core.BotOption.description"),
    detail: localizeUtils_1.getLocalizedString("core.BotOption.detail"),
};
exports.BotNewUIOptionItem = {
    id: "Bot",
    label: `$(hubot) ${localizeUtils_1.getLocalizedString("core.BotNewUIOption.label")}`,
    cliName: "bot",
    detail: localizeUtils_1.getLocalizedString("core.BotNewUIOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.basic"),
};
exports.NotificationOptionItem = {
    // For default option, id and cliName must be the same
    id: "Notification",
    label: `$(hubot) ${localizeUtils_1.getLocalizedString("core.NotificationOption.label")}`,
    description: localizeUtils_1.getLocalizedString("core.Option.recommend"),
    cliName: "notification",
    detail: localizeUtils_1.getLocalizedString("core.NotificationOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
    data: "https://aka.ms/teamsfx-send-notification",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.CommandAndResponseOptionItem = {
    // id must match cli `yargsHelp`
    id: "command-bot",
    label: `$(hubot) ${localizeUtils_1.getLocalizedString("core.CommandAndResponseOption.label")}`,
    description: localizeUtils_1.getLocalizedString("core.Option.recommend"),
    cliName: "command-bot",
    detail: localizeUtils_1.getLocalizedString("core.CommandAndResponseOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
    data: "https://aka.ms/teamsfx-create-command",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.WorkflowOptionItem = {
    // id must match cli `yargsHelp`
    id: "workflow-bot",
    label: `$(hubot) ${localizeUtils_1.getLocalizedString("core.WorkflowOption.label")}`,
    description: localizeUtils_1.getLocalizedString("core.Option.recommend"),
    cliName: "workflow-bot",
    detail: localizeUtils_1.getLocalizedString("core.WorkflowOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
    data: "https://aka.ms/teamsfx-create-workflow",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.ExistingTabOptionItem = {
    id: "ExistingTab",
    label: `$(browser) ${localizeUtils_1.getLocalizedString("core.ExistingTabOption.label")}`,
    cliName: "existing-tab",
    detail: localizeUtils_1.getLocalizedString("core.ExistingTabOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
    data: "https://aka.ms/teamsfx-embed-existing-web",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.MessageExtensionItem = {
    id: "MessagingExtension",
    label: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.label"),
    cliName: "message-extension",
    description: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.description"),
    detail: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.detail"),
};
exports.MessageExtensionNewUIItem = {
    id: "MessagingExtension",
    label: `$(comment-discussion) ${localizeUtils_1.getLocalizedString("core.MessageExtensionOption.labelNew")}`,
    cliName: "message-extension",
    detail: localizeUtils_1.getLocalizedString("core.MessageExtensionOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.basic"),
};
exports.TabSPFxItem = {
    id: "TabSPFx",
    label: localizeUtils_1.getLocalizedString("core.TabSPFxOption.label"),
    cliName: "tab-spfx",
    description: localizeUtils_1.getLocalizedString("core.TabSPFxOption.description"),
    detail: localizeUtils_1.getLocalizedString("core.TabSPFxOption.detail"),
};
exports.TabSPFxNewUIItem = {
    id: "TabSPFx",
    label: `$(browser) ${localizeUtils_1.getLocalizedString("core.TabSPFxOption.labelNew")}`,
    cliName: "tab-spfx",
    detail: localizeUtils_1.getLocalizedString("core.TabSPFxOption.detailNew"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
};
exports.TabSsoItem = {
    id: "TabSSO",
    label: "TabSSO",
    cliName: "tab-sso",
    description: localizeUtils_1.getLocalizedString("core.TabSso.description"),
    detail: localizeUtils_1.getLocalizedString("core.TabSso.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.scenario"),
};
exports.BotSsoItem = {
    id: "BotSSO",
    label: "BotSSO",
    cliName: "bot-sso",
    description: localizeUtils_1.getLocalizedString("core.BotSso.description"),
    detail: localizeUtils_1.getLocalizedString("core.BotSso.detail"),
};
exports.TabNonSsoItem = {
    id: "TabNonSso",
    label: `$(browser) ${localizeUtils_1.getLocalizedString("core.TabNonSso.label")}`,
    cliName: "tab-non-sso",
    detail: localizeUtils_1.getLocalizedString("core.TabNonSso.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.basic"),
};
exports.M365SsoLaunchPageOptionItem = {
    id: "M365SsoLaunchPage",
    label: `$(browser) ${localizeUtils_1.getLocalizedString("core.M365SsoLaunchPageOptionItem.label")}`,
    cliName: "sso-launch-page",
    detail: localizeUtils_1.getLocalizedString("core.M365SsoLaunchPageOptionItem.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.m365"),
};
exports.M365SearchAppOptionItem = {
    id: "M365SearchApp",
    label: `$(comment-discussion) ${localizeUtils_1.getLocalizedString("core.M365SearchAppOptionItem.label")}`,
    cliName: "search-app",
    detail: localizeUtils_1.getLocalizedString("core.M365SearchAppOptionItem.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.m365"),
};
var AzureSolutionQuestionNames;
(function (AzureSolutionQuestionNames) {
    AzureSolutionQuestionNames["Capabilities"] = "capabilities";
    AzureSolutionQuestionNames["TabScopes"] = "tab-scopes";
    AzureSolutionQuestionNames["HostType"] = "host-type";
    AzureSolutionQuestionNames["AzureResources"] = "azure-resources";
    AzureSolutionQuestionNames["PluginSelectionDeploy"] = "deploy-plugin";
    AzureSolutionQuestionNames["AddResources"] = "add-azure-resources";
    AzureSolutionQuestionNames["AppName"] = "app-name";
    AzureSolutionQuestionNames["AskSub"] = "subscription";
    AzureSolutionQuestionNames["ProgrammingLanguage"] = "programming-language";
    AzureSolutionQuestionNames["Solution"] = "solution";
    AzureSolutionQuestionNames["Scenarios"] = "scenarios";
    AzureSolutionQuestionNames["Features"] = "features";
})(AzureSolutionQuestionNames = exports.AzureSolutionQuestionNames || (exports.AzureSolutionQuestionNames = {}));
exports.HostTypeOptionAzure = {
    id: "Azure",
    label: localizeUtils_1.getLocalizedString("core.HostTypeOptionAzure.label"),
    cliName: "azure",
};
exports.HostTypeOptionSPFx = {
    id: "SPFx",
    label: localizeUtils_1.getLocalizedString("core.HostTypeOptionSPFx.label"),
    cliName: "spfx",
};
exports.AzureResourceSQL = {
    id: "sql",
    label: localizeUtils_1.getLocalizedString("core.AzureResourceSQL.label"),
    description: localizeUtils_1.getLocalizedString("core.AzureResourceSQL.description"),
};
exports.AzureResourceSQLNewUI = {
    id: "sql",
    label: `$(azure) ${localizeUtils_1.getLocalizedString("core.AzureResourceSQLNewUI.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.AzureResourceSQLNewUI.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.resource"),
};
exports.AzureResourceFunction = {
    id: "function",
    label: localizeUtils_1.getLocalizedString("core.AzureResourceFunction.label"),
};
exports.AzureResourceFunctionNewUI = {
    id: "function",
    label: `$(azure) ${localizeUtils_1.getLocalizedString("core.AzureResourceFunctionNewUI.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.AzureResourceFunctionNewUI.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.resource"),
};
exports.AzureResourceApim = {
    id: "apim",
    label: localizeUtils_1.getLocalizedString("core.AzureResourceApim.label"),
    description: localizeUtils_1.getLocalizedString("core.AzureResourceApim.description"),
};
exports.AzureResourceApimNewUI = {
    id: "apim",
    label: `$(azure) ${localizeUtils_1.getLocalizedString("core.AzureResourceApimNewUI.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.AzureResourceApimNewUI.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.resource"),
};
exports.AzureResourceKeyVault = {
    id: "keyvault",
    label: localizeUtils_1.getLocalizedString("core.AzureResourceKeyVault.label"),
    description: localizeUtils_1.getLocalizedString("core.AzureResourceKeyVault.description"),
};
exports.AzureResourceKeyVaultNewUI = {
    id: "keyvault",
    label: `$(azure) ${localizeUtils_1.getLocalizedString("core.AzureResourceKeyVaultNewUI.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.AzureResourceKeyVaultNewUI.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.resource"),
};
exports.SingleSignOnOptionItem = {
    id: "sso",
    label: `$(unlock) ${localizeUtils_1.getLocalizedString("core.SingleSignOnOption.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.SingleSignOnOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.additional"),
    data: "https://aka.ms/teamsfx-add-sso",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.ApiConnectionOptionItem = {
    id: "api-connection",
    label: `$(arrow-swap) ${localizeUtils_1.getLocalizedString("core.ApiConnectionOption.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.ApiConnectionOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.additional"),
    data: "https://aka.ms/teamsfx-connect-api",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
exports.CicdOptionItem = {
    id: "cicd",
    label: `$(sync) ${localizeUtils_1.getLocalizedString("core.cicdWorkflowOption.label")}`,
    detail: localizeUtils_1.getLocalizedString("core.cicdWorkflowOption.detail"),
    groupName: localizeUtils_1.getLocalizedString("core.options.separator.additional"),
    data: "https://aka.ms/teamsfx-add-cicd",
    buttons: [
        {
            iconPath: "tasklist",
            tooltip: localizeUtils_1.getLocalizedString("core.option.tutorial"),
            command: "fx-extension.openTutorial",
        },
    ],
};
var BotScenario;
(function (BotScenario) {
    BotScenario["NotificationBot"] = "notificationBot";
    BotScenario["CommandAndResponseBot"] = "commandAndResponseBot";
    BotScenario["WorkflowBot"] = "workflowBot";
})(BotScenario = exports.BotScenario || (exports.BotScenario = {}));
exports.BotNotificationTriggers = {
    Timer: "timer",
    Http: "http",
};
exports.AzureResourcesQuestion = {
    name: AzureSolutionQuestionNames.AzureResources,
    title: "Cloud resources",
    type: "multiSelect",
    staticOptions: [exports.AzureResourceSQL, exports.AzureResourceFunction],
    default: [],
    onDidChangeSelection: async function (currentSelectedIds, previousSelectedIds) {
        if (currentSelectedIds.has(exports.AzureResourceSQL.id)) {
            currentSelectedIds.add(exports.AzureResourceFunction.id);
        }
        return currentSelectedIds;
    },
    placeholder: "Select a resource (optional)",
};
function createAddAzureResourceQuestion(alreadyHaveFunction, alreadyHaveSQL, alreadyHaveAPIM, alreadyHaveKeyVault) {
    const options = [exports.AzureResourceFunction, exports.AzureResourceSQL];
    if (!alreadyHaveAPIM)
        options.push(exports.AzureResourceApim);
    if (!alreadyHaveKeyVault)
        options.push(exports.AzureResourceKeyVault);
    return {
        name: AzureSolutionQuestionNames.AddResources,
        title: "Cloud resources",
        type: "multiSelect",
        staticOptions: options,
        default: [],
        onDidChangeSelection: async function (currentSelectedIds, previousSelectedIds) {
            const hasSQL = currentSelectedIds.has(exports.AzureResourceSQL.id);
            const hasAPIM = currentSelectedIds.has(exports.AzureResourceApim.id);
            if ((hasSQL || hasAPIM) && !alreadyHaveFunction) {
                currentSelectedIds.add(exports.AzureResourceFunction.id);
            }
            return currentSelectedIds;
        },
    };
}
exports.createAddAzureResourceQuestion = createAddAzureResourceQuestion;
function createAddCloudResourceOptions(alreadyHaveAPIM, alreadyHaveKeyVault) {
    const options = [exports.AzureResourceFunctionNewUI];
    if (!alreadyHaveAPIM)
        options.push(exports.AzureResourceApimNewUI);
    options.push(exports.AzureResourceSQLNewUI);
    if (!alreadyHaveKeyVault)
        options.push(exports.AzureResourceKeyVaultNewUI);
    return options;
}
exports.createAddCloudResourceOptions = createAddCloudResourceOptions;
function addCapabilityQuestion(alreadyHaveTab, alreadyHaveBot) {
    const options = [];
    if (!alreadyHaveTab)
        options.push(exports.TabOptionItem);
    if (!alreadyHaveBot) {
        options.push(exports.BotOptionItem);
        options.push(exports.MessageExtensionItem);
        options.push(exports.NotificationOptionItem);
        options.push(exports.CommandAndResponseOptionItem);
    }
    return {
        name: AzureSolutionQuestionNames.Capabilities,
        title: featureFlags_1.isBotNotificationEnabled()
            ? localizeUtils_1.getLocalizedString("core.addCapabilityQuestion.titleNew")
            : localizeUtils_1.getLocalizedString("core.addCapabilityQuestion.title"),
        type: "multiSelect",
        staticOptions: options,
        default: [],
    };
}
exports.addCapabilityQuestion = addCapabilityQuestion;
exports.DeployPluginSelectQuestion = {
    name: AzureSolutionQuestionNames.PluginSelectionDeploy,
    title: `Select resources`,
    type: "multiSelect",
    skipSingleOption: true,
    staticOptions: [],
    default: [],
};
exports.AskSubscriptionQuestion = {
    name: AzureSolutionQuestionNames.AskSub,
    type: "func",
    func: async (inputs) => {
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    },
};
function getUserEmailQuestion(currentUserEmail) {
    let defaultUserEmail = "";
    if (currentUserEmail && currentUserEmail.indexOf("@") > 0) {
        defaultUserEmail = "[UserName]@" + currentUserEmail.split("@")[1];
    }
    return {
        name: "email",
        type: "text",
        title: localizeUtils_1.getLocalizedString("core.getUserEmailQuestion.title"),
        default: defaultUserEmail,
        validation: {
            validFunc: (input, previousInputs) => {
                if (!input || input.trim() === "") {
                    return localizeUtils_1.getLocalizedString("core.getUserEmailQuestion.validation1");
                }
                input = input.trim();
                if (input === defaultUserEmail) {
                    return localizeUtils_1.getLocalizedString("core.getUserEmailQuestion.validation2");
                }
                const re = /\S+@\S+\.\S+/;
                if (!re.test(input)) {
                    return localizeUtils_1.getLocalizedString("core.getUserEmailQuestion.validation3");
                }
                return undefined;
            },
        },
    };
}
exports.getUserEmailQuestion = getUserEmailQuestion;
exports.BotFeatureIds = [
    exports.BotOptionItem.id,
    exports.NotificationOptionItem.id,
    exports.CommandAndResponseOptionItem.id,
    exports.WorkflowOptionItem.id,
    exports.MessageExtensionItem.id,
    exports.M365SearchAppOptionItem.id,
];
exports.TabFeatureIds = [exports.TabOptionItem.id, exports.TabNonSsoItem.id, exports.M365SsoLaunchPageOptionItem.id];
//# sourceMappingURL=question.js.map