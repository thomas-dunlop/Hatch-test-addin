"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleConfigFilesWhenSwitchAccount = exports.hasBotServiceCreated = exports.sendErrorTelemetryThenReturnError = exports.getSubsriptionDisplayName = exports.getPluginContextConstructor = exports.getPluginContext = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const arm_subscriptions_1 = require("@azure/arm-subscriptions");
const constants_1 = require("../constants");
const constants_2 = require("../v3/constants");
const constants_3 = require("../../../../component/constants");
const arm_1 = require("../arm");
const backupFiles_1 = require("./backupFiles");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const strings_1 = require("../../../resource/bot/resources/strings");
const constants_4 = require("../../../resource/bot/constants");
const hostingConstant_1 = require("../../../../common/azure-hosting/hostingConstant");
const constants_5 = require("../../../resource/frontend/constants");
/**
 * A helper function to construct a plugin's context.
 * @param solutionCtx solution context
 * @param pluginIdentifier plugin name
 */
function getPluginContext(solutionCtx, pluginIdentifier) {
    const baseCtx = solutionCtx;
    if (!solutionCtx.envInfo.state.has(pluginIdentifier)) {
        solutionCtx.envInfo.state.set(pluginIdentifier, new teamsfx_api_1.ConfigMap());
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const pluginConfig = solutionCtx.envInfo.state.get(pluginIdentifier);
    const pluginCtx = Object.assign(Object.assign({}, baseCtx), { envInfo: solutionCtx.envInfo, config: pluginConfig });
    return pluginCtx;
}
exports.getPluginContext = getPluginContext;
/**
 * A curry-ed version of getPluginContext
 * @param solutionCtx solution context
 */
function getPluginContextConstructor(solutionCtx) {
    return function (pluginIdentifier) {
        return getPluginContext(solutionCtx, pluginIdentifier);
    };
}
exports.getPluginContextConstructor = getPluginContextConstructor;
async function getSubsriptionDisplayName(azureToken, subscriptionId) {
    const client = new arm_subscriptions_1.SubscriptionClient(azureToken);
    const subscription = await client.subscriptions.get(subscriptionId);
    return subscription.displayName;
}
exports.getSubsriptionDisplayName = getSubsriptionDisplayName;
function sendErrorTelemetryThenReturnError(eventName, error, reporter, properties, measurements, errorProps) {
    if (!properties) {
        properties = {};
    }
    if (constants_1.SolutionTelemetryProperty.Component in properties === false) {
        properties[constants_1.SolutionTelemetryProperty.Component] = constants_1.SolutionTelemetryComponentName;
    }
    properties[constants_1.SolutionTelemetryProperty.Success] = "no";
    if (error instanceof teamsfx_api_1.UserError) {
        properties["error-type"] = "user";
    }
    else {
        properties["error-type"] = "system";
    }
    properties["error-code"] = `${error.source}.${error.name}`;
    properties["error-message"] = error.message;
    reporter === null || reporter === void 0 ? void 0 : reporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
    return error;
}
exports.sendErrorTelemetryThenReturnError = sendErrorTelemetryThenReturnError;
function hasBotServiceCreated(envInfo) {
    if (!envInfo || !envInfo.state) {
        return false;
    }
    return ((!!envInfo.state[constants_2.BuiltInFeaturePluginNames.bot] &&
        !!envInfo.state[constants_2.BuiltInFeaturePluginNames.bot]["resourceId"]) ||
        (!!envInfo.state[constants_3.ComponentNames.TeamsBot] &&
            !!envInfo.state[constants_3.ComponentNames.TeamsBot]["resourceId"]));
}
exports.hasBotServiceCreated = hasBotServiceCreated;
async function handleConfigFilesWhenSwitchAccount(envInfo, appName, projectPath, hasSwitchedM365Tenant, hasSwitchedSubscription, hasBotServiceCreatedBefore) {
    var _a, _b;
    if (!hasSwitchedM365Tenant && !hasSwitchedSubscription) {
        return teamsfx_api_1.ok(undefined);
    }
    const backupFilesRes = await backupFiles_1.backupFiles(envInfo.envName, projectPath);
    if (backupFilesRes.isErr()) {
        return teamsfx_api_1.err(backupFilesRes.error);
    }
    const updateAzureParametersRes = await arm_1.updateAzureParameters(projectPath, appName, envInfo.envName, hasSwitchedM365Tenant, hasSwitchedSubscription, hasBotServiceCreatedBefore);
    if (updateAzureParametersRes.isErr()) {
        return teamsfx_api_1.err(updateAzureParametersRes.error);
    }
    if (hasSwitchedSubscription) {
        const envName = envInfo.envName;
        const maybeBotFolder = path_1.default.join(projectPath, strings_1.CommonStrings.BOT_WORKING_DIR_NAME);
        const maybeBotDeploymentFile = path_1.default.join(maybeBotFolder, path_1.default.join(constants_4.DeployConfigs.DEPLOYMENT_FOLDER, hostingConstant_1.DeployConfigsConstants.DEPLOYMENT_INFO_FILE));
        if (await fs_extra_1.default.pathExists(maybeBotDeploymentFile)) {
            try {
                const botDeployJson = await fs_extra_1.default.readJSON(maybeBotDeploymentFile);
                const lastTime = Math.max((_b = (_a = botDeployJson[envInfo.envName]) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : 0, 0);
                if (lastTime !== 0) {
                    botDeployJson[envName] = {
                        time: 0,
                    };
                    await fs_extra_1.default.writeJSON(maybeBotDeploymentFile, botDeployJson);
                }
            }
            catch (exception) {
                // do nothing
            }
        }
        const maybeTabFolder = path_1.default.join(projectPath, constants_5.FrontendPathInfo.WorkingDir);
        const maybeTabDeploymentFile = path_1.default.join(maybeTabFolder, path_1.default.join(constants_4.DeployConfigs.DEPLOYMENT_FOLDER, hostingConstant_1.DeployConfigsConstants.DEPLOYMENT_INFO_FILE));
        if (await fs_extra_1.default.pathExists(maybeTabDeploymentFile)) {
            try {
                const deploymentInfoJson = await fs_extra_1.default.readJSON(maybeTabDeploymentFile);
                if (!!deploymentInfoJson[envName] && !!deploymentInfoJson[envName].lastDeployTime) {
                    delete deploymentInfoJson[envName].lastDeployTime;
                    await fs_extra_1.default.writeJSON(maybeTabDeploymentFile, deploymentInfoJson);
                }
            }
            catch (exception) {
                // do nothing
            }
        }
    }
    return teamsfx_api_1.ok(undefined);
}
exports.handleConfigFilesWhenSwitchAccount = handleConfigFilesWhenSwitchAccount;
//# sourceMappingURL=util.js.map