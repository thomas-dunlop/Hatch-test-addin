import { Plugin, PluginContext, Func, Result, FxError, AzureSolutionSettings, Stage, QTreeNode } from "@microsoft/teamsfx-api";
import { AadAppForTeamsImpl } from "./plugin";
import { AadResult } from "./results";
import { AadOwner, ResourcePermission } from "../../../common/permissionInterface";
import "./v2";
import "./v3";
export declare class AadAppForTeamsPlugin implements Plugin {
    name: string;
    displayName: string;
    activate(solutionSettings: AzureSolutionSettings): boolean;
    pluginImpl: AadAppForTeamsImpl;
    provision(ctx: PluginContext): Promise<AadResult>;
    localDebug(ctx: PluginContext): Promise<AadResult>;
    setApplicationInContext(ctx: PluginContext, isLocalDebug?: boolean): AadResult;
    postProvision(ctx: PluginContext): Promise<AadResult>;
    postLocalDebug(ctx: PluginContext): Promise<AadResult>;
    generateArmTemplates(ctx: PluginContext): Promise<AadResult>;
    executeUserTask(func: Func, ctx: PluginContext): Promise<AadResult>;
    checkPermission(ctx: PluginContext, userInfo: Record<string, any>): Promise<Result<ResourcePermission[], FxError>>;
    grantPermission(ctx: PluginContext, userInfo: Record<string, any>): Promise<Result<ResourcePermission[], FxError>>;
    listCollaborator(ctx: PluginContext): Promise<Result<AadOwner[], FxError>>;
    scaffold(ctx: PluginContext): Promise<Result<any, FxError>>;
    deploy(ctx: PluginContext): Promise<Result<any, FxError>>;
    getQuestions(stage: Stage, ctx: PluginContext): Promise<Result<QTreeNode | undefined, FxError>>;
    private runWithExceptionCatchingAsync;
    private runWithExceptionCatching;
    private returnError;
}
declare const _default: AadAppForTeamsPlugin;
export default _default;
export { getPermissionMap } from "./permissions";
//# sourceMappingURL=index.d.ts.map