"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadPluginV2 = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const __1 = require("..");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const utils4v2_1 = require("../../utils4v2");
let AadPluginV2 = class AadPluginV2 {
    constructor() {
        this.name = "fx-resource-aad-app-for-teams";
        this.displayName = "AAD";
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        return this.plugin.activate(solutionSettings);
    }
    async generateResourceTemplate(ctx, inputs) {
        return await utils4v2_1.generateResourceTemplateAdapter(ctx, inputs, this.plugin);
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.provisionResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async configureResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.configureResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async provisionLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo) {
        return await utils4v2_1.provisionLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin, envInfo);
    }
    async configureLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo) {
        return await utils4v2_1.configureLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin, envInfo);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        return await utils4v2_1.executeUserTaskAdapter(ctx, inputs, func, localSettings, envInfo, tokenProvider, this.plugin);
    }
    async grantPermission(ctx, inputs, envInfo, tokenProvider, userInfo) {
        return utils4v2_1.collaborationApiAdaptor(ctx, inputs, envInfo, tokenProvider, userInfo, this.plugin, "grantPermission");
    }
    async checkPermission(ctx, inputs, envInfo, tokenProvider, userInfo) {
        return utils4v2_1.collaborationApiAdaptor(ctx, inputs, envInfo, tokenProvider, userInfo, this.plugin, "checkPermission");
    }
    async listCollaborator(ctx, inputs, envInfo, tokenProvider, userInfo) {
        return utils4v2_1.collaborationApiAdaptor(ctx, inputs, envInfo, tokenProvider, userInfo, this.plugin, "listCollaborator");
    }
    async scaffoldSourceCode(ctx, inputs) {
        return await utils4v2_1.scaffoldSourceCodeAdapter(ctx, inputs, this.plugin);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        return utils4v2_1.deployAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async getQuestions(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.getQuestionsAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
};
tslib_1.__decorate([
    typedi_1.Inject(ResourcePluginContainer_1.ResourcePlugins.AadPlugin),
    tslib_1.__metadata("design:type", __1.AadAppForTeamsPlugin)
], AadPluginV2.prototype, "plugin", void 0);
AadPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.AadPlugin)
], AadPluginV2);
exports.AadPluginV2 = AadPluginV2;
//# sourceMappingURL=index.js.map