"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadAppForTeamsPluginV3 = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const typedi_1 = require("typedi");
const constants_1 = require("../../../../common/constants");
const constants_2 = require("../../../../component/constants");
const CommonErrorHandlerMW_1 = require("../../../../core/middleware/CommonErrorHandlerMW");
const folder_1 = require("../../../../folder");
const solutionSettingsHelper_1 = require("../../../solution/fx-solution/utils/solutionSettingsHelper");
const constants_3 = require("../../../solution/fx-solution/v3/constants");
const aadAppClient_1 = require("../aadAppClient");
const constants_4 = require("../constants");
const errors_1 = require("../errors");
const permissions_1 = require("../permissions");
const plugin_1 = require("../plugin");
const results_1 = require("../results");
const configs_1 = require("../utils/configs");
const dialog_1 = require("../utils/dialog");
const tokenProvider_1 = require("../utils/tokenProvider");
let AadAppForTeamsPluginV3 = class AadAppForTeamsPluginV3 {
    constructor() {
        this.name = constants_4.Plugins.pluginNameComplex;
        this.type = "resource";
        this.resourceType = "Azure AD App";
        this.description = "Azure AD App provide single-sign-on feature for Teams App";
    }
    async generateBicep() {
        const result = {
            Parameters: JSON.parse(await fs_extra_1.default.readFile(path.join(folder_1.getTemplatesFolder(), constants_4.TemplatePathInfo.BicepTemplateRelativeDir, constants_1.Bicep.ParameterFileName), constants_1.ConstantString.UTF8Encoding)),
        };
        return teamsfx_api_1.ok([result]);
    }
    /**
     * when AAD is added, permissions.json is created
     * manifest template will also be updated
     */
    async addInstance(ctx, inputs) {
        solutionSettingsHelper_1.ensureSolutionSettings(ctx.projectSetting);
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const res = await permissions_1.createPermissionRequestFile(inputs.projectPath);
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        const webAppInfo = {
            name: "WebApplicationInfo",
            snippet: {
                id: `{{state.${constants_4.Plugins.pluginNameComplex}.clientId}}`,
                resource: `{{{state.${constants_4.Plugins.pluginNameComplex}.applicationIdUris}}}`,
            },
        };
        const updateWebAppInfoRes = await ctx.appManifestProvider.updateCapability(ctx, inputs, webAppInfo);
        if (updateWebAppInfoRes.isErr())
            return teamsfx_api_1.err(updateWebAppInfoRes.error);
        if (!solutionSettings.activeResourcePlugins.includes(this.name))
            solutionSettings.activeResourcePlugins.push(this.name);
        return teamsfx_api_1.ok([]);
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider, props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const checkPermissionRes = await permissions_1.checkPermissionRequest(inputs.projectPath);
        if (checkPermissionRes.isErr())
            return teamsfx_api_1.err(checkPermissionRes.error);
        const isLocalDebug = envInfo.envName === "local";
        ctx.logProvider.info(constants_4.Messages.StartProvision.log);
        const telemetryMessage = "provision";
        await tokenProvider_1.TokenProvider.init({
            m365: tokenProvider.m365TokenProvider,
        });
        //init aad part in local settings or env state
        if (!envInfo.state[constants_2.ComponentNames.AadApp].secretFields) {
            envInfo.state[constants_2.ComponentNames.AadApp].secretFields = ["clientSecret"];
        }
        // Move objectId etc. from input to output.
        const skip = configs_1.Utils.skipCreateAadForProvision(envInfo);
        dialog_1.DialogUtils.init(ctx.userInteraction, constants_4.ProgressTitle.Provision, constants_4.ProgressTitle.ProvisionSteps);
        let config = new configs_1.ProvisionConfig(isLocalDebug);
        await config.restoreConfigFromEnvInfo(ctx, inputs, envInfo);
        const permissions = plugin_1.AadAppForTeamsImpl.parsePermission(config.permissionRequest, ctx.logProvider);
        await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_4.ProgressDetail.Starting));
        if (config.objectId) {
            if (!skip) {
                await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.next(constants_4.ProgressDetail.GetAadApp));
                config = await aadAppClient_1.AadAppClient.getAadApp(telemetryMessage, config.objectId, config.password, tokenProvider.m365TokenProvider, envInfo.envName);
                (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(constants_4.Messages.getLog(constants_4.Messages.GetAadAppSuccess));
            }
        }
        else {
            await ((_d = dialog_1.DialogUtils.progress) === null || _d === void 0 ? void 0 : _d.next(constants_4.ProgressDetail.ProvisionAadApp));
            await aadAppClient_1.AadAppClient.createAadApp(telemetryMessage, config);
            config.password = undefined;
            (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(constants_4.Messages.getLog(constants_4.Messages.CreateAadAppSuccess));
        }
        if (!config.password) {
            await ((_f = dialog_1.DialogUtils.progress) === null || _f === void 0 ? void 0 : _f.next(constants_4.ProgressDetail.CreateAadAppSecret));
            await aadAppClient_1.AadAppClient.createAadAppSecret(telemetryMessage, config);
            (_g = ctx.logProvider) === null || _g === void 0 ? void 0 : _g.info(constants_4.Messages.getLog(constants_4.Messages.CreateAadAppPasswordSuccess));
        }
        await ((_h = dialog_1.DialogUtils.progress) === null || _h === void 0 ? void 0 : _h.next(constants_4.ProgressDetail.UpdatePermission));
        await aadAppClient_1.AadAppClient.updateAadAppPermission(telemetryMessage, config.objectId, permissions, skip);
        (_j = ctx.logProvider) === null || _j === void 0 ? void 0 : _j.info(constants_4.Messages.getLog(constants_4.Messages.UpdatePermissionSuccess));
        await ((_k = dialog_1.DialogUtils.progress) === null || _k === void 0 ? void 0 : _k.end(true));
        config.saveConfigIntoEnvInfo(envInfo, tokenProvider_1.TokenProvider.tenantId);
        ctx.logProvider.info(constants_4.Messages.EndProvision.log);
        if (props)
            props[constants_4.Telemetry.skip] = skip ? constants_4.Telemetry.yes : constants_4.Telemetry.no;
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async configureResource(ctx, inputs, envInfo, tokenProvider, props) {
        var _a, _b, _c, _d, _e, _f;
        const setApplicationInContextRes = await this.setApplicationInContext(ctx, envInfo);
        if (setApplicationInContextRes.isErr())
            return teamsfx_api_1.err(setApplicationInContextRes.error);
        const isLocalDebug = envInfo.envName === "local";
        ctx.logProvider.info(constants_4.Messages.StartPostProvision.log);
        const skip = configs_1.Utils.skipCreateAadForProvision(envInfo);
        dialog_1.DialogUtils.init(ctx.userInteraction, constants_4.ProgressTitle.PostProvision, constants_4.ProgressTitle.PostProvisionSteps);
        await tokenProvider_1.TokenProvider.init({
            m365: tokenProvider.m365TokenProvider,
        });
        const config = new configs_1.PostProvisionConfig(isLocalDebug);
        config.restoreConfigFromEnvInfo(ctx, envInfo);
        await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_4.ProgressDetail.Starting));
        await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.next(constants_4.ProgressDetail.UpdateRedirectUri));
        const redirectUris = plugin_1.AadAppForTeamsImpl.getRedirectUris(config.frontendEndpoint, config.botEndpoint, config.clientId);
        await aadAppClient_1.AadAppClient.updateAadAppRedirectUri(isLocalDebug ? constants_4.Messages.EndPostLocalDebug.telemetry : constants_4.Messages.EndPostProvision.telemetry, config.objectId, redirectUris, skip);
        (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(constants_4.Messages.getLog(constants_4.Messages.UpdateRedirectUriSuccess));
        await ((_d = dialog_1.DialogUtils.progress) === null || _d === void 0 ? void 0 : _d.next(constants_4.ProgressDetail.UpdateAppIdUri));
        await aadAppClient_1.AadAppClient.updateAadAppIdUri(isLocalDebug ? constants_4.Messages.EndPostLocalDebug.telemetry : constants_4.Messages.EndPostProvision.telemetry, config.objectId, config.applicationIdUri, skip);
        (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(constants_4.Messages.getLog(constants_4.Messages.UpdateAppIdUriSuccess));
        await ((_f = dialog_1.DialogUtils.progress) === null || _f === void 0 ? void 0 : _f.end(true));
        ctx.logProvider.info(constants_4.Messages.EndPostProvision.log);
        if (props)
            props[constants_4.Telemetry.skip] = skip ? constants_4.Telemetry.yes : constants_4.Telemetry.no;
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async setApplicationInContext(ctx, envInfo) {
        var _a;
        const isLocalDebug = envInfo.envName === "local";
        const config = new configs_1.SetApplicationInContextConfig(isLocalDebug);
        config.restoreConfigFromEnvInfo(ctx, envInfo);
        if (!config.frontendDomain && !config.botId) {
            throw results_1.ResultFactory.UserError(errors_1.AppIdUriInvalidError.name, errors_1.AppIdUriInvalidError.message());
        }
        let applicationIdUri = "api://";
        applicationIdUri += config.frontendDomain ? `${config.frontendDomain}/` : "";
        applicationIdUri += config.botId ? "botid-" + config.botId : config.clientId;
        config.applicationIdUri = applicationIdUri;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_4.Messages.getLog(constants_4.Messages.SetAppIdUriSuccess));
        envInfo.state[constants_2.ComponentNames.AadApp].applicationIdUris = config.applicationIdUri;
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async listCollaborator(ctx, envInfo, tokenProvider) {
        ctx.logProvider.info(constants_4.Messages.StartListCollaborator.log);
        await tokenProvider_1.TokenProvider.init({ m365: tokenProvider.m365TokenProvider }, tokenProvider_1.TokenAudience.Graph);
        const aadState = envInfo.state[constants_2.ComponentNames.AadApp];
        const objectId = aadState.objectId;
        if (!objectId) {
            const msgs = errors_1.ConfigErrorMessages.GetConfigError(constants_4.ConfigKeys.objectId, constants_4.Plugins.pluginName);
            return teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_4.Plugins.pluginNameShort, errors_1.GetConfigError.name, msgs[0], msgs[1]));
        }
        const owners = await aadAppClient_1.AadAppClient.listCollaborator(constants_4.Messages.EndListCollaborator.telemetry, objectId);
        ctx.logProvider.info(constants_4.Messages.EndListCollaborator.log);
        return teamsfx_api_1.ok(owners || []);
    }
    async checkPermission(ctx, envInfo, tokenProvider, userInfo) {
        ctx.logProvider.info(constants_4.Messages.StartCheckPermission.log);
        await tokenProvider_1.TokenProvider.init({ m365: tokenProvider.m365TokenProvider }, tokenProvider_1.TokenAudience.Graph);
        const aadState = envInfo.state[constants_2.ComponentNames.AadApp];
        const objectId = aadState.objectId;
        if (!objectId) {
            const params = errors_1.ConfigErrorMessages.GetConfigError(constants_4.ConfigKeys.objectId, constants_4.Plugins.pluginName);
            const msgs0 = configs_1.getPermissionErrorMessage(params[0], false);
            const msgs1 = configs_1.getPermissionErrorMessage(params[1], false);
            return teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_4.Plugins.pluginNameShort, errors_1.GetConfigError.name, msgs0, msgs1));
        }
        const userObjectId = userInfo.aadId;
        const isAadOwner = await aadAppClient_1.AadAppClient.checkPermission(constants_4.Messages.EndCheckPermission.telemetry, objectId, userObjectId);
        const result = [
            {
                name: constants_4.Constants.permissions.name,
                type: constants_4.Constants.permissions.type,
                roles: isAadOwner ? [constants_4.Constants.permissions.owner] : [constants_4.Constants.permissions.noPermission],
                resourceId: objectId,
            },
        ];
        ctx.logProvider.info(constants_4.Messages.EndCheckPermission.log);
        return teamsfx_api_1.ok(result);
    }
    async grantPermission(ctx, envInfo, tokenProvider, userInfo) {
        ctx.logProvider.info(constants_4.Messages.StartGrantPermission.log);
        await tokenProvider_1.TokenProvider.init({ m365: tokenProvider.m365TokenProvider }, tokenProvider_1.TokenAudience.Graph);
        const aadState = envInfo.state[constants_2.ComponentNames.AadApp];
        const objectId = aadState.objectId;
        if (!objectId) {
            const params = errors_1.ConfigErrorMessages.GetConfigError(constants_4.ConfigKeys.objectId, constants_4.Plugins.pluginName);
            const msg0 = configs_1.getPermissionErrorMessage(params[0], true);
            const msg1 = configs_1.getPermissionErrorMessage(params[1], true);
            return teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_4.Plugins.pluginNameShort, errors_1.GetConfigError.name, msg0, msg1));
        }
        const userObjectId = userInfo.aadId;
        await aadAppClient_1.AadAppClient.grantPermission(ctx, objectId, userObjectId);
        const result = [
            {
                name: constants_4.Constants.permissions.name,
                type: constants_4.Constants.permissions.type,
                roles: [constants_4.Constants.permissions.owner],
                resourceId: objectId,
            },
        ];
        ctx.logProvider.info(constants_4.Messages.EndGrantPermission.log);
        return teamsfx_api_1.ok(result);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: {
                component: constants_3.BuiltInFeaturePluginNames.aad,
                eventName: "generate-arm-templates",
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], AadAppForTeamsPluginV3.prototype, "generateBicep", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AadAppForTeamsPluginV3.prototype, "addInstance", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad, eventName: "provision" },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AadAppForTeamsPluginV3.prototype, "provisionResource", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad, eventName: "post-provision" },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AadAppForTeamsPluginV3.prototype, "configureResource", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AadAppForTeamsPluginV3.prototype, "listCollaborator", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AadAppForTeamsPluginV3.prototype, "checkPermission", null);
AadAppForTeamsPluginV3 = tslib_1.__decorate([
    typedi_1.Service(constants_4.Plugins.pluginNameComplex)
], AadAppForTeamsPluginV3);
exports.AadAppForTeamsPluginV3 = AadAppForTeamsPluginV3;
//# sourceMappingURL=index.js.map