import { FxError, Result, TokenProvider as TokenProviderInAPI, v2, v3, Void } from "@microsoft/teamsfx-api";
import { AadOwner, ResourcePermission } from "../../../../common/permissionInterface";
import { AppUser } from "../../appstudio/interfaces/appUser";
export declare class AadAppForTeamsPluginV3 implements v3.PluginV3 {
    name: string;
    type: "resource";
    resourceType: string;
    description: string;
    generateBicep(): Promise<Result<v3.BicepTemplate[], FxError>>;
    /**
     * when AAD is added, permissions.json is created
     * manifest template will also be updated
     */
    addInstance(ctx: v3.ContextWithManifestProvider, inputs: v2.InputsWithProjectPath): Promise<Result<string[], FxError>>;
    provisionResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProviderInAPI, props?: any): Promise<Result<Void, FxError>>;
    configureResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProviderInAPI, props?: any): Promise<Result<Void, FxError>>;
    setApplicationInContext(ctx: v2.Context, envInfo: v3.EnvInfoV3): Promise<Result<Void, FxError>>;
    listCollaborator(ctx: v2.Context, envInfo: v3.EnvInfoV3, tokenProvider: TokenProviderInAPI): Promise<Result<AadOwner[], FxError>>;
    checkPermission(ctx: v2.Context, envInfo: v3.EnvInfoV3, tokenProvider: TokenProviderInAPI, userInfo: AppUser): Promise<Result<ResourcePermission[], FxError>>;
    grantPermission(ctx: v2.Context, envInfo: v3.EnvInfoV3, tokenProvider: TokenProviderInAPI, userInfo: AppUser): Promise<Result<ResourcePermission[], FxError>>;
}
//# sourceMappingURL=index.d.ts.map