"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPermissionMap = exports.AadAppForTeamsPlugin = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const plugin_1 = require("./plugin");
const results_1 = require("./results");
const errors_1 = require("./errors");
const telemetry_1 = require("./utils/telemetry");
const dialog_1 = require("./utils/dialog");
const constants_1 = require("./constants");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const constants_2 = require("../bot/constants");
require("./v2");
require("./v3");
const common_1 = require("../../../common");
const localizeUtils_1 = require("../../../common/localizeUtils");
let AadAppForTeamsPlugin = class AadAppForTeamsPlugin {
    constructor() {
        this.name = "fx-resource-aad-app-for-teams";
        this.displayName = "AAD";
        this.pluginImpl = new plugin_1.AadAppForTeamsImpl();
    }
    activate(solutionSettings) {
        return common_1.isAADEnabled(solutionSettings);
    }
    async provision(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.provision(ctx), ctx, constants_1.Messages.EndProvision.telemetry);
    }
    async localDebug(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.provision(ctx, true), ctx, constants_1.Messages.EndLocalDebug.telemetry);
    }
    setApplicationInContext(ctx, isLocalDebug = false) {
        return this.runWithExceptionCatching(() => this.pluginImpl.setApplicationInContext(ctx, isLocalDebug), ctx);
    }
    async postProvision(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.postProvision(ctx), ctx, constants_1.Messages.EndPostProvision.telemetry);
    }
    async postLocalDebug(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.postProvision(ctx, true), ctx, constants_1.Messages.EndPostLocalDebug.telemetry);
    }
    async generateArmTemplates(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.generateArmTemplates(ctx), ctx, constants_1.Messages.EndGenerateArmTemplates.telemetry);
    }
    async executeUserTask(func, ctx) {
        if (func.method == "setApplicationInContext") {
            const isLocal = func.params && func.params.isLocal !== undefined ? func.params.isLocal : false;
            return Promise.resolve(this.setApplicationInContext(ctx, isLocal));
        }
        else if (func.method === "buildAadManifest") {
            await this.pluginImpl.loadAndBuildManifest(ctx);
            return results_1.ResultFactory.Success();
        }
        return teamsfx_api_1.err(new teamsfx_api_1.SystemError({
            source: constants_1.Plugins.pluginNameShort,
            name: "FunctionRouterError",
            message: `Failed to route function call:${JSON.stringify(func)}`,
            issueLink: constants_2.Links.ISSUE_LINK,
        }));
    }
    async checkPermission(ctx, userInfo) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.checkPermission(ctx, userInfo), ctx, constants_1.Messages.EndCheckPermission.telemetry);
    }
    async grantPermission(ctx, userInfo) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.grantPermission(ctx, userInfo), ctx, constants_1.Messages.EndCheckPermission.telemetry);
    }
    async listCollaborator(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.listCollaborator(ctx), ctx, constants_1.Messages.EndListCollaborator.telemetry);
    }
    async scaffold(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.scaffold(ctx), ctx, constants_1.Messages.EndScaffold.telemetry);
    }
    async deploy(ctx) {
        return await this.runWithExceptionCatchingAsync(() => this.pluginImpl.deploy(ctx), ctx, constants_1.Messages.EndDeploy.telemetry);
    }
    async getQuestions(stage, ctx) {
        var _a, _b;
        const aadQuestions = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        if (stage === teamsfx_api_1.Stage.deploy &&
            (((_a = ctx.answers) === null || _a === void 0 ? void 0 : _a.platform) === teamsfx_api_1.Platform.CLI_HELP || ((_b = ctx.answers) === null || _b === void 0 ? void 0 : _b.platform) === teamsfx_api_1.Platform.CLI)) {
            const node = new teamsfx_api_1.QTreeNode({
                name: constants_1.Constants.INCLUDE_AAD_MANIFEST,
                type: "singleSelect",
                staticOptions: ["yes", "no"],
                title: localizeUtils_1.getLocalizedString("core.aad.includeAadQuestionTitle"),
                default: "no",
            });
            aadQuestions.addChild(node);
        }
        return teamsfx_api_1.ok(aadQuestions);
    }
    async runWithExceptionCatchingAsync(fn, ctx, stage) {
        try {
            return await fn();
        }
        catch (e) {
            return this.returnError(e, ctx, stage);
        }
    }
    runWithExceptionCatching(fn, ctx) {
        try {
            return fn();
        }
        catch (e) {
            return this.returnError(e, ctx, "");
        }
    }
    returnError(e, ctx, stage) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError) {
            let errorMessage = e.message;
            // For errors contains innerError, e.g. failures when calling Graph API
            if (e.innerError) {
                errorMessage += ` Detailed error: ${e.innerError.message}.`;
                if ((_b = (_a = e.innerError.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.errorMessage) {
                    // For errors return from App Studio API
                    errorMessage += ` Reason: ${(_d = (_c = e.innerError.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.errorMessage}`;
                }
                else if ((_g = (_f = (_e = e.innerError.response) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.error) === null || _g === void 0 ? void 0 : _g.message) {
                    // For errors return from Graph API
                    errorMessage += ` Reason: ${(_k = (_j = (_h = e.innerError.response) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.error) === null || _k === void 0 ? void 0 : _k.message}`;
                }
                e.message = errorMessage;
            }
            (_l = ctx.logProvider) === null || _l === void 0 ? void 0 : _l.error(errorMessage);
            telemetry_1.TelemetryUtils.init(ctx);
            telemetry_1.TelemetryUtils.sendErrorEvent(stage, e.name, e instanceof teamsfx_api_1.UserError ? constants_1.Telemetry.userError : constants_1.Telemetry.systemError, errorMessage);
            (_m = dialog_1.DialogUtils.progress) === null || _m === void 0 ? void 0 : _m.end(false);
            return teamsfx_api_1.err(e);
        }
        else {
            if (!(e instanceof Error)) {
                e = new Error(e.toString());
            }
            (_o = ctx.logProvider) === null || _o === void 0 ? void 0 : _o.error(e.message);
            telemetry_1.TelemetryUtils.init(ctx);
            telemetry_1.TelemetryUtils.sendErrorEvent(stage, errors_1.UnhandledError.name, constants_1.Telemetry.systemError, errors_1.UnhandledError.message() + " " + e.message);
            return teamsfx_api_1.err(results_1.ResultFactory.SystemError(errors_1.UnhandledError.name, errors_1.UnhandledError.message(), e, undefined, undefined));
        }
    }
};
AadAppForTeamsPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.AadPlugin)
], AadAppForTeamsPlugin);
exports.AadAppForTeamsPlugin = AadAppForTeamsPlugin;
exports.default = new AadAppForTeamsPlugin();
var permissions_1 = require("./permissions");
Object.defineProperty(exports, "getPermissionMap", { enumerable: true, get: function () { return permissions_1.getPermissionMap; } });
//# sourceMappingURL=index.js.map