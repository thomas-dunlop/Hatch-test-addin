"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPlugin = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./constants");
const folder_1 = require("../../../folder");
const question_1 = require("../../solution/fx-solution/question");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const constants_2 = require("../../../common/constants");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const tools_1 = require("../../../common/tools");
require("./v2");
const telemetryUtil_1 = require("./utils/telemetryUtil");
let IdentityPlugin = class IdentityPlugin {
    constructor() {
        this.name = "fx-resource-identity";
        this.displayName = "Microsoft Identity";
    }
    activate(solutionSettings) {
        return solutionSettings.hostType === question_1.HostTypeOptionAzure.id;
    }
    async provision(ctx) {
        return teamsfx_api_1.ok(undefined);
    }
    async updateArmTemplates(ctx) {
        telemetryUtil_1.TelemetryUtils.init(ctx.telemetryReporter);
        telemetryUtil_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.updateArmTemplates + constants_1.Telemetry.startSuffix);
        const result = {
            Reference: {
                identityName: constants_1.IdentityBicep.identityName,
                identityClientId: constants_1.IdentityBicep.identityClientId,
                identityResourceId: constants_1.IdentityBicep.identityResourceId,
                identityPrincipalId: constants_1.IdentityBicep.identityPrincipalId,
            },
        };
        telemetryUtil_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.updateArmTemplates, true);
        return teamsfx_api_1.ok(result);
    }
    async generateArmTemplates(ctx) {
        var _a;
        try {
            telemetryUtil_1.TelemetryUtils.init(ctx.telemetryReporter);
            telemetryUtil_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.generateArmTemplates + constants_1.Telemetry.startSuffix);
            const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
            const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
            const bicepTemplateDirectory = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "identity", "bicep");
            const provisionOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_2.Bicep.ProvisionFileName), pluginCtx);
            const provisionModules = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_1.IdentityBicepFile.moduleTempalteFilename), pluginCtx);
            const result = {
                Provision: {
                    Orchestration: provisionOrchestration,
                    Modules: { identity: provisionModules },
                },
                Reference: {
                    identityName: constants_1.IdentityBicep.identityName,
                    identityClientId: constants_1.IdentityBicep.identityClientId,
                    identityResourceId: constants_1.IdentityBicep.identityResourceId,
                    identityPrincipalId: constants_1.IdentityBicep.identityPrincipalId,
                },
            };
            telemetryUtil_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.generateArmTemplates, true);
            return teamsfx_api_1.ok(result);
        }
        catch (e) {
            if (!(e instanceof Error || e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError)) {
                e = new Error(e.toString());
            }
            if (!(e instanceof teamsfx_api_1.SystemError) && !(e instanceof teamsfx_api_1.UserError)) {
                (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.error(e.message);
            }
            let res;
            if (e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError) {
                res = teamsfx_api_1.err(e);
            }
            else {
                res = teamsfx_api_1.err(new teamsfx_api_1.SystemError({ error: e, source: constants_1.Constants.pluginNameShort, name: "UnhandledError" }));
            }
            const errorCode = res.error.source + "." + res.error.name;
            const errorType = res.error instanceof teamsfx_api_1.SystemError ? constants_1.Telemetry.systemError : constants_1.Telemetry.userError;
            telemetryUtil_1.TelemetryUtils.init(ctx.telemetryReporter);
            let errorMessage = res.error.message;
            if (res.error.innerError) {
                errorMessage += ` Detailed error: ${res.error.innerError.message}.`;
            }
            telemetryUtil_1.TelemetryUtils.sendErrorEvent(constants_1.Telemetry.stage.generateArmTemplates, errorCode, errorType, errorMessage);
            return res;
        }
    }
};
IdentityPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.IdentityPlugin)
], IdentityPlugin);
exports.IdentityPlugin = IdentityPlugin;
exports.default = new IdentityPlugin();
//# sourceMappingURL=index.js.map