import { FxError, Result, PluginContext, TeamsAppManifest } from "@microsoft/teamsfx-api";
import { AppUser } from "./interfaces/appUser";
import { ResourcePermission, TeamsAppAdmin } from "../../../common/permissionInterface";
export declare class AppStudioPluginImpl {
    commonProperties: {
        [key: string]: string;
    };
    constructor();
    provision(ctx: PluginContext): Promise<Result<string, FxError>>;
    postProvision(ctx: PluginContext): Promise<Result<string, FxError>>;
    validateManifest(ctx: PluginContext, isLocalDebug: boolean): Promise<Result<string[], FxError>>;
    updateManifest(ctx: PluginContext, isLocalDebug: boolean): Promise<Result<string, FxError>>;
    scaffold(ctx: PluginContext): Promise<any>;
    buildTeamsAppPackage(ctx: PluginContext, isLocalDebug: boolean): Promise<string>;
    publish(ctx: PluginContext): Promise<{
        name: string;
        id: string;
        update: boolean;
    }>;
    postLocalDebug(ctx: PluginContext): Promise<Result<string, FxError>>;
    checkPermission(ctx: PluginContext, userInfo: AppUser): Promise<ResourcePermission[]>;
    listCollaborator(ctx: PluginContext): Promise<TeamsAppAdmin[]>;
    grantPermission(ctx: PluginContext, userInfo: AppUser): Promise<ResourcePermission[]>;
    private beforePublish;
    private getConfigForCreatingManifest;
    private getTeamsAppId;
    private createApp;
    private updateApp;
    private validateManifestAgainstSchema;
    private getManifest;
    private getSPFxManifest;
}
export declare function createManifest(hasFrontend: boolean, hasBot: boolean, hasNotificationBot: boolean, hasCommandAndResponseBot: boolean, hasMessageExtension: boolean, isSPFx: boolean, hasAad?: boolean, isM365?: boolean): Promise<TeamsAppManifest | undefined>;
//# sourceMappingURL=plugin.d.ts.map