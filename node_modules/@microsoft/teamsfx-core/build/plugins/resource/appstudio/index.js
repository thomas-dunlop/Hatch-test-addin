"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioPlugin = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const url_1 = require("url");
const plugin_1 = require("./plugin");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const results_1 = require("./results");
const questions_1 = require("./questions");
const telemetry_1 = require("./utils/telemetry");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const constants_2 = require("../bot/constants");
require("./v2");
const manifestTemplate_1 = require("./manifestTemplate");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../../common");
const constants_3 = require("../../../common/constants");
let AppStudioPlugin = class AppStudioPlugin {
    constructor() {
        this.name = "fx-resource-appstudio";
        this.displayName = "App Studio";
        this.appStudioPluginImpl = new plugin_1.AppStudioPluginImpl();
    }
    activate(solutionSettings) {
        return true;
    }
    async getQuestions(stage, ctx) {
        var _a, _b, _c;
        const appStudioQuestions = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        if (stage === teamsfx_api_1.Stage.publish) {
            if (((_a = ctx.answers) === null || _a === void 0 ? void 0 : _a.platform) === teamsfx_api_1.Platform.VSCode) {
                const buildOrPublish = new teamsfx_api_1.QTreeNode({
                    name: constants_1.Constants.BUILD_OR_PUBLISH_QUESTION,
                    type: "singleSelect",
                    staticOptions: [questions_1.manuallySubmitOption, questions_1.autoPublishOption],
                    title: localizeUtils_1.getLocalizedString("plugins.appstudio.publishTip"),
                    default: questions_1.autoPublishOption.id,
                });
                appStudioQuestions.addChild(buildOrPublish);
            }
        }
        if (common_1.isDeployManifestEnabled() &&
            stage === teamsfx_api_1.Stage.deploy &&
            (((_b = ctx.answers) === null || _b === void 0 ? void 0 : _b.platform) === teamsfx_api_1.Platform.CLI_HELP || ((_c = ctx.answers) === null || _c === void 0 ? void 0 : _c.platform) === teamsfx_api_1.Platform.CLI)) {
            const node = new teamsfx_api_1.QTreeNode({
                name: constants_1.Constants.INCLUDE_APP_MANIFEST,
                type: "singleSelect",
                staticOptions: ["yes", "no"],
                title: localizeUtils_1.getLocalizedString("plugins.appstudio.whetherToDeployManifest"),
                default: "no",
            });
            appStudioQuestions.addChild(node);
        }
        return teamsfx_api_1.ok(appStudioQuestions);
    }
    /**
     * Create teams app
     * @returns {string} - Remote teams app id
     */
    async provision(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.provision);
        const remoteTeamsAppId = await this.appStudioPluginImpl.provision(ctx);
        if (remoteTeamsAppId.isErr()) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.provision, remoteTeamsAppId.error, this.appStudioPluginImpl.commonProperties);
            return remoteTeamsAppId;
        }
        else {
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.provision, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.ok(remoteTeamsAppId.value);
        }
    }
    /**
     * Update teams app
     * @returns {string} - Remote teams app id
     */
    async postProvision(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.postProvision);
        const remoteTeamsAppId = await this.appStudioPluginImpl.postProvision(ctx);
        if (remoteTeamsAppId.isErr()) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.postProvision, remoteTeamsAppId.error, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.err(remoteTeamsAppId.error);
        }
        const result = await this.buildTeamsPackage(ctx, false);
        if (result.isErr()) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.postProvision, result.error, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.err(result.error);
        }
        telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.postProvision, this.appStudioPluginImpl.commonProperties);
        return remoteTeamsAppId;
    }
    /**
     * Validate manifest string against schema
     * @param {string} manifestString - the string of manifest.json file
     * @returns {string[]} an array of errors
     */
    async validateManifest(ctx, isLocalDebug = false) {
        var _a, _b;
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.validateManifest);
        const validationpluginResult = await this.appStudioPluginImpl.validateManifest(ctx, isLocalDebug);
        if (validationpluginResult.isErr()) {
            return teamsfx_api_1.err(validationpluginResult.error);
        }
        const validationResult = validationpluginResult.value;
        if (validationResult.length > 0) {
            const errMessage = errors_1.AppStudioError.ValidationFailedError.message(validationResult);
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.error(localizeUtils_1.getLocalizedString("plugins.appstudio.validationFailedNotice"));
            const properties = this.appStudioPluginImpl.commonProperties;
            properties[telemetry_1.TelemetryPropertyKey.validationResult] = validationResult.join("\n");
            const validationFailed = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.ValidationFailedError.name, errMessage);
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.validateManifest, validationFailed, properties);
            return teamsfx_api_1.err(validationFailed);
        }
        const validationSuccess = localizeUtils_1.getLocalizedString("plugins.appstudio.validationSucceedNotice");
        (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.showMessage("info", validationSuccess, false);
        telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.validateManifest, this.appStudioPluginImpl.commonProperties);
        return validationpluginResult;
    }
    async scaffold(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.scaffold);
        try {
            const scaffoldResult = await this.appStudioPluginImpl.scaffold(ctx);
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.scaffold);
            return teamsfx_api_1.ok(scaffoldResult);
        }
        catch (error) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.scaffold, error);
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.ScaffoldFailedError.name, errors_1.AppStudioError.ScaffoldFailedError.message(error)));
        }
    }
    /**
     * Build Teams Package
     * @param {string} appDirectory - The directory contains manifest.source.json and two images
     * @returns {string} - Path of built appPackage.zip
     */
    async buildTeamsPackage(ctx, isLocalDebug) {
        var _a, _b, _c, _d, _e, _f, _g;
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.buildTeamsPackage);
        try {
            const appPackagePath = await this.appStudioPluginImpl.buildTeamsAppPackage(ctx, isLocalDebug);
            if (((_a = ctx.answers) === null || _a === void 0 ? void 0 : _a.platform) === teamsfx_api_1.Platform.CLI || ((_b = ctx.answers) === null || _b === void 0 ? void 0 : _b.platform) === teamsfx_api_1.Platform.VS) {
                const builtSuccess = [
                    { content: "(âˆš)Done: ", color: teamsfx_api_1.Colors.BRIGHT_GREEN },
                    { content: "Teams Package ", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                    { content: appPackagePath, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                    { content: " built successfully!", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                ];
                if (((_c = ctx.answers) === null || _c === void 0 ? void 0 : _c.platform) === teamsfx_api_1.Platform.VS) {
                    (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(builtSuccess);
                }
                else {
                    (_e = ctx.ui) === null || _e === void 0 ? void 0 : _e.showMessage("info", builtSuccess, false);
                }
            }
            else if (((_f = ctx.answers) === null || _f === void 0 ? void 0 : _f.platform) === teamsfx_api_1.Platform.VSCode) {
                const isWindows = process.platform === "win32";
                let builtSuccess = localizeUtils_1.getLocalizedString("plugins.appstudio.buildSucceedNotice.fallback", appPackagePath);
                if (isWindows) {
                    const folderLink = url_1.pathToFileURL(path.dirname(appPackagePath));
                    const appPackageLink = `${constants_3.VSCodeExtensionCommand.openFolder}?%5B%22${folderLink}%22%5D`;
                    builtSuccess = localizeUtils_1.getLocalizedString("plugins.appstudio.buildSucceedNotice", appPackageLink);
                }
                (_g = ctx.ui) === null || _g === void 0 ? void 0 : _g.showMessage("info", builtSuccess, false);
            }
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.buildTeamsPackage, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.ok(appPackagePath);
        }
        catch (error) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.buildTeamsPackage, error, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.TeamsPackageBuildError.name, errors_1.AppStudioError.TeamsPackageBuildError.message(error), error.helpLink));
        }
    }
    /**
     * Update manifest file
     */
    async updateManifest(ctx, isLocalDebug) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.updateManifest);
        const res = await this.appStudioPluginImpl.updateManifest(ctx, isLocalDebug);
        if (res.isErr()) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.updateManifest, res.error, this.appStudioPluginImpl.commonProperties);
            if (res.error.name === errors_1.AppStudioError.UpdateManifestCancelError.name) {
                return teamsfx_api_1.ok(teamsfx_api_1.Void);
            }
            else {
                return teamsfx_api_1.err(res.error);
            }
        }
        else {
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.updateManifest, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.ok(teamsfx_api_1.Void);
        }
    }
    async deploy(ctx) {
        var _a;
        if (ctx.answers &&
            ctx.answers[constants_1.Constants.INCLUDE_APP_MANIFEST] &&
            ctx.answers[constants_1.Constants.INCLUDE_APP_MANIFEST] == "no") {
            await ((_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.debug("Skip Teams app manifest deployment"));
            return teamsfx_api_1.ok(teamsfx_api_1.Void);
        }
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.deploy);
        const res = await this.appStudioPluginImpl.updateManifest(ctx, false);
        if (res.isErr()) {
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.deploy, res.error, this.appStudioPluginImpl.commonProperties);
            if (res.error.name === errors_1.AppStudioError.UpdateManifestCancelError.name) {
                return teamsfx_api_1.ok(teamsfx_api_1.Void);
            }
            else {
                return teamsfx_api_1.err(res.error);
            }
        }
        else {
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.deploy, this.appStudioPluginImpl.commonProperties);
            return teamsfx_api_1.ok(teamsfx_api_1.Void);
        }
    }
    /**
     * Publish the app to Teams App Catalog
     * @param {PluginContext} ctx
     * @returns {string[]} - Teams App ID in Teams app catalog
     */
    async publish(ctx) {
        var _a, _b, _c, _d, _e, _f;
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.publish);
        if (((_a = ctx.answers) === null || _a === void 0 ? void 0 : _a.platform) === teamsfx_api_1.Platform.VSCode) {
            const answer = ctx.answers[constants_1.Constants.BUILD_OR_PUBLISH_QUESTION];
            if (answer === questions_1.manuallySubmitOption.id) {
                const properties = {};
                properties[telemetry_1.TelemetryPropertyKey.manual] = String(true);
                try {
                    const appPackagePath = await this.appStudioPluginImpl.buildTeamsAppPackage(ctx, false);
                    const msg = localizeUtils_1.getLocalizedString("plugins.appstudio.adminApprovalTip", ctx.projectSettings.appName, appPackagePath);
                    (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.showMessage("info", msg, false, "OK", constants_1.Constants.READ_MORE).then((value) => {
                        var _a;
                        if (value.isOk() && value.value === constants_1.Constants.READ_MORE) {
                            (_a = ctx.ui) === null || _a === void 0 ? void 0 : _a.openUrl(constants_1.Constants.PUBLISH_GUIDE);
                        }
                    });
                    telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.publish, properties);
                    return teamsfx_api_1.ok(appPackagePath);
                }
                catch (error) {
                    telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.publish, error, properties);
                    return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.TeamsPackageBuildError.name, errors_1.AppStudioError.TeamsPackageBuildError.message(error), error.helpLink));
                }
            }
        }
        try {
            const result = await this.appStudioPluginImpl.publish(ctx);
            (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(`Publish success!`);
            if (((_d = ctx.answers) === null || _d === void 0 ? void 0 : _d.platform) === teamsfx_api_1.Platform.CLI) {
                const msg = localizeUtils_1.getLocalizedString("plugins.appstudio.publishSucceedNotice.cli", result.name, constants_1.Constants.TEAMS_ADMIN_PORTAL, constants_1.Constants.TEAMS_MANAGE_APP_DOC);
                (_e = ctx.ui) === null || _e === void 0 ? void 0 : _e.showMessage("info", msg, false);
            }
            else {
                const msg = localizeUtils_1.getLocalizedString("plugins.appstudio.publishSucceedNotice", result.name, constants_1.Constants.TEAMS_MANAGE_APP_DOC);
                const adminPortal = localizeUtils_1.getLocalizedString("plugins.appstudio.adminPortal");
                (_f = ctx.ui) === null || _f === void 0 ? void 0 : _f.showMessage("info", msg, false, adminPortal).then((value) => {
                    var _a;
                    if (value.isOk() && value.value === adminPortal) {
                        (_a = ctx.ui) === null || _a === void 0 ? void 0 : _a.openUrl(constants_1.Constants.TEAMS_ADMIN_PORTAL);
                    }
                });
            }
            const properties = this.appStudioPluginImpl.commonProperties;
            properties[telemetry_1.TelemetryPropertyKey.updateExistingApp] = String(result.update);
            properties[telemetry_1.TelemetryPropertyKey.publishedAppId] = String(result.id);
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.publish, properties);
            return teamsfx_api_1.ok(result.id);
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.SystemError || error instanceof teamsfx_api_1.UserError) {
                if (error.name === errors_1.AppStudioError.TeamsAppPublishCancelError.name) {
                    telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.publish);
                    return teamsfx_api_1.ok(undefined);
                }
                const innerError = error.innerError ? `innerError: ${error.innerError}` : "";
                error.message = `${error.message} ${innerError}`;
                telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.publish, error, this.appStudioPluginImpl.commonProperties);
                return teamsfx_api_1.err(error);
            }
            else {
                const publishFailed = new teamsfx_api_1.SystemError({
                    name: errors_1.AppStudioError.TeamsAppPublishFailedError.name,
                    message: error.message,
                    source: constants_1.Constants.PLUGIN_NAME,
                    error: error,
                });
                telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.publish, publishFailed, this.appStudioPluginImpl.commonProperties);
                return teamsfx_api_1.err(publishFailed);
            }
        }
    }
    async postLocalDebug(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.localDebug);
        const localTeamsAppId = await this.appStudioPluginImpl.postLocalDebug(ctx);
        if (localTeamsAppId.isOk()) {
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.localDebug);
            return localTeamsAppId;
        }
        else {
            const error = localTeamsAppId.error;
            if (error instanceof teamsfx_api_1.SystemError || error instanceof teamsfx_api_1.UserError) {
                telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.localDebug, error);
                return teamsfx_api_1.err(error);
            }
            else {
                const updateFailedError = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.LocalAppIdUpdateFailedError.name, errors_1.AppStudioError.LocalAppIdUpdateFailedError.message(error));
                telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.localDebug, updateFailedError);
                return teamsfx_api_1.err(updateFailedError);
            }
        }
    }
    async checkPermission(ctx, userInfo) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.checkPermission);
        try {
            const checkPermissionResult = await this.appStudioPluginImpl.checkPermission(ctx, userInfo);
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.checkPermission);
            return teamsfx_api_1.ok(checkPermissionResult);
        }
        catch (error) {
            const fxError = error.name && error.name >= 400 && error.name < 500
                ? results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.CheckPermissionFailedError.name, errors_1.AppStudioError.CheckPermissionFailedError.message(error))
                : results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.CheckPermissionFailedError.name, errors_1.AppStudioError.CheckPermissionFailedError.message(error));
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.checkPermission, fxError);
            return teamsfx_api_1.err(fxError);
        }
    }
    async grantPermission(ctx, userInfo) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.grantPermission);
        try {
            const grantPermissionResult = await this.appStudioPluginImpl.grantPermission(ctx, userInfo);
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.grantPermission);
            return teamsfx_api_1.ok(grantPermissionResult);
        }
        catch (error) {
            const fxError = error.name && error.name >= 400 && error.name < 500
                ? results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.GrantPermissionFailedError.name, errors_1.AppStudioError.GrantPermissionFailedError.message(error.message))
                : results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.GrantPermissionFailedError.name, errors_1.AppStudioError.GrantPermissionFailedError.message(error.message));
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.grantPermission, fxError);
            return teamsfx_api_1.err(fxError);
        }
    }
    async listCollaborator(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.listCollaborator);
        try {
            const listCollaborator = await this.appStudioPluginImpl.listCollaborator(ctx);
            telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.listCollaborator);
            return teamsfx_api_1.ok(listCollaborator);
        }
        catch (error) {
            const fxError = error.name && error.name >= 400 && error.name < 500
                ? results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.ListCollaboratorFailedError.name, errors_1.AppStudioError.ListCollaboratorFailedError.message(error))
                : results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.ListCollaboratorFailedError.name, errors_1.AppStudioError.ListCollaboratorFailedError.message(error));
            telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.listCollaborator, fxError);
            return teamsfx_api_1.err(fxError);
        }
    }
    async executeUserTask(func, ctx) {
        var _a;
        if (func.method === "validateManifest") {
            const isLocalDebug = ((_a = func === null || func === void 0 ? void 0 : func.params) === null || _a === void 0 ? void 0 : _a.type) === "localDebug";
            return await this.validateManifest(ctx, isLocalDebug);
        }
        else if (func.method === "buildPackage") {
            if (func.params && func.params.type) {
                const isLocalDebug = func.params.type === "localDebug";
                return await this.buildTeamsPackage(ctx, isLocalDebug);
            }
            return await this.buildTeamsPackage(ctx, false);
        }
        else if (func.method === "getManifestTemplatePath") {
            const filePath = await manifestTemplate_1.getManifestTemplatePath(ctx.root);
            return teamsfx_api_1.ok(filePath);
        }
        else if (func.method === "updateManifest") {
            return await this.updateManifest(ctx, func.params && func.params.envName === "local");
        }
        return teamsfx_api_1.err(new teamsfx_api_1.SystemError({
            name: "FunctionRouterError",
            message: localizeUtils_1.getDefaultString("error.appstudio.executeUserTaskRouteFailed", JSON.stringify(func)),
            displayMessage: localizeUtils_1.getLocalizedString("error.appstudio.executeUserTaskRouteFailed", JSON.stringify(func)),
            source: constants_1.Constants.PLUGIN_NAME,
            issueLink: constants_2.Links.ISSUE_LINK,
        }));
    }
};
AppStudioPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.AppStudioPlugin)
], AppStudioPlugin);
exports.AppStudioPlugin = AppStudioPlugin;
exports.default = new AppStudioPlugin();
//# sourceMappingURL=index.js.map