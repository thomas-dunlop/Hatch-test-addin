"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioPluginV2 = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const common_1 = require("../../../../common");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const utils4v2_1 = require("../../utils4v2");
let AppStudioPluginV2 = class AppStudioPluginV2 {
    constructor() {
        this.name = "fx-resource-appstudio";
        this.displayName = "App Studio";
        this.deploy = common_1.isDeployManifestEnabled() ? this._deploy : undefined;
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        return this.plugin.activate(solutionSettings);
    }
    async scaffoldSourceCode(ctx, inputs) {
        return await utils4v2_1.scaffoldSourceCodeAdapter(ctx, inputs, this.plugin);
    }
    async _deploy(ctx, inputs, envInfo, tokenProvider) {
        return utils4v2_1.deployAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.provisionResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async configureResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.configureResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async configureLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo) {
        return await utils4v2_1.configureLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin, envInfo);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        return await utils4v2_1.executeUserTaskAdapter(ctx, inputs, func, localSettings, envInfo, tokenProvider, this.plugin);
    }
    async getQuestions(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.getQuestionsAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async publishApplication(ctx, inputs, envInfo, tokenProvider) {
        const pluginContext = utils4v2_1.convert2PluginContext(this.plugin.name, ctx, inputs);
        utils4v2_1.setEnvInfoV1ByStateV2(this.plugin.name, pluginContext, envInfo);
        pluginContext.m365TokenProvider = tokenProvider;
        // run question model for publish
        // const getQuestionRes = await this.plugin.getQuestions(Stage.publish, pluginContext);
        // if (getQuestionRes.isOk()) {
        //   const node = getQuestionRes.value;
        //   if (node) {
        //     const res = await traverse(node, inputs, ctx.userInteraction);
        //     if (res.isErr()) {
        //       return err(res.error);
        //     }
        //   }
        // }
        //TODO pass provisionInputConfig into config??
        const postRes = await this.plugin.publish(pluginContext);
        if (postRes.isErr()) {
            return teamsfx_api_1.err(postRes.error);
        }
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async grantPermission(ctx, inputs, envInfo, tokenProvider, userInfo) {
        return utils4v2_1.collaborationApiAdaptor(ctx, inputs, envInfo, tokenProvider, userInfo, this.plugin, "grantPermission");
    }
    async checkPermission(ctx, inputs, envInfo, tokenProvider, userInfo) {
        return utils4v2_1.collaborationApiAdaptor(ctx, inputs, envInfo, tokenProvider, userInfo, this.plugin, "checkPermission");
    }
    async listCollaborator(ctx, inputs, envInfo, tokenProvider, userInfo) {
        return utils4v2_1.collaborationApiAdaptor(ctx, inputs, envInfo, tokenProvider, userInfo, this.plugin, "listCollaborator");
    }
};
tslib_1.__decorate([
    typedi_1.Inject(ResourcePluginContainer_1.ResourcePlugins.AppStudioPlugin),
    tslib_1.__metadata("design:type", Object)
], AppStudioPluginV2.prototype, "plugin", void 0);
AppStudioPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.AppStudioPlugin)
], AppStudioPluginV2);
exports.AppStudioPluginV2 = AppStudioPluginV2;
//# sourceMappingURL=index.js.map