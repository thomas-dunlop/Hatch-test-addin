import { M365TokenProvider, Plugin, Func, FxError, Inputs, Json, ProjectSettings, QTreeNode, Result, TokenProvider, v2, Void } from "@microsoft/teamsfx-api";
import { Context, DeepReadonly, EnvInfoV2, ProvisionInputs, ResourcePlugin } from "@microsoft/teamsfx-api/build/v2";
export declare class AppStudioPluginV2 implements ResourcePlugin {
    name: string;
    displayName: string;
    plugin: Plugin;
    activate(projectSettings: ProjectSettings): boolean;
    scaffoldSourceCode(ctx: Context, inputs: Inputs): Promise<Result<Void, FxError>>;
    deploy: ((ctx: v2.Context, inputs: v2.DeploymentInputs, envInfo: v2.DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider) => Promise<Result<Void, FxError>>) | undefined;
    _deploy(ctx: v2.Context, inputs: v2.DeploymentInputs, envInfo: v2.DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    provisionResource(ctx: Context, inputs: ProvisionInputs, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    configureResource(ctx: Context, inputs: Readonly<ProvisionInputs>, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    configureLocalResource(ctx: Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, envInfo?: EnvInfoV2): Promise<Result<Void, FxError>>;
    executeUserTask(ctx: Context, inputs: Inputs, func: Func, localSettings: Json, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider): Promise<Result<unknown, FxError>>;
    getQuestions(ctx: Context, inputs: Inputs, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider): Promise<Result<QTreeNode | undefined, FxError>>;
    publishApplication(ctx: Context, inputs: Inputs, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: M365TokenProvider): Promise<Result<Void, FxError>>;
    grantPermission(ctx: Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, userInfo: Json): Promise<Result<Json, FxError>>;
    checkPermission(ctx: Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, userInfo: Json): Promise<Result<Json, FxError>>;
    listCollaborator(ctx: Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, userInfo: Json): Promise<Result<Json, FxError>>;
}
//# sourceMappingURL=index.d.ts.map