"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryUtils = exports.TelemetryEventName = exports.TelemetryPropertyKey = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./../constants");
const constants_2 = require("../../../solution/fx-solution/constants");
var TelemetryPropertyKey;
(function (TelemetryPropertyKey) {
    TelemetryPropertyKey["component"] = "component";
    TelemetryPropertyKey["errorType"] = "error-type";
    TelemetryPropertyKey["errorCode"] = "error-code";
    TelemetryPropertyKey["errorMessage"] = "error-message";
    TelemetryPropertyKey["validationResult"] = "validation-result";
    TelemetryPropertyKey["updateExistingApp"] = "update";
    TelemetryPropertyKey["success"] = "success";
    TelemetryPropertyKey["appId"] = "appid";
    TelemetryPropertyKey["tenantId"] = "tenant-id";
    TelemetryPropertyKey["publishedAppId"] = "published-app-id";
    TelemetryPropertyKey["customizedKeys"] = "customized-manifest-keys";
    TelemetryPropertyKey["manual"] = "manual";
    TelemetryPropertyKey["statusCode"] = "status-code";
    TelemetryPropertyKey["url"] = "url";
    TelemetryPropertyKey["method"] = "method";
})(TelemetryPropertyKey = exports.TelemetryPropertyKey || (exports.TelemetryPropertyKey = {}));
var TelemetryPropertyValue;
(function (TelemetryPropertyValue) {
    TelemetryPropertyValue["UserError"] = "user";
    TelemetryPropertyValue["SystemError"] = "system";
    TelemetryPropertyValue["success"] = "yes";
    TelemetryPropertyValue["failure"] = "no";
})(TelemetryPropertyValue || (TelemetryPropertyValue = {}));
var TelemetryEventName;
(function (TelemetryEventName) {
    TelemetryEventName["scaffold"] = "scaffold";
    TelemetryEventName["validateManifest"] = "validate-manifest";
    TelemetryEventName["buildTeamsPackage"] = "build";
    TelemetryEventName["publish"] = "publish";
    TelemetryEventName["deploy"] = "deploy";
    TelemetryEventName["updateManifest"] = "update-manifest";
    TelemetryEventName["provision"] = "provision";
    TelemetryEventName["provisionManifest"] = "provision-manifest";
    TelemetryEventName["postProvision"] = "post-provision";
    TelemetryEventName["checkPermission"] = "check-permission";
    TelemetryEventName["grantPermission"] = "grant-permission";
    TelemetryEventName["listCollaborator"] = "list-collaborator";
    TelemetryEventName["localDebug"] = "local-debug";
    TelemetryEventName["init"] = "init";
    TelemetryEventName["addCapability"] = "add-capability";
    TelemetryEventName["loadManifest"] = "load-manifest";
    TelemetryEventName["saveManifest"] = "save-manifest";
    TelemetryEventName["appStudioApi"] = "app-studio-api";
})(TelemetryEventName = exports.TelemetryEventName || (exports.TelemetryEventName = {}));
class TelemetryUtils {
    static init(ctx) {
        TelemetryUtils.ctx = ctx;
    }
    static sendStartEvent(eventName, _properties, measurements) {
        var _a, _b, _c, _d, _e;
        const properties = Object.assign({}, _properties);
        properties[TelemetryPropertyKey.component] = constants_1.Constants.PLUGIN_NAME;
        const tenantId = (_b = (_a = this.ctx.envInfo) === null || _a === void 0 ? void 0 : _a.state.get(constants_2.PluginNames.SOLUTION)) === null || _b === void 0 ? void 0 : _b.get(constants_2.REMOTE_TEAMS_APP_TENANT_ID);
        if (tenantId) {
            properties[TelemetryPropertyKey.tenantId] = tenantId;
        }
        const teamsAppId = (_d = (_c = this.ctx.envInfo) === null || _c === void 0 ? void 0 : _c.state.get(constants_2.PluginNames.APPST)) === null || _d === void 0 ? void 0 : _d.get(constants_1.Constants.TEAMS_APP_ID);
        if (teamsAppId) {
            properties[TelemetryPropertyKey.appId] = teamsAppId;
        }
        (_e = TelemetryUtils.ctx.telemetryReporter) === null || _e === void 0 ? void 0 : _e.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(eventName, _properties, measurements) {
        var _a, _b, _c, _d, _e;
        const properties = Object.assign({}, _properties);
        properties[TelemetryPropertyKey.component] = constants_1.Constants.PLUGIN_NAME;
        properties[TelemetryPropertyKey.success] = TelemetryPropertyValue.success;
        const tenantId = (_b = (_a = this.ctx.envInfo) === null || _a === void 0 ? void 0 : _a.state.get(constants_2.PluginNames.SOLUTION)) === null || _b === void 0 ? void 0 : _b.get(constants_2.REMOTE_TEAMS_APP_TENANT_ID);
        if (tenantId) {
            properties[TelemetryPropertyKey.tenantId] = tenantId;
        }
        const teamsAppId = (_d = (_c = this.ctx.envInfo) === null || _c === void 0 ? void 0 : _c.state.get(constants_2.PluginNames.APPST)) === null || _d === void 0 ? void 0 : _d.get(constants_1.Constants.TEAMS_APP_ID);
        if (teamsAppId) {
            properties[TelemetryPropertyKey.appId] = teamsAppId;
        }
        (_e = TelemetryUtils.ctx.telemetryReporter) === null || _e === void 0 ? void 0 : _e.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, error, _properties, measurements) {
        var _a, _b, _c, _d, _e;
        const properties = Object.assign({}, _properties);
        properties[TelemetryPropertyKey.component] = constants_1.Constants.PLUGIN_NAME;
        if (error instanceof teamsfx_api_1.SystemError) {
            properties[TelemetryPropertyKey.errorType] = TelemetryPropertyValue.SystemError;
        }
        else if (error instanceof teamsfx_api_1.UserError) {
            properties[TelemetryPropertyKey.errorType] = TelemetryPropertyValue.UserError;
        }
        properties[TelemetryPropertyKey.errorCode] = `${error.source}.${error.name}`;
        properties[TelemetryPropertyKey.errorMessage] = error.message;
        properties[TelemetryPropertyKey.success] = TelemetryPropertyValue.failure;
        const tenantId = (_b = (_a = this.ctx.envInfo) === null || _a === void 0 ? void 0 : _a.state.get(constants_2.PluginNames.SOLUTION)) === null || _b === void 0 ? void 0 : _b.get(constants_2.REMOTE_TEAMS_APP_TENANT_ID);
        if (tenantId) {
            properties[TelemetryPropertyKey.tenantId] = tenantId;
        }
        const teamsAppId = (_d = (_c = this.ctx.envInfo) === null || _c === void 0 ? void 0 : _c.state.get(constants_2.PluginNames.APPST)) === null || _d === void 0 ? void 0 : _d.get(constants_1.Constants.TEAMS_APP_ID);
        if (teamsAppId) {
            properties[TelemetryPropertyKey.appId] = teamsAppId;
        }
        (_e = TelemetryUtils.ctx.telemetryReporter) === null || _e === void 0 ? void 0 : _e.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
}
exports.TelemetryUtils = TelemetryUtils;
//# sourceMappingURL=telemetry.js.map