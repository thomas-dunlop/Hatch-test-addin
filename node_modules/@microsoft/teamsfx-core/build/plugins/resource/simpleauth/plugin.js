"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleAuthPluginImpl = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const result_1 = require("./result");
const common_1 = require("./utils/common");
const dialog_1 = require("./utils/dialog");
const telemetry_1 = require("./utils/telemetry");
const webAppClient_1 = require("./webAppClient");
const path = tslib_1.__importStar(require("path"));
const folder_1 = require("../../../folder");
const localSettingsConstants_1 = require("../../../common/localSettingsConstants");
const constants_2 = require("../../../common/constants");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const tools_1 = require("../../../common/tools");
const localStateConstants_1 = require("../../../common/localStateConstants");
class SimpleAuthPluginImpl {
    async localDebug(ctx) {
        var _a;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartLocalDebug);
        const simpleAuthFilePath = common_1.Utils.getSimpleAuthFilePath();
        (_a = ctx.envInfo.state
            .get(constants_1.Constants.SimpleAuthPlugin.id)) === null || _a === void 0 ? void 0 : _a.set(localSettingsConstants_1.LocalSettingsSimpleAuthKeys.SimpleAuthFilePath, simpleAuthFilePath);
        await common_1.Utils.downloadZip(simpleAuthFilePath);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndLocalDebug);
        return result_1.ResultFactory.Success();
    }
    async postLocalDebug(ctx) {
        var _a;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartPostLocalDebug);
        const configs = common_1.Utils.getWebAppConfig(ctx, false);
        const configArray = [];
        for (const [key, value] of Object.entries(configs)) {
            configArray.push(`${key}="${value}"`);
        }
        (_a = ctx.envInfo.state
            .get(constants_1.Constants.SimpleAuthPlugin.id)) === null || _a === void 0 ? void 0 : _a.set(localStateConstants_1.LocalStateSimpleAuthKeys.EnvironmentVariableParams, configArray.join(" "));
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndPostLocalDebug);
        return result_1.ResultFactory.Success();
    }
    async provision(ctx) {
        var _a, _b, _c, _d;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartProvision);
        await this.initWebAppClient(ctx);
        dialog_1.DialogUtils.progressBar = (_a = ctx.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(constants_1.Constants.ProgressBar.provision.title, Object.keys(constants_1.Constants.ProgressBar.provision).length - 1);
        await ((_b = dialog_1.DialogUtils.progressBar) === null || _b === void 0 ? void 0 : _b.start(constants_1.Constants.ProgressBar.start));
        const webApp = await this.webAppClient.createWebApp();
        await ((_c = dialog_1.DialogUtils.progressBar) === null || _c === void 0 ? void 0 : _c.next(constants_1.Constants.ProgressBar.provision.zipDeploy));
        const simpleAuthFilePath = common_1.Utils.getSimpleAuthFilePath();
        await common_1.Utils.downloadZip(simpleAuthFilePath);
        await this.webAppClient.zipDeploy(simpleAuthFilePath);
        ctx.config.set(constants_1.Constants.SimpleAuthPlugin.configKeys.endpoint, webApp.endpoint);
        await ((_d = dialog_1.DialogUtils.progressBar) === null || _d === void 0 ? void 0 : _d.end(true));
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndProvision, {
            [constants_1.Telemetry.skuName]: webApp.skuName,
        });
        return result_1.ResultFactory.Success();
    }
    async postProvision(ctx) {
        var _a, _b, _c, _d;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartPostProvision);
        dialog_1.DialogUtils.progressBar = (_a = ctx.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(constants_1.Constants.ProgressBar.postProvision.title, Object.keys(constants_1.Constants.ProgressBar.postProvision).length - 1);
        await ((_b = dialog_1.DialogUtils.progressBar) === null || _b === void 0 ? void 0 : _b.start(constants_1.Constants.ProgressBar.start));
        await ((_c = dialog_1.DialogUtils.progressBar) === null || _c === void 0 ? void 0 : _c.next(constants_1.Constants.ProgressBar.postProvision.updateWebApp));
        const configs = common_1.Utils.getWebAppConfig(ctx, false);
        await ((_d = dialog_1.DialogUtils.progressBar) === null || _d === void 0 ? void 0 : _d.end(true));
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndPostProvision);
        return result_1.ResultFactory.Success();
    }
    async updateArmTemplates(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartUpdateArmTemplates);
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDirectory = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "simpleauth", "bicep");
        const configModuleFilePath = path.join(bicepTemplateDirectory, constants_1.Constants.configModuleTemplateFileName);
        const configModules = await tools_1.generateBicepFromFile(configModuleFilePath, pluginCtx);
        const result = {
            Reference: {
                skuName: constants_1.Constants.SimpleAuthBicepOutputSkuName,
                endpoint: constants_1.Constants.SimpleAuthBicepOutputEndpoint,
            },
            Configuration: {
                Modules: { simpleAuth: configModules },
            },
        };
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndUpdateArmTemplates);
        return result_1.ResultFactory.Success(result);
    }
    async generateArmTemplates(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartGenerateArmTemplates);
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDirectory = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "simpleauth", "bicep");
        const provisionModuleResult = path.join(bicepTemplateDirectory, constants_1.Constants.provisionModuleTemplateFileName);
        const configModuleFilePath = path.join(bicepTemplateDirectory, constants_1.Constants.configModuleTemplateFileName);
        const provisionOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_2.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(provisionModuleResult, pluginCtx);
        const configOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_2.Bicep.ConfigFileName), pluginCtx);
        const configModule = await tools_1.generateBicepFromFile(configModuleFilePath, pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { simpleAuth: provisionModules },
            },
            Configuration: {
                Orchestration: configOrchestration,
                Modules: { simpleAuth: configModule },
            },
            Reference: {
                skuName: constants_1.Constants.SimpleAuthBicepOutputSkuName,
                endpoint: constants_1.Constants.SimpleAuthBicepOutputEndpoint,
            },
        };
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndGenerateArmTemplates);
        return result_1.ResultFactory.Success(result);
    }
    async initWebAppClient(ctx) {
        const credentials = await ctx.azureAccountProvider.getAccountCredentialAsync();
        if (!credentials) {
            throw result_1.ResultFactory.SystemError(errors_1.UnauthenticatedError.name, errors_1.UnauthenticatedError.message());
        }
        const resourceNameSuffix = common_1.Utils.getConfigValueWithValidation(ctx, constants_1.Constants.SolutionPlugin.id, constants_1.Constants.SolutionPlugin.configKeys.resourceNameSuffix);
        const subscriptionId = common_1.Utils.getConfigValueWithValidation(ctx, constants_1.Constants.SolutionPlugin.id, constants_1.Constants.SolutionPlugin.configKeys.subscriptionId);
        const resourceGroupName = common_1.Utils.getConfigValueWithValidation(ctx, constants_1.Constants.SolutionPlugin.id, constants_1.Constants.SolutionPlugin.configKeys.resourceGroupName);
        const location = common_1.Utils.getConfigValueWithValidation(ctx, constants_1.Constants.SolutionPlugin.id, constants_1.Constants.SolutionPlugin.configKeys.location);
        const webAppName = common_1.Utils.generateResourceName(ctx.projectSettings.appName, resourceNameSuffix); // appName will be normalized in generateResourceName(), so we don't do any conversion here.
        const appServicePlanName = webAppName;
        this.webAppClient = new webAppClient_1.WebAppClient(credentials, subscriptionId, resourceGroupName, appServicePlanName, webAppName, location, ctx);
    }
}
exports.SimpleAuthPluginImpl = SimpleAuthPluginImpl;
//# sourceMappingURL=plugin.js.map