"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleAuthPlugin = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const plugin_1 = require("./plugin");
const result_1 = require("./result");
const dialog_1 = require("./utils/dialog");
const telemetry_1 = require("./utils/telemetry");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
require("./v2");
let SimpleAuthPlugin = class SimpleAuthPlugin {
    constructor() {
        this.name = "fx-resource-simple-auth";
        this.displayName = "Simple Auth";
        this.simpleAuthPluginImpl = new plugin_1.SimpleAuthPluginImpl();
    }
    activate(solutionSettings) {
        var _a;
        if ((_a = solutionSettings === null || solutionSettings === void 0 ? void 0 : solutionSettings.activeResourcePlugins) === null || _a === void 0 ? void 0 : _a.includes(constants_1.Constants.SimpleAuthPlugin.id)) {
            return true;
        }
        else {
            return false;
        }
    }
    async localDebug(ctx) {
        return this.runWithSimpleAuthError(() => this.simpleAuthPluginImpl.localDebug(ctx), ctx, constants_1.Messages.EndLocalDebug.telemetry);
    }
    async postLocalDebug(ctx) {
        return this.runWithSimpleAuthError(() => this.simpleAuthPluginImpl.postLocalDebug(ctx), ctx, constants_1.Messages.EndPostLocalDebug.telemetry);
    }
    async provision(ctx) {
        return result_1.ResultFactory.Success();
    }
    async postProvision(ctx) {
        return this.runWithSimpleAuthError(() => this.simpleAuthPluginImpl.postProvision(ctx), ctx, constants_1.Messages.EndPostProvision.telemetry);
    }
    async updateArmTemplates(ctx) {
        return this.runWithSimpleAuthError(() => this.simpleAuthPluginImpl.updateArmTemplates(ctx), ctx, constants_1.Messages.EndUpdateArmTemplates.telemetry);
    }
    async generateArmTemplates(ctx) {
        return this.runWithSimpleAuthError(() => this.simpleAuthPluginImpl.generateArmTemplates(ctx), ctx, constants_1.Messages.EndGenerateArmTemplates.telemetry);
    }
    async runWithSimpleAuthError(fn, ctx, stage) {
        var _a, _b;
        try {
            return await fn();
        }
        catch (e) {
            await ((_a = dialog_1.DialogUtils.progressBar) === null || _a === void 0 ? void 0 : _a.end(false));
            if (!(e instanceof Error || e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError)) {
                e = new Error(e.toString());
            }
            (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.error(e.message);
            telemetry_1.TelemetryUtils.init(ctx);
            if (e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError) {
                telemetry_1.TelemetryUtils.sendErrorEvent(stage, e.name, e instanceof teamsfx_api_1.UserError ? constants_1.Telemetry.userError : constants_1.Telemetry.systemError, e.message);
                return teamsfx_api_1.err(e);
            }
            else {
                telemetry_1.TelemetryUtils.sendErrorEvent(stage, errors_1.UnhandledError.name, constants_1.Telemetry.systemError, errors_1.UnhandledError.message(e === null || e === void 0 ? void 0 : e.message)[0]);
                return teamsfx_api_1.err(result_1.ResultFactory.SystemError(errors_1.UnhandledError.name, errors_1.UnhandledError.message(e === null || e === void 0 ? void 0 : e.message), e));
            }
        }
    }
};
SimpleAuthPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.SimpleAuthPlugin)
], SimpleAuthPlugin);
exports.SimpleAuthPlugin = SimpleAuthPlugin;
exports.default = new SimpleAuthPlugin();
//# sourceMappingURL=index.js.map