"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebAppClient = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const arm_appservice_1 = require("@azure/arm-appservice");
const axios_1 = tslib_1.__importDefault(require("axios"));
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const result_1 = require("./result");
const dialog_1 = require("./utils/dialog");
const arm_resources_1 = require("@azure/arm-resources");
const common_1 = require("./utils/common");
class WebAppClient {
    constructor(credentials, subscriptionId, resourceGroupName, appServicePlanName, webAppName, location, ctx) {
        this.credentials = credentials;
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.appServicePlanName = appServicePlanName;
        this.webAppName = webAppName;
        this.location = location;
        this.webSiteManagementClient = new arm_appservice_1.WebSiteManagementClient(this.credentials, this.subscriptionId);
        this.resourceManagementClient = new arm_resources_1.Providers(new arm_resources_1.ResourceManagementClientContext(this.credentials, this.subscriptionId));
        this.ctx = ctx;
    }
    async createWebApp() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        let skuName;
        try {
            // Check and register resource provider
            try {
                (_a = dialog_1.DialogUtils.progressBar) === null || _a === void 0 ? void 0 : _a.next(constants_1.Constants.ProgressBar.provision.registerResourceProvider);
                await Promise.all(constants_1.Constants.RequiredResourceProviders.map(async (namespace) => await this.resourceManagementClient.register(namespace)));
            }
            catch (error) {
                (_b = this.ctx.logProvider) === null || _b === void 0 ? void 0 : _b.info(constants_1.Messages.getLog(constants_1.Constants.RegisterRersourceProviderFailed(error === null || error === void 0 ? void 0 : error.message)));
            }
            (_c = dialog_1.DialogUtils.progressBar) === null || _c === void 0 ? void 0 : _c.next(constants_1.Constants.ProgressBar.provision.createAppServicePlan);
            skuName = this.getSkuName();
            const appServicePlan = await this.webSiteManagementClient.appServicePlans.createOrUpdate(this.resourceGroupName, this.appServicePlanName, {
                location: this.location,
                sku: {
                    name: skuName,
                },
            });
            (_d = this.ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(constants_1.Messages.getLog("appServicePlan is created: " + appServicePlan.name));
        }
        catch (error) {
            if ((_e = error === null || error === void 0 ? void 0 : error.message) === null || _e === void 0 ? void 0 : _e.includes(constants_1.Constants.FreeServerFarmsQuotaErrorFromAzure)) {
                throw result_1.ResultFactory.UserError(errors_1.FreeServerFarmsQuotaError.name, errors_1.FreeServerFarmsQuotaError.message(constants_1.Constants.FreeServerFarmsQuotaErrorToUser), error, undefined, constants_1.Constants.HelpLink);
            }
            if ((_f = error === null || error === void 0 ? void 0 : error.message) === null || _f === void 0 ? void 0 : _f.includes(constants_1.Constants.MissingSubscriptionRegistrationErrorFromAzure)) {
                throw result_1.ResultFactory.UserError(errors_1.MissingSubscriptionRegistrationError.name, errors_1.MissingSubscriptionRegistrationError.message(error === null || error === void 0 ? void 0 : error.message), error, undefined, constants_1.Constants.HelpLink);
            }
            if (common_1.Utils.isUserError(error)) {
                throw result_1.ResultFactory.UserError(errors_1.CreateAppServicePlanError.name, errors_1.CreateAppServicePlanError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
            else {
                throw result_1.ResultFactory.SystemError(errors_1.CreateAppServicePlanError.name, errors_1.CreateAppServicePlanError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
        }
        try {
            (_g = dialog_1.DialogUtils.progressBar) === null || _g === void 0 ? void 0 : _g.next(constants_1.Constants.ProgressBar.provision.createWebApp);
            const webApp = await this.webSiteManagementClient.webApps.createOrUpdate(this.resourceGroupName, this.webAppName, { location: this.location, serverFarmId: this.appServicePlanName });
            (_h = this.ctx.logProvider) === null || _h === void 0 ? void 0 : _h.info(constants_1.Messages.getLog("webApp is created: " + webApp.name));
            return {
                endpoint: `https://${webApp.defaultHostName}`,
                skuName,
            };
        }
        catch (error) {
            if (common_1.Utils.isUserError(error)) {
                throw result_1.ResultFactory.UserError(errors_1.CreateWebAppError.name, errors_1.CreateWebAppError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
            else {
                throw result_1.ResultFactory.SystemError(errors_1.CreateWebAppError.name, errors_1.CreateWebAppError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
        }
    }
    async zipDeploy(filePath) {
        var _a;
        const token = await this.credentials.getToken();
        try {
            const zipdeployResult = await axios_1.default({
                method: "POST",
                url: `https://${this.webAppName}.scm.azurewebsites.net/api/zipdeploy`,
                headers: {
                    Authorization: `Bearer ${token.accessToken}`,
                },
                data: await fs.readFile(filePath),
                maxContentLength: Infinity,
                maxBodyLength: Infinity,
            });
            (_a = this.ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_1.Messages.getLog("zipdeploy is done: " + zipdeployResult.status));
        }
        catch (error) {
            if (common_1.Utils.isUserError(error)) {
                throw result_1.ResultFactory.UserError(errors_1.ZipDeployError.name, errors_1.ZipDeployError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
            else {
                throw result_1.ResultFactory.SystemError(errors_1.ZipDeployError.name, errors_1.ZipDeployError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
        }
    }
    async configWebApp(properties) {
        try {
            await this.webSiteManagementClient.webApps.updateApplicationSettings(this.resourceGroupName, this.webAppName, {
                properties,
            });
        }
        catch (error) {
            if (common_1.Utils.isUserError(error)) {
                throw result_1.ResultFactory.UserError(errors_1.UpdateApplicationSettingsError.name, errors_1.UpdateApplicationSettingsError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
            else {
                throw result_1.ResultFactory.SystemError(errors_1.UpdateApplicationSettingsError.name, errors_1.UpdateApplicationSettingsError.message(error === null || error === void 0 ? void 0 : error.message), error);
            }
        }
    }
    /**
     * Allow users to set SKU name for App Service Plan as only 10 free App Service Plan is allowed in a Subscription.
     * The order is:
     * 1. 'skuName' config of 'fx-resource-simple-auth' in env.default.json file
     * 2. 'SIMPLE_AUTH_SKU_NAME' environment variable
     * 3. 'F1' Free Tier
     */
    getSkuName() {
        var _a;
        const skuName = this.ctx.config.get(constants_1.Constants.SimpleAuthPlugin.configKeys.skuName);
        return (_a = skuName !== null && skuName !== void 0 ? skuName : process.env.SIMPLE_AUTH_SKU_NAME) !== null && _a !== void 0 ? _a : "F1";
    }
}
exports.WebAppClient = WebAppClient;
//# sourceMappingURL=webAppClient.js.map