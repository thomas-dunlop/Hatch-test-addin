// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalEnvProvider = void 0;
const tslib_1 = require("tslib");
const dotenv = tslib_1.__importStar(require("dotenv"));
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./constants");
// Manage local envs for legacy project. For multi-env supported one, see `localEnvMulti.ts`.
class LocalEnvProvider {
    constructor(workspaceFolder) {
        this.localEnvFilePath = `${workspaceFolder}/.${teamsfx_api_1.ConfigFolderName}/local.env`;
    }
    async loadLocalEnv(includeFrontend, includeBackend, includeBot, includeAuth) {
        if (await fs.pathExists(this.localEnvFilePath)) {
            return dotenv.parse(await fs.readFile(this.localEnvFilePath));
        }
        else {
            return this.initialLocalEnvs(includeFrontend, includeBackend, includeBot, includeAuth);
        }
    }
    async saveLocalEnv(envs) {
        await fs.createFile(this.localEnvFilePath);
        await fs.writeFile(this.localEnvFilePath, "");
        if (envs) {
            const entries = Object.entries(envs);
            for (const [key, value] of entries) {
                await fs.appendFile(this.localEnvFilePath, `${key}=${value}${os.EOL}`);
            }
        }
    }
    initialLocalEnvs(includeFrontend, includeBackend, includeBot, includeAuth) {
        const localEnvs = {};
        let keys;
        if (includeFrontend) {
            if (includeAuth) {
                // auth is only required by frontend
                keys = Object.values(constants_1.LocalEnvAuthKeys);
                for (const key of keys) {
                    // initial with empty string
                    localEnvs[key] = "";
                }
                // setup const environment variables
                localEnvs[constants_1.LocalEnvAuthKeys.Urls] = "http://localhost:5000";
                keys = Object.values(constants_1.LocalEnvFrontendKeys);
                for (const key of keys) {
                    // initial with empty string
                    localEnvs[key] = "";
                }
            }
            // setup const environment variables
            localEnvs[constants_1.LocalEnvFrontendKeys.Browser] = "none";
            localEnvs[constants_1.LocalEnvFrontendKeys.Https] = "true";
            if (includeBackend) {
                keys = Object.values(constants_1.LocalEnvBackendKeys);
                for (const key of keys) {
                    // initial with empty string
                    localEnvs[key] = "";
                }
                // setup const environment variables
                localEnvs[constants_1.LocalEnvBackendKeys.FuncWorkerRuntime] = "node";
            }
        }
        if (includeBot) {
            keys = Object.values(constants_1.LocalEnvBotKeys);
            for (const key of keys) {
                // initial with empty string
                localEnvs[key] = "";
            }
        }
        return localEnvs;
    }
}
exports.LocalEnvProvider = LocalEnvProvider;
//# sourceMappingURL=localEnv.js.map