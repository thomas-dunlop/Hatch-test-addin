// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectSettingLoader = void 0;
const constants_1 = require("./constants");
class ProjectSettingLoader {
    static includeAuth(ctx) {
        var _a, _b;
        const selectedPlugins = (_b = (_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings) === null || _b === void 0 ? void 0 : _b.activeResourcePlugins;
        const includeAad = selectedPlugins === null || selectedPlugins === void 0 ? void 0 : selectedPlugins.some((pluginName) => pluginName === constants_1.AadPlugin.Name);
        const includeSimpleAuth = selectedPlugins === null || selectedPlugins === void 0 ? void 0 : selectedPlugins.some((pluginName) => pluginName === constants_1.RuntimeConnectorPlugin.Name);
        return includeAad && (!this.includeFrontend(ctx) || includeSimpleAuth);
    }
}
exports.ProjectSettingLoader = ProjectSettingLoader;
ProjectSettingLoader.isSpfx = (ctx) => {
    var _a, _b, _c;
    return !!((_c = (_b = (_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings) === null || _b === void 0 ? void 0 : _b.activeResourcePlugins) === null || _c === void 0 ? void 0 : _c.some((pluginName) => pluginName === constants_1.SpfxPlugin.Name));
};
ProjectSettingLoader.includeFrontend = (ctx) => {
    var _a, _b, _c;
    return !!((_c = (_b = (_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings) === null || _b === void 0 ? void 0 : _b.activeResourcePlugins) === null || _c === void 0 ? void 0 : _c.some((pluginName) => pluginName === constants_1.FrontendHostingPlugin.Name));
};
ProjectSettingLoader.includeBackend = (ctx) => {
    var _a, _b, _c;
    return !!((_c = (_b = (_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings) === null || _b === void 0 ? void 0 : _b.activeResourcePlugins) === null || _c === void 0 ? void 0 : _c.some((pluginName) => pluginName === constants_1.FunctionPlugin.Name));
};
ProjectSettingLoader.includeBot = (ctx) => {
    var _a, _b, _c;
    return !!((_c = (_b = (_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings) === null || _b === void 0 ? void 0 : _b.activeResourcePlugins) === null || _c === void 0 ? void 0 : _c.some((pluginName) => pluginName === constants_1.BotPlugin.Name));
};
//# sourceMappingURL=projectSettingLoader.js.map