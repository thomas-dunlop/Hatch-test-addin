"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalDebugPluginV2 = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const __1 = require("..");
const constants_1 = require("../constants");
const error_1 = require("../util/error");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const utils4v2_1 = require("../../utils4v2");
const localEnvManager_1 = require("../../../../common/local/localEnvManager");
let LocalDebugPluginV2 = class LocalDebugPluginV2 {
    constructor() {
        this.name = "fx-resource-local-debug";
        this.displayName = "LocalDebug";
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        return this.plugin.activate(solutionSettings);
    }
    async scaffoldSourceCode(ctx, inputs) {
        return await utils4v2_1.scaffoldSourceCodeAdapter(ctx, inputs, this.plugin);
    }
    async provisionLocalResource(ctx, inputs, localSettings, tokenProvider) {
        return await utils4v2_1.provisionLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin);
    }
    async configureLocalResource(ctx, inputs, localSettings, tokenProvider) {
        return await utils4v2_1.configureLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        var _a;
        const localEnvManager = new localEnvManager_1.LocalEnvManager(ctx.logProvider, ctx.telemetryReporter);
        if (func.method == "getLaunchInput") {
            const env = func.params;
            if (env === "remote") {
                // return remote teams app id
                if (envInfo.state !== undefined &&
                    envInfo.state[constants_1.AppStudioPlugin.Name] !== undefined &&
                    envInfo.state[constants_1.AppStudioPlugin.Name][constants_1.AppStudioPlugin.TeamsAppId] !== undefined) {
                    const remoteId = envInfo.state[constants_1.AppStudioPlugin.Name][constants_1.AppStudioPlugin.TeamsAppId];
                    if (/^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/.test(remoteId)) {
                        return teamsfx_api_1.ok({
                            appId: remoteId,
                            env: envInfo.envName,
                        });
                    }
                }
                return teamsfx_api_1.err(error_1.MissingStep("launching remote", "Teams: Provision and Teams: Deploy"));
            }
            else {
                const localTeamsAppId = (_a = localSettings === null || localSettings === void 0 ? void 0 : localSettings.teamsApp) === null || _a === void 0 ? void 0 : _a.teamsAppId;
                return teamsfx_api_1.ok({ appId: localTeamsAppId });
            }
        }
        else if (func.method === "getProgrammingLanguage") {
            return teamsfx_api_1.ok(ctx.projectSetting.programmingLanguage);
        }
        else if (func.method === "getLocalDebugEnvs") {
            const localEnvs = await localEnvManager.getLocalDebugEnvs(inputs.projectPath, ctx.projectSetting, localSettings, envInfo);
            return teamsfx_api_1.ok(localEnvs);
        }
        else {
            return await utils4v2_1.executeUserTaskAdapter(ctx, inputs, func, localSettings, envInfo, tokenProvider, this.plugin);
        }
    }
};
tslib_1.__decorate([
    typedi_1.Inject(ResourcePluginContainer_1.ResourcePlugins.LocalDebugPlugin),
    tslib_1.__metadata("design:type", __1.LocalDebugPlugin)
], LocalDebugPluginV2.prototype, "plugin", void 0);
LocalDebugPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.LocalDebugPlugin)
], LocalDebugPluginV2);
exports.LocalDebugPluginV2 = LocalDebugPluginV2;
//# sourceMappingURL=index.js.map