"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrontendScaffold = void 0;
const errors_1 = require("../resources/errors");
const constants_1 = require("../constants");
const logger_1 = require("../utils/logger");
const messages_1 = require("../resources/messages");
const telemetry_helper_1 = require("../utils/telemetry-helper");
const templatesActions_1 = require("../../../../common/template-utils/templatesActions");
class FrontendScaffold {
    static async scaffoldFromZipPackage(componentPath, templateInfo) {
        await templatesActions_1.scaffoldFromTemplates({
            group: templateInfo.group,
            lang: templateInfo.language,
            scenario: templateInfo.scenario,
            dst: componentPath,
            fileNameReplaceFn: templatesActions_1.removeTemplateExtReplaceFn,
            fileDataReplaceFn: templatesActions_1.genTemplateRenderReplaceFn(templateInfo.variables),
            onActionEnd: async (action, context) => {
                var _a;
                if (action.name === templatesActions_1.ScaffoldActionName.FetchTemplatesUrlWithTag) {
                    logger_1.Logger.info(messages_1.Messages.getTemplateFrom((_a = context.zipUrl) !== null && _a !== void 0 ? _a : constants_1.Constants.EmptyString));
                }
            },
            onActionError: async (action, context, error) => {
                logger_1.Logger.info(error.toString());
                switch (action.name) {
                    case templatesActions_1.ScaffoldActionName.FetchTemplatesUrlWithTag:
                    case templatesActions_1.ScaffoldActionName.FetchTemplatesZipFromUrl:
                        telemetry_helper_1.TelemetryHelper.sendScaffoldFallbackEvent(error.message);
                        logger_1.Logger.info(messages_1.Messages.FailedFetchTemplate);
                        break;
                    case templatesActions_1.ScaffoldActionName.FetchTemplateZipFromLocal:
                        throw new errors_1.TemplateZipFallbackError();
                    case templatesActions_1.ScaffoldActionName.Unzip:
                        throw new errors_1.UnzipTemplateError();
                    default:
                        throw new errors_1.UnknownScaffoldError();
                }
            },
        });
    }
}
exports.FrontendScaffold = FrontendScaffold;
//# sourceMappingURL=scaffold.js.map