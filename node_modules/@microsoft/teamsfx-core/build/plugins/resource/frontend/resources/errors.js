"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWithErrorCatchAndWrap = exports.runWithErrorCatchAndThrow = exports.UnhandledErrorMessage = exports.UnhandledErrorCode = exports.NotImplemented = exports.InvalidTabLanguageError = exports.NpmInstallError = exports.BuildError = exports.NoBuildPathError = exports.FileIOError = exports.UnzipTemplateError = exports.TemplateZipFallbackError = exports.UnknownScaffoldError = exports.GetContainerError = exports.UploadToStorageError = exports.ClearStorageError = exports.EnableStaticWebsiteError = exports.InvalidStorageNameError = exports.StaticWebsiteDisabledError = exports.NoStorageError = exports.CheckStorageError = exports.NoResourceGroupError = exports.CheckResourceGroupError = exports.InvalidConfigError = exports.UnauthenticatedError = exports.FrontendPluginError = exports.ErrorMessages = exports.tips = exports.ErrorType = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("../constants");
const logger_1 = require("../utils/logger");
const path_1 = tslib_1.__importDefault(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../../common/localizeUtils");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
exports.tips = {
    checkLog: localizeUtils_1.getLocalizedString("plugins.frontend.checkLogTip"),
    reScaffold: localizeUtils_1.getLocalizedString("plugins.frontend.reScaffoldTip"),
    doProvision: localizeUtils_1.getLocalizedString("plugins.frontend.doProvisionTip"),
    doLogin: localizeUtils_1.getLocalizedString("plugins.frontend.doLoginTip"),
    reLogin: localizeUtils_1.getLocalizedString("plugins.frontend.reLoginTip"),
    reProvision: localizeUtils_1.getLocalizedString("plugins.frontend.reProvisionTip"),
    doNpmInstall: localizeUtils_1.getLocalizedString("plugins.frontend.doNpmInstallTip", constants_1.FrontendPathInfo.WorkingDir),
    doBuild: localizeUtils_1.getLocalizedString("plugins.frontend.doBuildTip", constants_1.FrontendPathInfo.WorkingDir),
    ensureBuildPath: localizeUtils_1.getLocalizedString("plugins.frontend.ensureBuildPathTip", constants_1.FrontendPathInfo.BuildFolderName),
    ensureResourceGroup: localizeUtils_1.getLocalizedString("plugins.frontend.ensureResourceGroupTip"),
    ensureAppNameValid: localizeUtils_1.getLocalizedString("plugins.frontend.ensureAppNameValidTip"),
    deleteSameNameStorage: localizeUtils_1.getLocalizedString("plugins.frontend.deleteSameNameStorageTip"),
    checkNetwork: localizeUtils_1.getLocalizedString("plugins.frontend.checkNetworkTip"),
    checkFsPermissions: localizeUtils_1.getLocalizedString("plugins.frontend.checkFsPermissionsTip"),
    checkStoragePermissions: localizeUtils_1.getLocalizedString("plugins.frontend.checkStoragePermissionsTip"),
    checkSystemTime: localizeUtils_1.getLocalizedString("plugins.frontend.checkSystemTimeTip"),
    restoreEnvironment: localizeUtils_1.getLocalizedString("plugins.frontend.restoreEnvironmentTip", teamsfx_api_1.ConfigFolderName),
};
class ErrorMessages {
}
exports.ErrorMessages = ErrorMessages;
ErrorMessages.FailedSaveEnv = (envPath) => [
    localizeUtils_1.getDefaultString("error.frontend.FailedSaveEnv", envPath),
    localizeUtils_1.getLocalizedString("error.frontend.FailedSaveEnv", envPath),
];
ErrorMessages.FailedLoadEnv = (envPath) => [
    localizeUtils_1.getDefaultString("error.frontend.FailedLoadEnv", envPath),
    localizeUtils_1.getLocalizedString("error.frontend.FailedLoadEnv", envPath),
];
class FrontendPluginError extends Error {
    constructor(errorType, code, messages, suggestions, helpLink) {
        super(messages[0]);
        this.code = code;
        this.messages = messages;
        this.suggestions = suggestions;
        this.errorType = errorType;
        this.helpLink = helpLink;
    }
    getMessage() {
        return localizeUtils_1.getLocalizedString("plugins.baseErrorMessage", this.messages[0], this.suggestions.join(" "));
    }
    getDefaultMessage() {
        return localizeUtils_1.getDefaultString("plugins.baseErrorMessage", this.messages[1], this.suggestions.join(" "));
    }
    setInnerError(error) {
        this.innerError = error;
    }
    getInnerError() {
        return this.innerError;
    }
}
exports.FrontendPluginError = FrontendPluginError;
class UnauthenticatedError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "UnauthenticatedError", [
            localizeUtils_1.getDefaultString("error.frontend.UnauthenticatedError"),
            localizeUtils_1.getLocalizedString("error.frontend.UnauthenticatedError"),
        ], [exports.tips.doLogin]);
    }
}
exports.UnauthenticatedError = UnauthenticatedError;
class InvalidConfigError extends FrontendPluginError {
    constructor(key, detailedErrorMessage) {
        const detailedMsg = detailedErrorMessage !== null && detailedErrorMessage !== void 0 ? detailedErrorMessage : "";
        super(ErrorType.User, "InvalidConfigError", [
            `${localizeUtils_1.getDefaultString("error.frontend.InvalidConfigError", key)}${detailedMsg}`,
            `${localizeUtils_1.getLocalizedString("error.frontend.InvalidConfigError", key)}${detailedMsg}`,
        ], [exports.tips.restoreEnvironment]);
    }
}
exports.InvalidConfigError = InvalidConfigError;
class CheckResourceGroupError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "CheckResourceGroupError", [
            localizeUtils_1.getDefaultString("error.frontend.CheckResourceGroupError"),
            localizeUtils_1.getLocalizedString("error.frontend.CheckResourceGroupError"),
        ], [exports.tips.checkLog]);
    }
}
exports.CheckResourceGroupError = CheckResourceGroupError;
class NoResourceGroupError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NoResourceGroupError", [
            localizeUtils_1.getDefaultString("error.frontend.NoResourceGroupError"),
            localizeUtils_1.getLocalizedString("error.frontend.NoResourceGroupError"),
        ], [exports.tips.ensureResourceGroup]);
    }
}
exports.NoResourceGroupError = NoResourceGroupError;
class CheckStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "CheckStorageError", [
            localizeUtils_1.getDefaultString("error.frontend.CheckStorageError"),
            localizeUtils_1.getLocalizedString("error.frontend.CheckStorageError"),
        ], [exports.tips.checkSystemTime, exports.tips.checkLog]);
    }
}
exports.CheckStorageError = CheckStorageError;
class NoStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NoStorageError", [
            localizeUtils_1.getDefaultString("error.frontend.NoStorageError"),
            localizeUtils_1.getLocalizedString("error.frontend.NoStorageError"),
        ], [exports.tips.reProvision]);
    }
}
exports.NoStorageError = NoStorageError;
class StaticWebsiteDisabledError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "StaticWebsiteDisableError", [
            localizeUtils_1.getDefaultString("error.frontend.StaticWebsiteDisabledError"),
            localizeUtils_1.getLocalizedString("error.frontend.StaticWebsiteDisabledError"),
        ], [exports.tips.reProvision], constants_1.FrontendPluginInfo.HelpLink);
    }
}
exports.StaticWebsiteDisabledError = StaticWebsiteDisabledError;
class InvalidStorageNameError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "InvalidStorageNameError", [
            localizeUtils_1.getDefaultString("error.frontend.InvalidStorageNameError"),
            localizeUtils_1.getLocalizedString("error.frontend.InvalidStorageNameError"),
        ], [exports.tips.ensureAppNameValid]);
    }
}
exports.InvalidStorageNameError = InvalidStorageNameError;
class EnableStaticWebsiteError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "EnableStaticWebsiteError", [
            localizeUtils_1.getDefaultString("error.frontend.EnableStaticWebsiteError"),
            localizeUtils_1.getLocalizedString("error.frontend.EnableStaticWebsiteError"),
        ], [exports.tips.checkSystemTime, exports.tips.checkStoragePermissions], constants_1.FrontendPluginInfo.HelpLink);
    }
}
exports.EnableStaticWebsiteError = EnableStaticWebsiteError;
class ClearStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "ClearStorageError", [
            localizeUtils_1.getDefaultString("error.frontend.ClearStorageError"),
            localizeUtils_1.getLocalizedString("error.frontend.ClearStorageError"),
        ], [exports.tips.checkSystemTime, exports.tips.checkNetwork]);
    }
}
exports.ClearStorageError = ClearStorageError;
class UploadToStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "UploadToStorageError", [
            localizeUtils_1.getDefaultString("error.frontend.UploadToStorageError", path_1.default.join(constants_1.FrontendPathInfo.WorkingDir, constants_1.FrontendPathInfo.BuildPath)),
            localizeUtils_1.getLocalizedString("error.frontend.UploadToStorageError", path_1.default.join(constants_1.FrontendPathInfo.WorkingDir, constants_1.FrontendPathInfo.BuildPath)),
        ], [exports.tips.checkSystemTime, exports.tips.checkNetwork]);
    }
}
exports.UploadToStorageError = UploadToStorageError;
class GetContainerError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "GetContainerError", [
            localizeUtils_1.getDefaultString("error.frontend.GetContainerError", constants_1.Constants.AzureStorageWebContainer),
            localizeUtils_1.getLocalizedString("error.frontend.GetContainerError", constants_1.Constants.AzureStorageWebContainer),
        ], [exports.tips.checkSystemTime, exports.tips.checkStoragePermissions, exports.tips.checkNetwork]);
    }
}
exports.GetContainerError = GetContainerError;
class UnknownScaffoldError extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "UnknownScaffoldError", [
            localizeUtils_1.getDefaultString("error.frontend.UnknownScaffoldError"),
            localizeUtils_1.getLocalizedString("error.frontend.UnknownScaffoldError"),
        ], [exports.tips.checkLog]);
    }
}
exports.UnknownScaffoldError = UnknownScaffoldError;
class TemplateZipFallbackError extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "TemplateZipFallbackError", [
            localizeUtils_1.getDefaultString("error.frontend.TemplateZipFallbackError"),
            localizeUtils_1.getLocalizedString("error.frontend.TemplateZipFallbackError"),
        ], [exports.tips.checkLog, exports.tips.checkNetwork]);
    }
}
exports.TemplateZipFallbackError = TemplateZipFallbackError;
class UnzipTemplateError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "UnzipTemplateError", [
            localizeUtils_1.getDefaultString("error.frontend.UnzipTemplateError"),
            localizeUtils_1.getLocalizedString("error.frontend.UnzipTemplateError"),
        ], [exports.tips.checkFsPermissions]);
    }
}
exports.UnzipTemplateError = UnzipTemplateError;
class FileIOError extends FrontendPluginError {
    constructor(messages) {
        super(ErrorType.System, "FileIOError", messages, [exports.tips.checkLog]);
    }
}
exports.FileIOError = FileIOError;
class NoBuildPathError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NoBuildPathError", [
            localizeUtils_1.getDefaultString("error.frontend.NoBuildPathError", constants_1.FrontendPathInfo.BuildFolderName),
            localizeUtils_1.getLocalizedString("error.frontend.NoBuildPathError", constants_1.FrontendPathInfo.BuildFolderName),
        ], [exports.tips.doBuild, exports.tips.ensureBuildPath]);
    }
}
exports.NoBuildPathError = NoBuildPathError;
class BuildError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "BuildError", [
            localizeUtils_1.getDefaultString("error.frontend.BuildError"),
            localizeUtils_1.getLocalizedString("error.frontend.BuildError"),
        ], [exports.tips.doBuild, exports.tips.checkLog]);
    }
}
exports.BuildError = BuildError;
class NpmInstallError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NpmInstallError", [
            localizeUtils_1.getDefaultString("error.frontend.NpmInstallError"),
            localizeUtils_1.getLocalizedString("error.frontend.NpmInstallError"),
        ], [exports.tips.doNpmInstall, exports.tips.checkLog]);
    }
}
exports.NpmInstallError = NpmInstallError;
class InvalidTabLanguageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "InvalidTabLanguageError", [
            localizeUtils_1.getDefaultString("error.frontend.InvalidTabLanguageError"),
            localizeUtils_1.getLocalizedString("error.frontend.InvalidTabLanguageError"),
        ], [exports.tips.restoreEnvironment, exports.tips.reScaffold]);
    }
}
exports.InvalidTabLanguageError = InvalidTabLanguageError;
class NotImplemented extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "NotImplemented", [
            localizeUtils_1.getDefaultString("error.frontend.NotImplemented"),
            localizeUtils_1.getLocalizedString("error.frontend.NotImplemented"),
        ], []);
    }
}
exports.NotImplemented = NotImplemented;
exports.UnhandledErrorCode = "UnhandledError";
exports.UnhandledErrorMessage = localizeUtils_1.getLocalizedString("error.frontend.UnhandledError");
async function runWithErrorCatchAndThrow(error, fn) {
    try {
        const res = await Promise.resolve(fn());
        return res;
    }
    catch (e) {
        logger_1.Logger.error(e.toString());
        if (error instanceof FrontendPluginError)
            error.setInnerError(e);
        throw error;
    }
}
exports.runWithErrorCatchAndThrow = runWithErrorCatchAndThrow;
async function runWithErrorCatchAndWrap(wrap, fn) {
    try {
        const res = await Promise.resolve(fn());
        return res;
    }
    catch (e) {
        logger_1.Logger.error(e.toString());
        const error = wrap(e);
        if (error instanceof FrontendPluginError)
            error.setInnerError(e);
        throw error;
    }
}
exports.runWithErrorCatchAndWrap = runWithErrorCatchAndWrap;
//# sourceMappingURL=errors.js.map