"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../constants");
class Messages {
}
exports.Messages = Messages;
// Progress bar messages
Messages.ScaffoldProgressTitle = "Scaffolding Tab";
Messages.ProvisionProgressTitle = "Provisioning Tab";
Messages.PostProvisionProgressTitle = "Configuring Tab";
Messages.PreDeployProgressTitle = "Building Tab";
Messages.DeployProgressTitle = "Deploying Tab";
Messages.MigrateProgressTitle = "Migrating Tab";
Messages.ProgressStart = "Preparing.";
Messages.ProgressScaffold = "Scaffolding Tab frontend project.";
Messages.ProgressRegisterRP = "Registering required resource provider.";
Messages.ProgressCreateStorage = "Creating Azure Storage account.";
Messages.ProgressConfigure = "Configuring.";
Messages.ProgressEnableStorageStaticWebsite = "Enabling Azure Storage account static website.";
Messages.ProgressNPMInstall = `Running "npm install" for Tab frontend project.`;
Messages.ProgressBuild = "Building Tab frontend project.";
Messages.ProgressCheckStorage = "Checking Azure Storage account availability.";
Messages.ProgressGetSrcAndDest = "Retrieving deployment source and destination.";
Messages.ProgressClear = "Cleaning up Azure Storage account.";
Messages.ProgressUpload = "Uploading Tab frontend to Azure Storage account.";
Messages.ProgressMigrate = "Migrating Tab frontend project.";
// Logging messages
Messages.StartScaffold = (name) => `Scaffolding '${name}'.`;
Messages.EndScaffold = (name) => `Successfully scaffolded '${name}'.`;
Messages.StartPreProvision = (name) => `Pre-provisioning '${name}'.`;
Messages.EndPreProvision = (name) => `Successfully pre-provisioned '${name}'.`;
Messages.StartProvision = (name) => `Provisioning '${name}'.`;
Messages.EndProvision = (name) => `Successfully provisioned '${name}'.`;
Messages.StartPostProvision = (name) => `Post-provisioning '${name}'.`;
Messages.EndPostProvision = (name) => `Successfully post-provisioned '${name}'.`;
Messages.StartPreDeploy = (name) => `Pre-deploying '${name}'.`;
Messages.EndPreDeploy = (name) => `Pre-deployed '${name}'.`;
Messages.StartDeploy = (name) => `Deploying '${name}'.`;
Messages.EndDeploy = (name) => `Successfully deployed '${name}'.`;
Messages.StartGenerateArmTemplates = (name) => `Generating ARM templates '${name}'.`;
Messages.EndGenerateArmTemplates = (name) => `Successfully generated ARM templates '${name}'.`;
Messages.StartUpdateArmTemplates = (name) => `Updating ARM templates '${name}'.`;
Messages.EndUpdateTemplates = (name) => `Successfully updated ARM templates '${name}'.`;
Messages.getTemplateFrom = (url) => `Retrieving template from '${url}'.`;
Messages.SkipBuild = "Skip building Tab frontend project because no change was detected since last build.";
Messages.SkipDeploy = `Skip deployment of Tab frontend project because no change was detected. To fully redeploy Tab frontend project, please remove '${path_1.default.join(constants_1.FrontendPathInfo.WorkingDir, constants_1.FrontendPathInfo.TabDeploymentFolderName)}' folder and rerun the command.`;
Messages.StartCheckResourceGroupExistence = (name) => `Checking resource group '${name}'.`;
Messages.StartCheckStaticWebsiteEnabled = (name) => `Checking if static website feature is enabled in Azure Storage account '${name}'.`;
Messages.StartCreateStorageAccount = (name, resourceGroupName) => `Creating Azure Storage account '${name}' in resource group '${resourceGroupName}'.`;
Messages.StartEnableStaticWebsite = (name) => `Enabling static website feature for Azure Storage account '${name}'.`;
Messages.SkipEnableStaticWebsite = (name) => `Static website feature is already enabled for Azure Storage account ${name}.`;
Messages.StartSyncLocalToStorage = (localPath, storageName) => `Uploading local path '${localPath}' to Azure Storage account '${storageName}'.`;
Messages.StartDeleteAllBlobs = (storageName, containerName) => `Deleting all existing blobs in container '${containerName}' for Azure Storage account '${storageName}'.`;
Messages.StartUploadFiles = (sourceFolder, storageName) => `Uploading files in '${sourceFolder}' to Azure Storage account '${storageName}'.`;
Messages.FailedFetchManifest = (url) => `Failed to retrieve manifest from '${url}'. Retrying...`;
Messages.FailedFetchZip = (url) => `Failed to retrieve zip package from '${url}'. Retrying...`;
Messages.FailedFetchTemplate = "Failed to retrieve latest template from GitHub. Using local template instead.";
Messages.FailedOperationWithErrorCode = (doOperation, errorCode) => `Failed to '${doOperation}' with error code '${errorCode}'.`;
Messages.GetEmptyStorageEndpoint = "Failed to retrieve endpoint for Azure Storage account.";
Messages.GetEmptySasToken = "Failed to retrieve SAS token for Azure Storage account.";
//# sourceMappingURL=messages.js.map