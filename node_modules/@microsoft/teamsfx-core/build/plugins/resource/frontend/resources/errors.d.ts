import { FxError } from "@microsoft/teamsfx-api";
export declare enum ErrorType {
    User = 0,
    System = 1
}
export declare const tips: {
    checkLog: string;
    reScaffold: string;
    doProvision: string;
    doLogin: string;
    reLogin: string;
    reProvision: string;
    doNpmInstall: string;
    doBuild: string;
    ensureBuildPath: string;
    ensureResourceGroup: string;
    ensureAppNameValid: string;
    deleteSameNameStorage: string;
    checkNetwork: string;
    checkFsPermissions: string;
    checkStoragePermissions: string;
    checkSystemTime: string;
    restoreEnvironment: string;
};
export declare class ErrorMessages {
    static readonly FailedSaveEnv: (envPath: string) => [string, string];
    static readonly FailedLoadEnv: (envPath: string) => [string, string];
}
export declare class FrontendPluginError extends Error {
    code: string;
    messages: [string, string];
    suggestions: string[];
    errorType: ErrorType;
    helpLink?: string;
    innerError?: Error;
    constructor(errorType: ErrorType, code: string, messages: [string, string], suggestions: string[], helpLink?: string);
    getMessage(): string;
    getDefaultMessage(): string;
    setInnerError(error: Error): void;
    getInnerError(): Error | undefined;
}
export declare class UnauthenticatedError extends FrontendPluginError {
    constructor();
}
export declare class InvalidConfigError extends FrontendPluginError {
    constructor(key: string, detailedErrorMessage?: string);
}
export declare class CheckResourceGroupError extends FrontendPluginError {
    constructor();
}
export declare class NoResourceGroupError extends FrontendPluginError {
    constructor();
}
export declare class CheckStorageError extends FrontendPluginError {
    constructor();
}
export declare class NoStorageError extends FrontendPluginError {
    constructor();
}
export declare class StaticWebsiteDisabledError extends FrontendPluginError {
    constructor();
}
export declare class InvalidStorageNameError extends FrontendPluginError {
    constructor();
}
export declare class EnableStaticWebsiteError extends FrontendPluginError {
    constructor();
}
export declare class ClearStorageError extends FrontendPluginError {
    constructor();
}
export declare class UploadToStorageError extends FrontendPluginError {
    constructor();
}
export declare class GetContainerError extends FrontendPluginError {
    constructor();
}
export declare class UnknownScaffoldError extends FrontendPluginError {
    constructor();
}
export declare class TemplateZipFallbackError extends FrontendPluginError {
    constructor();
}
export declare class UnzipTemplateError extends FrontendPluginError {
    constructor();
}
export declare class FileIOError extends FrontendPluginError {
    constructor(messages: [string, string]);
}
export declare class NoBuildPathError extends FrontendPluginError {
    constructor();
}
export declare class BuildError extends FrontendPluginError {
    constructor();
}
export declare class NpmInstallError extends FrontendPluginError {
    constructor();
}
export declare class InvalidTabLanguageError extends FrontendPluginError {
    constructor();
}
export declare class NotImplemented extends FrontendPluginError {
    constructor();
}
export declare const UnhandledErrorCode = "UnhandledError";
export declare const UnhandledErrorMessage: string;
export declare function runWithErrorCatchAndThrow<T>(error: FrontendPluginError | FxError, fn: () => T | Promise<T>): Promise<T>;
export declare function runWithErrorCatchAndWrap<T>(wrap: (error: any) => FrontendPluginError | FxError, fn: () => T | Promise<T>): Promise<T>;
//# sourceMappingURL=errors.d.ts.map