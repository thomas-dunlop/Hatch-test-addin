"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateInfo = exports.Scenario = exports.TabLanguage = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../constants");
const errors_1 = require("./errors");
const folder_1 = require("../../../../folder");
const templates_1 = require("../../../../common/template-utils/templates");
const tools_1 = require("../../../../common/tools");
const question_1 = require("../../../solution/fx-solution/question");
var TabLanguage;
(function (TabLanguage) {
    TabLanguage["JavaScript"] = "javascript";
    TabLanguage["TypeScript"] = "typescript";
    TabLanguage["CSharp"] = "csharp";
})(TabLanguage = exports.TabLanguage || (exports.TabLanguage = {}));
class Scenario {
}
exports.Scenario = Scenario;
Scenario.Default = "default";
Scenario.WithFunction = "with-function";
Scenario.NonSso = "non-sso";
Scenario.M365 = "m365";
class TemplateInfo {
    constructor(ctx) {
        var _a, _b, _c, _d, _e, _f;
        this.group = TemplateInfo.TemplateGroupName;
        this.version = TemplateInfo.version;
        const tabLanguage = (_b = (_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.programmingLanguage) !== null && _b !== void 0 ? _b : TabLanguage.JavaScript;
        this.language = this.validateTabLanguage(tabLanguage);
        const selectedPlugins = ((_c = ctx.projectSettings) === null || _c === void 0 ? void 0 : _c.solutionSettings)
            .activeResourcePlugins;
        const isFunctionPlugin = selectedPlugins.some((pluginName) => pluginName === constants_1.DependentPluginInfo.FunctionPluginName);
        this.variables = {
            showFunction: isFunctionPlugin.toString(),
        };
        const capabilities = (_e = (_d = ctx.projectSettings) === null || _d === void 0 ? void 0 : _d.solutionSettings) === null || _e === void 0 ? void 0 : _e.capabilities;
        this.scenario = ((_f = ctx.projectSettings) === null || _f === void 0 ? void 0 : _f.isM365)
            ? Scenario.M365
            : tools_1.isAadManifestEnabled() && !capabilities.includes(question_1.TabSsoItem.id)
                ? Scenario.NonSso
                : Scenario.Default;
        this.localTemplateBaseName = [this.group, this.language, this.scenario].join(".");
        this.localTemplatePath = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.FrontendPathInfo.TemplateRelativeDir, this.localTemplateBaseName + constants_1.FrontendPathInfo.TemplatePackageExt);
    }
    validateTabLanguage(language) {
        if (language.toLowerCase() === TabLanguage.JavaScript) {
            return "js";
        }
        if (language.toLowerCase() === TabLanguage.TypeScript) {
            return "ts";
        }
        throw new errors_1.InvalidTabLanguageError();
    }
}
exports.TemplateInfo = TemplateInfo;
TemplateInfo.TemplateGroupName = "tab";
TemplateInfo.version = templates_1.templatesVersion;
//# sourceMappingURL=templateInfo.js.map