"use strict";
var FrontendPlugin_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrontendPlugin = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const plugin_1 = require("./plugin");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const error_factory_1 = require("./error-factory");
const errors_1 = require("./resources/errors");
const logger_1 = require("./utils/logger");
const progress_helper_1 = require("./utils/progress-helper");
const constants_1 = require("./constants");
const telemetry_helper_1 = require("./utils/telemetry-helper");
const question_1 = require("../../solution/fx-solution/question");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
require("./v2");
const plugin_2 = require("./dotnet/plugin");
const constants_2 = require("./dotnet/constants");
const projectSettingsHelper_1 = require("../../../common/projectSettingsHelper");
let FrontendPlugin = FrontendPlugin_1 = class FrontendPlugin {
    constructor() {
        this.name = "fx-resource-frontend-hosting";
        this.displayName = "Tab Front-end";
        this.frontendPluginImpl = new plugin_1.FrontendPluginImpl();
        this.dotnetPluginImpl = new plugin_2.DotnetPluginImpl();
    }
    activate(solutionSettings) {
        const cap = solutionSettings.capabilities || [];
        return solutionSettings.hostType === question_1.HostTypeOptionAzure.id && cap.includes(question_1.TabOptionItem.id);
    }
    getImpl(ctx) {
        return projectSettingsHelper_1.isVSProject(ctx.projectSettings) ? this.dotnetPluginImpl : this.frontendPluginImpl;
    }
    static setContext(ctx) {
        const component = projectSettingsHelper_1.isVSProject(ctx.projectSettings)
            ? constants_2.DotnetPluginInfo.pluginName
            : constants_1.FrontendPluginInfo.PluginName;
        logger_1.Logger.setLogger(ctx.logProvider, component);
        telemetry_helper_1.TelemetryHelper.setContext(ctx, component);
    }
    async scaffold(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.Scaffold, () => this.getImpl(ctx).scaffold(ctx));
    }
    async postProvision(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.PostProvision, () => this.getImpl(ctx).postProvision(ctx));
    }
    async preDeploy(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.PreDeploy, () => this.getImpl(ctx).preDeploy(ctx));
    }
    async deploy(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.Deploy, () => this.getImpl(ctx).deploy(ctx));
    }
    async updateArmTemplates(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.UpdateArmTemplates, () => this.getImpl(ctx).updateArmTemplates(ctx));
    }
    async generateArmTemplates(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.GenerateArmTemplates, () => this.getImpl(ctx).generateArmTemplates(ctx));
    }
    async localDebug(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.LocalDebug, () => this.getImpl(ctx).localDebug(ctx));
    }
    async postLocalDebug(ctx) {
        FrontendPlugin_1.setContext(ctx);
        return this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.PostLocalDebug, () => this.getImpl(ctx).postLocalDebug(ctx));
    }
    async runWithErrorHandling(ctx, stage, fn, properties = {}) {
        var _a;
        try {
            telemetry_helper_1.TelemetryHelper.sendStartEvent(stage, properties);
            const result = await fn();
            telemetry_helper_1.TelemetryHelper.sendSuccessEvent(stage, properties);
            return result;
        }
        catch (e) {
            await progress_helper_1.ProgressHelper.endProgress(false);
            if (e instanceof errors_1.FrontendPluginError) {
                const error = e.errorType === errors_1.ErrorType.User
                    ? error_factory_1.ErrorFactory.UserError(e.code, [e.getDefaultMessage(), e.getMessage()], undefined, undefined, e.helpLink)
                    : error_factory_1.ErrorFactory.SystemError(e.code, [e.getDefaultMessage(), e.getMessage()], e.getInnerError(), (_a = e.getInnerError()) === null || _a === void 0 ? void 0 : _a.stack);
                telemetry_helper_1.TelemetryHelper.sendErrorEvent(stage, error, properties);
                return teamsfx_api_1.err(error);
            }
            if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
                telemetry_helper_1.TelemetryHelper.sendErrorEvent(stage, e, properties);
                return teamsfx_api_1.err(e);
            }
            const error = error_factory_1.ErrorFactory.SystemError(errors_1.UnhandledErrorCode, [errors_1.UnhandledErrorMessage, errors_1.UnhandledErrorMessage], e, e.stack);
            telemetry_helper_1.TelemetryHelper.sendErrorEvent(stage, error, properties);
            return teamsfx_api_1.err(error);
        }
    }
};
FrontendPlugin = FrontendPlugin_1 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.FrontendPlugin)
], FrontendPlugin);
exports.FrontendPlugin = FrontendPlugin;
exports.default = new FrontendPlugin();
//# sourceMappingURL=index.js.map