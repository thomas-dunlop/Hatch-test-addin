"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryHelper = void 0;
const constants_1 = require("../constants");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const errors_1 = require("../resources/errors");
class TelemetryHelper {
    static setContext(ctx, component) {
        this.ctx = ctx;
        this.component = component;
    }
    static fillCommonProperty(properties) {
        var _a, _b, _c;
        properties[constants_1.TelemetryKey.Component] = (_a = this.component) !== null && _a !== void 0 ? _a : constants_1.FrontendPluginInfo.PluginName;
        properties[constants_1.TelemetryKey.AppId] =
            ((_c = (_b = this.ctx) === null || _b === void 0 ? void 0 : _b.envInfo.state.get(constants_1.DependentPluginInfo.SolutionPluginName)) === null || _c === void 0 ? void 0 : _c.get(constants_1.DependentPluginInfo.RemoteTeamsAppId)) || "";
    }
    static sendStartEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        TelemetryHelper.fillCommonProperty(properties);
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName + constants_1.TelemetryEvent.StartSuffix, properties, measurements);
    }
    static sendSuccessEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        TelemetryHelper.fillCommonProperty(properties);
        properties[constants_1.TelemetryKey.Success] = constants_1.TelemetryValue.Success;
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, e, properties = {}, measurements = {}) {
        var _a, _b;
        TelemetryHelper.fillCommonProperty(properties);
        properties[constants_1.TelemetryKey.Success] = constants_1.TelemetryValue.Fail;
        properties[constants_1.TelemetryKey.ErrorMessage] = e.message;
        properties[constants_1.TelemetryKey.ErrorCode] = e.name;
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[constants_1.TelemetryKey.ErrorType] = constants_1.TelemetryValue.SystemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[constants_1.TelemetryKey.ErrorType] = constants_1.TelemetryValue.UserError;
        }
        else if (e instanceof errors_1.FrontendPluginError) {
            properties[constants_1.TelemetryKey.ErrorType] =
                e.errorType === errors_1.ErrorType.User ? constants_1.TelemetryValue.UserError : constants_1.TelemetryValue.SystemError;
            properties[constants_1.TelemetryKey.ErrorCode] = e.code;
        }
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryErrorEvent(eventName, properties, measurements, [
            constants_1.TelemetryKey.ErrorMessage,
        ]);
    }
    static sendScaffoldFallbackEvent(message, properties = {}, measurements = {}) {
        var _a, _b;
        TelemetryHelper.fillCommonProperty(properties);
        properties[constants_1.TelemetryKey.ErrorMessage] = message;
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(constants_1.TelemetryEvent.ScaffoldFallback, properties, measurements);
    }
    static sendGeneralEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        TelemetryHelper.fillCommonProperty(properties);
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName, properties, measurements);
    }
}
exports.TelemetryHelper = TelemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map