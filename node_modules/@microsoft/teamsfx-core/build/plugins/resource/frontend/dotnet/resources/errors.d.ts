import { FrontendPluginError } from "../../resources/errors";
export declare enum ErrorType {
    User = 0,
    System = 1
}
export declare class DotnetPluginError extends FrontendPluginError {
    innerError?: Error;
    constructor(errorType: ErrorType, code: string, messages: [string, string], suggestions: string[], helpLink?: string, innerError?: Error);
    getMessage(): string;
    getDefaultMessage(): string;
    setInnerError(error: Error): void;
    getInnerError(): Error | undefined;
}
export declare class NoProjectSettingError extends DotnetPluginError {
    constructor();
}
export declare class FetchConfigError extends DotnetPluginError {
    constructor(key: string);
}
export declare class ProjectPathError extends DotnetPluginError {
    constructor(projectFilePath: string);
}
export declare class BuildError extends DotnetPluginError {
    constructor(innerError?: Error);
}
export declare class ZipError extends DotnetPluginError {
    constructor();
}
export declare class PublishCredentialError extends DotnetPluginError {
    constructor();
}
export declare class UploadZipError extends DotnetPluginError {
    constructor();
}
export declare class FileIOError extends DotnetPluginError {
    constructor(path: string);
}
export declare const UnhandledErrorCode = "UnhandledError";
export declare const UnhandledErrorMessage: string;
export declare function runWithErrorCatchAndThrow<T>(error: DotnetPluginError, fn: () => T | Promise<T>): Promise<T>;
export declare function runWithErrorCatchAndWrap<T>(wrap: (error: any) => DotnetPluginError, fn: () => T | Promise<T>): Promise<T>;
//# sourceMappingURL=errors.d.ts.map