"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSettingsPlaceholders = exports.WebappBicep = exports.WebappBicepFile = exports.DotnetConfigInfo = exports.DependentPluginInfo = exports.DotnetCommands = exports.DotnetPathInfo = exports.DotnetPluginInfo = exports.RegularExpr = exports.AzureInfo = exports.Constants = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
class Constants {
}
exports.Constants = Constants;
Constants.emptyString = "";
class AzureInfo {
}
exports.AzureInfo = AzureInfo;
AzureInfo.zipDeployURL = (appName) => `https://${appName}.scm.azurewebsites.net/api/zipdeploy`;
class RegularExpr {
}
exports.RegularExpr = RegularExpr;
RegularExpr.targetFramework = /(?<=<TargetFramework>)(.*)(?=<)/gim;
RegularExpr.clientId = /\$clientId\$/g;
RegularExpr.clientSecret = /\$client-secret\$/g;
RegularExpr.oauthAuthority = /\$oauthAuthority\$/g;
class DotnetPluginInfo {
}
exports.DotnetPluginInfo = DotnetPluginInfo;
// TODO: Migrate DotNet plugin to frontend plugin
DotnetPluginInfo.pluginName = "fx-resource-frontend-hosting";
DotnetPluginInfo.issueLink = "https://github.com/OfficeDev/TeamsFx/issues/new";
DotnetPluginInfo.helpLink = "https://aka.ms/teamsfx-bz-help";
DotnetPluginInfo.defaultFramework = "net6.0";
DotnetPluginInfo.defaultRuntime = "win-x86";
class DotnetPathInfo {
}
exports.DotnetPathInfo = DotnetPathInfo;
DotnetPathInfo.publishFolderPath = (workingPath) => path_1.default.join(workingPath, "publish");
DotnetPathInfo.bicepTemplateFolder = (templateFolder) => path_1.default.join(templateFolder, "plugins", "resource", "webapp", "bicep");
DotnetPathInfo.projectFilename = (projectName) => `${projectName}.csproj`;
DotnetPathInfo.indexPath = ""; // Index path is '/', relative path is empty.
DotnetPathInfo.appSettingDevelopment = "appsettings.Development.json";
DotnetPathInfo.oauthHost = (tenantId) => `https://login.microsoftonline.com/${tenantId}`;
class DotnetCommands {
}
exports.DotnetCommands = DotnetCommands;
DotnetCommands.buildRelease = (runtime) => `dotnet publish --output publish --configuration Release --runtime ${runtime} --self-contained`;
class DependentPluginInfo {
}
exports.DependentPluginInfo = DependentPluginInfo;
DependentPluginInfo.solutionPluginName = "solution";
DependentPluginInfo.subscriptionId = "subscriptionId";
DependentPluginInfo.resourceGroupName = "resourceGroupName";
DependentPluginInfo.aadClientId = "clientId";
DependentPluginInfo.aadClientSecret = "clientSecret";
DependentPluginInfo.appTenantId = "teamsAppTenantId";
class DotnetConfigInfo {
}
exports.DotnetConfigInfo = DotnetConfigInfo;
DotnetConfigInfo.webAppName = "webAppName";
DotnetConfigInfo.appServicePlanName = "appServicePlanName";
DotnetConfigInfo.webAppEndpoint = "endpoint";
DotnetConfigInfo.webAppDomain = "domain";
DotnetConfigInfo.projectFilePath = "projectFilePath";
DotnetConfigInfo.indexPath = "indexPath";
class WebappBicepFile {
}
exports.WebappBicepFile = WebappBicepFile;
WebappBicepFile.configurationTemplateFileName = "webappConfiguration.template.bicep";
WebappBicepFile.provisionTemplateFileName = "webappProvision.template.bicep";
class WebappBicep {
}
exports.WebappBicep = WebappBicep;
WebappBicep.endpoint = "provisionOutputs.webappOutput.value.endpoint";
WebappBicep.resourceId = "provisionOutputs.webappOutput.value.resourceId";
WebappBicep.domain = "provisionOutputs.webappOutput.value.domain";
WebappBicep.endpointAsParam = "webappProvision.outputs.endpoint";
WebappBicep.domainAsParam = "webappProvision.outputs.domain";
WebappBicep.Reference = {
    webappResourceId: WebappBicep.resourceId,
    endpoint: WebappBicep.endpoint,
    domain: WebappBicep.domain,
    endpointAsParam: WebappBicep.endpointAsParam,
    domainAsParam: WebappBicep.domainAsParam,
};
class AppSettingsPlaceholders {
}
exports.AppSettingsPlaceholders = AppSettingsPlaceholders;
AppSettingsPlaceholders.clientId = "$clientId$";
AppSettingsPlaceholders.clientSecret = "$client-secret$";
AppSettingsPlaceholders.oauthAuthority = "$oauthAuthority$";
//# sourceMappingURL=constants.js.map