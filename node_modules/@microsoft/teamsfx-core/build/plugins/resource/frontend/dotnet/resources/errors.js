"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWithErrorCatchAndWrap = exports.runWithErrorCatchAndThrow = exports.UnhandledErrorMessage = exports.UnhandledErrorCode = exports.FileIOError = exports.UploadZipError = exports.PublishCredentialError = exports.ZipError = exports.BuildError = exports.ProjectPathError = exports.FetchConfigError = exports.NoProjectSettingError = exports.DotnetPluginError = exports.ErrorType = void 0;
const logger_1 = require("../../utils/logger");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const errors_1 = require("../../resources/errors");
const localizeUtils_1 = require("../../../../../common/localizeUtils");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
const tips = {
    checkLog: localizeUtils_1.getLocalizedString("plugins.dotnet.checkLog"),
    doProvision: localizeUtils_1.getLocalizedString("plugins.dotnet.doProvision"),
    reProvision: localizeUtils_1.getLocalizedString("plugins.dotnet.reProvision"),
    reDeploy: localizeUtils_1.getLocalizedString("plugins.dotnet.reDeploy"),
    checkNetwork: localizeUtils_1.getLocalizedString("plugins.dotnet.checkNetwork"),
    checkFsPermissions: localizeUtils_1.getLocalizedString("plugins.dotnet.checkFsPermissions"),
    restoreEnvironment: localizeUtils_1.getLocalizedString("plugins.dotnet.restoreEnvironment", `.${teamsfx_api_1.ConfigFolderName}`),
};
class DotnetPluginError extends errors_1.FrontendPluginError {
    constructor(errorType, code, messages, suggestions, helpLink, innerError) {
        super(errorType, code, messages, suggestions, helpLink);
        this.innerError = innerError;
    }
    getMessage() {
        return `${this.messages[0]} Suggestions: ${this.suggestions.join(" ")}`;
    }
    getDefaultMessage() {
        return `${this.messages[1]} Suggestions: ${this.suggestions.join(" ")}`;
    }
    setInnerError(error) {
        this.innerError = error;
    }
    getInnerError() {
        return this.innerError;
    }
}
exports.DotnetPluginError = DotnetPluginError;
class NoProjectSettingError extends DotnetPluginError {
    constructor() {
        super(ErrorType.System, "NoProjectSettingError", [
            localizeUtils_1.getDefaultString("error.dotnet.NoProjectSettingError"),
            localizeUtils_1.getLocalizedString("error.dotnet.NoProjectSettingError"),
        ], []);
    }
}
exports.NoProjectSettingError = NoProjectSettingError;
class FetchConfigError extends DotnetPluginError {
    constructor(key) {
        super(ErrorType.User, "FetchConfigError", [
            localizeUtils_1.getDefaultString("error.dotnet.FetchConfigError", key),
            localizeUtils_1.getLocalizedString("error.dotnet.FetchConfigError", key),
        ], [tips.restoreEnvironment]);
    }
}
exports.FetchConfigError = FetchConfigError;
class ProjectPathError extends DotnetPluginError {
    constructor(projectFilePath) {
        super(ErrorType.User, "ProjectPathError", [
            localizeUtils_1.getDefaultString("error.dotnet.ProjectPathError", projectFilePath),
            localizeUtils_1.getLocalizedString("error.dotnet.ProjectPathError", projectFilePath),
        ], [tips.checkLog, tips.restoreEnvironment]);
    }
}
exports.ProjectPathError = ProjectPathError;
class BuildError extends DotnetPluginError {
    constructor(innerError) {
        super(ErrorType.User, "BuildError", [localizeUtils_1.getDefaultString("error.dotnet.BuildError"), localizeUtils_1.getLocalizedString("error.dotnet.BuildError")], [tips.checkLog, tips.reDeploy], undefined, innerError);
    }
}
exports.BuildError = BuildError;
class ZipError extends DotnetPluginError {
    constructor() {
        super(ErrorType.User, "ZipError", [localizeUtils_1.getDefaultString("error.dotnet.ZipError"), localizeUtils_1.getLocalizedString("error.dotnet.ZipError")], [tips.checkFsPermissions, tips.reDeploy]);
    }
}
exports.ZipError = ZipError;
class PublishCredentialError extends DotnetPluginError {
    constructor() {
        super(ErrorType.User, "PublishCredentialError", [
            localizeUtils_1.getDefaultString("error.dotnet.PublishCredentialError"),
            localizeUtils_1.getLocalizedString("error.dotnet.PublishCredentialError"),
        ], [tips.doProvision, tips.reDeploy]);
    }
}
exports.PublishCredentialError = PublishCredentialError;
class UploadZipError extends DotnetPluginError {
    constructor() {
        super(ErrorType.User, "UploadZipError", [
            localizeUtils_1.getDefaultString("error.dotnet.UploadZipError"),
            localizeUtils_1.getLocalizedString("error.dotnet.UploadZipError"),
        ], [tips.checkNetwork, tips.reDeploy]);
    }
}
exports.UploadZipError = UploadZipError;
class FileIOError extends DotnetPluginError {
    constructor(path) {
        super(ErrorType.User, "FileIOError", [
            localizeUtils_1.getDefaultString("error.dotnet.FileIOError", path),
            localizeUtils_1.getLocalizedString("error.dotnet.FileIOError", path),
        ], [tips.checkFsPermissions, tips.checkLog]);
    }
}
exports.FileIOError = FileIOError;
exports.UnhandledErrorCode = "UnhandledError";
exports.UnhandledErrorMessage = localizeUtils_1.getLocalizedString("error.dotnet.UnhandledError");
async function runWithErrorCatchAndThrow(error, fn) {
    try {
        return await Promise.resolve(fn());
    }
    catch (e) {
        logger_1.Logger.error(e.toString());
        error.setInnerError(e);
        throw error;
    }
}
exports.runWithErrorCatchAndThrow = runWithErrorCatchAndThrow;
async function runWithErrorCatchAndWrap(wrap, fn) {
    try {
        return await Promise.resolve(fn());
    }
    catch (e) {
        logger_1.Logger.error(e.toString());
        const error = wrap(e);
        error.setInnerError(e);
        throw error;
    }
}
exports.runWithErrorCatchAndWrap = runWithErrorCatchAndWrap;
//# sourceMappingURL=errors.js.map