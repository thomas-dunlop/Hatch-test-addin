"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CICDPluginV2 = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const result_1 = require("./result");
const plugin_1 = require("./plugin");
const errors_1 = require("./errors");
const constants_1 = require("./constants");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const questions_1 = require("./questions");
const logger_1 = require("./logger");
const telemetry_helper_1 = require("./utils/telemetry-helper");
const cicd_1 = require("../../../component/feature/cicd");
let CICDPluginV2 = class CICDPluginV2 {
    constructor() {
        this.name = constants_1.PluginCICD.PLUGIN_NAME;
        this.displayName = constants_1.Alias.TEAMS_CICD_PLUGIN;
        this.cicdImpl = new plugin_1.CICDImpl();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    activate(projectSettings) {
        return true;
    }
    async addCICDWorkflows(context, inputs, envInfo) {
        logger_1.Logger.setLogger(context.logProvider);
        let envName = inputs[questions_1.questionNames.Environment];
        // TODO: add support for VS/.Net Projects.
        if (inputs.platform === teamsfx_api_1.Platform.CLI) {
            // In CLI, get env name from the default `env` question.
            envName = envInfo.envName;
        }
        return await this.cicdImpl.addCICDWorkflows(context, inputs, envName);
    }
    async getQuestionsForUserTask(ctx, inputs, func, envInfo, tokenProvider) {
        return await cicd_1.addCicdQuestion(ctx, inputs);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        if (func.method === "addCICDWorkflows") {
            return await this.runWithExceptionCatching(ctx, envInfo, () => this.addCICDWorkflows(ctx, inputs, envInfo), true, constants_1.LifecycleFuncNames.ADD_CICD_WORKFLOWS);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async runWithExceptionCatching(context, envInfo, fn, sendTelemetry, name) {
        try {
            sendTelemetry &&
                telemetry_helper_1.telemetryHelper.sendStartEvent(context, envInfo, name, this.cicdImpl.commonProperties);
            const res = await fn();
            sendTelemetry &&
                telemetry_helper_1.telemetryHelper.sendResultEvent(context, envInfo, name, res, this.cicdImpl.commonProperties);
            return res;
        }
        catch (e) {
            if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
                const res = teamsfx_api_1.err(e);
                sendTelemetry &&
                    telemetry_helper_1.telemetryHelper.sendResultEvent(context, envInfo, name, res, this.cicdImpl.commonProperties);
                return res;
            }
            if (e instanceof errors_1.PluginError) {
                const result = e.errorType === errors_1.ErrorType.System
                    ? result_1.FxCICDPluginResultFactory.SystemError(e.name, [e.genDefaultMessage(), e.genMessage()], e.innerError)
                    : result_1.FxCICDPluginResultFactory.UserError(e.name, [e.genDefaultMessage(), e.genMessage()], e.showHelpLink, e.innerError);
                sendTelemetry &&
                    telemetry_helper_1.telemetryHelper.sendResultEvent(context, envInfo, name, result, this.cicdImpl.commonProperties);
                return result;
            }
            else {
                // Unrecognized Exception.
                const UnhandledErrorCode = "UnhandledError";
                sendTelemetry &&
                    telemetry_helper_1.telemetryHelper.sendResultEvent(context, envInfo, name, result_1.FxCICDPluginResultFactory.SystemError(UnhandledErrorCode, [`Got an unhandled error: ${e.message}`, `Got an unhandled error: ${e.message}`], e.innerError), this.cicdImpl.commonProperties);
                return result_1.FxCICDPluginResultFactory.SystemError(UnhandledErrorCode, e.message, e);
            }
        }
    }
};
CICDPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.CICDPlugin)
], CICDPluginV2);
exports.CICDPluginV2 = CICDPluginV2;
exports.default = new CICDPluginV2();
//# sourceMappingURL=index.js.map