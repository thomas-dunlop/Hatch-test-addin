import { Func, FxError, PluginContext, QTreeNode, Result } from "@microsoft/teamsfx-api";
import { WebSiteManagementModels } from "@azure/arm-appservice";
import { FunctionLanguage } from "./enums";
import { FxResult } from "./result";
declare type Site = WebSiteManagementModels.Site;
export interface FunctionConfig {
    resourceGroupName?: string;
    subscriptionId?: string;
    resourceNameSuffix?: string;
    location?: string;
    functionName?: string;
    functionLanguage?: FunctionLanguage;
    functionAppName?: string;
    defaultFunctionName?: string;
    storageAccountName?: string;
    appServicePlanName?: string;
    functionEndpoint?: string;
    functionAppResourceId?: string;
    skipDeploy: boolean;
    site?: Site;
}
export declare class FunctionPluginImpl {
    config: FunctionConfig;
    private syncConfigFromContext;
    private syncConfigToContext;
    private validateConfig;
    callFunc(func: Func, ctx: PluginContext): Promise<FxResult>;
    getQuestionsForUserTask(func: Func, ctx: PluginContext): Result<QTreeNode | undefined, FxError>;
    executeUserTask(func: Func, ctx: PluginContext): Promise<FxResult>;
    preScaffold(ctx: PluginContext): Promise<FxResult>;
    scaffold(ctx: PluginContext): Promise<FxResult>;
    postProvision(ctx: PluginContext): Promise<FxResult>;
    preDeploy(ctx: PluginContext): Promise<FxResult>;
    updateArmTemplates(ctx: PluginContext): Promise<FxResult>;
    generateArmTemplates(ctx: PluginContext): Promise<FxResult>;
    deploy(ctx: PluginContext): Promise<FxResult>;
    private getFunctionProjectRootPath;
    private checkAndGet;
    isPluginEnabled(ctx: PluginContext, plugin: string): boolean;
    private getFunctionAppName;
    private getFunctionAppResourceGroupName;
    private getFunctionAppSubscriptionId;
    private needConfigure;
    private getSite;
    private collectFunctionAppSettings;
    private handleDotnetChecker;
    private handleBackendExtensionsInstall;
}
export {};
//# sourceMappingURL=plugin.d.ts.map