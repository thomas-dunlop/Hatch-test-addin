import { ContextV3, PluginContext, SystemError, UserError } from "@microsoft/teamsfx-api";
import { FxResult } from "../result";
import { FunctionEvent } from "../enums";
import { DepsCheckerEvent } from "../../../../common/deps-checker/constant/telemetry";
export declare class TelemetryHelper {
    static ctx?: PluginContext | ContextV3;
    static setContext(ctx: PluginContext | ContextV3): void;
    static fillCommonProperty(properties: {
        [key: string]: string;
    }): void;
    static sendStartEvent(eventName: FunctionEvent, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
    static sendSuccessEvent(eventName: FunctionEvent | DepsCheckerEvent, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
    static sendErrorEvent(eventName: FunctionEvent | DepsCheckerEvent, e: SystemError | UserError, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
    static sendResultEvent(eventName: FunctionEvent | DepsCheckerEvent, result: FxResult, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
    static sendScaffoldFallbackEvent(message: string, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
    static sendGeneralEvent(eventName: FunctionEvent | DepsCheckerEvent, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
}
//# sourceMappingURL=telemetry-helper.d.ts.map