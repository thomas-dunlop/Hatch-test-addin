import { StepHelper } from "../utils/step-helper";
export declare enum ScaffoldSteps {
    ensureFunctionAppProject = "Setting up project",
    scaffoldFunction = "Scaffolding function"
}
export declare enum ProvisionSteps {
    registerResourceProviders = "Registering required resource providers.",
    ensureStorageAccount = "Setting up storage account.",
    getConnectionString = "Retrieving connection string.",
    ensureAppServicePlans = "Setting up Azure App Services plan.",
    ensureFunctionApp = "Setting up function app."
}
export declare enum PostProvisionSteps {
    updateFunctionSettings = "Updating settings.",
    updateFunctionAuthSettings = "Updating auth settings."
}
export declare enum PreDeploySteps {
    dotnetInstall = "Installing .NET Core SDK if needed.",
    installTeamsfxBinding = "Installing TeamsFX Binding.",
    npmPrepare = "Preparing JS files."
}
export declare enum DeploySteps {
    generateZip = "Generating zip package.",
    fetchCredential = "Retrieving deploy credentials.",
    checkFuncAppSettings = "Checking deploy settings.",
    deploy = "Uploading zip package.",
    restart = "Restarting function app."
}
export declare enum StepGroup {
    ScaffoldStepGroup = "Scaffolding function app",
    ProvisionStepGroup = "Provisioning function app",
    PostProvisionStepGroup = "Configuring function app",
    PreDeployStepGroup = "Preparing function app for deployment",
    DeployStepGroup = "Deploying function app"
}
export declare class StepHelperFactory {
    static scaffoldStepHelper: StepHelper;
    static provisionStepHelper: StepHelper;
    static postProvisionStepHelper: StepHelper;
    static preDeployStepHelper: StepHelper;
    static deployStepHelper: StepHelper;
    static StepRegistry: Map<string, StepHelper>;
}
export declare function step<T>(group: StepGroup, message: string, fn: () => T | Promise<T>): Promise<T>;
//# sourceMappingURL=steps.d.ts.map