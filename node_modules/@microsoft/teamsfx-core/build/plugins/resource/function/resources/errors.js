"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWithErrorCatchAndWrap = exports.runWithErrorCatchAndThrow = exports.UnknownFallbackError = exports.UploadZipError = exports.FindAppError = exports.PublishCredentialError = exports.ZipError = exports.InitAzureSDKError = exports.InstallNpmPackageError = exports.InstallTeamsFxBindingError = exports.FunctionAppOpError = exports.ConfigFunctionAppError = exports.UnzipError = exports.TemplateZipFallbackError = exports.TemplateZipNetworkError = exports.ValidationError = exports.FetchConfigError = exports.FunctionNameConflictError = exports.FunctionPluginError = exports.tips = exports.ErrorType = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const path = tslib_1.__importStar(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
const logger_1 = require("../utils/logger");
const localizeUtils_1 = require("../../../../common/localizeUtils");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
exports.tips = {
    recoverTeamsFxConfigFiles: localizeUtils_1.getLocalizedString("plugins.function.recoverTeamsFxConfigFilesTip", teamsfx_api_1.ConfigFolderName),
    recreateProject: localizeUtils_1.getLocalizedString("plugins.function.recreateProject"),
    checkNetwork: localizeUtils_1.getLocalizedString("plugins.function.checkNetwork"),
    retryRequest: localizeUtils_1.getLocalizedString("plugins.function.retryRequest"),
    chooseAnotherCompose: localizeUtils_1.getLocalizedString("plugins.function.chooseAnotherCompose"),
    checkDiskLock: localizeUtils_1.getLocalizedString("plugins.function.checkDiskLock"),
    checkPathAccess: localizeUtils_1.getLocalizedString("plugins.function.checkPathAccess"),
    checkSubscriptionId: localizeUtils_1.getLocalizedString("plugins.function.checkSubscriptionId"),
    checkCredit: localizeUtils_1.getLocalizedString("plugins.function.checkCredit"),
    checkLog: localizeUtils_1.getLocalizedString("plugins.function.checkLog"),
    recreateStorageAccount: localizeUtils_1.getLocalizedString("plugins.function.recreateStorageAccount"),
    checkPackageJson: localizeUtils_1.getLocalizedString("plugins.function.checkPackageJson"),
    checkCredential: localizeUtils_1.getLocalizedString("plugins.function.checkCredential"),
    doFullDeploy: localizeUtils_1.getLocalizedString("plugins.function.doFullDeploy", path.join(constants_1.FunctionPluginPathInfo.solutionFolderName, constants_1.FunctionPluginPathInfo.funcDeploymentFolderName)),
    doProvision: localizeUtils_1.getLocalizedString("plugins.function.doProvision"),
    retryRequestForZip: localizeUtils_1.getLocalizedString("plugins.function.retryRequestForZip"),
    checkFunctionExtVersion: localizeUtils_1.getLocalizedString("plugins.function.checkFunctionExtVersion", path.join(constants_1.FunctionPluginPathInfo.solutionFolderName, constants_1.FunctionPluginPathInfo.functionExtensionsFileName)),
};
class FunctionPluginError extends Error {
    constructor(errorType, code, messages, suggestions) {
        super(messages[0]);
        this.code = code;
        this.messages = messages;
        this.suggestions = suggestions;
        this.errorType = errorType;
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
    getMessage() {
        return localizeUtils_1.getLocalizedString("plugins.baseErrorMessage", this.messages[1], this.suggestions.join(" "));
    }
    getDefaultMessage() {
        return localizeUtils_1.getDefaultString("plugins.baseErrorMessage", this.messages[0], this.suggestions.join(" "));
    }
}
exports.FunctionPluginError = FunctionPluginError;
class FunctionNameConflictError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "FunctionNameConflictError", [
            localizeUtils_1.getDefaultString("error.function.FunctionNameConflictError"),
            localizeUtils_1.getLocalizedString("error.function.FunctionNameConflictError"),
        ], [exports.tips.checkLog]);
    }
}
exports.FunctionNameConflictError = FunctionNameConflictError;
class FetchConfigError extends FunctionPluginError {
    constructor(key) {
        super(ErrorType.User, "FetchConfigError", [
            localizeUtils_1.getDefaultString("error.function.FetchConfigError", key),
            localizeUtils_1.getLocalizedString("error.function.FetchConfigError", key),
        ], [exports.tips.recoverTeamsFxConfigFiles, exports.tips.recreateProject]);
    }
}
exports.FetchConfigError = FetchConfigError;
class ValidationError extends FunctionPluginError {
    constructor(key) {
        super(ErrorType.User, "ValidationError", [
            localizeUtils_1.getDefaultString("error.function.ValidationError", key),
            localizeUtils_1.getLocalizedString("error.function.ValidationError", key),
        ], [exports.tips.recoverTeamsFxConfigFiles, exports.tips.recreateProject]);
    }
}
exports.ValidationError = ValidationError;
class TemplateZipNetworkError extends FunctionPluginError {
    constructor(url) {
        super(ErrorType.User, "TemplateZipNetworkError", [
            localizeUtils_1.getDefaultString("error.function.TemplateZipNetworkError", url),
            localizeUtils_1.getLocalizedString("error.function.TemplateZipNetworkError", url),
        ], [exports.tips.checkNetwork, exports.tips.retryRequest]);
    }
}
exports.TemplateZipNetworkError = TemplateZipNetworkError;
class TemplateZipFallbackError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "TemplateZipFallbackError", [
            localizeUtils_1.getDefaultString("error.function.TemplateZipFallbackError"),
            localizeUtils_1.getLocalizedString("error.function.TemplateZipFallbackError"),
        ], [exports.tips.checkLog, exports.tips.checkNetwork, exports.tips.retryRequest]);
    }
}
exports.TemplateZipFallbackError = TemplateZipFallbackError;
class UnzipError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "UnzipError", [
            localizeUtils_1.getDefaultString("error.function.UnzipError"),
            localizeUtils_1.getLocalizedString("error.function.UnzipError"),
        ], [exports.tips.checkDiskLock, exports.tips.checkPathAccess, exports.tips.retryRequestForZip]);
    }
}
exports.UnzipError = UnzipError;
class ConfigFunctionAppError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "ConfigFunctionAppError", [
            localizeUtils_1.getDefaultString("error.function.ConfigFunctionAppError"),
            localizeUtils_1.getLocalizedString("error.function.ConfigFunctionAppError"),
        ], [exports.tips.checkSubscriptionId, exports.tips.checkNetwork, exports.tips.retryRequest]);
    }
}
exports.ConfigFunctionAppError = ConfigFunctionAppError;
class FunctionAppOpError extends FunctionPluginError {
    constructor(op) {
        super(ErrorType.User, "RestartFunctionAppError", [
            localizeUtils_1.getDefaultString("error.function.FunctionAppOpError", op),
            localizeUtils_1.getLocalizedString("error.function.FunctionAppOpError", op),
        ], [exports.tips.checkNetwork, exports.tips.retryRequest]);
    }
}
exports.FunctionAppOpError = FunctionAppOpError;
class InstallTeamsFxBindingError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "InstallTeamsFxBindingError", [
            localizeUtils_1.getDefaultString("error.function.InstallTeamsFxBindingError"),
            localizeUtils_1.getLocalizedString("error.function.InstallTeamsFxBindingError"),
        ], [exports.tips.checkFunctionExtVersion]);
    }
}
exports.InstallTeamsFxBindingError = InstallTeamsFxBindingError;
class InstallNpmPackageError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "InstallNpmPackageError", [
            localizeUtils_1.getDefaultString("error.function.InstallNpmPackageError"),
            localizeUtils_1.getLocalizedString("error.function.InstallNpmPackageError"),
        ], [exports.tips.checkPackageJson]);
    }
}
exports.InstallNpmPackageError = InstallNpmPackageError;
class InitAzureSDKError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "InitAzureSDKError", [
            localizeUtils_1.getDefaultString("error.function.InitAzureSDKError"),
            localizeUtils_1.getLocalizedString("error.function.InitAzureSDKError"),
        ], [exports.tips.checkCredential, exports.tips.checkSubscriptionId]);
    }
}
exports.InitAzureSDKError = InitAzureSDKError;
class ZipError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "ZipError", [localizeUtils_1.getDefaultString("error.function.ZipError"), localizeUtils_1.getLocalizedString("error.function.ZipError")], [exports.tips.checkDiskLock, exports.tips.checkPathAccess, exports.tips.doFullDeploy]);
    }
}
exports.ZipError = ZipError;
class PublishCredentialError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "PublishCredentialError", [
            localizeUtils_1.getDefaultString("error.function.PublishCredentialError"),
            localizeUtils_1.getLocalizedString("error.function.PublishCredentialError"),
        ], [
            exports.tips.checkCredential,
            exports.tips.checkSubscriptionId,
            exports.tips.checkNetwork,
            exports.tips.retryRequest,
            exports.tips.doProvision,
        ]);
    }
}
exports.PublishCredentialError = PublishCredentialError;
class FindAppError extends FunctionPluginError {
    constructor() {
        super(ErrorType.System, "FindAppError", [
            localizeUtils_1.getDefaultString("error.function.FindAppError"),
            localizeUtils_1.getLocalizedString("error.function.FindAppError"),
        ], [exports.tips.doProvision]);
    }
}
exports.FindAppError = FindAppError;
class UploadZipError extends FunctionPluginError {
    constructor() {
        super(ErrorType.User, "UploadZipError", [
            localizeUtils_1.getDefaultString("error.function.UploadZipError"),
            localizeUtils_1.getLocalizedString("error.function.UploadZipError"),
        ], [exports.tips.checkNetwork, exports.tips.retryRequest]);
    }
}
exports.UploadZipError = UploadZipError;
class UnknownFallbackError extends FunctionPluginError {
    constructor() {
        super(ErrorType.System, "UnknownFallbackError", [
            localizeUtils_1.getDefaultString("error.function.UnknownFallbackError"),
            localizeUtils_1.getLocalizedString("error.function.UnknownFallbackError"),
        ], [exports.tips.checkLog]);
    }
}
exports.UnknownFallbackError = UnknownFallbackError;
async function runWithErrorCatchAndThrow(error, fn) {
    try {
        const res = await Promise.resolve(fn());
        return res;
    }
    catch (e) {
        if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
            throw e;
        }
        logger_1.Logger.error(e.toString());
        throw error;
    }
}
exports.runWithErrorCatchAndThrow = runWithErrorCatchAndThrow;
async function runWithErrorCatchAndWrap(wrap, fn) {
    try {
        const res = await Promise.resolve(fn());
        return res;
    }
    catch (e) {
        if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
            throw e;
        }
        logger_1.Logger.error(e.toString());
        const error = wrap(e);
        throw error;
    }
}
exports.runWithErrorCatchAndWrap = runWithErrorCatchAndWrap;
//# sourceMappingURL=errors.js.map