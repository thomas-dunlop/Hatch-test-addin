"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.step = exports.StepHelperFactory = exports.StepGroup = exports.DeploySteps = exports.PreDeploySteps = exports.PostProvisionSteps = exports.ProvisionSteps = exports.ScaffoldSteps = void 0;
const step_helper_1 = require("../utils/step-helper");
var ScaffoldSteps;
(function (ScaffoldSteps) {
    ScaffoldSteps["ensureFunctionAppProject"] = "Setting up project";
    ScaffoldSteps["scaffoldFunction"] = "Scaffolding function";
})(ScaffoldSteps = exports.ScaffoldSteps || (exports.ScaffoldSteps = {}));
var ProvisionSteps;
(function (ProvisionSteps) {
    ProvisionSteps["registerResourceProviders"] = "Registering required resource providers.";
    ProvisionSteps["ensureStorageAccount"] = "Setting up storage account.";
    ProvisionSteps["getConnectionString"] = "Retrieving connection string.";
    ProvisionSteps["ensureAppServicePlans"] = "Setting up Azure App Services plan.";
    ProvisionSteps["ensureFunctionApp"] = "Setting up function app.";
})(ProvisionSteps = exports.ProvisionSteps || (exports.ProvisionSteps = {}));
var PostProvisionSteps;
(function (PostProvisionSteps) {
    PostProvisionSteps["updateFunctionSettings"] = "Updating settings.";
    PostProvisionSteps["updateFunctionAuthSettings"] = "Updating auth settings.";
})(PostProvisionSteps = exports.PostProvisionSteps || (exports.PostProvisionSteps = {}));
var PreDeploySteps;
(function (PreDeploySteps) {
    PreDeploySteps["dotnetInstall"] = "Installing .NET Core SDK if needed.";
    PreDeploySteps["installTeamsfxBinding"] = "Installing TeamsFX Binding.";
    PreDeploySteps["npmPrepare"] = "Preparing JS files.";
})(PreDeploySteps = exports.PreDeploySteps || (exports.PreDeploySteps = {}));
var DeploySteps;
(function (DeploySteps) {
    DeploySteps["generateZip"] = "Generating zip package.";
    DeploySteps["fetchCredential"] = "Retrieving deploy credentials.";
    DeploySteps["checkFuncAppSettings"] = "Checking deploy settings.";
    DeploySteps["deploy"] = "Uploading zip package.";
    DeploySteps["restart"] = "Restarting function app.";
})(DeploySteps = exports.DeploySteps || (exports.DeploySteps = {}));
var StepGroup;
(function (StepGroup) {
    StepGroup["ScaffoldStepGroup"] = "Scaffolding function app";
    StepGroup["ProvisionStepGroup"] = "Provisioning function app";
    StepGroup["PostProvisionStepGroup"] = "Configuring function app";
    StepGroup["PreDeployStepGroup"] = "Preparing function app for deployment";
    StepGroup["DeployStepGroup"] = "Deploying function app";
})(StepGroup = exports.StepGroup || (exports.StepGroup = {}));
class StepHelperFactory {
}
exports.StepHelperFactory = StepHelperFactory;
StepHelperFactory.scaffoldStepHelper = new step_helper_1.StepHelper(StepGroup.ScaffoldStepGroup);
StepHelperFactory.provisionStepHelper = new step_helper_1.StepHelper(StepGroup.ProvisionStepGroup);
StepHelperFactory.postProvisionStepHelper = new step_helper_1.StepHelper(StepGroup.PostProvisionStepGroup);
StepHelperFactory.preDeployStepHelper = new step_helper_1.StepHelper(StepGroup.PreDeployStepGroup);
StepHelperFactory.deployStepHelper = new step_helper_1.StepHelper(StepGroup.DeployStepGroup);
StepHelperFactory.StepRegistry = new Map([
    [StepGroup.ScaffoldStepGroup, StepHelperFactory.scaffoldStepHelper],
    [StepGroup.ProvisionStepGroup, StepHelperFactory.provisionStepHelper],
    [StepGroup.PostProvisionStepGroup, StepHelperFactory.postProvisionStepHelper],
    [StepGroup.PreDeployStepGroup, StepHelperFactory.preDeployStepHelper],
    [StepGroup.DeployStepGroup, StepHelperFactory.deployStepHelper],
]);
async function step(group, message, fn) {
    var _a;
    await ((_a = StepHelperFactory.StepRegistry.get(group)) === null || _a === void 0 ? void 0 : _a.forward(message));
    return Promise.resolve(fn());
}
exports.step = step;
//# sourceMappingURL=steps.js.map