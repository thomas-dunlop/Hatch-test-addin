export declare class InfoMessages {
    static readonly askNodeVersion: string;
    static readonly askFunctionName: string;
    static readonly checkDotNetVersion: string;
    static readonly buildFunctionComponent: string;
    static readonly dotNetVersionUnexpected: (current: string, expected: string[]) => string;
    static readonly installFunctionExtensions: string;
    static readonly noChange: string;
    static readonly skipDeployment: string;
    static readonly failedToInstallDotnet: (error: Error) => string;
    static readonly getTemplateFrom: (url: string) => string;
    static readonly getTemplateFromLocal: string;
    static readonly projectScaffoldAt: (basePath: string) => string;
    static readonly functionScaffoldAt: (functionPath: string) => string;
    static readonly generateStorageAccountName: (name: string) => string;
    static readonly generateAppServicePlanName: (name: string) => string;
    static readonly generateFunctionAppName: (name: string) => string;
    static readonly ensureResourceProviders: (namespaces: string[], subscriptionId: string) => string;
    static readonly checkResource: (resourceType: string, resourceName: string, resourceGroup: string) => string;
    static readonly resourceCreating: string;
    static readonly resourceExists: string;
    static readonly functionAppConfigIsEmpty: string;
    static readonly functionAppSettingsUpdated: string;
    static readonly functionAppAuthSettingsUpdated: string;
    static readonly dependPluginDetected: (name: string) => string;
    static readonly dotnetVersion: (version: string) => string;
    static readonly uploadZipSize: (size: number) => string;
    static readonly succeedWithRetry: (op: string, count: number) => string;
    static readonly reuseZipNotice: string;
}
export declare class ErrorMessages {
    static readonly invalidFunctionName: string;
    static readonly functionAlreadyExists: string;
    static readonly noFunctionNameGiven: string;
    static readonly failToGetConnectionString: string;
    static readonly failToGetAppServicePlanId: string;
    static readonly failToGetFunctionAppEndpoint: string;
    static readonly failToFindFunctionApp: string;
    static readonly failToQueryPublishCred: string;
}
//# sourceMappingURL=message.d.ts.map