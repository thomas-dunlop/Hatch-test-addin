import { FxError } from "@microsoft/teamsfx-api";
export declare enum ErrorType {
    User = 0,
    System = 1
}
export declare const tips: {
    recoverTeamsFxConfigFiles: string;
    recreateProject: string;
    checkNetwork: string;
    retryRequest: string;
    chooseAnotherCompose: string;
    checkDiskLock: string;
    checkPathAccess: string;
    checkSubscriptionId: string;
    checkCredit: string;
    checkLog: string;
    recreateStorageAccount: string;
    checkPackageJson: string;
    checkCredential: string;
    doFullDeploy: string;
    doProvision: string;
    retryRequestForZip: string;
    checkFunctionExtVersion: string;
};
export declare class FunctionPluginError extends Error {
    code: string;
    messages: [string, string];
    suggestions: string[];
    errorType: ErrorType;
    constructor(errorType: ErrorType, code: string, messages: [string, string], suggestions: string[]);
    getMessage(): string;
    getDefaultMessage(): string;
}
export declare class FunctionNameConflictError extends FunctionPluginError {
    constructor();
}
export declare class FetchConfigError extends FunctionPluginError {
    constructor(key: string);
}
export declare class ValidationError extends FunctionPluginError {
    constructor(key: string);
}
export declare class TemplateZipNetworkError extends FunctionPluginError {
    constructor(url: string);
}
export declare class TemplateZipFallbackError extends FunctionPluginError {
    constructor();
}
export declare class UnzipError extends FunctionPluginError {
    constructor();
}
export declare class ConfigFunctionAppError extends FunctionPluginError {
    constructor();
}
export declare class FunctionAppOpError extends FunctionPluginError {
    constructor(op: string);
}
export declare class InstallTeamsFxBindingError extends FunctionPluginError {
    constructor();
}
export declare class InstallNpmPackageError extends FunctionPluginError {
    constructor();
}
export declare class InitAzureSDKError extends FunctionPluginError {
    constructor();
}
export declare class ZipError extends FunctionPluginError {
    constructor();
}
export declare class PublishCredentialError extends FunctionPluginError {
    constructor();
}
export declare class FindAppError extends FunctionPluginError {
    constructor();
}
export declare class UploadZipError extends FunctionPluginError {
    constructor();
}
export declare class UnknownFallbackError extends FunctionPluginError {
    constructor();
}
export declare function runWithErrorCatchAndThrow<T>(error: FunctionPluginError | FxError, fn: () => T | Promise<T>): Promise<T>;
export declare function runWithErrorCatchAndWrap<T>(wrap: (error: any) => FunctionPluginError, fn: () => T | Promise<T>): Promise<T>;
//# sourceMappingURL=errors.d.ts.map