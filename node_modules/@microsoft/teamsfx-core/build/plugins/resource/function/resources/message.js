"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessages = exports.InfoMessages = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const path = tslib_1.__importStar(require("path"));
const localizeUtils_1 = require("../../../../common/localizeUtils");
const constants_1 = require("../constants");
class InfoMessages {
}
exports.InfoMessages = InfoMessages;
InfoMessages.askNodeVersion = localizeUtils_1.getLocalizedString("plugins.function.askNodeVersion");
InfoMessages.askFunctionName = localizeUtils_1.getLocalizedString("plugins.function.askFunctionName");
InfoMessages.checkDotNetVersion = localizeUtils_1.getLocalizedString("plugins.function.checkDotNetVersion");
InfoMessages.buildFunctionComponent = localizeUtils_1.getLocalizedString("plugins.function.buildFunctionComponent");
InfoMessages.dotNetVersionUnexpected = (current, expected) => localizeUtils_1.getLocalizedString("plugins.function.dotNetVersionUnexpected", current, expected.join(", "));
InfoMessages.installFunctionExtensions = localizeUtils_1.getLocalizedString("plugins.function.installFunctionExtensions");
InfoMessages.noChange = localizeUtils_1.getLocalizedString("plugins.function.noChange");
InfoMessages.skipDeployment = localizeUtils_1.getLocalizedString("plugins.function.skipDeployment", path.join(constants_1.FunctionPluginPathInfo.solutionFolderName, constants_1.FunctionPluginPathInfo.funcDeploymentFolderName));
InfoMessages.failedToInstallDotnet = (error) => localizeUtils_1.getLocalizedString("plugins.function.failedToInstallDotnet", error);
InfoMessages.getTemplateFrom = (url) => localizeUtils_1.getLocalizedString("plugins.function.getTemplateFrom", url);
InfoMessages.getTemplateFromLocal = localizeUtils_1.getLocalizedString("plugins.function.getTemplateFromLocal");
InfoMessages.projectScaffoldAt = (basePath) => localizeUtils_1.getLocalizedString("plugins.function.projectScaffoldAt", basePath);
InfoMessages.functionScaffoldAt = (functionPath) => localizeUtils_1.getLocalizedString("plugins.function.functionScaffoldAt", functionPath);
InfoMessages.generateStorageAccountName = (name) => localizeUtils_1.getLocalizedString("plugins.function.generateStorageAccountName", name);
InfoMessages.generateAppServicePlanName = (name) => localizeUtils_1.getLocalizedString("plugins.function.generateAppServicePlanName", name);
InfoMessages.generateFunctionAppName = (name) => localizeUtils_1.getLocalizedString("plugins.function.generateFunctionAppName", name);
InfoMessages.ensureResourceProviders = (namespaces, subscriptionId) => localizeUtils_1.getLocalizedString("plugins.function.ensureResourceProviders", namespaces.join(","), subscriptionId);
InfoMessages.checkResource = (resourceType, resourceName, resourceGroup) => localizeUtils_1.getLocalizedString("plugins.function.checkResource", resourceType, resourceName, resourceGroup);
InfoMessages.resourceCreating = localizeUtils_1.getLocalizedString("plugins.function.resourceCreating");
InfoMessages.resourceExists = localizeUtils_1.getLocalizedString("plugins.function.resourceExists");
InfoMessages.functionAppConfigIsEmpty = localizeUtils_1.getLocalizedString("plugins.function.functionAppConfigIsEmpty");
InfoMessages.functionAppSettingsUpdated = localizeUtils_1.getLocalizedString("plugins.function.functionAppSettingsUpdated");
InfoMessages.functionAppAuthSettingsUpdated = localizeUtils_1.getLocalizedString("plugins.function.functionAppAuthSettingsUpdated");
InfoMessages.dependPluginDetected = (name) => localizeUtils_1.getLocalizedString("plugins.function.dependPluginDetected", name);
InfoMessages.dotnetVersion = (version) => localizeUtils_1.getLocalizedString("plugins.function.dotnetVersion", version);
InfoMessages.uploadZipSize = (size) => localizeUtils_1.getLocalizedString("plugins.function.uploadZipSize", size);
InfoMessages.succeedWithRetry = (op, count) => localizeUtils_1.getLocalizedString("plugins.function.succeedWithRetry", op, count);
InfoMessages.reuseZipNotice = localizeUtils_1.getLocalizedString("plugins.function.reuseZipNotice", `'${constants_1.FunctionPluginPathInfo.solutionFolderName}/${constants_1.FunctionPluginPathInfo.funcDeploymentFolderName}/${constants_1.FunctionPluginPathInfo.funcDeploymentZipCacheFileName}'`);
class ErrorMessages {
}
exports.ErrorMessages = ErrorMessages;
ErrorMessages.invalidFunctionName = localizeUtils_1.getLocalizedString("plugins.function.invalidFunctionName");
ErrorMessages.functionAlreadyExists = localizeUtils_1.getLocalizedString("plugins.function.functionAlreadyExists");
ErrorMessages.noFunctionNameGiven = localizeUtils_1.getLocalizedString("plugins.function.noFunctionNameGiven");
ErrorMessages.failToGetConnectionString = localizeUtils_1.getLocalizedString("plugins.function.failToGetConnectionString");
ErrorMessages.failToGetAppServicePlanId = localizeUtils_1.getLocalizedString("plugins.function.failToGetAppServicePlanId");
ErrorMessages.failToGetFunctionAppEndpoint = localizeUtils_1.getLocalizedString("plugins.function.failToGetFunctionAppEndpoint");
ErrorMessages.failToFindFunctionApp = localizeUtils_1.getLocalizedString("plugins.function.failToFindFunctionApp");
ErrorMessages.failToQueryPublishCred = localizeUtils_1.getLocalizedString("plugins.function.failToQueryPublishCred");
//# sourceMappingURL=message.js.map