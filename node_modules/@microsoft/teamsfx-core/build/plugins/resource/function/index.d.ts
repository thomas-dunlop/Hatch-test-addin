import { AzureSolutionSettings, Func, FxError, Plugin, PluginContext, QTreeNode, Result } from "@microsoft/teamsfx-api";
import { FunctionPluginImpl } from "./plugin";
import { FxResult } from "./result";
import "./v2";
export declare class FunctionPlugin implements Plugin {
    name: string;
    displayName: string;
    activate(solutionSettings: AzureSolutionSettings): boolean;
    functionPluginImpl: FunctionPluginImpl;
    callFunc(func: Func, ctx: PluginContext): Promise<FxResult>;
    setContext(ctx: PluginContext): void;
    getQuestionsForUserTask(func: Func, ctx: PluginContext): Promise<Result<QTreeNode | undefined, FxError>>;
    executeUserTask(func: Func, ctx: PluginContext): Promise<FxResult>;
    preScaffold(ctx: PluginContext): Promise<FxResult>;
    scaffold(ctx: PluginContext): Promise<FxResult>;
    preProvision(ctx: PluginContext): Promise<FxResult>;
    provision(ctx: PluginContext): Promise<FxResult>;
    postProvision(ctx: PluginContext): Promise<FxResult>;
    updateArmTemplates(ctx: PluginContext): Promise<FxResult>;
    generateArmTemplates(ctx: PluginContext): Promise<FxResult>;
    preDeploy(ctx: PluginContext): Promise<FxResult>;
    deploy(ctx: PluginContext): Promise<FxResult>;
    private runWithErrorWrapper;
}
declare const _default: FunctionPlugin;
export default _default;
//# sourceMappingURL=index.d.ts.map