"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageStrategyFactory = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const path = tslib_1.__importStar(require("path"));
const constants_1 = require("./constants");
const enums_1 = require("./enums");
const NodeJSCommonStrategy = {
    getFunctionEntryFileOrFolderName: (entryName) => entryName,
    skipFuncExtensionInstall: false,
    /* We skip scanning node_modules folder for node because it has too many small files.
     * Its consistency can be guaranteed by `npm install`.
     */
    hasUpdatedContentFilter: (itemPath) => path.basename(itemPath) !== constants_1.FunctionPluginPathInfo.npmPackageFolderName,
    buildCommands: [],
    deployFolderRelativePath: constants_1.CommonConstants.emptyString,
};
const JavaScriptLanguageStrategy = Object.assign(Object.assign({}, NodeJSCommonStrategy), { buildCommands: [
        {
            command: constants_1.Commands.npmInstallProd,
            relativePath: constants_1.CommonConstants.emptyString,
        },
    ] });
const TypeScriptLanguageStrategy = Object.assign(Object.assign({}, NodeJSCommonStrategy), { buildCommands: [
        {
            command: constants_1.Commands.npmInstall,
            relativePath: constants_1.CommonConstants.emptyString,
        },
        {
            command: constants_1.Commands.npmBuild,
            relativePath: constants_1.CommonConstants.emptyString,
        },
    ] });
// const CSharpLanguageStrategy: FunctionLanguageStrategy = {
//     getFunctionEntryFileOrFolderName: (entryName: string) => `${entryName}.cs`,
//     skipFuncExtensionInstall: true,
//     buildCommands: [{
//         command: Commands.dotnetPublish,
//         relativePath: CommonConstants.emptyString
//     }],
//     deployFolderRelativePath: path.join("bin", "Release", "netcoreapp3.1", "publish")
// };
class LanguageStrategyFactory {
    static getStrategy(language) {
        switch (language) {
            case enums_1.FunctionLanguage.JavaScript:
                return JavaScriptLanguageStrategy;
            case enums_1.FunctionLanguage.TypeScript:
                return TypeScriptLanguageStrategy;
            // case FunctionLanguage.CSharp:
            //     return CSharpLanguageStrategy;
        }
    }
}
exports.LanguageStrategyFactory = LanguageStrategyFactory;
//# sourceMappingURL=language-strategy.js.map