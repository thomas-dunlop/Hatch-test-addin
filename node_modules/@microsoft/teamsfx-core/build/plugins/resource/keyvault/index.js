"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyVaultPlugin = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const question_1 = require("../../solution/fx-solution/question");
const plugin_1 = require("./plugin");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const result_1 = require("./result");
const constants_1 = require("./constants");
const telemetry_1 = require("./utils/telemetry");
require("./v2");
let KeyVaultPlugin = class KeyVaultPlugin {
    constructor() {
        this.name = constants_1.Constants.KeyVaultPlugin.pluginName;
        this.displayName = constants_1.Constants.KeyVaultPlugin.displayName;
        this.keyVaultPluginImpl = new plugin_1.KeyVaultPluginImpl();
    }
    activate(solutionSettings) {
        const azureResources = solutionSettings.azureResources || [];
        return (solutionSettings.hostType === question_1.HostTypeOptionAzure.id &&
            azureResources.includes(question_1.AzureResourceKeyVault.id));
    }
    async generateArmTemplates(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        return this.runWithErrorHandling(() => this.keyVaultPluginImpl.generateArmTemplates(ctx), ctx, constants_1.Constants.Stage.generateArmTemplates);
    }
    async updateArmTemplates(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        return this.runWithErrorHandling(() => this.keyVaultPluginImpl.updateArmTemplates(ctx), ctx, constants_1.Constants.Stage.updateArmTemplates);
    }
    async runWithErrorHandling(fn, ctx, stage) {
        var _a;
        try {
            telemetry_1.TelemetryUtils.sendEvent(`${stage}-start`);
            const res = await fn();
            telemetry_1.TelemetryUtils.sendEvent(stage);
            return res;
        }
        catch (e) {
            if (!(e instanceof Error || e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError)) {
                e = new Error(e.toString());
            }
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.error(e.message);
            if (e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError) {
                telemetry_1.TelemetryUtils.sendErrorEvent(stage, e.name, e instanceof teamsfx_api_1.UserError ? constants_1.Telemetry.userError : constants_1.Telemetry.systemError, e.message);
                return teamsfx_api_1.err(e);
            }
            else {
                const UnhandledErrorCode = "UnhandledError";
                telemetry_1.TelemetryUtils.sendErrorEvent(stage, UnhandledErrorCode, constants_1.Telemetry.systemError, e === null || e === void 0 ? void 0 : e.message);
                return teamsfx_api_1.err(result_1.ResultFactory.SystemError(UnhandledErrorCode, [e === null || e === void 0 ? void 0 : e.message, e === null || e === void 0 ? void 0 : e.message], e));
            }
        }
    }
};
KeyVaultPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.KeyVaultPlugin)
], KeyVaultPlugin);
exports.KeyVaultPlugin = KeyVaultPlugin;
exports.default = new KeyVaultPlugin();
//# sourceMappingURL=index.js.map