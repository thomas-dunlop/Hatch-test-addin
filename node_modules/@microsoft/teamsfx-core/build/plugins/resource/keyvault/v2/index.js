"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyVaultPluginV2 = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const __1 = require("..");
const question_1 = require("../../../solution/fx-solution/question");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const utils4v2_1 = require("../../utils4v2");
let KeyVaultPluginV2 = class KeyVaultPluginV2 {
    constructor() {
        this.name = "fx-resource-key-vault";
        this.displayName = "Key Vault Plugin";
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        const azureResources = solutionSettings.azureResources || [];
        return (solutionSettings.hostType === question_1.HostTypeOptionAzure.id &&
            azureResources.includes(question_1.AzureResourceKeyVault.id));
    }
    async generateResourceTemplate(ctx, inputs) {
        return utils4v2_1.generateResourceTemplateAdapter(ctx, inputs, this.plugin);
    }
    async updateResourceTemplate(ctx, inputs) {
        return utils4v2_1.updateResourceTemplateAdapter(ctx, inputs, this.plugin);
    }
};
tslib_1.__decorate([
    typedi_1.Inject(ResourcePluginContainer_1.ResourcePlugins.KeyVaultPlugin),
    tslib_1.__metadata("design:type", __1.KeyVaultPlugin)
], KeyVaultPluginV2.prototype, "plugin", void 0);
KeyVaultPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.KeyVaultPlugin)
], KeyVaultPluginV2);
exports.KeyVaultPluginV2 = KeyVaultPluginV2;
//# sourceMappingURL=index.js.map