"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyVaultPluginImpl = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const __1 = require("../../..");
const constants_1 = require("../../../common/constants");
const constants_2 = require("./constants");
const result_1 = require("./result");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const tools_1 = require("../../../common/tools");
class KeyVaultPluginImpl {
    async generateArmTemplates(ctx) {
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDirectory = path.join(__1.getTemplatesFolder(), "plugins", "resource", "keyvault", "bicep");
        const provisionModuleResult = path.join(bicepTemplateDirectory, constants_2.Constants.provisionModuleTemplateFileName);
        const provisionOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_1.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(provisionModuleResult, pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { keyVault: provisionModules },
            },
            Reference: {
                m365ClientSecretReference: constants_2.Constants.KeyVaultBicep.m365ClientSecretReference,
                botClientSecretReference: constants_2.Constants.KeyVaultBicep.botClientSecretReference,
            },
        };
        return result_1.ResultFactory.Success(result);
    }
    async updateArmTemplates(ctx) {
        const result = {
            Reference: {
                m365ClientSecretReference: constants_2.Constants.KeyVaultBicep.m365ClientSecretReference,
                botClientSecretReference: constants_2.Constants.KeyVaultBicep.botClientSecretReference,
            },
        };
        return result_1.ResultFactory.Success(result);
    }
}
exports.KeyVaultPluginImpl = KeyVaultPluginImpl;
//# sourceMappingURL=plugin.js.map