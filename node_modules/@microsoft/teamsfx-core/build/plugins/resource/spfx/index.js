"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpfxPlugin = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const question_1 = require("../../solution/fx-solution/question");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const plugin_1 = require("./plugin");
const constants_1 = require("./utils/constants");
const progress_helper_1 = require("./utils/progress-helper");
const questions_1 = require("./utils/questions");
const telemetry_helper_1 = require("./utils/telemetry-helper");
require("./v2");
let SpfxPlugin = class SpfxPlugin {
    constructor() {
        this.name = "fx-resource-spfx";
        this.displayName = "SharePoint Framework (SPFx)";
        this.spfxPluginImpl = new plugin_1.SPFxPluginImpl();
    }
    activate(solutionSettings) {
        return solutionSettings.hostType === question_1.HostTypeOptionSPFx.id;
    }
    async getQuestions(stage, ctx) {
        const spfx_frontend_host = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        if (stage === teamsfx_api_1.Stage.create) {
            const spfx_version_check = new teamsfx_api_1.QTreeNode(questions_1.versionCheckQuestion);
            spfx_frontend_host.addChild(spfx_version_check);
            const spfx_framework_type = new teamsfx_api_1.QTreeNode(questions_1.frameworkQuestion);
            spfx_version_check.addChild(spfx_framework_type);
            const spfx_webpart_name = new teamsfx_api_1.QTreeNode(questions_1.webpartNameQuestion);
            spfx_version_check.addChild(spfx_webpart_name);
        }
        return teamsfx_api_1.ok(spfx_frontend_host);
    }
    async getQuestionsForUserTask(func, ctx) {
        if (func.method === constants_1.UserTasks.AddFeature) {
            const spfx_add_feature = new teamsfx_api_1.QTreeNode({
                type: "group",
            });
            const spfx_version_check = new teamsfx_api_1.QTreeNode(questions_1.versionCheckQuestion);
            spfx_add_feature.addChild(spfx_version_check);
            const spfx_webpart_name = new teamsfx_api_1.QTreeNode(questions_1.webpartNameQuestion);
            spfx_version_check.addChild(spfx_webpart_name);
            return teamsfx_api_1.ok(spfx_add_feature);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async postScaffold(ctx) {
        return await this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.Scaffold, () => this.spfxPluginImpl.postScaffold(ctx));
    }
    async preDeploy(ctx) {
        return await this.runWithErrorHandling(ctx, constants_1.TelemetryEvent.PreDeploy, () => this.spfxPluginImpl.preDeploy(ctx));
    }
    async deploy(ctx) {
        const result = await this.spfxPluginImpl.deploy(ctx);
        if (result.isOk()) {
            telemetry_helper_1.telemetryHelper.sendSuccessEvent(ctx, "deploy");
        }
        else {
            telemetry_helper_1.telemetryHelper.sendErrorEvent(ctx, "deploy", result.error);
            if (result.error.name === "InsufficientPermission") {
                return teamsfx_api_1.err(teamsfx_api_1.UserCancelError);
            }
        }
        return result;
    }
    async runWithErrorHandling(ctx, stage, fn) {
        try {
            telemetry_helper_1.telemetryHelper.sendSuccessEvent(ctx, stage + constants_1.TelemetryEvent.StartSuffix);
            const result = await fn();
            if (result.isOk()) {
                telemetry_helper_1.telemetryHelper.sendSuccessEvent(ctx, stage);
            }
            else {
                telemetry_helper_1.telemetryHelper.sendErrorEvent(ctx, stage, result.error);
            }
            return result;
        }
        catch (error) {
            await progress_helper_1.ProgressHelper.endAllHandlers(false);
            telemetry_helper_1.telemetryHelper.sendErrorEvent(ctx, stage, error);
            return teamsfx_api_1.err(error);
        }
    }
};
SpfxPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.SpfxPlugin)
], SpfxPlugin);
exports.SpfxPlugin = SpfxPlugin;
exports.default = new SpfxPlugin();
//# sourceMappingURL=index.js.map