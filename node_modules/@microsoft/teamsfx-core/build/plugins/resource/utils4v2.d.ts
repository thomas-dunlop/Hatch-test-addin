import { ConfigMap, Func, FxError, Inputs, Json, Plugin, PluginContext, QTreeNode, Result, TokenProvider, v2, Void } from "@microsoft/teamsfx-api";
import { EnvInfoV2 } from "@microsoft/teamsfx-api/build/v2";
export declare function convert2PluginContext(pluginName: string, ctx: v2.Context, inputs: Inputs, ignoreEmptyProjectPath?: boolean): PluginContext;
export declare function convert2Context(ctx: PluginContext, ignoreEmptyProjectPath?: boolean): {
    context: v2.Context;
    inputs: v2.InputsWithProjectPath;
};
export declare function scaffoldSourceCodeAdapter(ctx: v2.Context, inputs: Inputs, plugin: Plugin): Promise<Result<Void, FxError>>;
export declare function generateResourceTemplateAdapter(ctx: v2.Context, inputs: Inputs, plugin: Plugin): Promise<Result<v2.ResourceTemplate, FxError>>;
export declare function updateResourceTemplateAdapter(ctx: v2.Context, inputs: Inputs, plugin: Plugin): Promise<Result<v2.ResourceTemplate, FxError>>;
export declare function provisionResourceAdapter(ctx: v2.Context, inputs: v2.ProvisionInputs, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<Void, FxError>>;
export declare function flattenConfigMap(configMap: ConfigMap): ConfigMap;
export declare function legacyConfig2EnvState(config: ConfigMap, pluginName: string): Json;
export declare function configureResourceAdapter(ctx: v2.Context, inputs: v2.ProvisionInputs, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<Void, FxError>>;
export declare function deployAdapter(ctx: v2.Context, inputs: v2.DeploymentInputs, envInfo: v2.DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<Void, FxError>>;
export declare function provisionLocalResourceAdapter(ctx: v2.Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, plugin: Plugin, envInfo?: EnvInfoV2): Promise<Result<Void, FxError>>;
export declare function configureLocalResourceAdapter(ctx: v2.Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, plugin: Plugin, envInfo?: EnvInfoV2): Promise<Result<Void, FxError>>;
export declare function executeUserTaskAdapter(ctx: v2.Context, inputs: Inputs, func: Func, localSettings: Json, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<unknown, FxError>>;
export declare function getQuestionsForScaffoldingAdapter(ctx: v2.Context, inputs: Inputs, plugin: Plugin): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsAdapter(ctx: v2.Context, inputs: Inputs, envInfo: v2.DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForUserTaskAdapter(ctx: v2.Context, inputs: Inputs, func: Func, envInfo: v2.DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function setStateV2ByConfigMapInc(pluginName: string, state: Json, config: ConfigMap): void;
export declare function setEnvInfoV1ByStateV2(pluginName: string, pluginContext: PluginContext, envInfoV2: v2.EnvInfoV2): void;
export declare function assignJsonInc(target?: Json, source?: Json): Json | undefined;
export declare function collaborationApiAdaptor(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider, userInfo: Json, plugin: Plugin, taskName: "grantPermission" | "listCollaborator" | "checkPermission"): Promise<Result<Json, FxError>>;
//# sourceMappingURL=utils4v2.d.ts.map