"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimPluginV2 = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const __1 = require("..");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const utils4v2_1 = require("../../utils4v2");
let ApimPluginV2 = class ApimPluginV2 {
    constructor() {
        this.name = "fx-resource-apim";
        this.displayName = "API Management";
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        return this.plugin.activate(solutionSettings);
    }
    async getQuestions(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.getQuestionsAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async scaffoldSourceCode(ctx, inputs) {
        return await utils4v2_1.scaffoldSourceCodeAdapter(ctx, inputs, this.plugin);
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.provisionResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async configureResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.configureResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        // const questionRes = await this.plugin.getQuestions(
        //   Stage.deploy,
        //   convert2PluginContext(ctx, inputs)
        // );
        // if (questionRes.isOk()) {
        //   const node = questionRes.value;
        //   if (node) {
        //     const res = await traverse(node, inputs, ctx.userInteraction);
        //     if (res.isErr()) {
        //       return err(res.error);
        //     }
        //   }
        // }
        return await utils4v2_1.deployAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        return await utils4v2_1.executeUserTaskAdapter(ctx, inputs, func, localSettings, envInfo, tokenProvider, this.plugin);
    }
    async generateResourceTemplate(ctx, inputs) {
        return await utils4v2_1.generateResourceTemplateAdapter(ctx, inputs, this.plugin);
    }
    async updateResourceTemplate(ctx, inputs) {
        return await utils4v2_1.updateResourceTemplateAdapter(ctx, inputs, this.plugin);
    }
};
tslib_1.__decorate([
    typedi_1.Inject(ResourcePluginContainer_1.ResourcePlugins.ApimPlugin),
    tslib_1.__metadata("design:type", __1.ApimPlugin)
], ApimPluginV2.prototype, "plugin", void 0);
ApimPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.ApimPlugin)
], ApimPluginV2);
exports.ApimPluginV2 = ApimPluginV2;
//# sourceMappingURL=index.js.map