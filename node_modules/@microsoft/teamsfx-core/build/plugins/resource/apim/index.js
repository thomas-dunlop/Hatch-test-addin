"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimPlugin = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const utils_1 = require("../../../common/utils");
const answer_1 = require("../../../component/resource/apim/answer");
const config_1 = require("../../../component/resource/apim/config");
const constants_1 = require("../../../component/resource/apim/constants");
const error_1 = require("../../../component/resource/apim/error");
const factory_1 = require("../../../component/resource/apim/factory");
const progressBar_1 = require("../../../component/resource/apim/utils/progressBar");
const telemetry_1 = require("../../../component/resource/apim/utils/telemetry");
const question_1 = require("../../solution/fx-solution/question");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
require("./v2");
let ApimPlugin = class ApimPlugin {
    constructor() {
        this.name = "fx-resource-apim";
        this.displayName = "API Management";
        this.progressBar = new progressBar_1.ProgressBar();
    }
    activate(solutionSettings) {
        const azureResources = solutionSettings.azureResources ? solutionSettings.azureResources : [];
        return azureResources.includes(question_1.AzureResourceApim.id);
    }
    async getQuestions(stage, ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.GetQuestions, _getQuestions, ctx, stage);
    }
    async callFunc(func, ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.CallFunc, _callFunc, ctx, func);
    }
    async scaffold(ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.Scaffold, _scaffold, ctx);
    }
    async updateArmTemplates(ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.UpdateArmTemplates, _updateArmTemplates, ctx);
    }
    async generateArmTemplates(ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.GenerateArmTemplates, _generateArmTemplates, ctx);
    }
    async provision(ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.Provision, _provision, ctx);
    }
    async postProvision(ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.PostProvision, _postProvision, ctx);
    }
    async deploy(ctx) {
        return await this.executeWithFxError(constants_1.PluginLifeCycle.Deploy, _deploy, ctx);
    }
    async executeUserTask(func, ctx) {
        if (func.method === constants_1.UserTask.addResourceFuncName ||
            func.method === constants_1.UserTask.addFeatureFuncName) {
            return await this.executeWithFxError(constants_1.PluginLifeCycle.Scaffold, _scaffold, ctx);
        }
        return teamsfx_api_1.err(error_1.BuildError(error_1.NotImplemented));
    }
    async executeWithFxError(lifeCycle, fn, ctx, ...params) {
        var _a;
        try {
            await this.progressBar.init(constants_1.PluginLifeCycleToProgressStep[lifeCycle], ctx.ui);
            telemetry_1.Telemetry.sendLifeCycleEvent(ctx.telemetryReporter, lifeCycle, constants_1.OperationStatus.Started);
            const result = await fn(ctx, this.progressBar, ...params);
            telemetry_1.Telemetry.sendLifeCycleEvent(ctx.telemetryReporter, lifeCycle, constants_1.OperationStatus.Succeeded);
            await this.progressBar.close(constants_1.PluginLifeCycleToProgressStep[lifeCycle], true);
            return teamsfx_api_1.ok(result);
        }
        catch (error) {
            let packagedError;
            if (error instanceof teamsfx_api_1.SystemError || error instanceof teamsfx_api_1.UserError) {
                packagedError = error;
            }
            else if (error instanceof Error) {
                packagedError = error_1.BuildError(error_1.UnhandledError, error);
            }
            else {
                packagedError = error_1.BuildError(error_1.UnhandledError);
            }
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.error(`[${constants_1.ProjectConstants.pluginDisplayName}] ${error.message}`);
            telemetry_1.Telemetry.sendLifeCycleEvent(ctx.telemetryReporter, lifeCycle, constants_1.OperationStatus.Failed, packagedError);
            await this.progressBar.close(constants_1.PluginLifeCycleToProgressStep[lifeCycle], false);
            return teamsfx_api_1.err(packagedError);
        }
    }
};
ApimPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.ApimPlugin)
], ApimPlugin);
exports.ApimPlugin = ApimPlugin;
async function _getQuestions(ctx, progressBar, stage) {
    const apimConfig = new config_1.ApimPluginConfig(ctx.config, ctx.envInfo.envName);
    const questionManager = await factory_1.Factory.buildQuestionManager(ctx.answers.platform, ctx.envInfo, ctx.azureAccountProvider, ctx.telemetryReporter, ctx.logProvider);
    switch (stage) {
        case teamsfx_api_1.Stage.deploy:
            return await questionManager.deploy(ctx.root, ctx.envInfo, apimConfig);
        default:
            return undefined;
    }
}
async function _callFunc(ctx, progressBar, func) {
    const questionManager = await factory_1.Factory.buildQuestionManager(ctx.answers.platform, ctx.envInfo, ctx.azureAccountProvider, ctx.telemetryReporter, ctx.logProvider);
    return await questionManager.callFunc(func, ctx);
}
async function _scaffold(ctx, progressBar) {
    var _a;
    const scaffoldManager = await factory_1.Factory.buildScaffoldManager(ctx.telemetryReporter, ctx.logProvider);
    const appName = error_1.AssertNotEmpty("projectSettings.appName", (_a = ctx === null || ctx === void 0 ? void 0 : ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.appName);
    const convertedAppName = utils_1.convertToAlphanumericOnly(appName);
    await progressBar.next(constants_1.ProgressStep.Scaffold, constants_1.ProgressMessages[constants_1.ProgressStep.Scaffold].Scaffold);
    await scaffoldManager.scaffold(convertedAppName, ctx.root);
}
async function _provision(ctx, progressBar) {
    var _a;
    const apimConfig = new config_1.ApimPluginConfig(ctx.config, ctx.envInfo.envName);
    const apimManager = await factory_1.Factory.buildApimManager(ctx.envInfo, ctx.telemetryReporter, ctx.azureAccountProvider, ctx.logProvider);
    const aadManager = await factory_1.Factory.buildAadManager(ctx.m365TokenProvider, ctx.telemetryReporter, ctx.logProvider);
    const appName = error_1.AssertNotEmpty("projectSettings.appName", (_a = ctx === null || ctx === void 0 ? void 0 : ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.appName);
    await progressBar.next(constants_1.ProgressStep.Provision, constants_1.ProgressMessages[constants_1.ProgressStep.Provision].CreateApim);
    await apimManager.provision(apimConfig);
    await progressBar.next(constants_1.ProgressStep.Provision, constants_1.ProgressMessages[constants_1.ProgressStep.Provision].CreateAad);
    await aadManager.provision(apimConfig, appName);
}
async function _updateArmTemplates(ctx, progressBar) {
    const apimManager = await factory_1.Factory.buildApimManager(ctx.envInfo, ctx.telemetryReporter, ctx.azureAccountProvider, ctx.logProvider);
    return await apimManager.updateArmTemplates(ctx);
}
async function _generateArmTemplates(ctx, progressBar) {
    const apimManager = await factory_1.Factory.buildApimManager(ctx.envInfo, ctx.telemetryReporter, ctx.azureAccountProvider, ctx.logProvider);
    return await apimManager.generateArmTemplates(ctx);
}
async function _postProvision(ctx, progressBar) {
    const apimConfig = new config_1.ApimPluginConfig(ctx.config, ctx.envInfo.envName);
    const aadConfig = new config_1.AadPluginConfig(ctx.envInfo);
    const aadManager = await factory_1.Factory.buildAadManager(ctx.m365TokenProvider, ctx.telemetryReporter, ctx.logProvider);
    const teamsAppAadManager = await factory_1.Factory.buildTeamsAppAadManager(ctx.m365TokenProvider, ctx.telemetryReporter, ctx.logProvider);
    await progressBar.next(constants_1.ProgressStep.PostProvision, constants_1.ProgressMessages[constants_1.ProgressStep.PostProvision].ConfigClientAad);
    await aadManager.postProvision(apimConfig, aadConfig, constants_1.AadDefaultValues.redirectUris);
    await progressBar.next(constants_1.ProgressStep.PostProvision, constants_1.ProgressMessages[constants_1.ProgressStep.PostProvision].ConfigAppAad);
    await teamsAppAadManager.postProvision(aadConfig, apimConfig);
    // Delete user sensitive configuration
    ctx.config.delete(constants_1.ApimPluginConfigKeys.publisherEmail);
    ctx.config.delete(constants_1.ApimPluginConfigKeys.publisherName);
}
async function _deploy(ctx, progressBar) {
    const solutionConfig = new config_1.SolutionConfig(ctx.envInfo);
    const apimConfig = new config_1.ApimPluginConfig(ctx.config, ctx.envInfo.envName);
    const functionConfig = new config_1.FunctionPluginConfig(ctx.envInfo);
    const answer = answer_1.buildAnswer(ctx.answers);
    if (answer.validate) {
        await answer.validate(constants_1.PluginLifeCycle.Deploy, apimConfig, ctx.root);
    }
    answer.save(constants_1.PluginLifeCycle.Deploy, apimConfig);
    const apimManager = await factory_1.Factory.buildApimManager(ctx.envInfo, ctx.telemetryReporter, ctx.azureAccountProvider, ctx.logProvider);
    await progressBar.next(constants_1.ProgressStep.Deploy, constants_1.ProgressMessages[constants_1.ProgressStep.Deploy].ImportApi);
    await apimManager.deploy(apimConfig, solutionConfig, functionConfig, answer, ctx.root);
}
exports.default = new ApimPlugin();
//# sourceMappingURL=index.js.map