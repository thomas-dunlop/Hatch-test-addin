import { OptionItem } from "@microsoft/teamsfx-api";
export declare class RegularExprs {
    static readonly CHARS_TO_BE_SKIPPED: RegExp;
    static readonly RESOURCE_SUFFIX: RegExp;
    static readonly APP_SERVICE_PLAN_NAME: RegExp;
    static readonly WEB_APP_SITE_NAME: RegExp;
    static readonly BOT_CHANNEL_REG_NAME: RegExp;
}
export declare class WebAppConstants {
    static readonly WEB_APP_SITE_DOMAIN: string;
}
export declare class AADRegistrationConstants {
    static readonly GRAPH_REST_BASE_URL: string;
    static readonly AZURE_AD_MULTIPLE_ORGS: string;
}
export declare class TemplateProjectsConstants {
    static readonly GROUP_NAME_BOT: string;
    static readonly GROUP_NAME_BOT_MSGEXT: string;
}
export declare enum TemplateProjectsScenarios {
    DEFAULT_SCENARIO_NAME = "default",
    NOTIFICATION_RESTIFY_SCENARIO_NAME = "notification-restify",
    NOTIFICATION_WEBAPI_SCENARIO_NAME = "notification-webapi",
    NOTIFICATION_FUNCTION_BASE_SCENARIO_NAME = "notification-function-base",
    NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME = "notification-trigger-http",
    NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME = "notification-trigger-timer",
    COMMAND_AND_RESPONSE_SCENARIO_NAME = "command-and-response",
    WORKFLOW_SCENARIO_NAME = "workflow",
    M365_SCENARIO_NAME = "m365"
}
export declare const TriggerTemplateScenarioMappings: {
    readonly http: TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME;
    readonly timer: TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME;
};
export declare const DEFAULT_DOTNET_FRAMEWORK = "net6.0";
export declare class ProgressBarConstants {
    static readonly SCAFFOLD_TITLE: string;
    static readonly SCAFFOLD_STEP_START = "Scaffolding bot.";
    static readonly SCAFFOLD_STEP_FETCH_ZIP = "Retrieving templates.";
    static readonly SCAFFOLD_STEPS_NUM: number;
    static readonly SCAFFOLD_FUNCTIONS_NOTIFICATION_STEP_START = "Scaffolding notification bot.";
    static readonly SCAFFOLD_FUNCTIONS_NOTIFICATION_STEP_FETCH_PROJECT_TEMPLATE = "Retrieving project templates.";
    static readonly SCAFFOLD_FUNCTIONS_NOTIFICATION_STEP_FETCH_TRIGGER_TEMPLATE = "Retrieving trigger templates.";
    static readonly SCAFFOLD_FUNCTIONS_NOTIFICATION_STEPS_NUM: number;
    static readonly PROVISION_TITLE: string;
    static readonly PROVISION_STEP_START = "Provisioning bot.";
    static readonly PROVISION_STEP_BOT_REG = "Registering bot.";
    static readonly PROVISION_STEPS_NUM: number;
    static readonly LOCAL_DEBUG_TITLE: string;
    static readonly LOCAL_DEBUG_STEP_START = "Provisioning bot for local debug.";
    static readonly LOCAL_DEBUG_STEP_BOT_REG = "Registering bot.";
    static readonly LOCAL_DEBUG_STEPS_NUM: number;
    static readonly DEPLOY_TITLE: string;
    static readonly DEPLOY_STEP_START = "Deploying bot.";
    static readonly DEPLOY_STEP_NPM_INSTALL = "Installing dependencies.";
    static readonly DEPLOY_STEP_ZIP_FOLDER = "Creating application package.";
    static readonly DEPLOY_STEP_ZIP_DEPLOY = "Uploading application package.";
    static readonly DEPLOY_STEPS_NUM: number;
}
export declare class QuestionNames {
    static readonly CAPABILITIES = "capabilities";
    static readonly BOT_HOST_TYPE_TRIGGER = "bot-host-type-trigger";
}
export declare class LifecycleFuncNames {
    static readonly SCAFFOLD = "scaffold";
    static readonly GET_QUETSIONS_FOR_SCAFFOLDING = "get-questions-for-scaffolding";
    static readonly GET_QUETSIONS_FOR_USER_TASK = "get-questions-for-user-task";
    static readonly PRE_PROVISION = "pre-provision";
    static readonly PROVISION = "provision";
    static readonly POST_PROVISION = "post-provision";
    static readonly PRE_DEPLOY = "pre-deploy";
    static readonly DEPLOY = "deploy";
    static readonly LOCAL_DEBUG = "local-debug";
    static readonly POST_LOCAL_DEBUG = "post-local-debug";
    static readonly GENERATE_ARM_TEMPLATES = "generate-arm-templates";
}
export declare class Retry {
    static readonly RETRY_TIMES = 10;
    static readonly BACKOFF_TIME_MS = 5000;
}
export declare class ErrorNames {
    static readonly PRECONDITION_ERROR = "PreconditionError";
    static readonly PROVISION_ERROR = "ProvisionError";
    static readonly CONFIG_UPDATING_ERROR = "ConfigUpdatingError";
    static readonly CONFIG_VALIDATION_ERROR = "ConfigValidationError";
    static readonly MSG_ENDPOINT_UPDATING_ERROR = "MessageEndpointUpdatingError";
    static readonly COMMAND_EXECUTION_ERROR = "CommandExecutionError";
    static readonly CALL_APPSTUDIO_API_ERROR = "CallAppStudioAPIError";
    static readonly PACK_DIR_EXISTENCE_ERROR = "PackDirectoryExistenceError";
}
export declare class Links {
    static readonly ISSUE_LINK = "https://github.com/OfficeDev/TeamsFx/issues/new";
    static readonly HELP_LINK = "https://aka.ms/teamsfx-bot-help";
}
export declare class Alias {
    static readonly TEAMS_BOT_PLUGIN = "BT";
    static readonly BICEP_MODULE = "bot";
}
export declare class QuestionOptions {
    static readonly PROGRAMMING_LANGUAGE_OPTIONS: OptionItem[];
}
export declare class DeployConfigs {
    static readonly UN_PACK_DIRS: string[];
    static readonly DEPLOYMENT_FOLDER = ".deployment";
    static readonly DEPLOYMENT_CONFIG_FILE = "bot.json";
    static readonly WALK_SKIP_PATHS: string[];
}
export declare class ConfigKeys {
    static readonly SITE_NAME = "siteName";
    static readonly SITE_ENDPOINT = "siteEndpoint";
    static readonly APP_SERVICE_PLAN = "appServicePlan";
    static readonly BOT_CHANNEL_REG_NAME = "botChannelRegName";
}
export declare class FolderNames {
    static readonly NODE_MODULES = "node_modules";
    static readonly KEYTAR = "keytar";
}
export declare class TypeNames {
    static readonly NUMBER = "number";
}
export declare class MaxLengths {
    static readonly AAD_DISPLAY_NAME = 120;
}
export declare class TelemetryKeys {
    static readonly Component = "component";
    static readonly Success = "success";
    static readonly ErrorType = "error-type";
    static readonly ErrorMessage = "error-message";
    static readonly ErrorCode = "error-code";
    static readonly AppId = "appid";
    static readonly HostType = "bot-host-type";
    static readonly BotCapabilities = "bot-capabilities";
    static readonly StatusCode = "status-code";
    static readonly Url = "url";
    static readonly Method = "method";
}
export declare class TelemetryValues {
    static readonly Success = "yes";
    static readonly Fail = "no";
    static readonly UserError = "user";
    static readonly SystemError = "system";
}
export declare class AzureConstants {
    static readonly requiredResourceProviders: string[];
}
export declare class PathInfo {
    static readonly BicepTemplateRelativeDir: string;
    static readonly ProvisionModuleTemplateFileName = "botProvision.template.bicep";
    static readonly FuncHostedProvisionModuleTemplateFileName = "funcHostedBotProvision.template.bicep";
    static readonly ConfigurationModuleTemplateFileName = "botConfiguration.template.bicep";
}
export declare class BotBicep {
    static readonly resourceId: string;
    static readonly hostName: string;
    static readonly webAppEndpoint: string;
}
export declare const CustomizedTasks: {
    readonly addCapability: "addCapability";
    readonly addFeature: "addFeature";
};
//# sourceMappingURL=constants.d.ts.map