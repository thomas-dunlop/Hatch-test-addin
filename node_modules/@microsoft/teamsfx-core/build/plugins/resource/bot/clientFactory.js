"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureResourceProvider = exports.findResourceProvider = exports.createResourceProviderClient = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const errors_1 = require("./errors");
const messages_1 = require("./resources/messages");
const arm_resources_1 = require("@azure/arm-resources");
const logger_1 = require("./logger");
function createResourceProviderClient(credentials, subscriptionId) {
    return new arm_resources_1.Providers(new arm_resources_1.ResourceManagementClientContext(credentials, subscriptionId));
}
exports.createResourceProviderClient = createResourceProviderClient;
async function findResourceProvider(client, namespace) {
    var _a;
    const provider = await client.get(namespace);
    if (((_a = provider.registrationState) === null || _a === void 0 ? void 0 : _a.trim()) === "Registered") {
        return provider;
    }
}
exports.findResourceProvider = findResourceProvider;
async function ensureResourceProvider(client, providerNamespaces) {
    try {
        return Promise.all(providerNamespaces.map(async (namespace) => {
            const foundRP = await findResourceProvider(client, namespace);
            if (!foundRP) {
                return client.register(namespace);
            }
            logger_1.Logger.info(messages_1.Messages.ResourceProviderExist(namespace));
            return foundRP;
        }));
    }
    catch (e) {
        throw new errors_1.RegisterResourceProviderError(e);
    }
}
exports.ensureResourceProvider = ensureResourceProvider;
//# sourceMappingURL=clientFactory.js.map