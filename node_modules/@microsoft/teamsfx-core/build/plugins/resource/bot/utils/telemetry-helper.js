"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
const strings_1 = require("../resources/strings");
const constants_2 = require("../../../../component/resource/appManifest/constants");
class telemetryHelper {
    static fillCommonProperty(ctx, properties) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        properties[constants_1.TelemetryKeys.Component] = strings_1.PluginBot.PLUGIN_NAME;
        properties[constants_1.TelemetryKeys.AppId] =
            ((_a = ctx.envInfo.state
                .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _a === void 0 ? void 0 : _a.get(strings_1.PluginSolution.REMOTE_TEAMS_APPID)) || "";
        properties[constants_1.TelemetryKeys.HostType] =
            (_e = (_d = (_c = (_b = ctx.projectSettings) === null || _b === void 0 ? void 0 : _b.pluginSettings) === null || _c === void 0 ? void 0 : _c[strings_1.PluginBot.PLUGIN_NAME]) === null || _d === void 0 ? void 0 : _d[strings_1.PluginBot.HOST_TYPE]) !== null && _e !== void 0 ? _e : "";
        // bot-capabilities is an array
        const capabilities = (_h = (_g = (_f = ctx.projectSettings) === null || _f === void 0 ? void 0 : _f.pluginSettings) === null || _g === void 0 ? void 0 : _g[strings_1.PluginBot.PLUGIN_NAME]) === null || _h === void 0 ? void 0 : _h[strings_1.PluginBot.BOT_CAPABILITIES];
        properties[constants_1.TelemetryKeys.BotCapabilities] = capabilities ? JSON.stringify(capabilities) : "";
    }
    static fillAppStudioErrorProperty(innerError, properties) {
        var _a, _b, _c, _d, _e, _f, _g;
        const appStudioUrl = `${constants_2.getAppStudioEndpoint()}/api/botframework`;
        const url = (_c = (_b = (_a = innerError === null || innerError === void 0 ? void 0 : innerError.toJSON) === null || _a === void 0 ? void 0 : _a.call(innerError)) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.url;
        if (url && url.startsWith(appStudioUrl)) {
            properties[constants_1.TelemetryKeys.Url] = "<botframework-url>";
        }
        else {
            return;
        }
        const statusCode = `${(_d = innerError === null || innerError === void 0 ? void 0 : innerError.response) === null || _d === void 0 ? void 0 : _d.status}`;
        if (statusCode) {
            properties[constants_1.TelemetryKeys.StatusCode] = statusCode;
        }
        const method = (_g = (_f = (_e = innerError === null || innerError === void 0 ? void 0 : innerError.toJSON) === null || _e === void 0 ? void 0 : _e.call(innerError)) === null || _f === void 0 ? void 0 : _f.config) === null || _g === void 0 ? void 0 : _g.method;
        if (method) {
            properties[constants_1.TelemetryKeys.Method] = method;
        }
    }
    static sendStartEvent(ctx, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Success;
        this.fillCommonProperty(ctx, properties);
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(ctx, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Success;
        this.fillCommonProperty(ctx, properties);
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(ctx, eventName, e, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Fail;
        properties[constants_1.TelemetryKeys.ErrorMessage] = e.message;
        properties[constants_1.TelemetryKeys.ErrorCode] = e.name;
        this.fillCommonProperty(ctx, properties);
        this.fillAppStudioErrorProperty(e.innerError, properties);
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[constants_1.TelemetryKeys.ErrorType] = constants_1.TelemetryValues.SystemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[constants_1.TelemetryKeys.ErrorType] = constants_1.TelemetryValues.UserError;
        }
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements, [
            constants_1.TelemetryKeys.ErrorMessage,
        ]);
    }
    static sendResultEvent(ctx, eventName, result, properties = {}, measurements = {}) {
        result.match(() => this.sendSuccessEvent(ctx, eventName, properties, measurements), (e) => this.sendErrorEvent(ctx, eventName, e, properties, measurements));
    }
}
exports.telemetryHelper = telemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map