import { AzureSolutionSettings, Func, FxError, Plugin, PluginContext, QTreeNode, Result, Stage } from "@microsoft/teamsfx-api";
import { FxResult } from "./result";
import { TeamsBotImpl } from "./plugin";
import "./v2";
import { DotnetBotImpl } from "./dotnet/plugin";
import { PluginImpl } from "./interface";
import { FunctionsHostedBotImpl } from "./functionsHostedBot/plugin";
export declare class TeamsBot implements Plugin {
    name: string;
    displayName: string;
    activate(solutionSettings: AzureSolutionSettings): boolean;
    teamsBotImpl: TeamsBotImpl;
    dotnetBotImpl: DotnetBotImpl;
    functionsBotImpl: FunctionsHostedBotImpl;
    /**
     * @param isScaffold true for `scaffold` lifecycle, false otherwise.
     * @param context context of plugin
     */
    getImpl(context: PluginContext, isScaffold?: boolean): PluginImpl;
    scaffold(context: PluginContext): Promise<FxResult>;
    preProvision(context: PluginContext): Promise<FxResult>;
    provision(context: PluginContext): Promise<FxResult>;
    postProvision(context: PluginContext): Promise<FxResult>;
    updateArmTemplates(context: PluginContext): Promise<FxResult>;
    generateArmTemplates(context: PluginContext): Promise<FxResult>;
    preDeploy(context: PluginContext): Promise<FxResult>;
    deploy(context: PluginContext): Promise<FxResult>;
    localDebug(context: PluginContext): Promise<FxResult>;
    postLocalDebug(context: PluginContext): Promise<FxResult>;
    getQuestions(stage: Stage, context: PluginContext): Promise<Result<QTreeNode | undefined, FxError>>;
    getQuestionsForUserTask(func: Func, context: PluginContext): Promise<Result<QTreeNode | undefined, FxError>>;
    private static isFunctionsHostedBot;
}
declare const _default: TeamsBot;
export default _default;
//# sourceMappingURL=index.d.ts.map