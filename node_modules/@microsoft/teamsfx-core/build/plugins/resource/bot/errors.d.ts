import { PluginContext } from "@microsoft/teamsfx-api";
import { FxResult } from "./result";
export declare const ErrorType: {
    readonly USER: "User";
    readonly SYSTEM: "System";
};
export declare type ErrorType = typeof ErrorType[keyof typeof ErrorType];
export declare type InnerError = HttpError | Error | ErrorWithMessage | ErrorWithCode | unknown;
export declare type HttpError = {
    response: {
        status?: number;
        data?: {
            errorMessage?: string;
            error?: {
                code?: string;
                message?: string;
            };
            errors?: any;
        };
    };
};
export declare type ErrorWithMessage = {
    message: string;
};
export declare type ErrorWithCode = {
    code: string;
};
export declare function isHttpError(e: InnerError): e is HttpError;
export declare function isErrorWithMessage(e: InnerError): e is ErrorWithMessage;
export declare function isPluginError(e: unknown): e is PluginError;
export declare class PluginError extends Error {
    name: string;
    details: [string, string];
    suggestions: string[];
    errorType: ErrorType;
    innerError?: InnerError;
    helpLink?: string;
    constructor(type: ErrorType, name: string, details: [string, string], suggestions: string[], innerError?: InnerError, helpLink?: string);
    genMessage(): string;
    genDisplayMessage(): string;
}
export declare class PreconditionError extends PluginError {
    constructor(message: [string, string], suggestions: string[]);
}
export declare class SomethingMissingError extends PreconditionError {
    constructor(something: string);
}
export declare function checkAndThrowIfMissing<T>(name: string, value: T | null | undefined): T;
export declare function checkPrecondition<T>(message: [string, string], value: T | null | undefined): T;
export declare class AADAppCheckingError extends PluginError {
    constructor(innerError?: InnerError);
}
export declare class CreateAADAppError extends PluginError {
    constructor(innerError?: InnerError);
}
export declare class CreateAADSecretError extends PluginError {
    constructor(innerError?: InnerError);
}
export declare class TemplateZipFallbackError extends PluginError {
    constructor();
}
export declare class ProvisionError extends PluginError {
    constructor(resource: string, innerError?: InnerError);
}
export declare class UnzipError extends PluginError {
    constructor(path?: string);
}
export declare class ConfigUpdatingError extends PluginError {
    constructor(configName: string, innerError?: InnerError);
}
export declare class ConfigValidationError extends PluginError {
    constructor(name: string, value: string);
}
export declare class PackDirExistenceError extends PluginError {
    constructor();
}
export declare class MessageEndpointUpdatingError extends PluginError {
    constructor(endpoint: string, innerError?: InnerError);
}
export declare class CommandExecutionError extends PluginError {
    constructor(cmd: string, path: string, innerError?: InnerError);
}
export declare class RegisterResourceProviderError extends PluginError {
    constructor(innerError?: InnerError);
}
export declare function wrapError(e: InnerError, context: PluginContext, sendTelemetry: boolean, name: string): FxResult;
export declare function runWithExceptionCatching<T>(context: PluginContext, fn: () => Promise<FxResult>, sendTelemetry: boolean, name: string): Promise<FxResult>;
//# sourceMappingURL=errors.d.ts.map