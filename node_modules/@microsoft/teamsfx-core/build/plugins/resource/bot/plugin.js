"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsBotImpl = void 0;
const tslib_1 = require("tslib");
const aadRegistration_1 = require("./aadRegistration");
const utils = tslib_1.__importStar(require("./utils/common"));
const languageStrategy_1 = require("./languageStrategy");
const messages_1 = require("./resources/messages");
const result_1 = require("./result");
const constants_1 = require("./constants");
const zipDeploy_1 = require("./utils/zipDeploy");
const appService = tslib_1.__importStar(require("@azure/arm-appservice"));
const fs = tslib_1.__importStar(require("fs-extra"));
const strings_1 = require("./resources/strings");
const errors_1 = require("./errors");
const teamsBotConfig_1 = require("./configs/teamsBotConfig");
const progressBars_1 = require("./progressBars");
const resourceNameFactory_1 = require("./utils/resourceNameFactory");
const appStudio_1 = require("./appStudio/appStudio");
const logger_1 = require("./logger");
const deployMgr_1 = require("./deployMgr");
const botAuthCredential_1 = require("./botAuthCredential");
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../../folder");
const constants_2 = require("../../../common/constants");
const common_1 = require("../../../common");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const constants_3 = require("../appstudio/constants");
const azureOps_1 = require("../../../common/azure-hosting/azureOps");
const enum_1 = require("./v2/enum");
const utils_1 = require("../../../common/utils");
class TeamsBotImpl {
    constructor() {
        // Made config public, because expect the upper layer to fill inputs.
        this.config = new teamsBotConfig_1.TeamsBotConfig();
    }
    async getAzureAccountCredential() {
        var _a, _b;
        const serviceClientCredentials = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.azureAccountProvider) === null || _b === void 0 ? void 0 : _b.getAccountCredentialAsync());
        if (!serviceClientCredentials) {
            throw new errors_1.PreconditionError(messages_1.Messages.FailToGetAzureCreds, [messages_1.Messages.TryLoginAzure]);
        }
        return serviceClientCredentials;
    }
    async scaffold(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context, true);
        logger_1.Logger.info(messages_1.Messages.ScaffoldingBot);
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.SCAFFOLD_TITLE, constants_1.ProgressBarConstants.SCAFFOLD_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.SCAFFOLD_STEP_START));
        if (common_1.isBotNotificationEnabled()) {
            this.config.scaffold.hostType = enum_1.HostType.AppService;
        }
        // 1. Copy the corresponding template project into target directory.
        // Get group name.
        const group_name = constants_1.TemplateProjectsConstants.GROUP_NAME_BOT;
        if (!this.config.actRoles || this.config.actRoles.length === 0) {
            throw new errors_1.SomethingMissingError("act roles");
        }
        // const hasBot = this.config.actRoles.includes(PluginActRoles.Bot);
        // const hasMsgExt = this.config.actRoles.includes(PluginActRoles.MessageExtension);
        // if (hasBot && hasMsgExt) {
        // group_name = TemplateProjectsConstants.GROUP_NAME_BOT_MSGEXT;
        // } else if (hasBot) {
        //   group_name = TemplateProjectsConstants.GROUP_NAME_BOT;
        // } else {
        //   group_name = TemplateProjectsConstants.GROUP_NAME_MSGEXT;
        // }
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.SCAFFOLD_STEP_FETCH_ZIP));
        await languageStrategy_1.LanguageStrategy.scaffoldProject(group_name, this.config);
        this.config.saveConfigIntoContext(context);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyScaffoldedBot);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async preProvision(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.PreProvisioningBot);
        // Preconditions checking.
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.PROGRAMMING_LANGUAGE, this.config.scaffold.programmingLanguage);
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async provision(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.ProvisioningBot);
        // Create and register progress bar for cleanup.
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.PROVISION_TITLE, constants_1.ProgressBarConstants.PROVISION_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.PROVISION_STEP_START));
        // 1. Do bot registration.
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.PROVISION_STEP_BOT_REG));
        await this.registerBotApp();
        return result_1.FxBotPluginResultFactory.Success();
    }
    async updateArmTemplates(ctx) {
        logger_1.Logger.info(messages_1.Messages.UpdatingArmTemplatesBot);
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.PathInfo.BicepTemplateRelativeDir);
        const configModule = await common_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.PathInfo.ConfigurationModuleTemplateFileName), pluginCtx);
        const result = {
            Reference: {
                resourceId: constants_1.BotBicep.resourceId,
                hostName: constants_1.BotBicep.hostName,
                webAppEndpoint: constants_1.BotBicep.webAppEndpoint,
            },
            Configuration: {
                Modules: { bot: configModule },
            },
        };
        logger_1.Logger.info(messages_1.Messages.SuccessfullyUpdateArmTemplatesBot);
        return result_1.FxBotPluginResultFactory.Success(result);
    }
    async generateArmTemplates(ctx) {
        logger_1.Logger.info(messages_1.Messages.GeneratingArmTemplatesBot);
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = {
            plugins: plugins.map((obj) => obj.name),
            enableAlwaysOn: common_1.isBotNotificationEnabled(),
        };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.PathInfo.BicepTemplateRelativeDir);
        const provisionOrchestration = await common_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await common_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.PathInfo.ProvisionModuleTemplateFileName), pluginCtx);
        const configOrchestration = await common_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ConfigFileName), pluginCtx);
        const configModule = await common_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.PathInfo.ConfigurationModuleTemplateFileName), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { bot: provisionModules },
            },
            Configuration: {
                Orchestration: configOrchestration,
                Modules: { bot: configModule },
            },
            Reference: {
                resourceId: constants_1.BotBicep.resourceId,
                hostName: constants_1.BotBicep.hostName,
                webAppEndpoint: constants_1.BotBicep.webAppEndpoint,
            },
            Parameters: JSON.parse(await fs.readFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ParameterFileName), constants_2.ConstantString.UTF8Encoding)),
        };
        logger_1.Logger.info(messages_1.Messages.SuccessfullyGenerateArmTemplatesBot);
        return result_1.FxBotPluginResultFactory.Success(result);
    }
    async postProvision(context) {
        return result_1.FxBotPluginResultFactory.Success();
    }
    async preDeploy(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.PreDeployingBot);
        // Preconditions checking.
        const packDirExisted = await fs.pathExists(this.config.scaffold.workingDir);
        if (!packDirExisted) {
            throw new errors_1.PackDirExistenceError();
        }
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.SITE_ENDPOINT, this.config.provision.siteEndpoint);
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.PROGRAMMING_LANGUAGE, this.config.scaffold.programmingLanguage);
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.BOT_SERVICE_RESOURCE_ID, this.config.provision.botWebAppResourceId);
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.SUBSCRIPTION_ID, this.config.provision.subscriptionId);
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.RESOURCE_GROUP, this.config.provision.resourceGroup);
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async deploy(context) {
        var _a, _b;
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        this.config.provision.subscriptionId = common_1.getSubscriptionIdFromResourceId(this.config.provision.botWebAppResourceId);
        this.config.provision.resourceGroup = common_1.getResourceGroupNameFromResourceId(this.config.provision.botWebAppResourceId);
        this.config.provision.siteName = common_1.getSiteNameFromResourceId(this.config.provision.botWebAppResourceId);
        logger_1.Logger.info(messages_1.Messages.DeployingBot);
        const workingDir = this.config.scaffold.workingDir;
        if (!workingDir) {
            throw new errors_1.PreconditionError(messages_1.Messages.WorkingDirIsMissing, []);
        }
        const deployTimeCandidate = Date.now();
        const deployMgr = new deployMgr_1.DeployMgr(workingDir, this.ctx.envInfo.envName);
        await deployMgr.init();
        if (!(await deployMgr.needsToRedeploy())) {
            logger_1.Logger.debug(messages_1.Messages.SkipDeployNoUpdates);
            return result_1.FxBotPluginResultFactory.Success();
        }
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.DEPLOY_TITLE, constants_1.ProgressBarConstants.DEPLOY_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.DEPLOY_STEP_START));
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.DEPLOY_STEP_NPM_INSTALL));
        await languageStrategy_1.LanguageStrategy.localBuild(this.config.scaffold.programmingLanguage, workingDir, this.config.deploy.unPackFlag === "true" ? true : false);
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.DEPLOY_STEP_ZIP_FOLDER));
        const zipBuffer = utils.zipAFolder(workingDir, constants_1.DeployConfigs.UN_PACK_DIRS, [
            `${constants_1.FolderNames.NODE_MODULES}/${constants_1.FolderNames.KEYTAR}`,
        ]);
        // 2.2 Retrieve publishing credentials.
        const webSiteMgmtClient = new appService.WebSiteManagementClient(await this.getAzureAccountCredential(), this.config.provision.subscriptionId);
        const listResponse = await azureOps_1.AzureOperations.listPublishingCredentials(webSiteMgmtClient, this.config.provision.resourceGroup, this.config.provision.siteName);
        const publishingUserName = (_a = listResponse.publishingUserName) !== null && _a !== void 0 ? _a : "";
        const publishingPassword = (_b = listResponse.publishingPassword) !== null && _b !== void 0 ? _b : "";
        const encryptedCreds = utils.toBase64(`${publishingUserName}:${publishingPassword}`);
        const config = {
            headers: {
                Authorization: `Basic ${encryptedCreds}`,
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
        };
        const zipDeployEndpoint = zipDeploy_1.getZipDeployEndpoint(this.config.provision.siteName);
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.DEPLOY_STEP_ZIP_DEPLOY));
        const statusUrl = await azureOps_1.AzureOperations.zipDeployPackage(zipDeployEndpoint, zipBuffer, config);
        await azureOps_1.AzureOperations.checkDeployStatus(statusUrl, config);
        await deployMgr.updateLastDeployTime(deployTimeCandidate);
        this.config.saveConfigIntoContext(context);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyDeployedBot);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async localDebug(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.LOCAL_DEBUG_TITLE, constants_1.ProgressBarConstants.LOCAL_DEBUG_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.LOCAL_DEBUG_STEP_START));
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.LOCAL_DEBUG_STEP_BOT_REG));
        await this.createNewBotRegistrationOnAppStudio();
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async postLocalDebug(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.LOCAL_ENDPOINT, context.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(constants_1.ConfigKeys.SITE_ENDPOINT));
        await this.updateMessageEndpointOnAppStudio(`${context.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(constants_1.ConfigKeys.SITE_ENDPOINT)}${strings_1.CommonStrings.MESSAGE_ENDPOINT_SUFFIX}`);
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async updateMessageEndpointOnAppStudio(endpoint) {
        var _a, _b, _c, _d;
        const appStudioTokenRes = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.m365TokenProvider) === null || _b === void 0 ? void 0 : _b.getAccessToken({
            scopes: common_1.AppStudioScopes,
        }));
        const appStudioToken = errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, (appStudioTokenRes === null || appStudioTokenRes === void 0 ? void 0 : appStudioTokenRes.isOk()) ? appStudioTokenRes.value : undefined);
        errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.LOCAL_BOT_ID, (_c = this.ctx) === null || _c === void 0 ? void 0 : _c.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(constants_3.BOT_ID));
        await appStudio_1.AppStudio.updateMessageEndpoint(appStudioToken, (_d = this.ctx) === null || _d === void 0 ? void 0 : _d.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(constants_3.BOT_ID), endpoint);
    }
    async createNewBotRegistrationOnAppStudio() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const graphTokenRes = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.m365TokenProvider) === null || _b === void 0 ? void 0 : _b.getAccessToken({
            scopes: common_1.GraphScopes,
        }));
        logger_1.Logger.info(messages_1.Messages.ProvisioningBotRegistration);
        const token = errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.GRAPH_TOKEN, (graphTokenRes === null || graphTokenRes === void 0 ? void 0 : graphTokenRes.isOk()) ? graphTokenRes.value : undefined);
        const name = errors_1.checkAndThrowIfMissing(strings_1.CommonStrings.SHORT_APP_NAME, (_d = (_c = this.ctx) === null || _c === void 0 ? void 0 : _c.projectSettings) === null || _d === void 0 ? void 0 : _d.appName);
        // 1. Create a new AAD App Registration with client secret.
        const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, name, constants_1.MaxLengths.AAD_DISPLAY_NAME);
        let botAuthCreds = new botAuthCredential_1.BotAuthCredential();
        if (this.config.localDebug.botAADCreated()
        // if user input AAD, the object id is not required
        // && (await AppStudio.isAADAppExisting(appStudioToken!, this.config.localDebug.localObjectId!))
        ) {
            botAuthCreds.clientId = this.config.localDebug.localBotId;
            botAuthCreds.clientSecret = this.config.localDebug.localBotPassword;
            botAuthCreds.objectId = this.config.localDebug.localObjectId;
            logger_1.Logger.debug(messages_1.Messages.SuccessfullyGetExistingBotAadAppCredential);
        }
        else if ((_f = (_e = this.ctx) === null || _e === void 0 ? void 0 : _e.envInfo.state.get(constants_2.ResourcePlugins.Bot)) === null || _f === void 0 ? void 0 : _f.get(constants_3.BOT_ID)) {
            botAuthCreds.clientId = (_g = this.ctx) === null || _g === void 0 ? void 0 : _g.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(strings_1.PluginBot.BOT_ID);
            botAuthCreds.clientSecret = (_h = this.ctx) === null || _h === void 0 ? void 0 : _h.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(strings_1.PluginBot.BOT_PASSWORD);
            botAuthCreds.objectId = (_j = this.ctx) === null || _j === void 0 ? void 0 : _j.envInfo.state.get(constants_2.ResourcePlugins.Bot).get(strings_1.PluginBot.OBJECT_ID);
            logger_1.Logger.debug(messages_1.Messages.SuccessfullyGetExistingBotAadAppCredential);
        }
        else {
            botAuthCreds = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(token, aadDisplayName, this.config.localDebug.localObjectId, this.config.localDebug.localBotId);
        }
        // 2. Register bot by app studio.
        const botReg = {
            botId: botAuthCreds.clientId,
            name: (!((_l = (_k = this.ctx) === null || _k === void 0 ? void 0 : _k.projectSettings) === null || _l === void 0 ? void 0 : _l.appName)
                ? ""
                : utils_1.convertToAlphanumericOnly((_m = this.ctx.projectSettings) === null || _m === void 0 ? void 0 : _m.appName)) +
                strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
            description: "",
            iconUrl: "",
            messagingEndpoint: "",
            callingEndpoint: "",
        };
        logger_1.Logger.info(messages_1.Messages.ProvisioningBotRegistration);
        const appStudioTokenRes = await ((_p = (_o = this.ctx) === null || _o === void 0 ? void 0 : _o.m365TokenProvider) === null || _p === void 0 ? void 0 : _p.getAccessToken({
            scopes: common_1.AppStudioScopes,
        }));
        const appStudioToken = errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, (appStudioTokenRes === null || appStudioTokenRes === void 0 ? void 0 : appStudioTokenRes.isOk()) ? appStudioTokenRes.value : undefined);
        await appStudio_1.AppStudio.createBotRegistration(appStudioToken, botReg);
        if (!this.config.scaffold.botId) {
            this.config.scaffold.botId = botAuthCreds.clientId;
        }
        if (!this.config.scaffold.botPassword) {
            this.config.scaffold.botPassword = botAuthCreds.clientSecret;
        }
        if (!this.config.scaffold.objectId) {
            this.config.scaffold.objectId = botAuthCreds.objectId;
        }
        logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
    }
    async registerBotApp() {
        var _a, _b, _c, _d;
        const graphTokenRes = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.m365TokenProvider) === null || _b === void 0 ? void 0 : _b.getAccessToken({
            scopes: common_1.GraphScopes,
        }));
        const token = errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.GRAPH_TOKEN, (graphTokenRes === null || graphTokenRes === void 0 ? void 0 : graphTokenRes.isOk()) ? graphTokenRes.value : undefined);
        const name = errors_1.checkAndThrowIfMissing(strings_1.CommonStrings.SHORT_APP_NAME, (_d = (_c = this.ctx) === null || _c === void 0 ? void 0 : _c.projectSettings) === null || _d === void 0 ? void 0 : _d.appName);
        const ctx = errors_1.checkAndThrowIfMissing(strings_1.ConfigNames.GRAPH_TOKEN, this.ctx);
        let botAuthCredential = new botAuthCredential_1.BotAuthCredential();
        if (!this.config.scaffold.botAADCreated()) {
            const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, name, constants_1.MaxLengths.AAD_DISPLAY_NAME);
            botAuthCredential = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(token, aadDisplayName, this.config.scaffold.objectId, this.config.scaffold.botId);
            this.config.scaffold.botId = botAuthCredential.clientId;
            this.config.scaffold.botPassword = botAuthCredential.clientSecret;
            this.config.scaffold.objectId = botAuthCredential.objectId;
            this.config.saveConfigIntoContext(ctx); // Checkpoint for aad app provision.
            logger_1.Logger.info(messages_1.Messages.SuccessfullyCreatedBotAadApp);
        }
    }
}
exports.TeamsBotImpl = TeamsBotImpl;
//# sourceMappingURL=plugin.js.map