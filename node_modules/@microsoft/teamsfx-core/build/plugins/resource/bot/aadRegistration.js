"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AADRegistration = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const utils = tslib_1.__importStar(require("./utils/common"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const constants_1 = require("./constants");
const appStudio_1 = require("./appStudio/appStudio");
const errors_1 = require("./errors");
const strings_1 = require("./resources/strings");
const botAuthCredential_1 = require("./botAuthCredential");
const retryHandler_1 = require("./utils/retryHandler");
class AADRegistration {
    static async registerAADAppAndGetSecretByGraph(graphToken, displayName, objectId, msAppId) {
        const axiosInstance = axios_1.default.create({
            baseURL: constants_1.AADRegistrationConstants.GRAPH_REST_BASE_URL,
        });
        axiosInstance.defaults.headers.common["Authorization"] = `Bearer ${graphToken}`;
        const result = new botAuthCredential_1.BotAuthCredential();
        if (!objectId && !msAppId) {
            // 1. Register a new AAD App.
            let regResponse = undefined;
            try {
                regResponse = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${constants_1.AADRegistrationConstants.GRAPH_REST_BASE_URL}/applications`, {
                    displayName: displayName,
                    signInAudience: constants_1.AADRegistrationConstants.AZURE_AD_MULTIPLE_ORGS,
                }));
            }
            catch (e) {
                throw new errors_1.CreateAADAppError(e);
            }
            if (!regResponse || !utils.isHttpCodeOkOrCreated(regResponse.status)) {
                throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP);
            }
            result.clientId = regResponse.data.appId;
            result.objectId = regResponse.data.id;
        }
        else {
            result.objectId = errors_1.checkAndThrowIfMissing("objectId", objectId);
            result.clientId = errors_1.checkAndThrowIfMissing("msAppId", msAppId);
        }
        // 2. Generate client secret.
        let genResponse = undefined;
        try {
            genResponse = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${constants_1.AADRegistrationConstants.GRAPH_REST_BASE_URL}/applications/${result.objectId}/addPassword`, {
                passwordCredential: {
                    displayName: "default",
                },
            }));
        }
        catch (e) {
            throw new errors_1.CreateAADSecretError(e);
        }
        if (!genResponse || !genResponse.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_CLIENT_SECRET);
        }
        result.clientSecret = genResponse.data.secretText;
        return result;
    }
    static async registerAADAppAndGetSecretByAppStudio(appStudioToken, displayName, objectId, msAppId) {
        const result = new botAuthCredential_1.BotAuthCredential();
        const appConfig = {
            displayName: displayName,
        };
        if (!objectId && !msAppId) {
            const app = await appStudio_1.AppStudio.createAADAppV2(appStudioToken, appConfig);
            result.clientId = app.appId;
            result.objectId = app.id;
        }
        else {
            result.objectId = errors_1.checkAndThrowIfMissing("objectId", objectId);
            result.clientId = errors_1.checkAndThrowIfMissing("msAppId", msAppId);
        }
        // create password for this AAD
        const password = await appStudio_1.AppStudio.createAADAppPassword(appStudioToken, result.objectId);
        if (!password || !password.value) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_CLIENT_SECRET);
        }
        result.clientSecret = password.value;
        return result;
    }
}
exports.AADRegistration = AADRegistration;
//# sourceMappingURL=aadRegistration.js.map