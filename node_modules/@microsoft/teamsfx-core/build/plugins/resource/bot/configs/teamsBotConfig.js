"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsBotConfig = void 0;
const tslib_1 = require("tslib");
const localDebugConfig_1 = require("./localDebugConfig");
const provisionConfig_1 = require("./provisionConfig");
const scaffoldConfig_1 = require("./scaffoldConfig");
const strings_1 = require("../resources/strings");
const pluginActRoles_1 = require("../enums/pluginActRoles");
const deployConfig_1 = require("./deployConfig");
const utils = tslib_1.__importStar(require("../utils/common"));
const question_1 = require("../../../solution/fx-solution/question");
const common_1 = require("../../../../common");
class TeamsBotConfig {
    constructor() {
        this.scaffold = new scaffoldConfig_1.ScaffoldConfig();
        this.provision = new provisionConfig_1.ProvisionConfig();
        this.localDebug = new localDebugConfig_1.LocalDebugConfig();
        this.deploy = new deployConfig_1.DeployConfig();
        this.actRoles = [];
        this.resourceNameSuffix = "";
        this.isM365 = undefined;
    }
    async restoreConfigFromContext(context, isScaffold = false) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        await this.scaffold.restoreConfigFromContext(context, isScaffold);
        await this.provision.restoreConfigFromContext(context);
        await this.localDebug.restoreConfigFromContext(context);
        await this.deploy.restoreConfigFromContext(context);
        this.isM365 = (_a = context.projectSettings) === null || _a === void 0 ? void 0 : _a.isM365;
        this.teamsAppClientId = (_b = context.envInfo.state
            .get(strings_1.PluginAAD.PLUGIN_NAME)) === null || _b === void 0 ? void 0 : _b.get(strings_1.PluginAAD.CLIENT_ID);
        this.teamsAppClientSecret = (_c = context.envInfo.state
            .get(strings_1.PluginAAD.PLUGIN_NAME)) === null || _c === void 0 ? void 0 : _c.get(strings_1.PluginAAD.CLIENT_SECRET);
        this.teamsAppTenant = (_d = context.envInfo.state
            .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _d === void 0 ? void 0 : _d.get(strings_1.PluginSolution.M365_TENANT_ID);
        this.applicationIdUris = (_e = context.envInfo.state
            .get(strings_1.PluginAAD.PLUGIN_NAME)) === null || _e === void 0 ? void 0 : _e.get(strings_1.PluginAAD.APPLICATION_ID_URIS);
        const capabilities = ((_f = context.projectSettings) === null || _f === void 0 ? void 0 : _f.solutionSettings)
            .capabilities;
        if (capabilities === null || capabilities === void 0 ? void 0 : capabilities.includes(pluginActRoles_1.PluginActRoles.Bot)) {
            const scenarios = (_g = context.answers) === null || _g === void 0 ? void 0 : _g[question_1.AzureSolutionQuestionNames.Scenarios];
            if (common_1.isBotNotificationEnabled() && Array.isArray(scenarios) && scenarios.length > 0) {
                const scenarioActRoles = scenarios
                    .map((item) => strings_1.QuestionBotScenarioToPluginActRoles.get(item))
                    .filter((item) => item !== undefined);
                // dedup
                this.actRoles = [...new Set([...this.actRoles, ...scenarioActRoles])];
            }
            else {
                // for legacy bot
                this.actRoles.push(pluginActRoles_1.PluginActRoles.Bot);
            }
        }
        if ((capabilities === null || capabilities === void 0 ? void 0 : capabilities.includes(pluginActRoles_1.PluginActRoles.MessageExtension)) &&
            !this.actRoles.includes(pluginActRoles_1.PluginActRoles.MessageExtension)) {
            this.actRoles.push(pluginActRoles_1.PluginActRoles.MessageExtension);
        }
        const resourceNameSuffixValue = (_h = context.envInfo.state
            .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _h === void 0 ? void 0 : _h.get(strings_1.PluginSolution.RESOURCE_NAME_SUFFIX);
        this.resourceNameSuffix = resourceNameSuffixValue
            ? resourceNameSuffixValue
            : utils.genUUID();
    }
    saveConfigIntoContext(context) {
        this.scaffold.saveConfigIntoContext(context);
        this.provision.saveConfigIntoContext(context);
        this.localDebug.saveConfigIntoContext(context);
        this.deploy.saveConfigIntoContext(context);
    }
    toString() {
        return JSON.stringify(this);
    }
}
exports.TeamsBotConfig = TeamsBotConfig;
//# sourceMappingURL=teamsBotConfig.js.map