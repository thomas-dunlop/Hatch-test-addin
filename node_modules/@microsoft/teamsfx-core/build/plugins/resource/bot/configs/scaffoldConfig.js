"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScaffoldConfig = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const utils = tslib_1.__importStar(require("../utils/common"));
const strings_1 = require("../resources/strings");
const programmingLanguage_1 = require("../enums/programmingLanguage");
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../constants");
const question_1 = require("../question");
const question_2 = require("../../../solution/fx-solution/question");
const enum_1 = require("../v2/enum");
class ScaffoldConfig {
    constructor() {
        this.triggers = [];
        // empty array for legacy bot
        this.botCapabilities = [];
    }
    botAADCreated() {
        if (this.botId && this.botPassword) {
            return true;
        }
        return false;
    }
    async restoreConfigFromContext(context, isScaffold) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.workingDir = path_1.default.join(context.root, strings_1.CommonStrings.BOT_WORKING_DIR_NAME);
        this.botId = context.config.get(strings_1.PluginBot.BOT_ID);
        this.botPassword = context.config.get(strings_1.PluginBot.BOT_PASSWORD);
        this.objectId = context.config.get(strings_1.PluginBot.OBJECT_ID);
        this.botId = (_b = (_a = context.envInfo.config.bot) === null || _a === void 0 ? void 0 : _a.appId) !== null && _b !== void 0 ? _b : this.botId;
        this.botPassword = (_d = (_c = context.envInfo.config.bot) === null || _c === void 0 ? void 0 : _c.appPassword) !== null && _d !== void 0 ? _d : this.botPassword;
        const rawProgrammingLanguage = (_e = context.projectSettings) === null || _e === void 0 ? void 0 : _e.programmingLanguage;
        if (rawProgrammingLanguage &&
            utils.existsInEnumValues(rawProgrammingLanguage, programmingLanguage_1.ProgrammingLanguage)) {
            this.programmingLanguage = rawProgrammingLanguage;
        }
        this.botCapabilities = ScaffoldConfig.getBotCapabilities(context, isScaffold);
        this.hostType = ScaffoldConfig.getHostTypeFromProjectSettings(context);
        const rawHostTypeTriggers = (_f = context.answers) === null || _f === void 0 ? void 0 : _f[constants_1.QuestionNames.BOT_HOST_TYPE_TRIGGER];
        const triggers = (_g = question_1.FunctionsOptionItems.find((option) => option.id === rawHostTypeTriggers)) === null || _g === void 0 ? void 0 : _g.triggers;
        this.triggers = triggers || [];
    }
    saveConfigIntoContext(context) {
        utils.checkAndSaveConfig(context, strings_1.PluginBot.BOT_ID, this.botId);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.BOT_PASSWORD, this.botPassword);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.OBJECT_ID, this.objectId);
        utils.checkAndSavePluginSetting(context, strings_1.PluginBot.HOST_TYPE, this.hostType);
        utils.checkAndSavePluginSetting(context, strings_1.PluginBot.BOT_CAPABILITIES, this.botCapabilities);
    }
    /**
     * Get bot host type from plugin context.
     * For stages like scaffolding (including create new and add capability),
     *    the host type is from user inputs of question model (i.e. context.answers).
     * For later stages, the host type is persisted in projectSettings.json.
     * @param isScaffold true for the `scaffold` lifecycle, false otherwise.
     */
    static getBotHostType(context, isScaffold) {
        if (isScaffold) {
            return context.answers
                ? this.getHostTypeFromHostTypeTriggerQuestion(context.answers)
                : undefined;
        }
        else {
            return this.getHostTypeFromProjectSettings(context);
        }
    }
    static getHostTypeFromHostTypeTriggerQuestion(answers) {
        // intersection of hostTypeTriggers and HostTypeTriggerOptions
        const hostTypeTriggers = answers[constants_1.QuestionNames.BOT_HOST_TYPE_TRIGGER];
        if (Array.isArray(hostTypeTriggers)) {
            return question_1.FunctionsOptionItems.some((item) => hostTypeTriggers.includes(item.id))
                ? enum_1.HostType.Functions
                : enum_1.HostType.AppService;
        }
        return enum_1.HostType.AppService;
    }
    static getHostTypeFromProjectSettings(context) {
        var _a, _b, _c;
        const rawHostType = (_c = (_b = (_a = context.projectSettings) === null || _a === void 0 ? void 0 : _a.pluginSettings) === null || _b === void 0 ? void 0 : _b[strings_1.PluginBot.PLUGIN_NAME]) === null || _c === void 0 ? void 0 : _c[strings_1.PluginBot.HOST_TYPE];
        return Object.values(enum_1.HostType).find((itemValue) => rawHostType === itemValue);
    }
    static getBotCapabilities(context, isScaffold) {
        var _a, _b, _c, _d;
        if (isScaffold) {
            // For scaffolding and addCapability, the bot capabilities are from user input (context.answers)
            const scenarios = (_a = context.answers) === null || _a === void 0 ? void 0 : _a[question_2.AzureSolutionQuestionNames.Scenarios];
            if (Array.isArray(scenarios)) {
                return scenarios
                    .map((item) => strings_1.QuestionBotScenarioToBotCapability.get(item))
                    .filter((item) => item !== undefined);
            }
            else {
                // for legacy bot
                return [];
            }
        }
        else {
            // For other lifecycles, from pluginSettings.json
            const rawBotCapabilities = (_d = (_c = (_b = context.projectSettings) === null || _b === void 0 ? void 0 : _b.pluginSettings) === null || _c === void 0 ? void 0 : _c[strings_1.PluginBot.PLUGIN_NAME]) === null || _d === void 0 ? void 0 : _d[strings_1.PluginBot.BOT_CAPABILITIES];
            if (Array.isArray(rawBotCapabilities)) {
                return rawBotCapabilities
                    .map((botCapability) => utils.convertToConstValues(botCapability, strings_1.BotCapabilities))
                    .filter((item) => item != undefined);
            }
            else {
                // for legacy bot
                return [];
            }
        }
    }
}
exports.ScaffoldConfig = ScaffoldConfig;
//# sourceMappingURL=scaffoldConfig.js.map