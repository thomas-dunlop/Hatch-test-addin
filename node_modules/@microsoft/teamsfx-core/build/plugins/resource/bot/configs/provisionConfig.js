"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvisionConfig = void 0;
const tslib_1 = require("tslib");
const utils = tslib_1.__importStar(require("../utils/common"));
const strings_1 = require("../resources/strings");
const constants_1 = require("../constants");
const errors_1 = require("../errors");
class ProvisionConfig {
    async restoreConfigFromContext(context) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.subscriptionId = (_a = context.envInfo.state
            .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _a === void 0 ? void 0 : _a.get(strings_1.PluginSolution.SUBSCRIPTION_ID);
        this.resourceGroup = (_b = context.envInfo.state
            .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _b === void 0 ? void 0 : _b.get(strings_1.PluginSolution.RESOURCE_GROUP_NAME);
        this.location = (_c = context.envInfo.state
            .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _c === void 0 ? void 0 : _c.get(strings_1.PluginSolution.LOCATION);
        this.sqlEndpoint = (_d = context.envInfo.state
            .get(strings_1.PluginSql.PLUGIN_NAME)) === null || _d === void 0 ? void 0 : _d.get(strings_1.PluginSql.SQL_ENDPOINT);
        this.sqlDatabaseName = (_e = context.envInfo.state
            .get(strings_1.PluginSql.PLUGIN_NAME)) === null || _e === void 0 ? void 0 : _e.get(strings_1.PluginSql.SQL_DATABASE_NAME);
        this.sqlUserName = (_f = context.envInfo.state
            .get(strings_1.PluginSql.PLUGIN_NAME)) === null || _f === void 0 ? void 0 : _f.get(strings_1.PluginSql.SQL_USERNAME);
        this.sqlPassword = (_g = context.envInfo.state
            .get(strings_1.PluginSql.PLUGIN_NAME)) === null || _g === void 0 ? void 0 : _g.get(strings_1.PluginSql.SQL_PASSWORD);
        this.identityClientId = (_h = context.envInfo.state
            .get(strings_1.PluginIdentity.PLUGIN_NAME)) === null || _h === void 0 ? void 0 : _h.get(strings_1.PluginIdentity.IDENTITY_ClIENT_ID);
        this.identityResourceId = (_j = context.envInfo.state
            .get(strings_1.PluginIdentity.PLUGIN_NAME)) === null || _j === void 0 ? void 0 : _j.get(strings_1.PluginIdentity.IDENTITY_RESOURCE_ID);
        this.functionEndpoint = (_k = context.envInfo.state
            .get(strings_1.PluginFunction.PLUGIN_NAME)) === null || _k === void 0 ? void 0 : _k.get(strings_1.PluginFunction.ENDPOINT);
        this.appServicePlan = context.config.get(strings_1.PluginBot.APP_SERVICE_PLAN);
        this.siteName = context.config.get(strings_1.PluginBot.SITE_NAME);
        this.siteEndpoint = context.config.get(strings_1.PluginBot.SITE_ENDPOINT);
        this.botChannelRegName = context.config.get(strings_1.PluginBot.BOT_CHANNEL_REGISTRATION);
        this.botWebAppResourceId = context.config.get(strings_1.PluginBot.BOT_WEB_APP_RESOURCE_ID);
        this.validateRestoredConfig();
    }
    saveConfigIntoContext(context) {
        utils.checkAndSaveConfig(context, strings_1.PluginBot.VALID_DOMAIN, this.validDomain);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.APP_SERVICE_PLAN, this.appServicePlan);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.BOT_CHANNEL_REGISTRATION, this.botChannelRegName);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.BOT_WEB_APP_RESOURCE_ID, this.botWebAppResourceId);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.SITE_NAME, this.siteName);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.SITE_ENDPOINT, this.siteEndpoint);
        utils.checkAndSaveConfig(context, strings_1.PluginBot.SKU_NAME, this.skuName);
    }
    validateRestoredConfig() {
        if (this.siteName && !utils.isValidWebAppSiteName(this.siteName)) {
            throw new errors_1.ConfigValidationError(constants_1.ConfigKeys.SITE_NAME, this.siteName);
        }
        if (this.siteEndpoint && !utils.isDomainValidForAzureWebApp(this.siteEndpoint)) {
            throw new errors_1.ConfigValidationError(constants_1.ConfigKeys.SITE_ENDPOINT, this.siteEndpoint);
        }
        if (this.appServicePlan && !utils.isValidAppServicePlanName(this.appServicePlan)) {
            throw new errors_1.ConfigValidationError(constants_1.ConfigKeys.APP_SERVICE_PLAN, this.appServicePlan);
        }
        if (this.botChannelRegName && !utils.isValidBotChannelRegName(this.botChannelRegName)) {
            throw new errors_1.ConfigValidationError(constants_1.ConfigKeys.BOT_CHANNEL_REG_NAME, this.botChannelRegName);
        }
    }
}
exports.ProvisionConfig = ProvisionConfig;
//# sourceMappingURL=provisionConfig.js.map