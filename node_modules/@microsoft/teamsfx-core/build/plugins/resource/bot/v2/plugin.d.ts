import { FxError, Inputs, Json, Result, TokenProvider, v2, Void } from "@microsoft/teamsfx-api";
import { Context, DeepReadonly, DeploymentInputs, EnvInfoV2, ProvisionInputs, ResourceTemplate } from "@microsoft/teamsfx-api/build/v2";
import { BicepContext } from "../../../../common/azure-hosting/interfaces";
export declare class TeamsBotV2Impl {
    readonly name: string;
    scaffoldSourceCode(ctx: Context, inputs: Inputs): Promise<Result<Void, FxError>>;
    generateResourceTemplate(ctx: Context, inputs: Inputs): Promise<Result<ResourceTemplate, FxError>>;
    updateResourceTemplate(ctx: Context, inputs: Inputs): Promise<Result<ResourceTemplate, FxError>>;
    static getBicepContext(ctx: v2.Context, inputs: Inputs): BicepContext;
    configureResource(ctx: Context, inputs: ProvisionInputs, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    deploy(ctx: Context, inputs: DeploymentInputs, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    provisionLocalResource(ctx: Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, envInfo?: EnvInfoV2): Promise<Result<Void, FxError>>;
    configureLocalResource(ctx: Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, envInfo?: v2.EnvInfoV2 | undefined): Promise<Result<Void, FxError>>;
    private static getBicepConfigs;
    private static localBuild;
    /**
     * create deploy log file if not exists
     * @param ctx context
     * @param configFile the config file needed to write
     * @param envName name of the env
     * @private
     */
    private static initDeployConfig;
    /**
     * determine if dir need deploy, or all file are not changed after last deploy
     * @param workingPath base dir
     * @param configFile config file location
     * @param env current env
     */
    static needDeploy(workingPath: string, configFile: string, env: string): Promise<boolean>;
    private static saveDeploymentInfo;
    private static prepareIgnore;
    /**
     * read every line from workDir/filename and return workDir/[lineContent]
     * @param fileName file name
     * @param workingPath base dir
     */
    static generateIgnoreRules(fileName: string, workingPath: string): Promise<string[]>;
    private static ensureIgnoreFile;
    private static configFile;
    /**
     * read dotnet framework version from project file
     * @param projectFilePath project base folder
     */
    private static getFrameworkVersion;
    private static getWorkingPath;
}
declare const _default: TeamsBotV2Impl;
export default _default;
//# sourceMappingURL=plugin.d.ts.map