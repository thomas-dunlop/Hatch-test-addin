"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.genTemplateNameRenderReplaceFn = exports.scaffold = void 0;
const templatesActions_1 = require("../../../../common/template-utils/templatesActions");
const errors_1 = require("../errors");
const logger_1 = require("../logger");
const messages_1 = require("../resources/messages");
async function scaffold(template, dst) {
    return await templatesActions_1.scaffoldFromTemplates({
        group: template.group,
        lang: template.language,
        scenario: template.scenario,
        dst: dst,
        fileNameReplaceFn: genTemplateNameRenderReplaceFn(template.variables.ProjectName),
        fileDataReplaceFn: templatesActions_1.genTemplateRenderReplaceFn(template.variables),
        onActionEnd: async (action, context) => {
            var _a;
            if (action.name === templatesActions_1.ScaffoldActionName.FetchTemplatesUrlWithTag) {
                logger_1.Logger.info(messages_1.Messages.SuccessfullyRetrievedTemplateZip((_a = context.zipUrl) !== null && _a !== void 0 ? _a : ""));
            }
        },
        onActionError: async (action, context, error) => {
            logger_1.Logger.error(error.toString());
            switch (action.name) {
                case templatesActions_1.ScaffoldActionName.FetchTemplatesUrlWithTag:
                case templatesActions_1.ScaffoldActionName.FetchTemplatesZipFromUrl:
                    logger_1.Logger.info(messages_1.Messages.FallingBackToUseLocalTemplateZip);
                    break;
                case templatesActions_1.ScaffoldActionName.FetchTemplateZipFromLocal:
                    throw new errors_1.TemplateZipFallbackError();
                case templatesActions_1.ScaffoldActionName.Unzip:
                    throw new errors_1.UnzipError(context.dst);
                default:
                    throw new Error(error.message);
            }
        },
    });
}
exports.scaffold = scaffold;
function genTemplateNameRenderReplaceFn(appName) {
    return (name, data) => {
        return name.replace(/ProjectName/, appName).replace(/\.tpl/, "");
    };
}
exports.genTemplateNameRenderReplaceFn = genTemplateNameRenderReplaceFn;
//# sourceMappingURL=scaffold.js.map