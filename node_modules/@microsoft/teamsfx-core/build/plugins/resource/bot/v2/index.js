"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotPluginV2 = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const index_1 = require("../index");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const utils4v2_1 = require("../../utils4v2");
const logger_1 = require("../logger");
const strings_1 = require("../resources/strings");
const plugin_1 = require("./plugin");
const errors_1 = require("../errors");
const constants_1 = require("../constants");
let BotPluginV2 = class BotPluginV2 {
    constructor() {
        this.name = strings_1.PluginBot.PLUGIN_NAME;
        this.displayName = "Bot";
        this.impl = new plugin_1.TeamsBotV2Impl();
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        return this.plugin.activate(solutionSettings);
    }
    async getQuestionsForScaffolding(ctx, inputs) {
        return await utils4v2_1.getQuestionsForScaffoldingAdapter(ctx, inputs, this.plugin);
    }
    async scaffoldSourceCode(ctx, inputs) {
        logger_1.Logger.setLogger(ctx.logProvider);
        return errors_1.runWithExceptionCatching(getV1Context(ctx, inputs), () => this.impl.scaffoldSourceCode(ctx, inputs), true, constants_1.LifecycleFuncNames.SCAFFOLD);
    }
    async generateResourceTemplate(ctx, inputs) {
        logger_1.Logger.setLogger(ctx.logProvider);
        return errors_1.runWithExceptionCatching(getV1Context(ctx, inputs), () => this.impl.generateResourceTemplate(ctx, inputs), true, constants_1.LifecycleFuncNames.GENERATE_ARM_TEMPLATES);
    }
    async updateResourceTemplate(ctx, inputs) {
        logger_1.Logger.setLogger(ctx.logProvider);
        return errors_1.runWithExceptionCatching(getV1Context(ctx, inputs), () => this.impl.updateResourceTemplate(ctx, inputs), true, constants_1.LifecycleFuncNames.GENERATE_ARM_TEMPLATES);
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.provisionResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async configureResource(ctx, inputs, envInfo, tokenProvider) {
        return await utils4v2_1.configureResourceAdapter(ctx, inputs, envInfo, tokenProvider, this.plugin);
    }
    async provisionLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo) {
        return await utils4v2_1.provisionLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin, envInfo);
    }
    async configureLocalResource(ctx, inputs, localSettings, tokenProvider, envInfo) {
        return await utils4v2_1.configureLocalResourceAdapter(ctx, inputs, localSettings, tokenProvider, this.plugin, envInfo);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        logger_1.Logger.setLogger(ctx.logProvider);
        return errors_1.runWithExceptionCatching(getV1Context(ctx, inputs, envInfo), () => this.impl.deploy(ctx, inputs, envInfo, tokenProvider), true, constants_1.LifecycleFuncNames.DEPLOY);
    }
    async getQuestionsForUserTask(ctx, inputs, func, envInfo, tokenProvider) {
        return await utils4v2_1.getQuestionsForUserTaskAdapter(ctx, inputs, func, envInfo, tokenProvider, this.plugin);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        return await utils4v2_1.executeUserTaskAdapter(ctx, inputs, func, localSettings, envInfo, tokenProvider, this.plugin);
    }
};
tslib_1.__decorate([
    typedi_1.Inject(ResourcePluginContainer_1.ResourcePlugins.BotPlugin),
    tslib_1.__metadata("design:type", index_1.TeamsBot)
], BotPluginV2.prototype, "plugin", void 0);
BotPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.BotPlugin)
], BotPluginV2);
exports.BotPluginV2 = BotPluginV2;
function getV1Context(ctx, inputs, envInfo) {
    const context = utils4v2_1.convert2PluginContext(strings_1.PluginBot.PLUGIN_NAME, ctx, inputs, true);
    if (envInfo) {
        utils4v2_1.setEnvInfoV1ByStateV2(strings_1.PluginBot.PLUGIN_NAME, context, envInfo);
    }
    return context;
}
//# sourceMappingURL=index.js.map