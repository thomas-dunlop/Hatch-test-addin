"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveBotCapabilities = exports.resolveServiceType = exports.resolveHostType = exports.decideTemplateScenarios = exports.getTemplateInfos = void 0;
const question_1 = require("../../../solution/fx-solution/question");
const constants_1 = require("../constants");
const question_2 = require("../question");
const mapping_1 = require("./mapping");
const question_3 = require("../../../../core/question");
const enum_1 = require("./enum");
const strings_1 = require("../resources/strings");
const utils_1 = require("../../../../common/utils");
function getTemplateInfos(ctx, inputs) {
    var _a;
    const lang = mapping_1.getLanguage(ctx.projectSetting.programmingLanguage);
    const scenarios = Array.from(decideTemplateScenarios(ctx, inputs));
    const projectName = ctx.projectSetting.appName;
    const safeProjectName = (_a = inputs[question_3.CoreQuestionNames.SafeProjectName]) !== null && _a !== void 0 ? _a : utils_1.convertToAlphanumericOnly(projectName);
    return scenarios.map((scenario) => {
        return {
            group: constants_1.TemplateProjectsConstants.GROUP_NAME_BOT,
            language: lang,
            scenario: scenario,
            variables: { ProjectName: projectName, SafeProjectName: safeProjectName },
        };
    });
}
exports.getTemplateInfos = getTemplateInfos;
function decideTemplateScenarios(ctx, inputs) {
    const botScenarios = inputs === null || inputs === void 0 ? void 0 : inputs[question_1.AzureSolutionQuestionNames.Scenarios];
    const templateScenarios = new Set();
    if (!botScenarios || (Array.isArray(botScenarios) && botScenarios.length === 0)) {
        templateScenarios.add(constants_1.TemplateProjectsScenarios.DEFAULT_SCENARIO_NAME);
        return templateScenarios;
    }
    botScenarios.forEach((scenario) => {
        var _a;
        switch (scenario) {
            case question_1.BotScenario.CommandAndResponseBot:
                templateScenarios.add(constants_1.TemplateProjectsScenarios.COMMAND_AND_RESPONSE_SCENARIO_NAME);
                break;
            case question_1.BotScenario.WorkflowBot:
                templateScenarios.add(constants_1.TemplateProjectsScenarios.WORKFLOW_SCENARIO_NAME);
                break;
            case question_1.BotScenario.NotificationBot:
                //! Will not scaffold any trigger when notificationTriggerType is undefined,
                const notificationTriggerType = (_a = inputs[constants_1.QuestionNames.BOT_HOST_TYPE_TRIGGER]) !== null && _a !== void 0 ? _a : question_2.AppServiceOptionItem.id;
                mapping_1.getTriggerScenarios(notificationTriggerType).forEach((item) => templateScenarios.add(item));
                break;
            case question_1.M365SearchAppOptionItem.id:
                templateScenarios.add(constants_1.TemplateProjectsScenarios.M365_SCENARIO_NAME);
                break;
        }
    });
    return templateScenarios;
}
exports.decideTemplateScenarios = decideTemplateScenarios;
function resolveHostType(inputs) {
    const notificationTriggerType = inputs[constants_1.QuestionNames.BOT_HOST_TYPE_TRIGGER];
    if (Array.isArray(notificationTriggerType)) {
        return question_2.FunctionsOptionItems.some((item) => notificationTriggerType.includes(item.id))
            ? enum_1.HostType.Functions
            : enum_1.HostType.AppService;
    }
    return enum_1.HostType.AppService;
}
exports.resolveHostType = resolveHostType;
function resolveServiceType(ctx) {
    var _a, _b, _c, _d;
    const rawHostType = (_d = (_c = (_b = (_a = ctx.projectSetting) === null || _a === void 0 ? void 0 : _a.pluginSettings) === null || _b === void 0 ? void 0 : _b[strings_1.PluginBot.PLUGIN_NAME]) === null || _c === void 0 ? void 0 : _c[strings_1.PluginBot.HOST_TYPE]) !== null && _d !== void 0 ? _d : enum_1.HostType.AppService;
    return mapping_1.getServiceType(rawHostType);
}
exports.resolveServiceType = resolveServiceType;
function resolveBotCapabilities(inputs) {
    const capabilities = inputs === null || inputs === void 0 ? void 0 : inputs[question_1.AzureSolutionQuestionNames.Capabilities];
    const botScenarios = inputs === null || inputs === void 0 ? void 0 : inputs[question_1.AzureSolutionQuestionNames.Scenarios];
    if (Array.isArray(botScenarios)) {
        if (botScenarios.includes(question_1.M365SearchAppOptionItem.id)) {
            return [strings_1.BotCapabilities.M365_SEARCH_APP];
        }
        return botScenarios.map((scenario) => strings_1.QuestionBotScenarioToBotCapability.get(scenario));
    }
    if (Array.isArray(capabilities)) {
        if (capabilities.includes(question_1.MessageExtensionNewUIItem.id)) {
            return [strings_1.BotCapabilities.MESSAGE_EXTENSION];
        }
        if (capabilities.includes(question_1.BotOptionItem.id)) {
            return [strings_1.BotCapabilities.BOT];
        }
    }
    return [];
}
exports.resolveBotCapabilities = resolveBotCapabilities;
//# sourceMappingURL=common.js.map