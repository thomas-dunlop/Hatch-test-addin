"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomizedTasks = exports.BotBicep = exports.PathInfo = exports.AzureConstants = exports.TelemetryValues = exports.TelemetryKeys = exports.MaxLengths = exports.TypeNames = exports.FolderNames = exports.ConfigKeys = exports.DeployConfigs = exports.QuestionOptions = exports.Alias = exports.Links = exports.ErrorNames = exports.Retry = exports.LifecycleFuncNames = exports.QuestionNames = exports.ProgressBarConstants = exports.DEFAULT_DOTNET_FRAMEWORK = exports.TriggerTemplateScenarioMappings = exports.TemplateProjectsScenarios = exports.TemplateProjectsConstants = exports.AADRegistrationConstants = exports.WebAppConstants = exports.RegularExprs = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const programmingLanguage_1 = require("./enums/programmingLanguage");
const path_1 = tslib_1.__importDefault(require("path"));
const question_1 = require("../../solution/fx-solution/question");
class RegularExprs {
}
exports.RegularExprs = RegularExprs;
RegularExprs.CHARS_TO_BE_SKIPPED = /[^a-zA-Z\d]/g;
RegularExprs.RESOURCE_SUFFIX = /[\da-z]{1,16}/;
// Refer to https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules
// 1-40 Alphanumerics and hyphens.
RegularExprs.APP_SERVICE_PLAN_NAME = /^[a-zA-Z\d\-]{1,40}$/;
// 2-60 Contains alphanumerics and hyphens.Can't start or end with hyphen.
RegularExprs.WEB_APP_SITE_NAME = /^[a-zA-Z\d][a-zA-Z\d\-]{0,58}[a-zA-Z\d]$/;
// 2-64 Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric.
RegularExprs.BOT_CHANNEL_REG_NAME = /^[a-zA-Z\d][a-zA-Z\d_.\-]{1,63}$/;
class WebAppConstants {
}
exports.WebAppConstants = WebAppConstants;
WebAppConstants.WEB_APP_SITE_DOMAIN = "azurewebsites.net";
class AADRegistrationConstants {
}
exports.AADRegistrationConstants = AADRegistrationConstants;
AADRegistrationConstants.GRAPH_REST_BASE_URL = "https://graph.microsoft.com/v1.0";
AADRegistrationConstants.AZURE_AD_MULTIPLE_ORGS = "AzureADMultipleOrgs";
class TemplateProjectsConstants {
}
exports.TemplateProjectsConstants = TemplateProjectsConstants;
TemplateProjectsConstants.GROUP_NAME_BOT = "bot";
TemplateProjectsConstants.GROUP_NAME_BOT_MSGEXT = "bot-msgext";
var TemplateProjectsScenarios;
(function (TemplateProjectsScenarios) {
    TemplateProjectsScenarios["DEFAULT_SCENARIO_NAME"] = "default";
    TemplateProjectsScenarios["NOTIFICATION_RESTIFY_SCENARIO_NAME"] = "notification-restify";
    TemplateProjectsScenarios["NOTIFICATION_WEBAPI_SCENARIO_NAME"] = "notification-webapi";
    TemplateProjectsScenarios["NOTIFICATION_FUNCTION_BASE_SCENARIO_NAME"] = "notification-function-base";
    TemplateProjectsScenarios["NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME"] = "notification-trigger-http";
    TemplateProjectsScenarios["NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME"] = "notification-trigger-timer";
    TemplateProjectsScenarios["COMMAND_AND_RESPONSE_SCENARIO_NAME"] = "command-and-response";
    TemplateProjectsScenarios["WORKFLOW_SCENARIO_NAME"] = "workflow";
    TemplateProjectsScenarios["M365_SCENARIO_NAME"] = "m365";
})(TemplateProjectsScenarios = exports.TemplateProjectsScenarios || (exports.TemplateProjectsScenarios = {}));
exports.TriggerTemplateScenarioMappings = {
    [question_1.BotNotificationTriggers.Http]: TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME,
    [question_1.BotNotificationTriggers.Timer]: TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME,
};
exports.DEFAULT_DOTNET_FRAMEWORK = "net6.0";
class ProgressBarConstants {
}
exports.ProgressBarConstants = ProgressBarConstants;
ProgressBarConstants.SCAFFOLD_TITLE = "Scaffolding bot";
ProgressBarConstants.SCAFFOLD_STEP_START = "Scaffolding bot.";
ProgressBarConstants.SCAFFOLD_STEP_FETCH_ZIP = "Retrieving templates.";
ProgressBarConstants.SCAFFOLD_STEPS_NUM = 2;
ProgressBarConstants.SCAFFOLD_FUNCTIONS_NOTIFICATION_STEP_START = "Scaffolding notification bot.";
ProgressBarConstants.SCAFFOLD_FUNCTIONS_NOTIFICATION_STEP_FETCH_PROJECT_TEMPLATE = "Retrieving project templates.";
ProgressBarConstants.SCAFFOLD_FUNCTIONS_NOTIFICATION_STEP_FETCH_TRIGGER_TEMPLATE = "Retrieving trigger templates.";
ProgressBarConstants.SCAFFOLD_FUNCTIONS_NOTIFICATION_STEPS_NUM = 3;
ProgressBarConstants.PROVISION_TITLE = "Provisioning bot";
ProgressBarConstants.PROVISION_STEP_START = "Provisioning bot.";
ProgressBarConstants.PROVISION_STEP_BOT_REG = "Registering bot.";
ProgressBarConstants.PROVISION_STEPS_NUM = 2;
ProgressBarConstants.LOCAL_DEBUG_TITLE = "Local debugging";
ProgressBarConstants.LOCAL_DEBUG_STEP_START = "Provisioning bot for local debug.";
ProgressBarConstants.LOCAL_DEBUG_STEP_BOT_REG = "Registering bot.";
ProgressBarConstants.LOCAL_DEBUG_STEPS_NUM = 1;
ProgressBarConstants.DEPLOY_TITLE = "Deploying bot";
ProgressBarConstants.DEPLOY_STEP_START = "Deploying bot.";
ProgressBarConstants.DEPLOY_STEP_NPM_INSTALL = "Installing dependencies.";
ProgressBarConstants.DEPLOY_STEP_ZIP_FOLDER = "Creating application package.";
ProgressBarConstants.DEPLOY_STEP_ZIP_DEPLOY = "Uploading application package.";
ProgressBarConstants.DEPLOY_STEPS_NUM = 3;
class QuestionNames {
}
exports.QuestionNames = QuestionNames;
QuestionNames.CAPABILITIES = "capabilities";
QuestionNames.BOT_HOST_TYPE_TRIGGER = "bot-host-type-trigger";
class LifecycleFuncNames {
}
exports.LifecycleFuncNames = LifecycleFuncNames;
LifecycleFuncNames.SCAFFOLD = "scaffold";
LifecycleFuncNames.GET_QUETSIONS_FOR_SCAFFOLDING = "get-questions-for-scaffolding";
LifecycleFuncNames.GET_QUETSIONS_FOR_USER_TASK = "get-questions-for-user-task";
LifecycleFuncNames.PRE_PROVISION = "pre-provision";
LifecycleFuncNames.PROVISION = "provision";
LifecycleFuncNames.POST_PROVISION = "post-provision";
LifecycleFuncNames.PRE_DEPLOY = "pre-deploy";
LifecycleFuncNames.DEPLOY = "deploy";
LifecycleFuncNames.LOCAL_DEBUG = "local-debug";
LifecycleFuncNames.POST_LOCAL_DEBUG = "post-local-debug";
LifecycleFuncNames.GENERATE_ARM_TEMPLATES = "generate-arm-templates";
class Retry {
}
exports.Retry = Retry;
Retry.RETRY_TIMES = 10;
Retry.BACKOFF_TIME_MS = 5000;
class ErrorNames {
}
exports.ErrorNames = ErrorNames;
// System Exceptions
ErrorNames.PRECONDITION_ERROR = "PreconditionError";
ErrorNames.PROVISION_ERROR = "ProvisionError";
ErrorNames.CONFIG_UPDATING_ERROR = "ConfigUpdatingError";
ErrorNames.CONFIG_VALIDATION_ERROR = "ConfigValidationError";
ErrorNames.MSG_ENDPOINT_UPDATING_ERROR = "MessageEndpointUpdatingError";
ErrorNames.COMMAND_EXECUTION_ERROR = "CommandExecutionError";
ErrorNames.CALL_APPSTUDIO_API_ERROR = "CallAppStudioAPIError";
// User Exceptions
ErrorNames.PACK_DIR_EXISTENCE_ERROR = "PackDirectoryExistenceError";
class Links {
}
exports.Links = Links;
Links.ISSUE_LINK = "https://github.com/OfficeDev/TeamsFx/issues/new";
Links.HELP_LINK = "https://aka.ms/teamsfx-bot-help";
class Alias {
}
exports.Alias = Alias;
Alias.TEAMS_BOT_PLUGIN = "BT";
Alias.BICEP_MODULE = "bot";
class QuestionOptions {
}
exports.QuestionOptions = QuestionOptions;
QuestionOptions.PROGRAMMING_LANGUAGE_OPTIONS = Object.values(programmingLanguage_1.ProgrammingLanguage).map((value) => {
    return {
        id: value,
        label: value,
    };
});
class DeployConfigs {
}
exports.DeployConfigs = DeployConfigs;
DeployConfigs.UN_PACK_DIRS = ["node_modules", "package-lock.json"];
DeployConfigs.DEPLOYMENT_FOLDER = ".deployment";
DeployConfigs.DEPLOYMENT_CONFIG_FILE = "bot.json";
DeployConfigs.WALK_SKIP_PATHS = [
    "node_modules/.bin",
    `.${teamsfx_api_1.ConfigFolderName}`,
    DeployConfigs.DEPLOYMENT_FOLDER,
    ".vscode",
    "*.js.map",
    "*.ts.map",
    "*.ts",
    ".git*",
    ".tsbuildinfo",
    "CHANGELOG.md",
    "readme.md",
    "local.settings.json",
    "test",
    "tsconfig.json",
    ".DS_Store",
    "node_modules/ts-node",
    "node_modules/typescript",
];
class ConfigKeys {
}
exports.ConfigKeys = ConfigKeys;
ConfigKeys.SITE_NAME = "siteName";
ConfigKeys.SITE_ENDPOINT = "siteEndpoint";
ConfigKeys.APP_SERVICE_PLAN = "appServicePlan";
ConfigKeys.BOT_CHANNEL_REG_NAME = "botChannelRegName";
class FolderNames {
}
exports.FolderNames = FolderNames;
FolderNames.NODE_MODULES = "node_modules";
FolderNames.KEYTAR = "keytar";
class TypeNames {
}
exports.TypeNames = TypeNames;
TypeNames.NUMBER = "number";
class MaxLengths {
}
exports.MaxLengths = MaxLengths;
MaxLengths.AAD_DISPLAY_NAME = 120;
class TelemetryKeys {
}
exports.TelemetryKeys = TelemetryKeys;
TelemetryKeys.Component = "component";
TelemetryKeys.Success = "success";
TelemetryKeys.ErrorType = "error-type";
TelemetryKeys.ErrorMessage = "error-message";
TelemetryKeys.ErrorCode = "error-code";
TelemetryKeys.AppId = "appid";
TelemetryKeys.HostType = "bot-host-type";
TelemetryKeys.BotCapabilities = "bot-capabilities";
TelemetryKeys.StatusCode = "status-code";
TelemetryKeys.Url = "url";
TelemetryKeys.Method = "method";
class TelemetryValues {
}
exports.TelemetryValues = TelemetryValues;
TelemetryValues.Success = "yes";
TelemetryValues.Fail = "no";
TelemetryValues.UserError = "user";
TelemetryValues.SystemError = "system";
class AzureConstants {
}
exports.AzureConstants = AzureConstants;
AzureConstants.requiredResourceProviders = ["Microsoft.Web", "Microsoft.BotService"];
class PathInfo {
}
exports.PathInfo = PathInfo;
PathInfo.BicepTemplateRelativeDir = path_1.default.join("plugins", "resource", "bot", "bicep");
PathInfo.ProvisionModuleTemplateFileName = "botProvision.template.bicep";
PathInfo.FuncHostedProvisionModuleTemplateFileName = "funcHostedBotProvision.template.bicep";
PathInfo.ConfigurationModuleTemplateFileName = "botConfiguration.template.bicep";
class BotBicep {
}
exports.BotBicep = BotBicep;
BotBicep.resourceId = "provisionOutputs.botOutput.value.botWebAppResourceId";
BotBicep.hostName = "provisionOutputs.botOutput.value.validDomain";
BotBicep.webAppEndpoint = "provisionOutputs.botOutputs.value.botWebAppEndpoint";
exports.CustomizedTasks = {
    addCapability: "addCapability",
    addFeature: "addFeature",
};
//# sourceMappingURL=constants.js.map