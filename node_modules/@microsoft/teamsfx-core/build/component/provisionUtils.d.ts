import { AzureAccountProvider, ContextV3, FxError, InputsWithProjectPath, Json, M365TokenProvider, Result, SubscriptionInfo, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
import { FillInAzureConfigsResult, ProvisionSubscriptionCheckResult } from "../plugins/solution/fx-solution/constants";
interface M365TenantRes {
    tenantIdInToken: string;
    tenantUserName: string;
}
export declare class ProvisionUtils {
    preProvision(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    /**
     * make sure subscription is correct before provision
     *
     */
    checkProvisionSubscription(ctx: v2.Context, envInfo: v3.EnvInfoV3, azureAccountProvider: AzureAccountProvider, targetSubscriptionIdFromCLI: string | undefined): Promise<Result<ProvisionSubscriptionCheckResult, FxError>>;
    updateEnvInfoSubscription(envInfo: v3.EnvInfoV3, subscriptionInfo: SubscriptionInfo): void;
    compareWithStateSubscription(ctx: v2.Context, envInfo: v3.EnvInfoV3, targetSubscriptionInfo: SubscriptionInfo, subscriptionInStateId: string | undefined): Promise<Result<ProvisionSubscriptionCheckResult, FxError>>;
    clearEnvInfoStateResource(envInfo: v3.EnvInfoV3): void;
    /**
     * Asks common questions and puts the answers in the global namespace of SolutionConfig
     *
     */
    fillInAzureConfigs(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<FillInAzureConfigsResult, FxError>>;
    getM365TenantId(m365TokenProvider: M365TokenProvider): Promise<Result<M365TenantRes, FxError>>;
    askForProvisionConsent(ctx: v2.Context, azureAccountProvider: AzureAccountProvider, envInfo: v3.EnvInfoV3, hasSwitchedM365Tenant: boolean, hasSwitchedSubscription: boolean, m365AccountName: string, hasAzureResource: boolean, previousM365TenantId: string, previousSubscriptionId?: string): Promise<Result<Void, FxError>>;
}
export declare function getSubscriptionId(state: Json): string;
export declare function getTeamsAppTenantId(state: Json): string;
export declare function findSubscriptionFromList(subscriptionId: string, subscriptions: SubscriptionInfo[]): SubscriptionInfo | undefined;
export declare const provisionUtils: ProvisionUtils;
export {};
//# sourceMappingURL=provisionUtils.d.ts.map