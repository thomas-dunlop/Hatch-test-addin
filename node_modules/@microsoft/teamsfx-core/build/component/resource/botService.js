"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBotRegInAppStudio = exports.createBotAAD = exports.BotService = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const tools_1 = require("../../common/tools");
const strings_1 = require("../../plugins/resource/bot/resources/strings");
const error_1 = require("../../plugins/resource/bot/v3/error");
const uuid = tslib_1.__importStar(require("uuid"));
const resourceNameFactory_1 = require("../../plugins/resource/bot/utils/resourceNameFactory");
const constants_1 = require("../../plugins/resource/bot/constants");
const aadRegistration_1 = require("../../plugins/resource/bot/aadRegistration");
const messages_1 = require("../../plugins/resource/bot/resources/messages");
const appStudio_1 = require("../../plugins/resource/bot/appStudio/appStudio");
const constants_2 = require("../constants");
const utils_1 = require("../utils");
const workflow_1 = require("../workflow");
const azureResource_1 = require("./azureResource");
const messages_2 = require("../messages");
const lib_1 = require("@feathersjs/hooks/lib");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
const errors_1 = require("../../plugins/resource/bot/errors");
let BotService = class BotService extends azureResource_1.AzureResource {
    constructor() {
        super(...arguments);
        this.outputs = constants_2.BotServiceOutputs;
        this.finalOutputKeys = ["botId", "botPassword"];
        this.secretFields = ["botPassword"];
        this.name = "bot-service";
        this.bicepModuleName = "botService";
    }
    async generateBicep(context, inputs) {
        var _a;
        try {
            const resource = typedi_1.Container.get(inputs.hosting);
            this.templateContext.endpointVarName = tools_1.compileHandlebarsTemplateString((_a = resource.outputs.endpointAsParam.bicepVariable) !== null && _a !== void 0 ? _a : "", inputs);
        }
        catch (_b) { }
        // Bot service's component must be Bot, omit it.
        inputs.scenario = "";
        return super.generateBicep(context, inputs);
    }
    async provision(context, inputs, actionContext) {
        var _a;
        var _b, _c;
        // create bot aad app by API call
        await ((_a = actionContext === null || actionContext === void 0 ? void 0 : actionContext.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_2.ProgressMessages.provisionBot));
        // init bot state
        (_b = context.envInfo.state)[_c = constants_2.ComponentNames.TeamsBot] || (_b[_c] = {});
        const aadRes = await createBotAAD(context);
        if (aadRes.isErr())
            return teamsfx_api_1.err(aadRes.error);
        if (context.envInfo.envName === "local") {
            const botConfig = aadRes.value;
            const regRes = await createBotRegInAppStudio(botConfig, context);
            if (regRes.isErr())
                return teamsfx_api_1.err(regRes.error);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async configure(context) {
        // create bot aad app by API call
        const teamsBot = workflow_1.getComponent(context.projectSetting, constants_2.ComponentNames.TeamsBot);
        if (!teamsBot)
            return teamsfx_api_1.ok(undefined);
        const plans = [];
        if (context.envInfo.envName === "local") {
            plans.push(messages_2.Plans.updateBotEndpoint());
            const teamsBotState = context.envInfo.state[constants_2.ComponentNames.TeamsBot];
            const appStudioTokenRes = await context.tokenProvider.m365TokenProvider.getAccessToken({
                scopes: tools_1.AppStudioScopes,
            });
            const appStudioToken = appStudioTokenRes.isOk() ? appStudioTokenRes.value : undefined;
            error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCAL_ENDPOINT, teamsBotState.siteEndpoint);
            error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
            error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCAL_BOT_ID, teamsBotState.botId);
            await appStudio_1.AppStudio.updateMessageEndpoint(appStudioToken, teamsBotState.botId, `${teamsBotState.siteEndpoint}${strings_1.CommonStrings.MESSAGE_ENDPOINT_SUFFIX}`);
        }
        return teamsfx_api_1.ok(undefined);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableProgressBar: true,
            progressTitle: messages_2.ProgressTitles.provisionBot,
            progressSteps: 1,
            errorSource: "BotService",
            errorHandler: (e, t) => {
                // context and name are for sending telemetry, since we don't send telemetry here, it's ok to leave them empty
                const res = errors_1.wrapError(e, {}, false, "");
                return res.isErr() ? res.error : e;
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], BotService.prototype, "provision", null);
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            errorSource: "BotService",
            errorHandler: (e, t) => {
                // context and name are for sending telemetry, since we don't send telemetry here, it's ok to leave them empty
                const res = errors_1.wrapError(e, {}, false, "");
                return res.isErr() ? res.error : e;
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], BotService.prototype, "configure", null);
BotService = tslib_1.__decorate([
    typedi_1.Service("bot-service")
], BotService);
exports.BotService = BotService;
async function createBotAAD(ctx) {
    const graphTokenRes = await ctx.tokenProvider.m365TokenProvider.getAccessToken({
        scopes: tools_1.GraphScopes,
    });
    const graphToken = graphTokenRes.isOk() ? graphTokenRes.value : undefined;
    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.GRAPH_TOKEN, graphToken);
    error_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, ctx.projectSetting.appName);
    const botConfig = ctx.envInfo.state[constants_2.ComponentNames.TeamsBot];
    const botAADCreated = (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botId) !== undefined && (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botPassword) !== undefined;
    if (!botAADCreated) {
        const solutionConfig = ctx.envInfo.state.solution;
        const resourceNameSuffix = solutionConfig.resourceNameSuffix
            ? solutionConfig.resourceNameSuffix
            : uuid.v4();
        const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(resourceNameSuffix, ctx.projectSetting.appName, constants_1.MaxLengths.AAD_DISPLAY_NAME);
        const botAuthCredentials = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(graphToken, aadDisplayName, botConfig.objectId, botConfig.botId);
        botConfig.botId = botAuthCredentials.clientId;
        botConfig.botPassword = botAuthCredentials.clientSecret;
        botConfig.objectId = botAuthCredentials.objectId;
        ctx.logProvider.info(messages_1.Messages.SuccessfullyCreatedBotAadApp);
    }
    return teamsfx_api_1.ok(botConfig);
}
exports.createBotAAD = createBotAAD;
async function createBotRegInAppStudio(botConfig, ctx) {
    // 2. Register bot by app studio.
    const botReg = {
        botId: botConfig.botId,
        name: utils_1.normalizeName(ctx.projectSetting.appName) + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
        description: "",
        iconUrl: "",
        messagingEndpoint: "",
        callingEndpoint: "",
    };
    ctx.logProvider.info(messages_1.Messages.ProvisioningBotRegistration);
    const appStudioTokenRes = await ctx.tokenProvider.m365TokenProvider.getAccessToken({
        scopes: tools_1.AppStudioScopes,
    });
    const appStudioToken = appStudioTokenRes.isOk() ? appStudioTokenRes.value : undefined;
    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
    await appStudio_1.AppStudio.createBotRegistration(appStudioToken, botReg);
    ctx.logProvider.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
    return teamsfx_api_1.ok(undefined);
}
exports.createBotRegInAppStudio = createBotRegInAppStudio;
//# sourceMappingURL=botService.js.map