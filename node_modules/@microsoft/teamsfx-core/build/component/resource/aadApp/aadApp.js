"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadApp = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../../constants");
const path = tslib_1.__importStar(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const folder_1 = require("../../../folder");
const plugin_1 = require("../../../plugins/resource/aad/plugin");
const utils_1 = require("./utils");
const migrate_1 = require("../../migrate");
const generateAadManifestTemplate_1 = require("../../../core/generateAadManifestTemplate");
const executeUserTask_1 = require("../../../plugins/solution/fx-solution/v2/executeUserTask");
const common_1 = require("../../../common");
let AadApp = class AadApp {
    constructor() {
        this.type = "cloud";
        this.name = constants_1.ComponentNames.AadApp;
        this.outputs = constants_1.AadAppOutputs;
        this.finalOutputKeys = [
            "applicationIdUris",
            "clientId",
            "clientSecret",
            "objectId",
            "oauth2PermissionScopeId",
            "frontendEndpoint",
            "botId",
            "botEndpoint",
            "domain",
            "endpoint",
            "oauthAuthority",
            "oauthHost",
            "tenantId",
        ];
        this.secretFields = ["clientSecret"];
    }
    async generateManifest(context, inputs) {
        const projectSetting = migrate_1.convertProjectSettingsV3ToV2(context.projectSetting);
        await generateAadManifestTemplate_1.generateAadManifestTemplate(inputs.projectPath, projectSetting);
        return teamsfx_api_1.ok(undefined);
    }
    async generateAuthFiles(context, inputs, needTab, needBot) {
        const res = await executeUserTask_1.createAuthFiles(inputs, context, needTab, needBot, common_1.isVSProject(context.projectSetting));
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        return teamsfx_api_1.ok(undefined);
    }
    async generateBicep(context, inputs) {
        const bicep = {
            type: "bicep",
            Parameters: await fs_extra_1.default.readJson(path.join(folder_1.getTemplatesFolder(), "bicep", "aadApp.parameters.json")),
        };
        return teamsfx_api_1.ok([bicep]);
    }
    async provision(context, inputs) {
        var _a;
        var _b, _c;
        (_a = (_b = context.envInfo.state)[_c = constants_1.ComponentNames.AadApp]) !== null && _a !== void 0 ? _a : (_b[_c] = {});
        const aadAppImplement = new plugin_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        await aadAppImplement.provisionUsingManifest(convertCtx);
        const convertState = convertCtx.envInfo.state.get("fx-resource-aad-app-for-teams");
        convertState.forEach((v, k) => {
            context.envInfo.state[constants_1.ComponentNames.AadApp][k] = v;
        });
        return teamsfx_api_1.ok(undefined);
    }
    async configure(context, inputs) {
        const aadAppImplement = new plugin_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        await aadAppImplement.postProvisionUsingManifest(convertCtx);
        const convertState = convertCtx.envInfo.state.get("fx-resource-aad-app-for-teams");
        convertState.forEach((v, k) => {
            context.envInfo.state[constants_1.ComponentNames.AadApp][k] = v;
        });
        return teamsfx_api_1.ok(undefined);
    }
    async setApplicationInContext(context, inputs) {
        const aadAppImplement = new plugin_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        await aadAppImplement.setApplicationInContext(convertCtx);
        const convertState = convertCtx.envInfo.state.get("fx-resource-aad-app-for-teams");
        convertState.forEach((v, k) => {
            context.envInfo.state[constants_1.ComponentNames.AadApp][k] = v;
        });
        return teamsfx_api_1.ok(undefined);
    }
    async deploy(context, inputs) {
        const aadAppImplement = new plugin_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        await aadAppImplement.deploy(convertCtx);
        const convertState = convertCtx.envInfo.state.get("fx-resource-aad-app-for-teams");
        convertState.forEach((v, k) => {
            context.envInfo.state[constants_1.ComponentNames.AadApp][k] = v;
        });
        return teamsfx_api_1.ok(undefined);
    }
};
AadApp = tslib_1.__decorate([
    typedi_1.Service(constants_1.ComponentNames.AadApp)
], AadApp);
exports.AadApp = AadApp;
//# sourceMappingURL=aadApp.js.map