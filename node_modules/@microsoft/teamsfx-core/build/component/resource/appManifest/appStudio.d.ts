import { FxError, InputsWithProjectPath, M365TokenProvider, Result, ResourceContextV3, TeamsAppManifest, TokenProvider, v2, v3, ProjectSettingsV3, ProjectSettings } from "@microsoft/teamsfx-api";
/**
 * Create Teams app if not exists
 * @param ctx
 * @param inputs
 * @param envInfo
 * @param tokenProvider
 * @returns Teams app id
 */
export declare function createTeamsApp(ctx: v2.Context, inputs: InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<string, FxError>>;
/**
 * Update Teams app
 * @param ctx
 * @param inputs
 * @param envInfo
 * @param tokenProvider
 * @returns
 */
export declare function updateTeamsApp(ctx: v2.Context, inputs: InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<string, FxError>>;
export declare function publishTeamsApp(ctx: v2.Context, inputs: InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: M365TokenProvider, telemetryProps?: Record<string, string>): Promise<Result<{
    appName: string;
    publishedAppId: string;
    update: boolean;
}, FxError>>;
/**
 * Build appPackage.{envName}.zip
 * @returns Path for built Teams app package
 */
export declare function buildTeamsAppPackage(projectSettings: ProjectSettingsV3 | ProjectSettings, projectPath: string, envInfo: v3.EnvInfoV3, withEmptyCapabilities?: boolean, telemetryProps?: Record<string, string>): Promise<Result<string, FxError>>;
/**
 * Validate manifest
 * @returns an array of validation error strings
 */
export declare function validateManifest(manifest: TeamsAppManifest): Promise<Result<string[], FxError>>;
export declare function updateManifest(ctx: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
//# sourceMappingURL=appStudio.d.ts.map