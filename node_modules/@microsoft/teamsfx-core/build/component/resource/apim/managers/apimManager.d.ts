import { IApimPluginConfig, IFunctionPluginConfig, ISolutionConfig } from "../config";
import { IAnswer } from "../answer";
import { LogProvider, PluginContext, TelemetryReporter } from "@microsoft/teamsfx-api";
import { ArmTemplateResult } from "../../../../common/armInterface";
import { ApimService } from "../services/apimService";
import { Lazy } from "../utils/commonUtils";
import { OpenApiProcessor } from "../utils/openApiProcessor";
export declare class ApimManager {
    private readonly logger;
    private readonly telemetryReporter;
    private readonly lazyApimService;
    private readonly openApiProcessor;
    constructor(lazyApimService: Lazy<ApimService>, openApiProcessor: OpenApiProcessor, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    provision(apimConfig: IApimPluginConfig): Promise<void>;
    deploy(apimConfig: IApimPluginConfig, solutionConfig: ISolutionConfig, functionConfig: IFunctionPluginConfig, answer: IAnswer, projectRootPath: string): Promise<void>;
    updateArmTemplates(ctx: PluginContext): Promise<ArmTemplateResult>;
    generateArmTemplates(ctx: PluginContext): Promise<ArmTemplateResult>;
}
//# sourceMappingURL=apimManager.d.ts.map