"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNotificationTriggerQuestionNode = exports.getQuestionsForAddFeatureSubCommand = exports.getActionNameByFeatureId = exports.FeatureIdToComponent = exports.FeatureId = exports.getQuestionsForAddResourceV3 = exports.getQuestionsForAddFeatureV3 = exports.getQuestionsForDeployV3 = exports.getQuestionsForProvisionV3 = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const projectSettingsHelper_1 = require("../common/projectSettingsHelper");
const constants_1 = require("../common/constants");
const localizeUtils_1 = require("../common/localizeUtils");
const projectSettingsHelperV3_1 = require("../common/projectSettingsHelperV3");
const tools_1 = require("../common/tools");
const constants_2 = require("./constants");
const migrate_1 = require("./migrate");
const workflow_1 = require("./workflow");
const constants_3 = require("../plugins/resource/appstudio/constants");
const question_1 = require("../plugins/resource/bot/question");
const question_2 = require("../plugins/solution/fx-solution/question");
const getQuestions_1 = require("../plugins/solution/fx-solution/v2/getQuestions");
const utils_1 = require("../plugins/solution/fx-solution/v2/utils");
const error_1 = require("../core/error");
const question_3 = require("../core/question");
const utils_2 = require("./utils");
const featureFlags_1 = require("../common/featureFlags");
const enum_1 = require("../plugins/resource/bot/v2/enum");
const mapping_1 = require("../plugins/resource/bot/v2/mapping");
const questions_1 = require("./resource/azureSql/questions");
const question_4 = require("../plugins/resource/function/question");
const ApiConnectorImpl_1 = require("./feature/apiconnector/ApiConnectorImpl");
const cicd_1 = require("./feature/cicd");
const constants_4 = require("../plugins/solution/fx-solution/v3/constants");
const utils_3 = require("./resource/appManifest/utils");
const constants_5 = require("../plugins/resource/aad/constants");
const apim_1 = require("./resource/apim");
const sso_1 = require("./feature/sso");
const spfx_1 = require("./feature/spfx");
async function getQuestionsForProvisionV3(context, inputs) {
    if (inputs.platform === teamsfx_api_1.Platform.CLI_HELP) {
        const node = new teamsfx_api_1.QTreeNode({ type: "group" });
        node.addChild(new teamsfx_api_1.QTreeNode(question_2.AskSubscriptionQuestion));
        node.addChild(questions_1.buildQuestionNode());
        return teamsfx_api_1.ok(node);
    }
    else {
        const node = new teamsfx_api_1.QTreeNode({ type: "group" });
        if (projectSettingsHelperV3_1.hasAzureResourceV3(context.projectSetting)) {
            node.addChild(new teamsfx_api_1.QTreeNode(question_2.AskSubscriptionQuestion));
        }
        return teamsfx_api_1.ok(node);
    }
}
exports.getQuestionsForProvisionV3 = getQuestionsForProvisionV3;
async function getQuestionsForDeployV3(ctx, inputs, envInfo) {
    //VS project has no selection interaction, and will deploy all selectable components by default.
    if (projectSettingsHelper_1.isVSProject(ctx.projectSetting)) {
        return teamsfx_api_1.ok(undefined);
    }
    const isDynamicQuestion = teamsfx_api_1.DynamicPlatforms.includes(inputs.platform);
    const projectSetting = ctx.projectSetting;
    const deployableComponents = [
        constants_2.ComponentNames.TeamsTab,
        constants_2.ComponentNames.TeamsBot,
        constants_2.ComponentNames.TeamsApi,
        constants_2.ComponentNames.APIM,
        constants_2.ComponentNames.AppManifest,
    ];
    const componentDisplayNames = {
        [constants_2.ComponentNames.TeamsTab]: "NodeJS Tab frontend",
        [constants_2.ComponentNames.TeamsBot]: "Bot",
        [constants_2.ComponentNames.TeamsApi]: "Azure Function",
        [constants_2.ComponentNames.APIM]: "API Management",
        [constants_2.ComponentNames.AppManifest]: "App Studio",
    };
    if (teamsfx_api_1.CLIPlatforms.includes(inputs.platform)) {
        deployableComponents.push(constants_2.ComponentNames.AadApp);
    }
    let selectableComponents;
    if (!isDynamicQuestion) {
        selectableComponents = deployableComponents;
    }
    else {
        const hasAzureResource = projectSettingsHelperV3_1.hasAzureResourceV3(projectSetting);
        const provisioned = utils_1.checkWetherProvisionSucceeded(envInfo.state);
        if (hasAzureResource && !provisioned) {
            return teamsfx_api_1.err(new teamsfx_api_1.UserError({
                source: "Solution",
                name: "CannotDeployBeforeProvision",
                message: localizeUtils_1.getDefaultString("core.deploy.FailedToDeployBeforeProvision"),
                displayMessage: localizeUtils_1.getLocalizedString("core.deploy.FailedToDeployBeforeProvision"),
                helpLink: constants_1.HelpLinks.WhyNeedProvision,
            }));
        }
        selectableComponents = projectSetting.components
            .filter((component) => component.deploy && deployableComponents.includes(component.name))
            .map((component) => component.name);
        if (teamsfx_api_1.CLIPlatforms.includes(inputs.platform)) {
            selectableComponents.push(constants_2.ComponentNames.AppManifest);
        }
    }
    const options = selectableComponents.map((c) => {
        const pluginName = migrate_1.ComponentName2pluginName(c);
        const item = {
            id: pluginName,
            label: componentDisplayNames[c],
            cliName: getQuestions_1.getPluginCLIName(pluginName),
        };
        return item;
    });
    if (options.length === 0) {
        return teamsfx_api_1.err(new error_1.NoCapabilityFoundError(teamsfx_api_1.Stage.deploy));
    }
    const selectQuestion = question_2.DeployPluginSelectQuestion;
    selectQuestion.staticOptions = options;
    selectQuestion.default = options.map((i) => i.id);
    const node = new teamsfx_api_1.QTreeNode(selectQuestion);
    if (selectableComponents.includes(constants_2.ComponentNames.APIM)) {
        const resourceContext = ctx;
        resourceContext.envInfo = envInfo;
        resourceContext.tokenProvider = ctx.tokenProvider;
        const apimDeployNodeRes = await apim_1.getQuestionsForDeployAPIM(resourceContext, inputs);
        if (apimDeployNodeRes.isErr())
            return teamsfx_api_1.err(apimDeployNodeRes.error);
        if (apimDeployNodeRes.value) {
            const apimNode = apimDeployNodeRes.value;
            apimNode.condition = { contains: constants_4.BuiltInFeaturePluginNames.apim };
            node.addChild(apimNode);
        }
    }
    if (selectableComponents.includes(constants_2.ComponentNames.AadApp)) {
        const aadNode = new teamsfx_api_1.QTreeNode({
            name: constants_5.Constants.INCLUDE_AAD_MANIFEST,
            type: "singleSelect",
            staticOptions: ["yes", "no"],
            title: localizeUtils_1.getLocalizedString("core.aad.includeAadQuestionTitle"),
            default: "no",
        });
        node.addChild(aadNode);
    }
    if (selectableComponents.includes(constants_2.ComponentNames.AppManifest)) {
        const appManifestNode = new teamsfx_api_1.QTreeNode({
            name: constants_3.Constants.INCLUDE_APP_MANIFEST,
            type: "singleSelect",
            staticOptions: ["yes", "no"],
            title: localizeUtils_1.getLocalizedString("plugins.appstudio.whetherToDeployManifest"),
            default: "no",
        });
        node.addChild(appManifestNode);
    }
    return teamsfx_api_1.ok(node);
}
exports.getQuestionsForDeployV3 = getQuestionsForDeployV3;
async function getQuestionsForAddFeatureV3(ctx, inputs) {
    var _a, _b, _c, _d;
    const question = {
        name: question_2.AzureSolutionQuestionNames.Features,
        title: localizeUtils_1.getLocalizedString("core.addFeatureQuestion.title"),
        type: "singleSelect",
        staticOptions: [],
    };
    const options = [];
    question.staticOptions = options;
    if (inputs.platform === teamsfx_api_1.Platform.CLI_HELP) {
        options.push(question_2.NotificationOptionItem);
        options.push(question_2.CommandAndResponseOptionItem);
        if (featureFlags_1.isWorkflowBotEnabled()) {
            options.push(question_2.WorkflowOptionItem);
        }
        options.push(question_2.BotNewUIOptionItem);
        options.push(question_2.TabNewUIOptionItem, question_2.TabNonSsoItem);
        options.push(question_2.MessageExtensionNewUIItem);
        options.push(question_2.AzureResourceApimNewUI);
        options.push(question_2.AzureResourceSQLNewUI);
        options.push(question_2.AzureResourceFunctionNewUI);
        options.push(question_2.AzureResourceKeyVaultNewUI);
        options.push(question_2.SingleSignOnOptionItem);
        options.push(question_2.ApiConnectionOptionItem);
        options.push(question_2.CicdOptionItem);
        const addFeatureNode = new teamsfx_api_1.QTreeNode(question);
        const triggerNodeRes = await getNotificationTriggerQuestionNode(inputs);
        if (triggerNodeRes.isErr())
            return teamsfx_api_1.err(triggerNodeRes.error);
        if (triggerNodeRes.value) {
            addFeatureNode.addChild(triggerNodeRes.value);
        }
        const functionNameNode = new teamsfx_api_1.QTreeNode(question_4.functionNameQuestion);
        functionNameNode.condition = { equals: question_2.AzureResourceFunctionNewUI.id };
        addFeatureNode.addChild(functionNameNode);
        return teamsfx_api_1.ok(addFeatureNode);
    }
    // check capability options
    const azureHost = projectSettingsHelperV3_1.hasAzureResourceV3(ctx.projectSetting);
    if (azureHost) {
        const manifestRes = await utils_3.manifestUtils.readAppManifest(inputs.projectPath);
        if (manifestRes.isErr())
            return teamsfx_api_1.err(manifestRes.error);
        const manifest = manifestRes.value;
        const canAddTab = manifest.staticTabs.length < constants_3.STATIC_TABS_MAX_ITEMS;
        const botExceedLimit = manifest.bots.length > 0;
        const meExceedLimit = manifest.composeExtensions.length > 0;
        const projectSettingsV3 = ctx.projectSetting;
        const teamsBot = workflow_1.getComponent(ctx.projectSetting, constants_2.ComponentNames.TeamsBot);
        const alreadyHasNewBot = ((_a = teamsBot === null || teamsBot === void 0 ? void 0 : teamsBot.capabilities) === null || _a === void 0 ? void 0 : _a.includes("notification")) ||
            ((_b = teamsBot === null || teamsBot === void 0 ? void 0 : teamsBot.capabilities) === null || _b === void 0 ? void 0 : _b.includes("command-response")) ||
            ((_c = teamsBot === null || teamsBot === void 0 ? void 0 : teamsBot.capabilities) === null || _c === void 0 ? void 0 : _c.includes("workflow"));
        if (!botExceedLimit && !meExceedLimit) {
            options.push(question_2.NotificationOptionItem);
            options.push(question_2.CommandAndResponseOptionItem);
            if (featureFlags_1.isWorkflowBotEnabled()) {
                options.push(question_2.WorkflowOptionItem);
            }
        }
        if (canAddTab) {
            if (!projectSettingsHelperV3_1.hasTab(projectSettingsV3)) {
                options.push(question_2.TabNewUIOptionItem, question_2.TabNonSsoItem);
            }
            else {
                options.push(projectSettingsHelperV3_1.hasAAD(projectSettingsV3) ? question_2.TabNewUIOptionItem : question_2.TabNonSsoItem);
            }
        }
        if (!botExceedLimit) {
            options.push(question_2.BotNewUIOptionItem);
        }
        if (!meExceedLimit && !alreadyHasNewBot) {
            options.push(question_2.MessageExtensionNewUIItem);
        }
        // function can always be added
        options.push(question_2.AzureResourceFunctionNewUI);
        // check cloud resource options
        if (!projectSettingsHelperV3_1.hasAPIM(projectSettingsV3)) {
            options.push(question_2.AzureResourceApimNewUI);
        }
        options.push(question_2.AzureResourceSQLNewUI);
        if (!projectSettingsHelperV3_1.hasKeyVault(projectSettingsV3)) {
            options.push(question_2.AzureResourceKeyVaultNewUI);
        }
        if (sso_1.canAddSso(ctx.projectSetting)) {
            options.push(question_2.SingleSignOnOptionItem);
        }
        if (projectSettingsHelperV3_1.hasBot(projectSettingsV3) || projectSettingsHelperV3_1.hasApi(projectSettingsV3)) {
            options.push(question_2.ApiConnectionOptionItem);
        }
    }
    else if (featureFlags_1.isSPFxMultiTabEnabled() &&
        ((_d = ctx.projectSetting.solutionSettings) === null || _d === void 0 ? void 0 : _d.hostType) === question_2.HostTypeOptionSPFx.id) {
        options.push(question_2.TabSPFxNewUIItem);
    }
    const isCicdAddable = await tools_1.canAddCICDWorkflows(inputs, ctx);
    if (isCicdAddable) {
        options.push(question_2.CicdOptionItem);
    }
    const addFeatureNode = new teamsfx_api_1.QTreeNode(question);
    const functionNameNode = new teamsfx_api_1.QTreeNode(question_4.functionNameQuestion);
    functionNameNode.condition = { equals: question_2.AzureResourceFunctionNewUI.id };
    addFeatureNode.addChild(functionNameNode);
    const triggerNodeRes = await getNotificationTriggerQuestionNode(inputs);
    if (triggerNodeRes.isErr())
        return teamsfx_api_1.err(triggerNodeRes.error);
    if (triggerNodeRes.value) {
        addFeatureNode.addChild(triggerNodeRes.value);
    }
    const addSPFxNodeRes = await spfx_1.getAddSPFxQuestionNode(inputs.projectPath);
    if (addSPFxNodeRes.isErr())
        return teamsfx_api_1.err(addSPFxNodeRes.error);
    if (addSPFxNodeRes.value) {
        addFeatureNode.addChild(addSPFxNodeRes.value);
    }
    if (!ctx.projectSetting.programmingLanguage) {
        // Language
        const programmingLanguage = new teamsfx_api_1.QTreeNode(question_3.ProgrammingLanguageQuestion);
        programmingLanguage.condition = {
            enum: [
                question_2.NotificationOptionItem.id,
                question_2.CommandAndResponseOptionItem.id,
                question_2.WorkflowOptionItem.id,
                question_2.TabNewUIOptionItem.id,
                question_2.TabNonSsoItem.id,
                question_2.BotNewUIOptionItem.id,
                question_2.MessageExtensionItem.id,
                question_2.SingleSignOnOptionItem.id, // adding sso means adding sample codes
            ],
        };
        addFeatureNode.addChild(programmingLanguage);
    }
    return teamsfx_api_1.ok(addFeatureNode);
}
exports.getQuestionsForAddFeatureV3 = getQuestionsForAddFeatureV3;
async function getQuestionsForAddResourceV3(ctx, inputs) {
    const question = {
        name: question_2.AzureSolutionQuestionNames.AddResources,
        title: localizeUtils_1.getLocalizedString("core.addFeatureQuestion.title"),
        type: "singleSelect",
        staticOptions: [],
    };
    const options = [];
    question.staticOptions = options;
    if (inputs.platform === teamsfx_api_1.Platform.CLI_HELP) {
        options.push(question_2.AzureResourceApimNewUI);
        options.push(question_2.AzureResourceSQLNewUI);
        options.push(question_2.AzureResourceFunctionNewUI);
        options.push(question_2.AzureResourceKeyVaultNewUI);
        const addResourceNode = new teamsfx_api_1.QTreeNode(question);
        const functionNameNode = new teamsfx_api_1.QTreeNode(question_4.functionNameQuestion);
        functionNameNode.condition = { equals: question_2.AzureResourceFunctionNewUI.id };
        addResourceNode.addChild(functionNameNode);
        return teamsfx_api_1.ok(addResourceNode);
    }
    const projectSettingsV3 = ctx.projectSetting;
    if (!projectSettingsHelperV3_1.hasAPIM(projectSettingsV3)) {
        options.push(question_2.AzureResourceApimNewUI);
    }
    options.push(question_2.AzureResourceSQLNewUI);
    if (!projectSettingsHelperV3_1.hasKeyVault(projectSettingsV3)) {
        options.push(question_2.AzureResourceKeyVaultNewUI);
    }
    // function can always be added
    options.push(question_2.AzureResourceFunctionNewUI);
    const addResourceNode = new teamsfx_api_1.QTreeNode(question);
    const functionNameNode = new teamsfx_api_1.QTreeNode(question_4.functionNameQuestion);
    functionNameNode.condition = { equals: question_2.AzureResourceFunctionNewUI.id };
    addResourceNode.addChild(functionNameNode);
    if (!ctx.projectSetting.programmingLanguage) {
        // Language
        const programmingLanguage = new teamsfx_api_1.QTreeNode(question_3.ProgrammingLanguageQuestion);
        programmingLanguage.condition = {
            enum: [
                question_2.NotificationOptionItem.id,
                question_2.CommandAndResponseOptionItem.id,
                question_2.WorkflowOptionItem.id,
                question_2.TabNewUIOptionItem.id,
                question_2.TabNonSsoItem.id,
                question_2.BotNewUIOptionItem.id,
                question_2.MessageExtensionItem.id,
                question_2.SingleSignOnOptionItem.id, // adding sso means adding sample codes
            ],
        };
        addResourceNode.addChild(programmingLanguage);
    }
    return teamsfx_api_1.ok(addResourceNode);
}
exports.getQuestionsForAddResourceV3 = getQuestionsForAddResourceV3;
var FeatureId;
(function (FeatureId) {
    FeatureId["Tab"] = "Tab";
    FeatureId["TabNonSso"] = "TabNonSso";
    FeatureId["Notification"] = "Notification";
    FeatureId["CommandAndResponse"] = "command-bot";
    FeatureId["Bot"] = "Bot";
    FeatureId["MessagingExtension"] = "MessagingExtension";
    FeatureId["function"] = "function";
    FeatureId["apim"] = "apim";
    FeatureId["sql"] = "sql";
    FeatureId["keyvault"] = "keyvault";
    FeatureId["sso"] = "sso";
    FeatureId["ApiConnector"] = "api-connection";
    FeatureId["cicd"] = "cicd";
    FeatureId["M365SearchApp"] = "M365SearchApp";
    FeatureId["M365SsoLaunchPage"] = "M365SsoLaunchPage";
})(FeatureId = exports.FeatureId || (exports.FeatureId = {}));
exports.FeatureIdToComponent = {
    [FeatureId.Tab]: constants_2.ComponentNames.TeamsTab,
    [FeatureId.TabNonSso]: constants_2.ComponentNames.TeamsTab,
    [FeatureId.M365SsoLaunchPage]: constants_2.ComponentNames.TeamsTab,
    [FeatureId.Notification]: constants_2.ComponentNames.TeamsBot,
    [FeatureId.CommandAndResponse]: constants_2.ComponentNames.TeamsBot,
    [FeatureId.Bot]: constants_2.ComponentNames.TeamsBot,
    [FeatureId.M365SearchApp]: constants_2.ComponentNames.TeamsBot,
    [FeatureId.MessagingExtension]: constants_2.ComponentNames.TeamsBot,
    [FeatureId.function]: constants_2.ComponentNames.TeamsApi,
    [FeatureId.apim]: constants_2.ComponentNames.APIMFeature,
    [FeatureId.sql]: constants_2.ComponentNames.AzureSQL,
    [FeatureId.keyvault]: constants_2.ComponentNames.KeyVault,
    [FeatureId.sso]: constants_2.ComponentNames.SSO,
    [FeatureId.ApiConnector]: constants_2.ComponentNames.ApiConnector,
    [FeatureId.cicd]: constants_2.ComponentNames.CICD,
};
function getActionNameByFeatureId(featureId) {
    const component = exports.FeatureIdToComponent[featureId];
    if (component) {
        return `${component}.add`;
    }
}
exports.getActionNameByFeatureId = getActionNameByFeatureId;
async function getQuestionsForAddFeatureSubCommand(featureId, inputs) {
    if (question_2.BotFeatureIds.includes(featureId)) {
        return await getNotificationTriggerQuestionNode(inputs);
    }
    else if (question_2.TabFeatureIds.includes(featureId)) {
    }
    else if (featureId === question_2.AzureResourceSQLNewUI.id) {
    }
    else if (featureId === question_2.AzureResourceFunctionNewUI.id ||
        featureId === question_2.AzureResourceApimNewUI.id) {
        question_4.functionNameQuestion.validation = undefined;
        return teamsfx_api_1.ok(new teamsfx_api_1.QTreeNode(question_4.functionNameQuestion));
    }
    else if (featureId === question_2.AzureResourceKeyVaultNewUI.id) {
    }
    else if (featureId === question_2.CicdOptionItem.id) {
        return await cicd_1.addCicdQuestion(utils_2.createContextV3(), inputs);
    }
    else if (featureId === question_2.ApiConnectionOptionItem.id) {
        const apiConnectorImpl = new ApiConnectorImpl_1.ApiConnectorImpl();
        return apiConnectorImpl.generateQuestion(utils_2.createContextV3(), inputs);
    }
    else if (featureId === question_2.SingleSignOnOptionItem.id) {
    }
    return teamsfx_api_1.ok(undefined);
}
exports.getQuestionsForAddFeatureSubCommand = getQuestionsForAddFeatureSubCommand;
async function getNotificationTriggerQuestionNode(inputs) {
    const res = new teamsfx_api_1.QTreeNode({
        type: "group",
    });
    if (featureFlags_1.isCLIDotNetEnabled()) {
        Object.values(enum_1.Runtime).forEach((runtime) => {
            const node = new teamsfx_api_1.QTreeNode(question_1.createHostTypeTriggerQuestion(inputs.platform, runtime));
            node.condition = question_1.getConditionOfNotificationTriggerQuestion(runtime);
            res.addChild(node);
        });
    }
    else {
        const runtime = mapping_1.getPlatformRuntime(inputs.platform);
        const node = new teamsfx_api_1.QTreeNode(question_1.createHostTypeTriggerQuestion(inputs.platform, runtime));
        res.addChild(node);
    }
    res.condition = question_1.showNotificationTriggerCondition;
    return teamsfx_api_1.ok(res);
}
exports.getNotificationTriggerQuestionNode = getNotificationTriggerQuestionNode;
//# sourceMappingURL=questionV3.js.map