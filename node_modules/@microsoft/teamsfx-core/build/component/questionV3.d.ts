import { ContextV3, FxError, Inputs, QTreeNode, Result, v2, v3 } from "@microsoft/teamsfx-api";
export declare function getQuestionsForProvisionV3(context: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForDeployV3(ctx: ContextV3, inputs: Inputs, envInfo?: v3.EnvInfoV3): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForAddFeatureV3(ctx: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForAddResourceV3(ctx: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare enum FeatureId {
    Tab = "Tab",
    TabNonSso = "TabNonSso",
    Notification = "Notification",
    CommandAndResponse = "command-bot",
    Bot = "Bot",
    MessagingExtension = "MessagingExtension",
    function = "function",
    apim = "apim",
    sql = "sql",
    keyvault = "keyvault",
    sso = "sso",
    ApiConnector = "api-connection",
    cicd = "cicd",
    M365SearchApp = "M365SearchApp",
    M365SsoLaunchPage = "M365SsoLaunchPage"
}
export declare const FeatureIdToComponent: {
    Tab: string;
    TabNonSso: string;
    M365SsoLaunchPage: string;
    Notification: string;
    "command-bot": string;
    Bot: string;
    M365SearchApp: string;
    MessagingExtension: string;
    function: string;
    apim: string;
    sql: string;
    keyvault: string;
    sso: string;
    "api-connection": string;
    cicd: string;
};
export declare function getActionNameByFeatureId(featureId: FeatureId): string | undefined;
export declare function getQuestionsForAddFeatureSubCommand(featureId: FeatureId, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getNotificationTriggerQuestionNode(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
//# sourceMappingURL=questionV3.d.ts.map