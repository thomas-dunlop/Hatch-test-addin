// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSODebugHandler = void 0;
const lodash_1 = require("lodash");
const uuid_1 = require("uuid");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const projectSettingsHelper_1 = require("../../common/local/projectSettingsHelper");
const projectSettingsHelperV3_1 = require("../../common/projectSettingsHelperV3");
const telemetry_1 = require("../../common/telemetry");
const tools_1 = require("../../common/tools");
const crypto_1 = require("../../core/crypto");
const environment_1 = require("../../core/environment");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const aadAppClient_1 = require("../../plugins/resource/aad/aadAppClient");
const aadAppManifestManager_1 = require("../../plugins/resource/aad/aadAppManifestManager");
const constants_1 = require("../../plugins/resource/aad/constants");
const configs_1 = require("../../plugins/resource/aad/utils/configs");
const tokenProvider_1 = require("../../plugins/resource/aad/utils/tokenProvider");
const constants_2 = require("../constants");
const migrate_1 = require("../migrate");
const error_1 = require("./error");
const localEnvProvider_1 = require("./localEnvProvider");
const tools_2 = require("../../common/tools");
class SSODebugHandler {
    constructor(projectPath, args, m365TokenProvider, logger, telemetry, ui) {
        this.projectPath = projectPath;
        this.args = args;
        this.m365TokenProvider = m365TokenProvider;
        this.logger = logger;
        this.telemetry = telemetry;
        this.ui = ui;
    }
    // TODO: output message
    async setUp() {
        try {
            const checkArgsResult = await this.checkArgs();
            if (checkArgsResult.isErr()) {
                return teamsfx_api_1.err(checkArgsResult.error);
            }
            const projectSettingsResult = await projectSettingsLoader_1.loadProjectSettingsByProjectPath(this.projectPath, true);
            if (projectSettingsResult.isErr()) {
                return teamsfx_api_1.err(projectSettingsResult.error);
            }
            const projectSettingsV3 = projectSettingsResult.value;
            const cryptoProvider = new crypto_1.LocalCrypto(projectSettingsV3.projectId);
            const envInfoResult = await environment_1.environmentManager.loadEnvInfo(this.projectPath, cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (envInfoResult.isErr()) {
                return teamsfx_api_1.err(envInfoResult.error);
            }
            const envInfoV3 = envInfoResult.value;
            envInfoV3.state[constants_2.ComponentNames.AadApp] = envInfoV3.state[constants_2.ComponentNames.AadApp] || {};
            // set objectId, clientId, clientSecret, oauth2PermissionScopeId from args to state
            if (checkArgsResult.value) {
                envInfoV3.state[constants_2.ComponentNames.AadApp].objectId = this.args.objectId;
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientId = this.args.clientId;
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientSecret = this.args.clientSecret;
                envInfoV3.state[constants_2.ComponentNames.AadApp].oauth2PermissionScopeId =
                    this.args.accessAsUserScopeId || uuid_1.v4();
            }
            tokenProvider_1.TokenProvider.init({
                m365: this.m365TokenProvider,
            });
            // set oauth2PermissionScopeId to state
            envInfoV3.state[constants_2.ComponentNames.AadApp].oauth2PermissionScopeId =
                envInfoV3.state[constants_2.ComponentNames.AadApp].oauth2PermissionScopeId || uuid_1.v4();
            // not using exsting AAD app and not yet created
            if (!envInfoV3.state[constants_2.ComponentNames.AadApp].objectId) {
                const context = this.constructPluginContext(envInfoV3, cryptoProvider);
                const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(context);
                const config = new configs_1.ProvisionConfig(true, false);
                await aadAppClient_1.AadAppClient.createAadAppUsingManifest(telemetry_1.TelemetryEvent.DebugSetUpSSO, manifest, config);
                await aadAppClient_1.AadAppClient.createAadAppSecret(telemetry_1.TelemetryEvent.DebugSetUpSSO, config);
                // set objectId, clientId, clientSecret to state
                envInfoV3.state[constants_2.ComponentNames.AadApp].objectId = config.objectId;
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientId = config.clientId;
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientSecret = config.password;
            }
            // set applicationIdUris to state
            let applicationIdUri = "api://";
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSettingsV3)) {
                applicationIdUri += "localhost/";
                if (!projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSettingsV3)) {
                    applicationIdUri += envInfoV3.state[constants_2.ComponentNames.AadApp].clientId;
                }
            }
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSettingsV3)) {
                applicationIdUri += `botid-${envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId}`;
            }
            envInfoV3.state[constants_2.ComponentNames.AadApp].applicationIdUris = applicationIdUri;
            // set frontendEndpoint to state
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSettingsV3)) {
                envInfoV3.state[constants_2.ComponentNames.AadApp].frontendEndpoint = "https://localhost";
            }
            // set botId, botEndpoint to state
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSettingsV3)) {
                envInfoV3.state[constants_2.ComponentNames.AadApp].botId =
                    envInfoV3.state[constants_2.ComponentNames.TeamsBot].botId;
                envInfoV3.state[constants_2.ComponentNames.AadApp].botEndpoint =
                    envInfoV3.state[constants_2.ComponentNames.TeamsBot].siteEndpoint;
            }
            // set tenantId, oauthHost, oauthAuthority to state
            envInfoV3.state[constants_2.ComponentNames.AadApp].tenantId = tokenProvider_1.TokenProvider.tenantId;
            envInfoV3.state[constants_2.ComponentNames.AadApp].oauthHost = constants_1.Constants.oauthAuthorityPrefix;
            envInfoV3.state[constants_2.ComponentNames.AadApp].oauthAuthority = `${constants_1.Constants.oauthAuthorityPrefix}/${tokenProvider_1.TokenProvider.tenantId}`;
            const context = this.constructPluginContext(envInfoV3, cryptoProvider);
            const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(context);
            await aadAppClient_1.AadAppClient.updateAadAppUsingManifest(telemetry_1.TelemetryEvent.DebugSetUpSSO, manifest, false);
            await environment_1.environmentManager.writeEnvState(lodash_1.cloneDeep(envInfoV3.state), this.projectPath, cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            await aadAppManifestManager_1.AadAppManifestManager.writeManifestFileToBuildFolder(manifest, context);
            await this.setEnvs(projectSettingsV3, envInfoV3);
            return teamsfx_api_1.ok(teamsfx_api_1.Void);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async setEnvs(projectSettingsV3, envInfoV3) {
        const localEnvProvider = new localEnvProvider_1.LocalEnvProvider(this.projectPath);
        if (projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSettingsV3)) {
            const frontendEnvs = await localEnvProvider.loadFrontendLocalEnvs();
            frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.ClientId] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientId;
            frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.LoginUrl] = `${envInfoV3.state[constants_2.ComponentNames.TeamsTab].endpoint}/auth-start.html`;
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSettingsV3)) {
                frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.FuncEndpoint] =
                    frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.FuncEndpoint] ||
                        "http://localhost:7071";
                frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.FuncName] =
                    projectSettingsV3.defaultFunctionName;
            }
            await localEnvProvider.saveFrontendLocalEnvs(frontendEnvs);
        }
        if (projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSettingsV3)) {
            const backendEnvs = await localEnvProvider.loadBackendLocalEnvs();
            backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.ClientId] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientId;
            backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.ClientSecret] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientSecret;
            backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.TenantId] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].tenantId;
            backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.AuthorityHost] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].oauthHost;
            backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.AllowedAppIds] =
                tools_2.getAllowedAppIds().join(";");
            if (projectSettingsHelperV3_1.hasSQL(projectSettingsV3)) {
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlEndpoint] =
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlEndpoint] || "";
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlUserName] =
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlUserName] || "";
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlPassword] =
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlPassword] || "";
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlDbName] =
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlDbName] || "";
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlIdentityId] =
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlIdentityId] || "";
            }
            await localEnvProvider.saveBackendLocalEnvs(backendEnvs);
        }
        if (projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSettingsV3)) {
            const botEnvs = await localEnvProvider.loadBotLocalEnvs();
            botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ClientId] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientId;
            botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ClientSecret] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].clientSecret;
            botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.TenantId] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].tenantId;
            botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.AuthorityHost] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].oauthHost;
            botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.LoginEndpoint] = `${envInfoV3.state[constants_2.ComponentNames.AadApp].botEndpoint}/auth-start.html`;
            botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ApplicationIdUri] =
                envInfoV3.state[constants_2.ComponentNames.AadApp].applicationIdUris;
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSettingsV3)) {
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ApiEndpoint] =
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ApiEndpoint] || "http://localhost:7071";
            }
            if (projectSettingsHelperV3_1.hasSQL(projectSettingsV3)) {
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlEndpoint] =
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlEndpoint] || "";
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlUserName] =
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlUserName] || "";
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlPassword] =
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlPassword] || "";
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlDbName] =
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlDbName] || "";
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlIdentityId] =
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlIdentityId] || "";
            }
            await localEnvProvider.saveBotLocalEnvs(botEnvs);
        }
    }
    // return true if using existing AAD app
    async checkArgs() {
        // TODO: allow clientSecret to be set in other places (like env) instead of tasks.json
        if (this.args.objectId && this.args.clientId && this.args.clientSecret) {
            return teamsfx_api_1.ok(true);
        }
        else if (this.args.objectId || this.args.clientId || this.args.clientSecret) {
            return teamsfx_api_1.err(error_1.InvalidSSODebugArgsError());
        }
        else {
            return teamsfx_api_1.ok(false);
        }
    }
    constructPluginContext(envInfoV3, cryptoProvider) {
        const envInfo = {
            envName: envInfoV3.envName,
            config: envInfoV3.config,
            state: tools_1.objectToMap(migrate_1.convertEnvStateV3ToV2(envInfoV3.state)),
        };
        const context = {
            root: this.projectPath,
            logProvider: this.logger,
            telemetryReporter: this.telemetry,
            ui: this.ui,
            cryptoProvider,
            envInfo: envInfo,
            config: new teamsfx_api_1.ConfigMap(),
        };
        return context;
    }
}
exports.SSODebugHandler = SSODebugHandler;
//# sourceMappingURL=sso.js.map