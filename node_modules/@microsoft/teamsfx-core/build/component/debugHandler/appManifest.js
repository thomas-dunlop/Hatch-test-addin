// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppManifestDebugHandler = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../common/tools");
const crypto_1 = require("../../core/crypto");
const environment_1 = require("../../core/environment");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const appStudio_1 = require("../../plugins/resource/appstudio/appStudio");
const constants_1 = require("../constants");
const appStudio_2 = require("../resource/appManifest/appStudio");
const error_1 = require("./error");
class AppManifestDebugHandler {
    constructor(projectPath, args, m365TokenProvider, logger, telemetry, ui) {
        this.projectPath = projectPath;
        this.args = args;
        this.m365TokenProvider = m365TokenProvider;
        this.logger = logger;
        this.telemetry = telemetry;
        this.ui = ui;
    }
    // TODO: output message
    async prepare() {
        try {
            const checkArgsResult = await this.checkArgs();
            if (checkArgsResult.isErr()) {
                return teamsfx_api_1.err(checkArgsResult.error);
            }
            const projectSettingsResult = await projectSettingsLoader_1.loadProjectSettingsByProjectPath(this.projectPath, true);
            if (projectSettingsResult.isErr()) {
                return teamsfx_api_1.err(projectSettingsResult.error);
            }
            const projectSettingsV3 = projectSettingsResult.value;
            const cryptoProvider = new crypto_1.LocalCrypto(projectSettingsV3.projectId);
            const envInfoResult = await environment_1.environmentManager.loadEnvInfo(this.projectPath, cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (envInfoResult.isErr()) {
                return teamsfx_api_1.err(envInfoResult.error);
            }
            const envInfoV3 = envInfoResult.value;
            envInfoV3.state[constants_1.ComponentNames.AppManifest] =
                envInfoV3.state[constants_1.ComponentNames.AppManifest] || {};
            if (!checkArgsResult.value) {
                // build
                const result = await appStudio_2.buildTeamsAppPackage(projectSettingsV3, this.projectPath, envInfoV3);
                if (result.isErr()) {
                    return teamsfx_api_1.err(result.error);
                }
                this.args.manifestPackagePath = result.value;
            }
            // upload
            const tokenResult = await this.m365TokenProvider.getAccessToken({
                scopes: tools_1.AppStudioScopes,
            });
            if (tokenResult.isErr()) {
                return teamsfx_api_1.err(tokenResult.error);
            }
            const archivedFile = await fs_extra_1.default.readFile(this.args.manifestPackagePath);
            const appdefinition = await appStudio_1.AppStudioClient.importApp(archivedFile, tokenResult.value, this.logger, true);
            // set teamsAppId, tenantId to state
            envInfoV3.state[constants_1.ComponentNames.AppManifest].teamsAppId = appdefinition.teamsAppId;
            envInfoV3.state[constants_1.ComponentNames.AppManifest].tenantId = appdefinition.tenantId;
            await environment_1.environmentManager.writeEnvState(lodash_1.cloneDeep(envInfoV3.state), this.projectPath, cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            return teamsfx_api_1.ok(teamsfx_api_1.Void);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    // return true if specifying manifest app package
    async checkArgs() {
        return teamsfx_api_1.ok(this.args.manifestPackagePath !== undefined && this.args.manifestPackagePath.trim().length > 0);
    }
}
exports.AppManifestDebugHandler = AppManifestDebugHandler;
//# sourceMappingURL=appManifest.js.map