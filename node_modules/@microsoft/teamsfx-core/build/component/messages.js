"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plans = exports.ErrorMessage = exports.LogMessages = exports.ProgressMessages = exports.ProgressTitles = void 0;
const constants_1 = require("../plugins/resource/bot/constants");
const steps_1 = require("../plugins/resource/frontend/resources/steps");
const localizeUtils_1 = require("../common/localizeUtils");
class ProgressTitles {
}
exports.ProgressTitles = ProgressTitles;
ProgressTitles.scaffoldTab = steps_1.ScaffoldProgress.title;
ProgressTitles.scaffoldBot = constants_1.ProgressBarConstants.SCAFFOLD_TITLE;
ProgressTitles.scaffoldApi = "Scaffolding Api";
ProgressTitles.buildingTab = "Building Tab";
ProgressTitles.buildingBot = "Building Bot";
ProgressTitles.buildingApi = "Building Api";
ProgressTitles.provisionBot = "Registering Bot";
ProgressTitles.configureStorage = steps_1.PostProvisionProgress.title;
// Deploying Azure Functions [Bot]
ProgressTitles.deploying = (component, scenario) => `Deploying ${component}` + (scenario ? `[${scenario}]` : "");
ProgressTitles.deployingStorage = steps_1.DeployProgress.title;
class ProgressMessages {
}
exports.ProgressMessages = ProgressMessages;
ProgressMessages.scaffoldTab = steps_1.ScaffoldProgress.steps.Scaffold;
ProgressMessages.scaffoldBot = constants_1.ProgressBarConstants.SCAFFOLD_STEP_FETCH_ZIP;
ProgressMessages.scaffoldApi = "Scaffolding Function Api project.";
ProgressMessages.buildingTab = steps_1.DeployProgress.steps.Build;
ProgressMessages.buildingBot = constants_1.ProgressBarConstants.DEPLOY_STEP_NPM_INSTALL;
ProgressMessages.buildingApi = "Building Function Api.";
ProgressMessages.packingCode = constants_1.ProgressBarConstants.DEPLOY_STEP_ZIP_FOLDER;
ProgressMessages.enableStaticWebsite = steps_1.PostProvisionProgress.steps.EnableStaticWebsite;
ProgressMessages.provisionBot = constants_1.ProgressBarConstants.PROVISION_STEP_BOT_REG;
class LogMessages {
}
exports.LogMessages = LogMessages;
LogMessages.updateFunctionAppSettings = "Updating Azure Function app settings.";
LogMessages.enableStaticWebsite = "Enabling static website feature for Azure Storage.";
class ErrorMessage {
}
exports.ErrorMessage = ErrorMessage;
ErrorMessage.programmingLanguageInvalid = "Invalid programming language found in project settings.";
ErrorMessage.SomethingIsMissing = (something) => ({
    default: localizeUtils_1.getDefaultString("plugins.bot.SomethingIsMissing", something),
    localized: localizeUtils_1.getLocalizedString("plugins.bot.SomethingIsMissing", something),
});
ErrorMessage.SomethingIsNotExisting = (something) => ({
    default: localizeUtils_1.getDefaultString("plugins.bot.SomethingNotExisting", something),
    localized: localizeUtils_1.getLocalizedString("plugins.bot.SomethingNotExisting", something),
});
ErrorMessage.WorkingDirIsMissing = {
    default: localizeUtils_1.getDefaultString("plugins.bot.WorkingDirMissing"),
    localized: localizeUtils_1.getLocalizedString("plugins.bot.WorkingDirMissing"),
};
// Suggestions
ErrorMessage.RetryTheCurrentStep = {
    localized: localizeUtils_1.getLocalizedString("suggestions.retryTheCurrentStep"),
    default: localizeUtils_1.getDefaultString("suggestions.retryTheCurrentStep"),
};
ErrorMessage.RecreateTheProject = {
    default: localizeUtils_1.getDefaultString("plugins.bot.RecreateProject"),
    localized: localizeUtils_1.getLocalizedString("plugins.bot.RecreateProject"),
};
ErrorMessage.CheckOutputLogAndTryToFix = {
    default: localizeUtils_1.getDefaultString("plugins.bot.CheckLogAndFix"),
    localized: localizeUtils_1.getLocalizedString("plugins.bot.CheckLogAndFix"),
};
ErrorMessage.ReopenWorkingDir = (path = "") => ({
    default: localizeUtils_1.getDefaultString("plugins.bot.CheckPathWriteAccess", path),
    localized: localizeUtils_1.getLocalizedString("plugins.bot.CheckPathWriteAccess", path),
});
class Plans {
}
exports.Plans = Plans;
Plans.scaffold = (scenario, folder) => `scaffold ${scenario} source code in folder: ${folder}`;
Plans.buildProject = (folder) => `build project: ${folder}`;
Plans.deploy = (component, folder) => ({
    type: "service",
    name: "azure",
    remarks: `deploy ${component} in folder: ${folder}`,
});
Plans.enableStaticWebsite = () => ({
    type: "service",
    name: "azure",
    remarks: "configure azure storage (enable static web site)",
});
Plans.createAADforBot = () => ({
    type: "service",
    name: "graph.microsoft.com",
    remarks: "create AAD app for bot service (botId, botPassword)",
});
Plans.registerBot = () => ({
    type: "service",
    name: "teams.microsoft.com",
    remarks: "create bot registration",
});
Plans.updateBotEndpoint = () => ({
    type: "service",
    name: "graph.microsoft.com",
    remarks: "update message endpoint in AppStudio",
});
Plans.generateSourceCodeAndConfig = (feature) => `generate source code and config for ${feature} in project settings`;
Plans.generateBicepAndConfig = (feature) => `generate bicep and config for ${feature} in project settings`;
Plans.addFeature = (feature) => `config ${feature} in project settings`;
//# sourceMappingURL=messages.js.map