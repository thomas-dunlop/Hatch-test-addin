"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindFunctionAppError = exports.ResourceNotFoundError = exports.PackDirectoryExistenceError = exports.CheckThrowSomethingMissing = exports.PreconditionError = exports.invalidProjectSettings = exports.BadComponent = exports.ComponentNotExist = exports.ActionNotExist = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../common/localizeUtils");
const messages_1 = require("./messages");
class ActionNotExist extends teamsfx_api_1.SystemError {
    constructor(action) {
        super({
            source: "fx",
            message: localizeUtils_1.getDefaultString("error.ActionNotExist", action),
            displayMessage: localizeUtils_1.getLocalizedString("error.ActionNotExist", action),
        });
    }
}
exports.ActionNotExist = ActionNotExist;
class ComponentNotExist extends teamsfx_api_1.SystemError {
    constructor(component) {
        super({
            source: "fx",
            message: localizeUtils_1.getDefaultString("error.ComponentNotExist", component),
            displayMessage: localizeUtils_1.getLocalizedString("error.ComponentNotExist", component),
        });
    }
}
exports.ComponentNotExist = ComponentNotExist;
class BadComponent extends teamsfx_api_1.SystemError {
    constructor(source, component, property) {
        super({
            source,
            message: localizeUtils_1.getDefaultString("error.BadComponent", component, property),
            displayMessage: localizeUtils_1.getLocalizedString("error.BadComponent", component, property),
        });
    }
}
exports.BadComponent = BadComponent;
class invalidProjectSettings extends teamsfx_api_1.SystemError {
    constructor(source, msg) {
        super({
            source,
            message: localizeUtils_1.getDefaultString("error.InvalidProjectSettingsFileError", msg || ""),
            displayMessage: localizeUtils_1.getLocalizedString("error.InvalidProjectSettingsFileError", msg || ""),
        });
    }
}
exports.invalidProjectSettings = invalidProjectSettings;
class PreconditionError extends teamsfx_api_1.UserError {
    constructor(source, messages, suggestions) {
        const msg0 = localizeUtils_1.getDefaultString("plugins.baseErrorMessage", messages.default, suggestions.map((suggestion) => suggestion.default).join(" "));
        const msg1 = localizeUtils_1.getLocalizedString("plugins.baseErrorMessage", messages.localized, suggestions.map((suggestion) => suggestion.localized).join(" "));
        super(source, new.target.name, msg0, msg1);
    }
}
exports.PreconditionError = PreconditionError;
function CheckThrowSomethingMissing(source, name, value) {
    if (!value) {
        throw new PreconditionError(source, messages_1.ErrorMessage.SomethingIsMissing(name), [
            messages_1.ErrorMessage.RetryTheCurrentStep,
        ]);
    }
    return value;
}
exports.CheckThrowSomethingMissing = CheckThrowSomethingMissing;
class PackDirectoryExistenceError extends teamsfx_api_1.UserError {
    constructor(source) {
        const msg0 = localizeUtils_1.getDefaultString("plugins.baseErrorMessage", messages_1.ErrorMessage.SomethingIsNotExisting("pack directory").default, messages_1.ErrorMessage.RecreateTheProject.default);
        const msg1 = localizeUtils_1.getLocalizedString("plugins.baseErrorMessage", messages_1.ErrorMessage.SomethingIsNotExisting("pack directory").localized, messages_1.ErrorMessage.RecreateTheProject.localized);
        super(source, new.target.name, msg0, msg1);
    }
}
exports.PackDirectoryExistenceError = PackDirectoryExistenceError;
class ResourceNotFoundError extends teamsfx_api_1.SystemError {
    constructor(source, message) {
        super(source, new.target.name, localizeUtils_1.getDefaultString("error.function.FindAppError"), localizeUtils_1.getLocalizedString("error.function.FindAppError"));
    }
}
exports.ResourceNotFoundError = ResourceNotFoundError;
class FindFunctionAppError extends ResourceNotFoundError {
    constructor(source) {
        super(source, "error.function.FindAppError");
    }
}
exports.FindFunctionAppError = FindFunctionAppError;
//# sourceMappingURL=error.js.map