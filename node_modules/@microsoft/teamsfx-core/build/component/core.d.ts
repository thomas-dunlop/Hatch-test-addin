import { ActionContext, ContextV3, FxError, InputsWithProjectPath, ResourceContextV3, Result } from "@microsoft/teamsfx-api";
import "reflect-metadata";
import "./bicep";
import "./code/apiCode";
import "./code/botCode";
import "./code/spfxTabCode";
import "./code/tabCode";
import "./connection/apimConfig";
import "./connection/azureFunctionConfig";
import "./connection/azureWebAppConfig";
import "./feature/api";
import "./feature/apiConnector";
import "./feature/apim";
import "./feature/bot";
import "./feature/cicd";
import "./feature/keyVault";
import "./feature/spfx";
import "./feature/sql";
import "./feature/sso";
import "./feature/tab";
import "./resource/apim";
import "./resource/azureAppService/azureFunction";
import "./resource/azureAppService/azureWebApp";
import "./resource/azureSql";
import "./resource/azureStorage";
import "./resource/botService";
import "./resource/keyVault";
import "./resource/spfx";
import "./resource/aadApp/aadApp";
import "./resource/simpleAuth";
export declare class TeamsfxCore {
    name: string;
    /**
     * create project
     */
    create(context: ContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<string, FxError>>;
    /**
     * add feature
     */
    addFeature(context: ContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<any, FxError>>;
    init(context: ContextV3, inputs: InputsWithProjectPath, isInitExistingApp?: boolean): Promise<Result<undefined, FxError>>;
    provision(ctx: ResourceContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
    deploy(context: ResourceContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
}
export declare function preCheck(projectPath: string): Promise<Result<undefined, FxError>>;
//# sourceMappingURL=core.d.ts.map