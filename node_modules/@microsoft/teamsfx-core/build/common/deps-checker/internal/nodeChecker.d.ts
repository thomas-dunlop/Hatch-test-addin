import { DepsCheckerError } from "../depsError";
import { DepsCheckerEvent } from "../constant/telemetry";
import { DepsLogger } from "../depsLogger";
import { DepsTelemetry } from "../depsTelemetry";
import { DependencyStatus, DepsChecker, DepsType } from "../depsChecker";
declare class NodeVersion {
    readonly version: string;
    readonly majorVersion: string;
    constructor(version: string, majorVersion: string);
}
export declare abstract class NodeChecker implements DepsChecker {
    protected abstract readonly _nodeNotFoundHelpLink: string;
    protected abstract readonly _nodeNotSupportedEvent: DepsCheckerEvent;
    protected abstract readonly _type: DepsType;
    protected abstract getSupportedVersions(): Promise<string[]>;
    protected abstract getNodeNotSupportedHelpLink(): Promise<string>;
    private readonly _telemetry;
    private readonly _logger;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    getInstallationInfo(): Promise<DependencyStatus>;
    resolve(): Promise<DependencyStatus>;
    install(): Promise<void>;
    getDepsInfo(isInstalled: boolean, installVersion?: string, error?: DepsCheckerError): Promise<DependencyStatus>;
    private static isVersionSupported;
    command(): Promise<string>;
}
export declare function getInstalledNodeVersion(): Promise<NodeVersion | null>;
export declare class SPFxNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForSPFx;
    protected readonly _type = DepsType.SpfxNode;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(): Promise<string[]>;
}
export declare class AzureNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForAzure;
    protected readonly _type = DepsType.AzureNode;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(): Promise<string[]>;
}
export declare class FunctionNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForAzure;
    protected readonly _type = DepsType.FunctionNode;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(): Promise<string[]>;
}
export {};
//# sourceMappingURL=nodeChecker.d.ts.map