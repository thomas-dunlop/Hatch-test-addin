// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectSettingsHelper = void 0;
const question_1 = require("../../plugins/solution/fx-solution/question");
const tools_1 = require("../tools");
const constants_1 = require("../constants");
const constants_2 = require("./constants");
const core_1 = require("../../core");
const projectSettingsHelperV3_1 = require("../projectSettingsHelperV3");
const constants_3 = require("../../component/constants");
const workflow_1 = require("../../component/workflow");
class ProjectSettingsHelper {
    static includeFrontend(projectSettings) {
        if (core_1.isV3())
            return projectSettingsHelperV3_1.hasAzureTab(projectSettings);
        const solutionSettings = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings;
        const cap = (solutionSettings === null || solutionSettings === void 0 ? void 0 : solutionSettings.capabilities) || [];
        return (solutionSettings === null || solutionSettings === void 0 ? void 0 : solutionSettings.hostType) === question_1.HostTypeOptionAzure.id && cap.includes(question_1.TabOptionItem.id);
    }
    static includeBackend(projectSettings) {
        if (core_1.isV3())
            return projectSettingsHelperV3_1.hasApi(projectSettings);
        const solutionSettings = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings;
        const azureResources = (solutionSettings === null || solutionSettings === void 0 ? void 0 : solutionSettings.azureResources) || [];
        return ((solutionSettings === null || solutionSettings === void 0 ? void 0 : solutionSettings.hostType) === question_1.HostTypeOptionAzure.id &&
            azureResources.includes(question_1.AzureResourceFunction.id));
    }
    static includeFuncHostedBot(projectSettings) {
        var _a, _b, _c;
        if (core_1.isV3())
            return projectSettingsHelperV3_1.hasFunctionBot(projectSettings);
        const botHostType = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.pluginSettings) === null || _a === void 0 ? void 0 : _a[constants_1.ResourcePlugins.Bot]) === null || _b === void 0 ? void 0 : _b[constants_2.BotHostTypeName];
        const cap = ((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings) === null || _c === void 0 ? void 0 : _c.capabilities) || [];
        return cap.includes(question_1.BotOptionItem.id) && botHostType === constants_2.BotHostTypes.AzureFunctions;
    }
    static includeBot(projectSettings) {
        var _a;
        if (core_1.isV3())
            return projectSettingsHelperV3_1.hasBot(projectSettings);
        const cap = ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings) === null || _a === void 0 ? void 0 : _a.capabilities) || [];
        return cap.includes(question_1.BotOptionItem.id) || cap.includes(question_1.MessageExtensionItem.id);
    }
    static getBotCapabilities(projectSettings) {
        var _a, _b;
        if (core_1.isV3()) {
            const bot = workflow_1.getComponent(projectSettings, constants_3.ComponentNames.TeamsBot);
            return (bot === null || bot === void 0 ? void 0 : bot.capabilities) || [];
        }
        return (((_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.pluginSettings) === null || _a === void 0 ? void 0 : _a[constants_1.ResourcePlugins.Bot]) === null || _b === void 0 ? void 0 : _b[constants_2.BotCapabilities]) ||
            []);
    }
}
exports.ProjectSettingsHelper = ProjectSettingsHelper;
// keep the same logic as plugin.activate()
ProjectSettingsHelper.isSpfx = (projectSettings) => {
    var _a;
    return core_1.isV3()
        ? projectSettingsHelperV3_1.hasSPFxTab(projectSettings)
        : ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings) === null || _a === void 0 ? void 0 : _a.hostType) ===
            question_1.HostTypeOptionSPFx.id;
};
ProjectSettingsHelper.includeAAD = (projectSettings) => core_1.isV3()
    ? projectSettingsHelperV3_1.hasAAD(projectSettings)
    : !!tools_1.isAADEnabled(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings);
ProjectSettingsHelper.includeSimpleAuth = (projectSettings) => 
// TODO: update this when retiring simple auth service
core_1.isV3()
    ? projectSettingsHelperV3_1.hasSimpleAuth(projectSettings)
    : !!tools_1.IsSimpleAuthEnabled(projectSettings);
//# sourceMappingURL=projectSettingsHelper.js.map