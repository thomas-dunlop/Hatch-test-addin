import { Middleware } from "@feathersjs/hooks";
import { Func, FunctionRouter, FxError, Inputs, QTreeNode, Result, Solution, SolutionContext, Stage, v2, v3 } from "@microsoft/teamsfx-api";
/**
 * This middleware will help to collect input from question flow
 */
export declare const QuestionModelMW: Middleware;
export declare function desensitize(node: QTreeNode, input: Inputs): Inputs;
export declare function traverseToCollectPasswordNodes(node: QTreeNode, names: Set<string>): void;
export declare function getQuestionsForAddFeature(inputs: v2.InputsWithProjectPath, solution: v3.ISolution, context: v2.Context): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForUserTaskV3(func: Func, inputs: Inputs, solution: v3.ISolution, context: v2.Context, envInfo: v2.DeepReadonly<v3.EnvInfoV3>): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForProvision(inputs: v2.InputsWithProjectPath, solution: v3.ISolution, context: v2.Context, envInfo: v2.DeepReadonly<v3.EnvInfoV3>): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForDeploy(inputs: v2.InputsWithProjectPath, solution: v3.ISolution, context: v2.Context, envInfo: v2.DeepReadonly<v3.EnvInfoV3>): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForPublish(inputs: v2.InputsWithProjectPath, solution: v3.ISolution, context: v2.Context, envInfo: v2.DeepReadonly<v3.EnvInfoV3>): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForInit(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForCreateProjectV3(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForCreateProjectV2(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForUserTaskV2(ctx: SolutionContext | v2.Context, solution: Solution | v2.SolutionPlugin, func: FunctionRouter, inputs: Inputs, envInfo?: v2.EnvInfoV2): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsV2(ctx: SolutionContext | v2.Context, solution: Solution | v2.SolutionPlugin, stage: Stage, inputs: Inputs, envInfo?: v2.EnvInfoV2): Promise<Result<QTreeNode | undefined, FxError>>;
//# sourceMappingURL=questionModel.d.ts.map