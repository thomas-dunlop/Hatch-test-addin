import { CoreCallbackEvent, CoreCallbackFunc, Func, FunctionRouter, FxError, Inputs, ProjectConfig, ProjectConfigV3, QTreeNode, Result, Stage, Tools, v2, v3, Void } from "@microsoft/teamsfx-api";
import { getQuestionsForAddFeature, getQuestionsForCreateProjectV2, getQuestionsForCreateProjectV3, getQuestionsForDeploy, getQuestionsForInit, getQuestionsForProvision, getQuestionsForPublish, getQuestionsForUserTaskV2, getQuestionsForUserTaskV3, getQuestionsV2 } from "./middleware/questionModel";
import { CoreHookContext } from "./types";
import "../component/core";
import { FeatureId } from "../component/questionV3";
export declare class FxCore implements v3.ICore {
    tools: Tools;
    isFromSample?: boolean;
    settingsVersion?: string;
    constructor(tools: Tools);
    /**
     * @todo this's a really primitive implement. Maybe could use Subscription Model to
     * refactor later.
     */
    on(event: CoreCallbackEvent, callback: CoreCallbackFunc): void;
    createProject(inputs: Inputs): Promise<Result<string, FxError>>;
    createProjectV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<string, FxError>>;
    createExistingTabApp(inputs: Inputs, folder: string, ctx?: CoreHookContext): Promise<Result<string, FxError>>;
    createProjectV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<string, FxError>>;
    /**
     * switch to different versions of provisionResources
     */
    provisionResources(inputs: Inputs): Promise<Result<Void, FxError>>;
    provisionResourcesV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    provisionResourcesV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    /**
     * Only used to provision Teams app with user provided app package
     * @param inputs
     * @returns teamsAppId on provision success
     */
    provisionTeamsAppForCLI(inputs: Inputs): Promise<Result<string, FxError>>;
    deployArtifacts(inputs: Inputs): Promise<Result<Void, FxError>>;
    deployArtifactsV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    deployArtifactsV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    localDebug(inputs: Inputs): Promise<Result<Void, FxError>>;
    localDebugV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    localDebugV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    _setEnvInfoV2(ctx?: CoreHookContext): void;
    publishApplication(inputs: Inputs): Promise<Result<Void, FxError>>;
    publishApplicationV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    publishApplicationV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    executeUserTask(func: Func, inputs: Inputs): Promise<Result<unknown, FxError>>;
    addFeature(inputs: v2.InputsWithProjectPath, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    executeUserTaskV2(func: Func, inputs: Inputs, ctx?: CoreHookContext): Promise<Result<unknown, FxError>>;
    executeUserTaskV3(func: Func, inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    getQuestions(stage: Stage, inputs: Inputs, ctx?: CoreHookContext): Promise<Result<QTreeNode | undefined, FxError>>;
    getQuestionsForAddFeature(featureId: FeatureId, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
    getQuestionsForUserTask(func: FunctionRouter, inputs: Inputs, ctx?: CoreHookContext): Promise<Result<QTreeNode | undefined, FxError>>;
    getProjectConfig(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<ProjectConfig | undefined, FxError>>;
    getProjectConfigV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<ProjectConfigV3 | undefined, FxError>>;
    grantPermission(inputs: Inputs): Promise<Result<any, FxError>>;
    grantPermissionV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    grantPermissionV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    checkPermission(inputs: Inputs): Promise<Result<any, FxError>>;
    checkPermissionV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    checkPermissionV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    listCollaborator(inputs: Inputs): Promise<Result<any, FxError>>;
    listCollaboratorV2(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    listCollaboratorV3(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<any, FxError>>;
    getSelectedEnv(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<string | undefined, FxError>>;
    encrypt(plaintext: string, inputs: Inputs, ctx?: CoreHookContext): Promise<Result<string, FxError>>;
    decrypt(ciphertext: string, inputs: Inputs, ctx?: CoreHookContext): Promise<Result<string, FxError>>;
    buildArtifacts(inputs: Inputs): Promise<Result<Void, FxError>>;
    createEnv(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    createEnvCopy(targetEnvName: string, sourceEnvName: string, inputs: Inputs, core: FxCore): Promise<Result<Void, FxError>>;
    activateEnv(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    _init(inputs: Inputs, ctx?: CoreHookContext, isInitExistingApp?: boolean): Promise<Result<string, FxError>>;
    init(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<string, FxError>>;
    _getQuestionsForCreateProjectV2: typeof getQuestionsForCreateProjectV2;
    _getQuestionsForCreateProjectV3: typeof getQuestionsForCreateProjectV3;
    _getQuestionsForUserTask: typeof getQuestionsForUserTaskV2;
    _getQuestions: typeof getQuestionsV2;
    _getQuestionsForAddFeature: typeof getQuestionsForAddFeature;
    _getQuestionsForProvision: typeof getQuestionsForProvision;
    _getQuestionsForDeploy: typeof getQuestionsForDeploy;
    _getQuestionsForPublish: typeof getQuestionsForPublish;
    _getQuestionsForInit: typeof getQuestionsForInit;
    _getQuestionsForUserTaskV3: typeof getQuestionsForUserTaskV3;
}
export declare function ensureBasicFolderStructure(inputs: Inputs, createPackageJson?: boolean): Promise<Result<null, FxError>>;
//# sourceMappingURL=FxCore.d.ts.map