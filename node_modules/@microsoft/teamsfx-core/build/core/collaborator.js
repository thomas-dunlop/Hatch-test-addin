"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQuestionsForGrantPermission = exports.grantPermission = exports.checkPermission = exports.listCollaborator = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const permissionInterface_1 = require("../common/permissionInterface");
const tools_1 = require("../common/tools");
const constants_1 = require("../plugins/solution/fx-solution/constants");
const collaborationUtil_1 = require("../plugins/solution/fx-solution/v2/collaborationUtil");
const constants_2 = require("../plugins/solution/fx-solution/v3/constants");
const error_1 = require("./error");
const globalVars_1 = require("./globalVars");
const question_1 = require("../plugins/solution/fx-solution/question");
const localizeUtils_1 = require("../common/localizeUtils");
const constants_3 = require("../common/constants");
const constants_4 = require("../component/constants");
const projectSettingsHelperV3_1 = require("../common/projectSettingsHelperV3");
async function listCollaborator(ctx, inputs, envInfo, tokenProvider, telemetryProps) {
    var _a, _b, _c, _d, _e, _f, _g;
    const result = await collaborationUtil_1.CollaborationUtil.getCurrentUserInfo(tokenProvider.m365TokenProvider);
    if (result.isErr()) {
        return teamsfx_api_1.err(result.error);
    }
    const user = result.value;
    const stateResult = getCurrentCollaborationState(envInfo, user);
    if (stateResult.state != permissionInterface_1.CollaborationState.OK) {
        if (inputs.platform === teamsfx_api_1.Platform.CLI && stateResult.message) {
            ctx.userInteraction.showMessage("warn", stateResult.message, false);
        }
        else if (inputs.platform === teamsfx_api_1.Platform.VSCode && stateResult.message) {
            ctx.logProvider.warning(stateResult.message);
        }
        return teamsfx_api_1.ok({
            state: stateResult.state,
            message: stateResult.message,
        });
    }
    const hasAad = projectSettingsHelperV3_1.hasAAD(ctx.projectSetting);
    const appStudio = typedi_1.Container.get(constants_4.ComponentNames.AppManifest);
    const aadPlugin = typedi_1.Container.get(constants_2.BuiltInFeaturePluginNames.aad);
    const appStudioRes = await appStudio.listCollaborator(ctx, inputs, envInfo, tokenProvider.m365TokenProvider);
    if (appStudioRes.isErr())
        return teamsfx_api_1.err(appStudioRes.error);
    const teamsAppOwners = appStudioRes.value;
    const aadRes = hasAad ? await aadPlugin.listCollaborator(ctx, envInfo, tokenProvider) : teamsfx_api_1.ok([]);
    if (aadRes.isErr())
        return teamsfx_api_1.err(aadRes.error);
    const aadOwners = aadRes.value;
    const collaborators = [];
    const teamsAppId = (_b = (_a = teamsAppOwners[0]) === null || _a === void 0 ? void 0 : _a.resourceId) !== null && _b !== void 0 ? _b : "";
    const aadAppId = (_d = (_c = aadOwners[0]) === null || _c === void 0 ? void 0 : _c.resourceId) !== null && _d !== void 0 ? _d : "";
    const aadAppTenantId = (_e = envInfo.state[constants_4.ComponentNames.AppManifest]) === null || _e === void 0 ? void 0 : _e.tenantId;
    for (const teamsAppOwner of teamsAppOwners) {
        const aadOwner = aadOwners.find((owner) => owner.userObjectId === teamsAppOwner.userObjectId);
        collaborators.push({
            // For guest account, aadOwner.userPrincipalName will be user's email, and is easy to read.
            userPrincipalName: (_g = (_f = aadOwner === null || aadOwner === void 0 ? void 0 : aadOwner.userPrincipalName) !== null && _f !== void 0 ? _f : teamsAppOwner.userPrincipalName) !== null && _g !== void 0 ? _g : teamsAppOwner.userObjectId,
            userObjectId: teamsAppOwner.userObjectId,
            isAadOwner: aadOwner ? true : false,
            aadResourceId: aadOwner ? aadOwner.resourceId : undefined,
            teamsAppResourceId: teamsAppOwner.resourceId,
        });
    }
    if (inputs.platform === teamsfx_api_1.Platform.CLI || inputs.platform === teamsfx_api_1.Platform.VSCode) {
        const message = [
            {
                content: localizeUtils_1.getLocalizedString("core.collaboration.ListingM365Permission"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            {
                content: localizeUtils_1.getLocalizedString("core.collaboration.AccountUsedToCheck"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            { content: user.userPrincipalName + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            {
                content: localizeUtils_1.getLocalizedString("core.collaboration.StartingListAllTeamsAppOwners"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            { content: `${envInfo.envName}\n`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            { content: localizeUtils_1.getLocalizedString("core.collaboration.TenantId"), color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: aadAppTenantId + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            {
                content: localizeUtils_1.getLocalizedString("core.collaboration.M365TeamsAppId"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            { content: teamsAppId, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
        ];
        if (hasAad) {
            message.push({
                content: localizeUtils_1.getLocalizedString("core.collaboration.SsoAadAppId"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            }, { content: aadAppId, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA }, { content: `)\n`, color: teamsfx_api_1.Colors.BRIGHT_WHITE });
        }
        else {
            message.push({ content: ")\n", color: teamsfx_api_1.Colors.BRIGHT_WHITE });
        }
        for (const collaborator of collaborators) {
            message.push({
                content: localizeUtils_1.getLocalizedString("core.collaboration.TeamsAppOwner"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            }, { content: collaborator.userPrincipalName, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA }, { content: `. `, color: teamsfx_api_1.Colors.BRIGHT_WHITE });
            if (hasAad && !collaborator.isAadOwner) {
                message.push({
                    content: localizeUtils_1.getLocalizedString("core.collaboration.NotOwnerOfSsoAadApp"),
                    color: teamsfx_api_1.Colors.BRIGHT_YELLOW,
                });
            }
            message.push({ content: "\n", color: teamsfx_api_1.Colors.BRIGHT_WHITE });
        }
        if (inputs.platform === teamsfx_api_1.Platform.CLI) {
            ctx.userInteraction.showMessage("info", message, false);
        }
        else if (inputs.platform === teamsfx_api_1.Platform.VSCode) {
            ctx.userInteraction.showMessage("info", localizeUtils_1.getLocalizedString("core.collaboration.ListCollaboratorsSuccess", hasAad ? localizeUtils_1.getLocalizedString("core.collaboration.WithAadApp") : "", constants_3.VSCodeExtensionCommand.showOutputChannel), false);
            ctx.logProvider.info(message);
        }
    }
    const aadOwnerCount = collaborators.filter((collaborator) => collaborator.aadResourceId && collaborator.isAadOwner).length;
    if (telemetryProps) {
        telemetryProps[constants_1.SolutionTelemetryProperty.Env] = tools_1.getHashedEnv(envInfo.envName);
        telemetryProps[constants_1.SolutionTelemetryProperty.CollaboratorCount] = collaborators.length.toString();
        telemetryProps[constants_1.SolutionTelemetryProperty.AadOwnerCount] = aadOwnerCount.toString();
    }
    return teamsfx_api_1.ok({
        collaborators: collaborators,
        state: permissionInterface_1.CollaborationState.OK,
    });
}
exports.listCollaborator = listCollaborator;
function getCurrentCollaborationState(envInfo, user) {
    var _a;
    const provisioned = envInfo.state.solution[constants_1.SOLUTION_PROVISION_SUCCEEDED] === "true" ||
        envInfo.state.solution[constants_1.SOLUTION_PROVISION_SUCCEEDED] === true;
    if (!provisioned) {
        const warningMsg = "The resources have not been provisioned yet. Please provision the resources first.";
        return {
            state: permissionInterface_1.CollaborationState.NotProvisioned,
            message: warningMsg,
        };
    }
    const aadAppTenantId = (_a = envInfo.state[constants_4.ComponentNames.AppManifest]) === null || _a === void 0 ? void 0 : _a.tenantId;
    if (!aadAppTenantId || user.tenantId != aadAppTenantId) {
        const warningMsg = "Tenant id of your account and the provisioned Azure AD app does not match. Please check whether you logined with wrong account.";
        return {
            state: permissionInterface_1.CollaborationState.M365TenantNotMatch,
            message: warningMsg,
        };
    }
    return {
        state: permissionInterface_1.CollaborationState.OK,
    };
}
async function checkPermission(ctx, inputs, envInfo, tokenProvider, telemetryProps) {
    var _a, _b;
    const result = await collaborationUtil_1.CollaborationUtil.getCurrentUserInfo(tokenProvider.m365TokenProvider);
    if (result.isErr()) {
        return teamsfx_api_1.err(result.error);
    }
    const stateResult = getCurrentCollaborationState(envInfo, result.value);
    if (stateResult.state != permissionInterface_1.CollaborationState.OK) {
        if (inputs.platform === teamsfx_api_1.Platform.CLI && stateResult.message) {
            ctx.userInteraction.showMessage("warn", stateResult.message, false);
        }
        return teamsfx_api_1.ok({
            state: stateResult.state,
            message: stateResult.message,
        });
    }
    const userInfo = result.value;
    if (inputs.platform === teamsfx_api_1.Platform.CLI) {
        const aadAppTenantId = (_a = envInfo.state[constants_4.ComponentNames.AppManifest]) === null || _a === void 0 ? void 0 : _a.tenantId;
        const message = [
            {
                content: localizeUtils_1.getLocalizedString("core.collaboration.AccountUsedToCheck"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            { content: userInfo.userPrincipalName + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            {
                content: localizeUtils_1.getLocalizedString("core.collaboration.StaringCheckPermission"),
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            { content: `${inputs.envName}\n`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            { content: localizeUtils_1.getLocalizedString("core.collaboration.TenantId"), color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: aadAppTenantId + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
        ];
        ctx.userInteraction.showMessage("info", message, false);
    }
    const appStudio = typedi_1.Container.get(constants_4.ComponentNames.AppManifest);
    const aadPlugin = typedi_1.Container.get(constants_2.BuiltInFeaturePluginNames.aad);
    const appStudioRes = await appStudio.checkPermission(ctx, inputs, envInfo, tokenProvider.m365TokenProvider, userInfo);
    if (appStudioRes.isErr()) {
        return teamsfx_api_1.err(appStudioRes.error);
    }
    const permissions = appStudioRes.value;
    const isAadActivated = projectSettingsHelperV3_1.hasAAD(ctx.projectSetting);
    if (isAadActivated) {
        const aadRes = await aadPlugin.checkPermission(ctx, envInfo, tokenProvider, result.value);
        if (aadRes.isErr())
            return teamsfx_api_1.err(aadRes.error);
        aadRes.value.forEach((r) => {
            permissions.push(r);
        });
    }
    if (inputs.platform === teamsfx_api_1.Platform.CLI) {
        for (const permission of permissions) {
            const message = [
                {
                    content: localizeUtils_1.getLocalizedString("core.collaboration.CheckPermissionResourceId"),
                    color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                },
                {
                    content: (_b = permission.resourceId) !== null && _b !== void 0 ? _b : localizeUtils_1.getLocalizedString("core.collaboration.Undefined"),
                    color: teamsfx_api_1.Colors.BRIGHT_MAGENTA,
                },
                {
                    content: localizeUtils_1.getLocalizedString("core.collaboration.ResourceName"),
                    color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                },
                { content: permission.name, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                {
                    content: localizeUtils_1.getLocalizedString("core.collaboration.Permission"),
                    color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                },
                {
                    content: permission.roles
                        ? permission.roles.toString()
                        : localizeUtils_1.getLocalizedString("core.collaboration.Undefined") + "\n",
                    color: teamsfx_api_1.Colors.BRIGHT_MAGENTA,
                },
            ];
            ctx.userInteraction.showMessage("info", message, false);
        }
    }
    const aadPermission = permissions.find((permission) => permission.name === "Azure AD App");
    const teamsAppPermission = permissions.find((permission) => permission.name === "Teams App");
    if (telemetryProps) {
        telemetryProps[constants_1.SolutionTelemetryProperty.AadPermission] = (aadPermission === null || aadPermission === void 0 ? void 0 : aadPermission.roles)
            ? aadPermission.roles.join(";")
            : localizeUtils_1.getLocalizedString("core.collaboration.Undefined");
        telemetryProps[constants_1.SolutionTelemetryProperty.TeamsAppPermission] = (teamsAppPermission === null || teamsAppPermission === void 0 ? void 0 : teamsAppPermission.roles)
            ? teamsAppPermission.roles.join(";")
            : localizeUtils_1.getLocalizedString("core.collaboration.Undefined");
    }
    return teamsfx_api_1.ok({
        state: permissionInterface_1.CollaborationState.OK,
        permissions,
    });
}
exports.checkPermission = checkPermission;
async function grantPermission(ctx, inputs, envInfo, tokenProvider, telemetryProps) {
    var _a, _b;
    const progressBar = ctx.userInteraction.createProgressBar(localizeUtils_1.getLocalizedString("core.collaboration.GrantingPermission"), 1);
    try {
        const result = await collaborationUtil_1.CollaborationUtil.getCurrentUserInfo(tokenProvider.m365TokenProvider);
        if (result.isErr()) {
            return teamsfx_api_1.err(result.error);
        }
        const stateResult = getCurrentCollaborationState(envInfo, result.value);
        if (stateResult.state != permissionInterface_1.CollaborationState.OK) {
            if (inputs.platform === teamsfx_api_1.Platform.CLI && stateResult.message) {
                ctx.userInteraction.showMessage("warn", stateResult.message, false);
            }
            else if (inputs.platform === teamsfx_api_1.Platform.VSCode && stateResult.message) {
                ctx.logProvider.warning(stateResult.message);
            }
            return teamsfx_api_1.ok({
                state: stateResult.state,
                message: stateResult.message,
            });
        }
        const email = inputs.email;
        if (!email || email === result.value.userPrincipalName) {
            return teamsfx_api_1.err(new teamsfx_api_1.UserError(error_1.CoreSource, constants_1.SolutionError.EmailCannotBeEmptyOrSame, localizeUtils_1.getDefaultString("core.collaboration.EmailCannotBeEmptyOrSame"), localizeUtils_1.getLocalizedString("core.collaboration.EmailCannotBeEmptyOrSame")));
        }
        const userInfo = await collaborationUtil_1.CollaborationUtil.getUserInfo(tokenProvider.m365TokenProvider, email);
        if (!userInfo) {
            return teamsfx_api_1.err(new teamsfx_api_1.UserError(error_1.CoreSource, constants_1.SolutionError.CannotFindUserInCurrentTenant, localizeUtils_1.getDefaultString("core.collaboration.CannotFindUserInCurrentTenant"), localizeUtils_1.getLocalizedString("core.collaboration.CannotFindUserInCurrentTenant")));
        }
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.start());
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.next(localizeUtils_1.getLocalizedString("core.collaboration.GrantPermissionForUser", email)));
        if (inputs.platform === teamsfx_api_1.Platform.CLI) {
            const aadAppTenantId = (_a = envInfo.state[constants_4.ComponentNames.AppManifest]) === null || _a === void 0 ? void 0 : _a.tenantId;
            const message = [
                {
                    content: localizeUtils_1.getLocalizedString("core.collaboration.AccountToGrantPermission"),
                    color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                },
                { content: userInfo.userPrincipalName + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                {
                    content: localizeUtils_1.getLocalizedString("core.collaboration.StartingGrantPermission"),
                    color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                },
                { content: `${envInfo.envName}\n`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                { content: localizeUtils_1.getLocalizedString("core.collaboration.TenantId"), color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                { content: aadAppTenantId + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            ];
            ctx.userInteraction.showMessage("info", message, false);
        }
        const isAadActivated = projectSettingsHelperV3_1.hasAAD(ctx.projectSetting);
        const appStudio = typedi_1.Container.get(constants_4.ComponentNames.AppManifest);
        const aadPlugin = typedi_1.Container.get(constants_2.BuiltInFeaturePluginNames.aad);
        const appStudioRes = await appStudio.grantPermission(ctx, inputs, envInfo, tokenProvider.m365TokenProvider, userInfo);
        if (appStudioRes.isErr()) {
            return teamsfx_api_1.err(appStudioRes.error);
        }
        const permissions = appStudioRes.value;
        if (isAadActivated) {
            const aadRes = await aadPlugin.grantPermission(ctx, envInfo, tokenProvider, result.value);
            if (aadRes.isErr())
                return teamsfx_api_1.err(aadRes.error);
            aadRes.value.forEach((r) => {
                permissions.push(r);
            });
        }
        if (inputs.platform === teamsfx_api_1.Platform.CLI) {
            for (const permission of permissions) {
                const message = [
                    { content: `${(_b = permission.roles) === null || _b === void 0 ? void 0 : _b.join(",")} `, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                    {
                        content: localizeUtils_1.getLocalizedString("core.collaboration.PermissionHasBeenGrantTo"),
                        color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                    },
                    { content: permission.name, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                    {
                        content: localizeUtils_1.getLocalizedString("core.collaboration.GrantPermissionResourceId"),
                        color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                    },
                    { content: `${permission.resourceId}`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                ];
                ctx.userInteraction.showMessage("info", message, false);
            }
            if (projectSettingsHelperV3_1.hasSPFxTab(ctx.projectSetting)) {
                ctx.userInteraction.showMessage("info", localizeUtils_1.getLocalizedString("core.collaboration.SharePointTip") +
                    constants_1.SharePointManageSiteAdminHelpLink, false);
            }
            if (projectSettingsHelperV3_1.hasAzureResourceV3(ctx.projectSetting)) {
                ctx.userInteraction.showMessage("info", localizeUtils_1.getLocalizedString("core.collaboration.AzureTip") + constants_1.AzureRoleAssignmentsHelpLink, false);
            }
        }
        return teamsfx_api_1.ok({
            state: permissionInterface_1.CollaborationState.OK,
            userInfo: userInfo,
            permissions,
        });
    }
    finally {
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.end(true));
    }
}
exports.grantPermission = grantPermission;
async function getQuestionsForGrantPermission(inputs) {
    const isDynamicQuestion = teamsfx_api_1.DynamicPlatforms.includes(inputs.platform);
    if (isDynamicQuestion) {
        const jsonObjectRes = await globalVars_1.TOOLS.tokenProvider.m365TokenProvider.getJsonObject({
            scopes: tools_1.AppStudioScopes,
        });
        if (jsonObjectRes.isErr()) {
            return teamsfx_api_1.err(jsonObjectRes.error);
        }
        const jsonObject = jsonObjectRes.value;
        return teamsfx_api_1.ok(new teamsfx_api_1.QTreeNode(question_1.getUserEmailQuestion(jsonObject.upn)));
    }
    return teamsfx_api_1.ok(undefined);
}
exports.getQuestionsForGrantPermission = getQuestionsForGrantPermission;
//# sourceMappingURL=collaborator.js.map