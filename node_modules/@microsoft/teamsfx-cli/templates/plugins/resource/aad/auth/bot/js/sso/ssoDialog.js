const{ComponentDialog,WaterfallDialog,Dialog,DialogTurnResult,DialogSet,DialogTurnStatus}=require("botbuilder-dialogs"),{ActivityTypes,tokenExchangeOperationName,TurnContext}=require("botbuilder"),{TeamsBotSsoPrompt,TeamsFx}=require("@microsoft/teamsfx");require("isomorphic-fetch");const DIALOG_NAME="SSODialog",TEAMS_SSO_PROMPT_ID="TeamsFxSsoPrompt",COMMAND_ROUTE_DIALOG="CommandRouteDialog";class SsoDialog extends ComponentDialog{constructor(dedupStorage,requiredScopes){super("SSODialog"),this.initialDialogId="CommandRouteDialog",this.dedupStorage=dedupStorage,this.dedupStorageKeys=[],this.requiredScopes=requiredScopes,this.commandMapping=new Map;const teamsFx=new TeamsFx,ssoDialog=new TeamsBotSsoPrompt(teamsFx,"TeamsFxSsoPrompt",{scopes:this.requiredScopes,endOnInvalidMessage:!0});this.addDialog(ssoDialog);const commandRouteDialog=new WaterfallDialog("CommandRouteDialog",[this.commandRouteStep.bind(this)]);this.addDialog(commandRouteDialog)}addCommand(commandId,commandText,operation,...param){const dialog=new WaterfallDialog(commandId,[this.ssoStep.bind(this),this.dedupStep.bind(this),async stepContext=>{const tokenResponse=stepContext.result,context=stepContext.context;try{return tokenResponse?await operation(context,tokenResponse.ssoToken,param):await context.sendActivity("Failed to retrieve user token from conversation context."),await stepContext.endDialog()}catch(error){return await context.sendActivity("Failed to retrieve user token from conversation context."),await context.sendActivity(error.message),await stepContext.endDialog()}}]);if(this.commandMapping.has(commandId))throw new Error(`Cannot add command. There is already a command with same id ${commandId}`);this.commandMapping.set(commandId,commandText),this.addDialog(dialog)}async run(context,accessor){const dialogSet=new DialogSet(accessor);dialogSet.add(this);const dialogContext=await dialogSet.createContext(context),results=await dialogContext.continueDialog();results&&results.status===DialogTurnStatus.empty&&await dialogContext.beginDialog(this.id)}async commandRouteStep(stepContext){const turnContext=stepContext.context;let text=TurnContext.removeRecipientMention(turnContext.activity);text&&(text=text.toLowerCase().replace(/\n|\r/g,"").trim());const commandId=this.matchCommands(text);return commandId?await stepContext.beginDialog(commandId):await stepContext.endDialog()}async ssoStep(stepContext){try{return await stepContext.beginDialog("TeamsFxSsoPrompt")}catch(error){const context=stepContext.context;return await context.sendActivity("Failed to run SSO step"),await context.sendActivity(error.message),await stepContext.endDialog()}}async dedupStep(stepContext){try{const tokenResponse=stepContext.result;return tokenResponse&&await this.shouldDedup(stepContext.context)?Dialog.EndOfTurn:await stepContext.next(tokenResponse)}catch(error){const context=stepContext.context;return await context.sendActivity("Failed to run dedup step"),await context.sendActivity(error.message),await stepContext.endDialog()}}async onEndDialog(context){const conversationId=context.activity.conversation.id,currentDedupKeys=this.dedupStorageKeys.filter((key=>key.indexOf(conversationId)>0));await this.dedupStorage.delete(currentDedupKeys),this.dedupStorageKeys=this.dedupStorageKeys.filter((key=>key.indexOf(conversationId)<0))}async shouldDedup(context){const storeItem={eTag:context.activity.value.id},key=this.getStorageKey(context),storeItems={[key]:storeItem};try{await this.dedupStorage.write(storeItems),this.dedupStorageKeys.push(key)}catch(err){if(err instanceof Error&&err.message.indexOf("eTag conflict"))return!0;throw err}return!1}getStorageKey(context){if(!context||!context.activity||!context.activity.conversation)throw new Error("Invalid context, can not get storage key!");const activity=context.activity,channelId=activity.channelId,conversationId=activity.conversation.id;if(activity.type!==ActivityTypes.Invoke||activity.name!==tokenExchangeOperationName)throw new Error("TokenExchangeState can only be used with Invokes of signin/tokenExchange.");const value=activity.value;if(!value||!value.id)throw new Error("Invalid signin/tokenExchange. Missing activity.value.id.");return`${channelId}/${conversationId}/${value.id}`}matchCommands(text){for(const command of this.commandMapping){const pattern=command[1];let matchResult;if(matchResult="string"==typeof pattern?text===pattern:pattern.exec(text),matchResult)return command[0]}}}exports.SsoDialog=SsoDialog;