import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a NamedValue. */
export declare class NamedValue {
    private readonly client;
    /**
     * Create a NamedValue.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists a collection of NamedValues defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: Models.NamedValueListByServiceOptionalParams): Promise<Models.NamedValueListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.NamedValueCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: Models.NamedValueListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.NamedValueCollection>): void;
    /**
     * Gets the entity state (Etag) version of the NamedValue specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, namedValueId: string, options?: msRest.RequestOptionsBase): Promise<Models.NamedValueGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, namedValueId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, namedValueId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the NamedValue specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, namedValueId: string, options?: msRest.RequestOptionsBase): Promise<Models.NamedValueGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, namedValueId: string, callback: msRest.ServiceCallback<Models.NamedValueContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, namedValueId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamedValueContract>): void;
    /**
     * Creates or updates a NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, namedValueId: string, parameters: Models.NamedValueCreateContract, options?: Models.NamedValueCreateOrUpdateOptionalParams): Promise<Models.NamedValueCreateOrUpdateResponse>;
    /**
     * Updates the specific NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueUpdateResponse>
     */
    update(resourceGroupName: string, serviceName: string, namedValueId: string, parameters: Models.NamedValueUpdateParameters, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<Models.NamedValueUpdateResponse>;
    /**
     * Deletes specific NamedValue from the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, namedValueId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, namedValueId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, namedValueId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the secret value of the NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueListValueResponse>
     */
    listValue(resourceGroupName: string, serviceName: string, namedValueId: string, options?: msRest.RequestOptionsBase): Promise<Models.NamedValueListValueResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param callback The callback
     */
    listValue(resourceGroupName: string, serviceName: string, namedValueId: string, callback: msRest.ServiceCallback<Models.PropertyValueContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param options The optional parameters
     * @param callback The callback
     */
    listValue(resourceGroupName: string, serviceName: string, namedValueId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PropertyValueContract>): void;
    /**
     * Creates or updates a NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, namedValueId: string, parameters: Models.NamedValueCreateContract, options?: Models.NamedValueBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Updates the specific NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdate(resourceGroupName: string, serviceName: string, namedValueId: string, parameters: Models.NamedValueUpdateParameters, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Lists a collection of NamedValues defined within a service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NamedValueListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NamedValueCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamedValueCollection>): void;
}
//# sourceMappingURL=namedValue.d.ts.map