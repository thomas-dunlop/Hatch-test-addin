/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/namedValueMappers";
import * as Parameters from "../models/parameters";
/** Class representing a NamedValue. */
var NamedValue = /** @class */ (function () {
    /**
     * Create a NamedValue.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function NamedValue(client) {
        this.client = client;
    }
    NamedValue.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, listByServiceOperationSpec, callback);
    };
    NamedValue.prototype.getEntityTag = function (resourceGroupName, serviceName, namedValueId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            namedValueId: namedValueId,
            options: options
        }, getEntityTagOperationSpec, callback);
    };
    NamedValue.prototype.get = function (resourceGroupName, serviceName, namedValueId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            namedValueId: namedValueId,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates or updates a NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueCreateOrUpdateResponse>
     */
    NamedValue.prototype.createOrUpdate = function (resourceGroupName, serviceName, namedValueId, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serviceName, namedValueId, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates the specific NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<Models.NamedValueUpdateResponse>
     */
    NamedValue.prototype.update = function (resourceGroupName, serviceName, namedValueId, parameters, ifMatch, options) {
        return this.beginUpdate(resourceGroupName, serviceName, namedValueId, parameters, ifMatch, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    NamedValue.prototype.deleteMethod = function (resourceGroupName, serviceName, namedValueId, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            namedValueId: namedValueId,
            ifMatch: ifMatch,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    NamedValue.prototype.listValue = function (resourceGroupName, serviceName, namedValueId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            namedValueId: namedValueId,
            options: options
        }, listValueOperationSpec, callback);
    };
    /**
     * Creates or updates a NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    NamedValue.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, namedValueId, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            namedValueId: namedValueId,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Updates the specific NamedValue.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param namedValueId Identifier of the NamedValue.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    NamedValue.prototype.beginUpdate = function (resourceGroupName, serviceName, namedValueId, parameters, ifMatch, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            namedValueId: namedValueId,
            parameters: parameters,
            ifMatch: ifMatch,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    NamedValue.prototype.listByServiceNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByServiceNextOperationSpec, callback);
    };
    return NamedValue;
}());
export { NamedValue };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByServiceOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter0,
        Parameters.top,
        Parameters.skip,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NamedValueCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityTagOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.namedValueId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.NamedValueGetEntityTagHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.namedValueId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NamedValueContract,
            headersMapper: Mappers.NamedValueGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.namedValueId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listValueOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}/listValue",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.namedValueId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PropertyValueContract
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.namedValueId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.NamedValueCreateContract), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NamedValueContract,
            headersMapper: Mappers.NamedValueCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: Mappers.NamedValueContract,
            headersMapper: Mappers.NamedValueCreateOrUpdateHeaders
        },
        202: {
            headersMapper: Mappers.NamedValueCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.namedValueId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.NamedValueUpdateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NamedValueContract,
            headersMapper: Mappers.NamedValueUpdateHeaders
        },
        202: {
            headersMapper: Mappers.NamedValueUpdateHeaders
        },
        204: {
            headersMapper: Mappers.NamedValueUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByServiceNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NamedValueCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=namedValue.js.map