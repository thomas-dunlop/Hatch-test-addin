import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a Gateway. */
export declare class Gateway {
    private readonly client;
    /**
     * Create a Gateway.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists a collection of gateways registered with service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: Models.GatewayListByServiceOptionalParams): Promise<Models.GatewayListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: Models.GatewayListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
    /**
     * Gets the entity state (Etag) version of the Gateway specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the Gateway specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
    /**
     * Creates or updates a Gateway to be used in Api Management instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, options?: Models.GatewayCreateOrUpdateOptionalParams): Promise<Models.GatewayCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, options: Models.GatewayCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
    /**
     * Updates the details of the gateway specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes specific Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieves gateway keys.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayListKeysResponse>
     */
    listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayListKeysResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param callback The callback
     */
    listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayKeysContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param options The optional parameters
     * @param callback The callback
     */
    listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayKeysContract>): void;
    /**
     * Regenerates specified gateway key invalidating any tokens created with it.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param callback The callback
     */
    regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the Shared Access Authorization Token for the gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayGenerateTokenResponse>
     */
    generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, options?: msRest.RequestOptionsBase): Promise<Models.GatewayGenerateTokenResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param callback The callback
     */
    generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, callback: msRest.ServiceCallback<Models.GatewayTokenContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayTokenContract>): void;
    /**
     * Lists a collection of gateways registered with service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
}
//# sourceMappingURL=gateway.d.ts.map