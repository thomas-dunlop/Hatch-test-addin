/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/gatewayMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Gateway. */
var Gateway = /** @class */ (function () {
    /**
     * Create a Gateway.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function Gateway(client) {
        this.client = client;
    }
    Gateway.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, listByServiceOperationSpec, callback);
    };
    Gateway.prototype.getEntityTag = function (resourceGroupName, serviceName, gatewayId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            options: options
        }, getEntityTagOperationSpec, callback);
    };
    Gateway.prototype.get = function (resourceGroupName, serviceName, gatewayId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            options: options
        }, getOperationSpec, callback);
    };
    Gateway.prototype.createOrUpdate = function (resourceGroupName, serviceName, gatewayId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Gateway.prototype.update = function (resourceGroupName, serviceName, gatewayId, parameters, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            parameters: parameters,
            ifMatch: ifMatch,
            options: options
        }, updateOperationSpec, callback);
    };
    Gateway.prototype.deleteMethod = function (resourceGroupName, serviceName, gatewayId, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            ifMatch: ifMatch,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Gateway.prototype.listKeys = function (resourceGroupName, serviceName, gatewayId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            options: options
        }, listKeysOperationSpec, callback);
    };
    Gateway.prototype.regenerateKey = function (resourceGroupName, serviceName, gatewayId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            parameters: parameters,
            options: options
        }, regenerateKeyOperationSpec, callback);
    };
    Gateway.prototype.generateToken = function (resourceGroupName, serviceName, gatewayId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            gatewayId: gatewayId,
            parameters: parameters,
            options: options
        }, generateTokenOperationSpec, callback);
    };
    Gateway.prototype.listByServiceNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByServiceNextOperationSpec, callback);
    };
    return Gateway;
}());
export { Gateway };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByServiceOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.skip,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GatewayCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityTagOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.GatewayGetEntityTagHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GatewayContract,
            headersMapper: Mappers.GatewayGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GatewayContract), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GatewayContract,
            headersMapper: Mappers.GatewayCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: Mappers.GatewayContract,
            headersMapper: Mappers.GatewayCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GatewayContract), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/listKeys",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GatewayKeysContract,
            headersMapper: Mappers.GatewayListKeysHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var regenerateKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/regenerateKey",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GatewayKeyRegenerationRequestContract), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var generateTokenOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/generateToken",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GatewayTokenRequestContract), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GatewayTokenContract
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByServiceNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GatewayCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=gateway.js.map