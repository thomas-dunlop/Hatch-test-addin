import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a GatewayHostnameConfiguration. */
export declare class GatewayHostnameConfiguration {
    private readonly client;
    /**
     * Create a GatewayHostnameConfiguration.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists the collection of hostname configurations for the specified gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayHostnameConfigurationListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: Models.GatewayHostnameConfigurationListByServiceOptionalParams): Promise<Models.GatewayHostnameConfigurationListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options: Models.GatewayHostnameConfigurationListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
    /**
     * Checks that hostname configuration entity specified by identifier exists for specified Gateway
     * entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayHostnameConfigurationGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayHostnameConfigurationGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the Gateway hostname configuration specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayHostnameConfigurationGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayHostnameConfigurationGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
    /**
     * Creates of updates hostname configuration for a Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayHostnameConfigurationCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, options?: msRest.RequestOptionsBase): Promise<Models.GatewayHostnameConfigurationCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
    /**
     * Deletes the specified hostname configuration from the specified Gateway.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
     * instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
     * Gateway entity.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists the collection of hostname configurations for the specified gateway.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GatewayHostnameConfigurationListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayHostnameConfigurationListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
}
//# sourceMappingURL=gatewayHostnameConfiguration.d.ts.map