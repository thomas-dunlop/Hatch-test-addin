/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmApimanagement = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorFieldContract = {
        serializedName: "ErrorFieldContract",
        type: {
            name: "Composite",
            className: "ErrorFieldContract",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponseBody = {
        serializedName: "ErrorResponseBody",
        type: {
            name: "Composite",
            className: "ErrorResponseBody",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorFieldContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "error.code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "error.message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "error.details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorFieldContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegionContract = {
        serializedName: "RegionContract",
        type: {
            name: "Composite",
            className: "RegionContract",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isMasterRegion: {
                    serializedName: "isMasterRegion",
                    type: {
                        name: "Boolean"
                    }
                },
                isDeleted: {
                    serializedName: "isDeleted",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiExportResultValue = {
        serializedName: "ApiExportResult_value",
        type: {
            name: "Composite",
            className: "ApiExportResultValue",
            modelProperties: {
                link: {
                    serializedName: "link",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiExportResult = {
        serializedName: "ApiExportResult",
        type: {
            name: "Composite",
            className: "ApiExportResult",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                exportResultFormat: {
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        className: "ApiExportResultValue"
                    }
                }
            }
        }
    };
    var ProductEntityBaseParameters = {
        serializedName: "ProductEntityBaseParameters",
        type: {
            name: "Composite",
            className: "ProductEntityBaseParameters",
            modelProperties: {
                description: {
                    serializedName: "description",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                terms: {
                    serializedName: "terms",
                    type: {
                        name: "String"
                    }
                },
                subscriptionRequired: {
                    serializedName: "subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                approvalRequired: {
                    serializedName: "approvalRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                subscriptionsLimit: {
                    serializedName: "subscriptionsLimit",
                    type: {
                        name: "Number"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "notPublished",
                            "published"
                        ]
                    }
                }
            }
        }
    };
    var ProductTagResourceContractProperties = {
        serializedName: "ProductTagResourceContractProperties",
        type: {
            name: "Composite",
            className: "ProductTagResourceContractProperties",
            modelProperties: __assign(__assign({}, ProductEntityBaseParameters.type.modelProperties), { id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }, name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationTagResourceContractProperties = {
        serializedName: "OperationTagResourceContractProperties",
        type: {
            name: "Composite",
            className: "OperationTagResourceContractProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                apiName: {
                    readOnly: true,
                    serializedName: "apiName",
                    type: {
                        name: "String"
                    }
                },
                apiRevision: {
                    readOnly: true,
                    serializedName: "apiRevision",
                    type: {
                        name: "String"
                    }
                },
                apiVersion: {
                    readOnly: true,
                    serializedName: "apiVersion",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    readOnly: true,
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                urlTemplate: {
                    readOnly: true,
                    serializedName: "urlTemplate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionKeyParameterNamesContract = {
        serializedName: "SubscriptionKeyParameterNamesContract",
        type: {
            name: "Composite",
            className: "SubscriptionKeyParameterNamesContract",
            modelProperties: {
                header: {
                    serializedName: "header",
                    type: {
                        name: "String"
                    }
                },
                query: {
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenIdAuthenticationSettingsContract = {
        serializedName: "OpenIdAuthenticationSettingsContract",
        type: {
            name: "Composite",
            className: "OpenIdAuthenticationSettingsContract",
            modelProperties: {
                openidProviderId: {
                    serializedName: "openidProviderId",
                    type: {
                        name: "String"
                    }
                },
                bearerTokenSendingMethods: {
                    serializedName: "bearerTokenSendingMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OAuth2AuthenticationSettingsContract = {
        serializedName: "OAuth2AuthenticationSettingsContract",
        type: {
            name: "Composite",
            className: "OAuth2AuthenticationSettingsContract",
            modelProperties: {
                authorizationServerId: {
                    serializedName: "authorizationServerId",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthenticationSettingsContract = {
        serializedName: "AuthenticationSettingsContract",
        type: {
            name: "Composite",
            className: "AuthenticationSettingsContract",
            modelProperties: {
                oAuth2: {
                    serializedName: "oAuth2",
                    type: {
                        name: "Composite",
                        className: "OAuth2AuthenticationSettingsContract"
                    }
                },
                openid: {
                    serializedName: "openid",
                    type: {
                        name: "Composite",
                        className: "OpenIdAuthenticationSettingsContract"
                    }
                }
            }
        }
    };
    var ApiVersionSetContractDetails = {
        serializedName: "ApiVersionSetContractDetails",
        type: {
            name: "Composite",
            className: "ApiVersionSetContractDetails",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                versioningScheme: {
                    serializedName: "versioningScheme",
                    type: {
                        name: "String"
                    }
                },
                versionQueryName: {
                    serializedName: "versionQueryName",
                    type: {
                        name: "String"
                    }
                },
                versionHeaderName: {
                    serializedName: "versionHeaderName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiCreateOrUpdatePropertiesWsdlSelector = {
        serializedName: "ApiCreateOrUpdateProperties_wsdlSelector",
        type: {
            name: "Composite",
            className: "ApiCreateOrUpdatePropertiesWsdlSelector",
            modelProperties: {
                wsdlServiceName: {
                    serializedName: "wsdlServiceName",
                    type: {
                        name: "String"
                    }
                },
                wsdlEndpointName: {
                    serializedName: "wsdlEndpointName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiEntityBaseContract = {
        serializedName: "ApiEntityBaseContract",
        type: {
            name: "Composite",
            className: "ApiEntityBaseContract",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                authenticationSettings: {
                    serializedName: "authenticationSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationSettingsContract"
                    }
                },
                subscriptionKeyParameterNames: {
                    serializedName: "subscriptionKeyParameterNames",
                    type: {
                        name: "Composite",
                        className: "SubscriptionKeyParameterNamesContract"
                    }
                },
                apiType: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                apiRevision: {
                    serializedName: "apiRevision",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersion: {
                    serializedName: "apiVersion",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                },
                isCurrent: {
                    serializedName: "isCurrent",
                    type: {
                        name: "Boolean"
                    }
                },
                isOnline: {
                    readOnly: true,
                    serializedName: "isOnline",
                    type: {
                        name: "Boolean"
                    }
                },
                apiRevisionDescription: {
                    serializedName: "apiRevisionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionDescription: {
                    serializedName: "apiVersionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionSetId: {
                    serializedName: "apiVersionSetId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionRequired: {
                    serializedName: "subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ApiContractProperties = {
        serializedName: "ApiContractProperties",
        type: {
            name: "Composite",
            className: "ApiContractProperties",
            modelProperties: __assign(__assign({}, ApiEntityBaseContract.type.modelProperties), { sourceApiId: {
                    serializedName: "sourceApiId",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, serviceUrl: {
                    serializedName: "serviceUrl",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }, path: {
                    required: true,
                    serializedName: "path",
                    constraints: {
                        MaxLength: 400,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }, protocols: {
                    serializedName: "protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "http",
                                    "https"
                                ]
                            }
                        }
                    }
                }, apiVersionSet: {
                    serializedName: "apiVersionSet",
                    type: {
                        name: "Composite",
                        className: "ApiVersionSetContractDetails"
                    }
                } })
        }
    };
    var ApiTagResourceContractProperties = {
        serializedName: "ApiTagResourceContractProperties",
        type: {
            name: "Composite",
            className: "ApiTagResourceContractProperties",
            modelProperties: __assign(__assign({}, ApiEntityBaseContract.type.modelProperties), { id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, serviceUrl: {
                    serializedName: "serviceUrl",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, path: {
                    serializedName: "path",
                    constraints: {
                        MaxLength: 400,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }, protocols: {
                    serializedName: "protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "http",
                                    "https"
                                ]
                            }
                        }
                    }
                } })
        }
    };
    var TagTagResourceContractProperties = {
        serializedName: "TagTagResourceContractProperties",
        type: {
            name: "Composite",
            className: "TagTagResourceContractProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 160,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagResourceContract = {
        serializedName: "TagResourceContract",
        type: {
            name: "Composite",
            className: "TagResourceContract",
            modelProperties: {
                tag: {
                    required: true,
                    serializedName: "tag",
                    type: {
                        name: "Composite",
                        className: "TagTagResourceContractProperties"
                    }
                },
                api: {
                    serializedName: "api",
                    type: {
                        name: "Composite",
                        className: "ApiTagResourceContractProperties"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "Composite",
                        className: "OperationTagResourceContractProperties"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "Composite",
                        className: "ProductTagResourceContractProperties"
                    }
                }
            }
        }
    };
    var TagContract = {
        serializedName: "TagContract",
        type: {
            name: "Composite",
            className: "TagContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 160,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TagDescriptionContract = {
        serializedName: "TagDescriptionContract",
        type: {
            name: "Composite",
            className: "TagDescriptionContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, externalDocsUrl: {
                    serializedName: "properties.externalDocsUrl",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                }, externalDocsDescription: {
                    serializedName: "properties.externalDocsDescription",
                    type: {
                        name: "String"
                    }
                }, tagId: {
                    serializedName: "properties.tagId",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 160,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TagDescriptionCreateParameters = {
        serializedName: "TagDescriptionCreateParameters",
        type: {
            name: "Composite",
            className: "TagDescriptionCreateParameters",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                externalDocsUrl: {
                    serializedName: "properties.externalDocsUrl",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                },
                externalDocsDescription: {
                    serializedName: "properties.externalDocsDescription",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueAttachmentContract = {
        serializedName: "IssueAttachmentContract",
        type: {
            name: "Composite",
            className: "IssueAttachmentContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { title: {
                    required: true,
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, contentFormat: {
                    required: true,
                    serializedName: "properties.contentFormat",
                    type: {
                        name: "String"
                    }
                }, content: {
                    required: true,
                    serializedName: "properties.content",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IssueCommentContract = {
        serializedName: "IssueCommentContract",
        type: {
            name: "Composite",
            className: "IssueCommentContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { text: {
                    required: true,
                    serializedName: "properties.text",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, userId: {
                    required: true,
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IssueContractBaseProperties = {
        serializedName: "IssueContractBaseProperties",
        type: {
            name: "Composite",
            className: "IssueContractBaseProperties",
            modelProperties: {
                createdDate: {
                    serializedName: "createdDate",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                apiId: {
                    serializedName: "apiId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueUpdateContract = {
        serializedName: "IssueUpdateContract",
        type: {
            name: "Composite",
            className: "IssueUpdateContract",
            modelProperties: {
                createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                apiId: {
                    serializedName: "properties.apiId",
                    type: {
                        name: "String"
                    }
                },
                title: {
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                userId: {
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueContract = {
        serializedName: "IssueContract",
        type: {
            name: "Composite",
            className: "IssueContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, apiId: {
                    serializedName: "properties.apiId",
                    type: {
                        name: "String"
                    }
                }, title: {
                    required: true,
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, description: {
                    required: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, userId: {
                    required: true,
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BodyDiagnosticSettings = {
        serializedName: "BodyDiagnosticSettings",
        type: {
            name: "Composite",
            className: "BodyDiagnosticSettings",
            modelProperties: {
                bytes: {
                    serializedName: "bytes",
                    constraints: {
                        InclusiveMaximum: 8192
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HttpMessageDiagnostic = {
        serializedName: "HttpMessageDiagnostic",
        type: {
            name: "Composite",
            className: "HttpMessageDiagnostic",
            modelProperties: {
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                body: {
                    serializedName: "body",
                    type: {
                        name: "Composite",
                        className: "BodyDiagnosticSettings"
                    }
                }
            }
        }
    };
    var PipelineDiagnosticSettings = {
        serializedName: "PipelineDiagnosticSettings",
        type: {
            name: "Composite",
            className: "PipelineDiagnosticSettings",
            modelProperties: {
                request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "HttpMessageDiagnostic"
                    }
                },
                response: {
                    serializedName: "response",
                    type: {
                        name: "Composite",
                        className: "HttpMessageDiagnostic"
                    }
                }
            }
        }
    };
    var SamplingSettings = {
        serializedName: "SamplingSettings",
        type: {
            name: "Composite",
            className: "SamplingSettings",
            modelProperties: {
                samplingType: {
                    serializedName: "samplingType",
                    type: {
                        name: "String"
                    }
                },
                percentage: {
                    serializedName: "percentage",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DiagnosticContract = {
        serializedName: "DiagnosticContract",
        type: {
            name: "Composite",
            className: "DiagnosticContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { alwaysLog: {
                    serializedName: "properties.alwaysLog",
                    type: {
                        name: "String"
                    }
                }, loggerId: {
                    required: true,
                    serializedName: "properties.loggerId",
                    type: {
                        name: "String"
                    }
                }, sampling: {
                    serializedName: "properties.sampling",
                    type: {
                        name: "Composite",
                        className: "SamplingSettings"
                    }
                }, frontend: {
                    serializedName: "properties.frontend",
                    type: {
                        name: "Composite",
                        className: "PipelineDiagnosticSettings"
                    }
                }, backend: {
                    serializedName: "properties.backend",
                    type: {
                        name: "Composite",
                        className: "PipelineDiagnosticSettings"
                    }
                }, logClientIp: {
                    serializedName: "properties.logClientIp",
                    type: {
                        name: "Boolean"
                    }
                }, httpCorrelationProtocol: {
                    serializedName: "properties.httpCorrelationProtocol",
                    type: {
                        name: "String"
                    }
                }, verbosity: {
                    serializedName: "properties.verbosity",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SchemaContract = {
        serializedName: "SchemaContract",
        type: {
            name: "Composite",
            className: "SchemaContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { contentType: {
                    required: true,
                    serializedName: "properties.contentType",
                    type: {
                        name: "String"
                    }
                }, value: {
                    serializedName: "properties.document.value",
                    type: {
                        name: "String"
                    }
                }, definitions: {
                    serializedName: "properties.document.definitions",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var PolicyContract = {
        serializedName: "PolicyContract",
        type: {
            name: "Composite",
            className: "PolicyContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { value: {
                    required: true,
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                }, format: {
                    serializedName: "properties.format",
                    defaultValue: 'xml',
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PolicyCollection = {
        serializedName: "PolicyCollection",
        type: {
            name: "Composite",
            className: "PolicyCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductContract = {
        serializedName: "ProductContract",
        type: {
            name: "Composite",
            className: "ProductContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, terms: {
                    serializedName: "properties.terms",
                    type: {
                        name: "String"
                    }
                }, subscriptionRequired: {
                    serializedName: "properties.subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                }, approvalRequired: {
                    serializedName: "properties.approvalRequired",
                    type: {
                        name: "Boolean"
                    }
                }, subscriptionsLimit: {
                    serializedName: "properties.subscriptionsLimit",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "notPublished",
                            "published"
                        ]
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ParameterContract = {
        serializedName: "ParameterContract",
        type: {
            name: "Composite",
            className: "ParameterContract",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                },
                required: {
                    serializedName: "required",
                    type: {
                        name: "Boolean"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RepresentationContract = {
        serializedName: "RepresentationContract",
        type: {
            name: "Composite",
            className: "RepresentationContract",
            modelProperties: {
                contentType: {
                    required: true,
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                },
                sample: {
                    serializedName: "sample",
                    type: {
                        name: "String"
                    }
                },
                schemaId: {
                    serializedName: "schemaId",
                    type: {
                        name: "String"
                    }
                },
                typeName: {
                    serializedName: "typeName",
                    type: {
                        name: "String"
                    }
                },
                formParameters: {
                    serializedName: "formParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResponseContract = {
        serializedName: "ResponseContract",
        type: {
            name: "Composite",
            className: "ResponseContract",
            modelProperties: {
                statusCode: {
                    required: true,
                    serializedName: "statusCode",
                    type: {
                        name: "Number"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                representations: {
                    serializedName: "representations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RepresentationContract"
                            }
                        }
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var RequestContract = {
        serializedName: "RequestContract",
        type: {
            name: "Composite",
            className: "RequestContract",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                queryParameters: {
                    serializedName: "queryParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                },
                representations: {
                    serializedName: "representations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RepresentationContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationEntityBaseContract = {
        serializedName: "OperationEntityBaseContract",
        type: {
            name: "Composite",
            className: "OperationEntityBaseContract",
            modelProperties: {
                templateParameters: {
                    serializedName: "templateParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                },
                request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "RequestContract"
                    }
                },
                responses: {
                    serializedName: "responses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResponseContract"
                            }
                        }
                    }
                },
                policies: {
                    serializedName: "policies",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationUpdateContract = {
        serializedName: "OperationUpdateContract",
        type: {
            name: "Composite",
            className: "OperationUpdateContract",
            modelProperties: {
                templateParameters: {
                    serializedName: "properties.templateParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                },
                request: {
                    serializedName: "properties.request",
                    type: {
                        name: "Composite",
                        className: "RequestContract"
                    }
                },
                responses: {
                    serializedName: "properties.responses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResponseContract"
                            }
                        }
                    }
                },
                policies: {
                    serializedName: "properties.policies",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "properties.method",
                    type: {
                        name: "String"
                    }
                },
                urlTemplate: {
                    serializedName: "properties.urlTemplate",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationContract = {
        serializedName: "OperationContract",
        type: {
            name: "Composite",
            className: "OperationContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { templateParameters: {
                    serializedName: "properties.templateParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterContract"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                }, request: {
                    serializedName: "properties.request",
                    type: {
                        name: "Composite",
                        className: "RequestContract"
                    }
                }, responses: {
                    serializedName: "properties.responses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResponseContract"
                            }
                        }
                    }
                }, policies: {
                    serializedName: "properties.policies",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, method: {
                    required: true,
                    serializedName: "properties.method",
                    type: {
                        name: "String"
                    }
                }, urlTemplate: {
                    required: true,
                    serializedName: "properties.urlTemplate",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApiReleaseContract = {
        serializedName: "ApiReleaseContract",
        type: {
            name: "Composite",
            className: "ApiReleaseContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { apiId: {
                    serializedName: "properties.apiId",
                    type: {
                        name: "String"
                    }
                }, createdDateTime: {
                    readOnly: true,
                    serializedName: "properties.createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, updatedDateTime: {
                    readOnly: true,
                    serializedName: "properties.updatedDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, notes: {
                    serializedName: "properties.notes",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApiRevisionContract = {
        serializedName: "ApiRevisionContract",
        type: {
            name: "Composite",
            className: "ApiRevisionContract",
            modelProperties: {
                apiId: {
                    readOnly: true,
                    serializedName: "apiId",
                    type: {
                        name: "String"
                    }
                },
                apiRevision: {
                    readOnly: true,
                    serializedName: "apiRevision",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                createdDateTime: {
                    readOnly: true,
                    serializedName: "createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedDateTime: {
                    readOnly: true,
                    serializedName: "updatedDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                privateUrl: {
                    readOnly: true,
                    serializedName: "privateUrl",
                    type: {
                        name: "String"
                    }
                },
                isOnline: {
                    readOnly: true,
                    serializedName: "isOnline",
                    type: {
                        name: "Boolean"
                    }
                },
                isCurrent: {
                    readOnly: true,
                    serializedName: "isCurrent",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ApiUpdateContract = {
        serializedName: "ApiUpdateContract",
        type: {
            name: "Composite",
            className: "ApiUpdateContract",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                authenticationSettings: {
                    serializedName: "properties.authenticationSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationSettingsContract"
                    }
                },
                subscriptionKeyParameterNames: {
                    serializedName: "properties.subscriptionKeyParameterNames",
                    type: {
                        name: "Composite",
                        className: "SubscriptionKeyParameterNamesContract"
                    }
                },
                apiType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                },
                apiRevision: {
                    serializedName: "properties.apiRevision",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersion: {
                    serializedName: "properties.apiVersion",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                },
                isCurrent: {
                    serializedName: "properties.isCurrent",
                    type: {
                        name: "Boolean"
                    }
                },
                isOnline: {
                    readOnly: true,
                    serializedName: "properties.isOnline",
                    type: {
                        name: "Boolean"
                    }
                },
                apiRevisionDescription: {
                    serializedName: "properties.apiRevisionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionDescription: {
                    serializedName: "properties.apiVersionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionSetId: {
                    serializedName: "properties.apiVersionSetId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionRequired: {
                    serializedName: "properties.subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                serviceUrl: {
                    serializedName: "properties.serviceUrl",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                path: {
                    serializedName: "properties.path",
                    constraints: {
                        MaxLength: 400,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "properties.protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "http",
                                    "https"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var ApiContract = {
        serializedName: "ApiContract",
        type: {
            name: "Composite",
            className: "ApiContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, authenticationSettings: {
                    serializedName: "properties.authenticationSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationSettingsContract"
                    }
                }, subscriptionKeyParameterNames: {
                    serializedName: "properties.subscriptionKeyParameterNames",
                    type: {
                        name: "Composite",
                        className: "SubscriptionKeyParameterNamesContract"
                    }
                }, apiType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, apiRevision: {
                    serializedName: "properties.apiRevision",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, apiVersion: {
                    serializedName: "properties.apiVersion",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, isCurrent: {
                    serializedName: "properties.isCurrent",
                    type: {
                        name: "Boolean"
                    }
                }, isOnline: {
                    readOnly: true,
                    serializedName: "properties.isOnline",
                    type: {
                        name: "Boolean"
                    }
                }, apiRevisionDescription: {
                    serializedName: "properties.apiRevisionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                }, apiVersionDescription: {
                    serializedName: "properties.apiVersionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                }, apiVersionSetId: {
                    serializedName: "properties.apiVersionSetId",
                    type: {
                        name: "String"
                    }
                }, subscriptionRequired: {
                    serializedName: "properties.subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                }, sourceApiId: {
                    serializedName: "properties.sourceApiId",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, serviceUrl: {
                    serializedName: "properties.serviceUrl",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }, path: {
                    required: true,
                    serializedName: "properties.path",
                    constraints: {
                        MaxLength: 400,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }, protocols: {
                    serializedName: "properties.protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "http",
                                    "https"
                                ]
                            }
                        }
                    }
                }, apiVersionSet: {
                    serializedName: "properties.apiVersionSet",
                    type: {
                        name: "Composite",
                        className: "ApiVersionSetContractDetails"
                    }
                } })
        }
    };
    var ApiCreateOrUpdateParameter = {
        serializedName: "ApiCreateOrUpdateParameter",
        type: {
            name: "Composite",
            className: "ApiCreateOrUpdateParameter",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                authenticationSettings: {
                    serializedName: "properties.authenticationSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationSettingsContract"
                    }
                },
                subscriptionKeyParameterNames: {
                    serializedName: "properties.subscriptionKeyParameterNames",
                    type: {
                        name: "Composite",
                        className: "SubscriptionKeyParameterNamesContract"
                    }
                },
                apiType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                },
                apiRevision: {
                    serializedName: "properties.apiRevision",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersion: {
                    serializedName: "properties.apiVersion",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                },
                isCurrent: {
                    serializedName: "properties.isCurrent",
                    type: {
                        name: "Boolean"
                    }
                },
                isOnline: {
                    readOnly: true,
                    serializedName: "properties.isOnline",
                    type: {
                        name: "Boolean"
                    }
                },
                apiRevisionDescription: {
                    serializedName: "properties.apiRevisionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionDescription: {
                    serializedName: "properties.apiVersionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionSetId: {
                    serializedName: "properties.apiVersionSetId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionRequired: {
                    serializedName: "properties.subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceApiId: {
                    serializedName: "properties.sourceApiId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                serviceUrl: {
                    serializedName: "properties.serviceUrl",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                },
                path: {
                    required: true,
                    serializedName: "properties.path",
                    constraints: {
                        MaxLength: 400,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "properties.protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "http",
                                    "https"
                                ]
                            }
                        }
                    }
                },
                apiVersionSet: {
                    serializedName: "properties.apiVersionSet",
                    type: {
                        name: "Composite",
                        className: "ApiVersionSetContractDetails"
                    }
                },
                value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                },
                format: {
                    serializedName: "properties.format",
                    type: {
                        name: "String"
                    }
                },
                wsdlSelector: {
                    serializedName: "properties.wsdlSelector",
                    type: {
                        name: "Composite",
                        className: "ApiCreateOrUpdatePropertiesWsdlSelector"
                    }
                },
                soapApiType: {
                    serializedName: "properties.apiType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetEntityBase = {
        serializedName: "ApiVersionSetEntityBase",
        type: {
            name: "Composite",
            className: "ApiVersionSetEntityBase",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                versionQueryName: {
                    serializedName: "versionQueryName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                versionHeaderName: {
                    serializedName: "versionHeaderName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetUpdateParameters = {
        serializedName: "ApiVersionSetUpdateParameters",
        type: {
            name: "Composite",
            className: "ApiVersionSetUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                versionQueryName: {
                    serializedName: "properties.versionQueryName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                versionHeaderName: {
                    serializedName: "properties.versionHeaderName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                versioningScheme: {
                    serializedName: "properties.versioningScheme",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetContract = {
        serializedName: "ApiVersionSetContract",
        type: {
            name: "Composite",
            className: "ApiVersionSetContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, versionQueryName: {
                    serializedName: "properties.versionQueryName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, versionHeaderName: {
                    serializedName: "properties.versionHeaderName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, versioningScheme: {
                    required: true,
                    serializedName: "properties.versioningScheme",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ClientSecretContract = {
        serializedName: "ClientSecretContract",
        type: {
            name: "Composite",
            className: "ClientSecretContract",
            modelProperties: {
                clientSecret: {
                    serializedName: "clientSecret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TokenBodyParameterContract = {
        serializedName: "TokenBodyParameterContract",
        type: {
            name: "Composite",
            className: "TokenBodyParameterContract",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationServerContractBaseProperties = {
        serializedName: "AuthorizationServerContractBaseProperties",
        type: {
            name: "Composite",
            className: "AuthorizationServerContractBaseProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                authorizationMethods: {
                    serializedName: "authorizationMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "HEAD",
                                    "OPTIONS",
                                    "TRACE",
                                    "GET",
                                    "POST",
                                    "PUT",
                                    "PATCH",
                                    "DELETE"
                                ]
                            }
                        }
                    }
                },
                clientAuthenticationMethod: {
                    serializedName: "clientAuthenticationMethod",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tokenBodyParameters: {
                    serializedName: "tokenBodyParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TokenBodyParameterContract"
                            }
                        }
                    }
                },
                tokenEndpoint: {
                    serializedName: "tokenEndpoint",
                    type: {
                        name: "String"
                    }
                },
                supportState: {
                    serializedName: "supportState",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultScope: {
                    serializedName: "defaultScope",
                    type: {
                        name: "String"
                    }
                },
                bearerTokenSendingMethods: {
                    serializedName: "bearerTokenSendingMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                resourceOwnerUsername: {
                    serializedName: "resourceOwnerUsername",
                    type: {
                        name: "String"
                    }
                },
                resourceOwnerPassword: {
                    serializedName: "resourceOwnerPassword",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationServerUpdateContract = {
        serializedName: "AuthorizationServerUpdateContract",
        type: {
            name: "Composite",
            className: "AuthorizationServerUpdateContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, authorizationMethods: {
                    serializedName: "properties.authorizationMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "HEAD",
                                    "OPTIONS",
                                    "TRACE",
                                    "GET",
                                    "POST",
                                    "PUT",
                                    "PATCH",
                                    "DELETE"
                                ]
                            }
                        }
                    }
                }, clientAuthenticationMethod: {
                    serializedName: "properties.clientAuthenticationMethod",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, tokenBodyParameters: {
                    serializedName: "properties.tokenBodyParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TokenBodyParameterContract"
                            }
                        }
                    }
                }, tokenEndpoint: {
                    serializedName: "properties.tokenEndpoint",
                    type: {
                        name: "String"
                    }
                }, supportState: {
                    serializedName: "properties.supportState",
                    type: {
                        name: "Boolean"
                    }
                }, defaultScope: {
                    serializedName: "properties.defaultScope",
                    type: {
                        name: "String"
                    }
                }, bearerTokenSendingMethods: {
                    serializedName: "properties.bearerTokenSendingMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, resourceOwnerUsername: {
                    serializedName: "properties.resourceOwnerUsername",
                    type: {
                        name: "String"
                    }
                }, resourceOwnerPassword: {
                    serializedName: "properties.resourceOwnerPassword",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 50,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, clientRegistrationEndpoint: {
                    serializedName: "properties.clientRegistrationEndpoint",
                    type: {
                        name: "String"
                    }
                }, authorizationEndpoint: {
                    serializedName: "properties.authorizationEndpoint",
                    type: {
                        name: "String"
                    }
                }, grantTypes: {
                    serializedName: "properties.grantTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientSecret: {
                    serializedName: "properties.clientSecret",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AuthorizationServerContract = {
        serializedName: "AuthorizationServerContract",
        type: {
            name: "Composite",
            className: "AuthorizationServerContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, authorizationMethods: {
                    serializedName: "properties.authorizationMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "HEAD",
                                    "OPTIONS",
                                    "TRACE",
                                    "GET",
                                    "POST",
                                    "PUT",
                                    "PATCH",
                                    "DELETE"
                                ]
                            }
                        }
                    }
                }, clientAuthenticationMethod: {
                    serializedName: "properties.clientAuthenticationMethod",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, tokenBodyParameters: {
                    serializedName: "properties.tokenBodyParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TokenBodyParameterContract"
                            }
                        }
                    }
                }, tokenEndpoint: {
                    serializedName: "properties.tokenEndpoint",
                    type: {
                        name: "String"
                    }
                }, supportState: {
                    serializedName: "properties.supportState",
                    type: {
                        name: "Boolean"
                    }
                }, defaultScope: {
                    serializedName: "properties.defaultScope",
                    type: {
                        name: "String"
                    }
                }, bearerTokenSendingMethods: {
                    serializedName: "properties.bearerTokenSendingMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, resourceOwnerUsername: {
                    serializedName: "properties.resourceOwnerUsername",
                    type: {
                        name: "String"
                    }
                }, resourceOwnerPassword: {
                    serializedName: "properties.resourceOwnerPassword",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 50,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, clientRegistrationEndpoint: {
                    required: true,
                    serializedName: "properties.clientRegistrationEndpoint",
                    type: {
                        name: "String"
                    }
                }, authorizationEndpoint: {
                    required: true,
                    serializedName: "properties.authorizationEndpoint",
                    type: {
                        name: "String"
                    }
                }, grantTypes: {
                    required: true,
                    serializedName: "properties.grantTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, clientId: {
                    required: true,
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientSecret: {
                    serializedName: "properties.clientSecret",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BackendReconnectContract = {
        serializedName: "BackendReconnectContract",
        type: {
            name: "Composite",
            className: "BackendReconnectContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { after: {
                    serializedName: "properties.after",
                    type: {
                        name: "TimeSpan"
                    }
                } })
        }
    };
    var BackendTlsProperties = {
        serializedName: "BackendTlsProperties",
        type: {
            name: "Composite",
            className: "BackendTlsProperties",
            modelProperties: {
                validateCertificateChain: {
                    serializedName: "validateCertificateChain",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                validateCertificateName: {
                    serializedName: "validateCertificateName",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var BackendProxyContract = {
        serializedName: "BackendProxyContract",
        type: {
            name: "Composite",
            className: "BackendProxyContract",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendAuthorizationHeaderCredentials = {
        serializedName: "BackendAuthorizationHeaderCredentials",
        type: {
            name: "Composite",
            className: "BackendAuthorizationHeaderCredentials",
            modelProperties: {
                scheme: {
                    required: true,
                    serializedName: "scheme",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                parameter: {
                    required: true,
                    serializedName: "parameter",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendCredentialsContract = {
        serializedName: "BackendCredentialsContract",
        type: {
            name: "Composite",
            className: "BackendCredentialsContract",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                query: {
                    serializedName: "query",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                header: {
                    serializedName: "header",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "Composite",
                        className: "BackendAuthorizationHeaderCredentials"
                    }
                }
            }
        }
    };
    var X509CertificateName = {
        serializedName: "X509CertificateName",
        type: {
            name: "Composite",
            className: "X509CertificateName",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                issuerCertificateThumbprint: {
                    serializedName: "issuerCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendServiceFabricClusterProperties = {
        serializedName: "BackendServiceFabricClusterProperties",
        type: {
            name: "Composite",
            className: "BackendServiceFabricClusterProperties",
            modelProperties: {
                clientCertificatethumbprint: {
                    required: true,
                    serializedName: "clientCertificatethumbprint",
                    type: {
                        name: "String"
                    }
                },
                maxPartitionResolutionRetries: {
                    serializedName: "maxPartitionResolutionRetries",
                    type: {
                        name: "Number"
                    }
                },
                managementEndpoints: {
                    required: true,
                    serializedName: "managementEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                serverCertificateThumbprints: {
                    serializedName: "serverCertificateThumbprints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                serverX509Names: {
                    serializedName: "serverX509Names",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "X509CertificateName"
                            }
                        }
                    }
                }
            }
        }
    };
    var BackendProperties = {
        serializedName: "BackendProperties",
        type: {
            name: "Composite",
            className: "BackendProperties",
            modelProperties: {
                serviceFabricCluster: {
                    serializedName: "serviceFabricCluster",
                    type: {
                        name: "Composite",
                        className: "BackendServiceFabricClusterProperties"
                    }
                }
            }
        }
    };
    var BackendBaseParameters = {
        serializedName: "BackendBaseParameters",
        type: {
            name: "Composite",
            className: "BackendBaseParameters",
            modelProperties: {
                title: {
                    serializedName: "title",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "BackendProperties"
                    }
                },
                credentials: {
                    serializedName: "credentials",
                    type: {
                        name: "Composite",
                        className: "BackendCredentialsContract"
                    }
                },
                proxy: {
                    serializedName: "proxy",
                    type: {
                        name: "Composite",
                        className: "BackendProxyContract"
                    }
                },
                tls: {
                    serializedName: "tls",
                    type: {
                        name: "Composite",
                        className: "BackendTlsProperties"
                    }
                }
            }
        }
    };
    var BackendUpdateParameters = {
        serializedName: "BackendUpdateParameters",
        type: {
            name: "Composite",
            className: "BackendUpdateParameters",
            modelProperties: {
                title: {
                    serializedName: "properties.title",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "properties.resourceId",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties.properties",
                    type: {
                        name: "Composite",
                        className: "BackendProperties"
                    }
                },
                credentials: {
                    serializedName: "properties.credentials",
                    type: {
                        name: "Composite",
                        className: "BackendCredentialsContract"
                    }
                },
                proxy: {
                    serializedName: "properties.proxy",
                    type: {
                        name: "Composite",
                        className: "BackendProxyContract"
                    }
                },
                tls: {
                    serializedName: "properties.tls",
                    type: {
                        name: "Composite",
                        className: "BackendTlsProperties"
                    }
                },
                url: {
                    serializedName: "properties.url",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendContract = {
        serializedName: "BackendContract",
        type: {
            name: "Composite",
            className: "BackendContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { title: {
                    serializedName: "properties.title",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, resourceId: {
                    serializedName: "properties.resourceId",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties.properties",
                    type: {
                        name: "Composite",
                        className: "BackendProperties"
                    }
                }, credentials: {
                    serializedName: "properties.credentials",
                    type: {
                        name: "Composite",
                        className: "BackendCredentialsContract"
                    }
                }, proxy: {
                    serializedName: "properties.proxy",
                    type: {
                        name: "Composite",
                        className: "BackendProxyContract"
                    }
                }, tls: {
                    serializedName: "properties.tls",
                    type: {
                        name: "Composite",
                        className: "BackendTlsProperties"
                    }
                }, url: {
                    required: true,
                    serializedName: "properties.url",
                    constraints: {
                        MaxLength: 2000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, protocol: {
                    required: true,
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CacheUpdateParameters = {
        serializedName: "CacheUpdateParameters",
        type: {
            name: "Composite",
            className: "CacheUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "properties.connectionString",
                    constraints: {
                        MaxLength: 300
                    },
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "properties.resourceId",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CacheContract = {
        serializedName: "CacheContract",
        type: {
            name: "Composite",
            className: "CacheContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                }, connectionString: {
                    required: true,
                    serializedName: "properties.connectionString",
                    constraints: {
                        MaxLength: 300
                    },
                    type: {
                        name: "String"
                    }
                }, resourceId: {
                    serializedName: "properties.resourceId",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CertificateContract = {
        serializedName: "CertificateContract",
        type: {
            name: "Composite",
            className: "CertificateContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { subject: {
                    required: true,
                    serializedName: "properties.subject",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    required: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, expirationDate: {
                    required: true,
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var CertificateCreateOrUpdateParameters = {
        serializedName: "CertificateCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "CertificateCreateOrUpdateParameters",
            modelProperties: {
                data: {
                    required: true,
                    serializedName: "properties.data",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCapacity = {
        serializedName: "ResourceSkuCapacity",
        type: {
            name: "Composite",
            className: "ResourceSkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuResult = {
        serializedName: "ResourceSkuResult",
        type: {
            name: "Composite",
            className: "ResourceSkuResult",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuCapacity"
                    }
                }
            }
        }
    };
    var CertificateInformation = {
        serializedName: "CertificateInformation",
        type: {
            name: "Composite",
            className: "CertificateInformation",
            modelProperties: {
                expiry: {
                    required: true,
                    serializedName: "expiry",
                    type: {
                        name: "DateTime"
                    }
                },
                thumbprint: {
                    required: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                subject: {
                    required: true,
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateConfiguration = {
        serializedName: "CertificateConfiguration",
        type: {
            name: "Composite",
            className: "CertificateConfiguration",
            modelProperties: {
                encodedCertificate: {
                    serializedName: "encodedCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificatePassword: {
                    serializedName: "certificatePassword",
                    type: {
                        name: "String"
                    }
                },
                storeName: {
                    required: true,
                    serializedName: "storeName",
                    type: {
                        name: "String"
                    }
                },
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "Composite",
                        className: "CertificateInformation"
                    }
                }
            }
        }
    };
    var HostnameConfiguration = {
        serializedName: "HostnameConfiguration",
        type: {
            name: "Composite",
            className: "HostnameConfiguration",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                hostName: {
                    required: true,
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                },
                keyVaultId: {
                    serializedName: "keyVaultId",
                    type: {
                        name: "String"
                    }
                },
                encodedCertificate: {
                    serializedName: "encodedCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificatePassword: {
                    serializedName: "certificatePassword",
                    type: {
                        name: "String"
                    }
                },
                defaultSslBinding: {
                    serializedName: "defaultSslBinding",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                negotiateClientCertificate: {
                    serializedName: "negotiateClientCertificate",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "Composite",
                        className: "CertificateInformation"
                    }
                }
            }
        }
    };
    var VirtualNetworkConfiguration = {
        serializedName: "VirtualNetworkConfiguration",
        type: {
            name: "Composite",
            className: "VirtualNetworkConfiguration",
            modelProperties: {
                vnetid: {
                    readOnly: true,
                    serializedName: "vnetid",
                    type: {
                        name: "String"
                    }
                },
                subnetname: {
                    readOnly: true,
                    serializedName: "subnetname",
                    type: {
                        name: "String"
                    }
                },
                subnetResourceId: {
                    serializedName: "subnetResourceId",
                    constraints: {
                        Pattern: /^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiManagementServiceSkuProperties = {
        serializedName: "ApiManagementServiceSkuProperties",
        type: {
            name: "Composite",
            className: "ApiManagementServiceSkuProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    required: true,
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AdditionalLocation = {
        serializedName: "AdditionalLocation",
        type: {
            name: "Composite",
            className: "AdditionalLocation",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ApiManagementServiceSkuProperties"
                    }
                },
                publicIPAddresses: {
                    readOnly: true,
                    serializedName: "publicIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                privateIPAddresses: {
                    readOnly: true,
                    serializedName: "privateIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                virtualNetworkConfiguration: {
                    serializedName: "virtualNetworkConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConfiguration"
                    }
                },
                gatewayRegionalUrl: {
                    readOnly: true,
                    serializedName: "gatewayRegionalUrl",
                    type: {
                        name: "String"
                    }
                },
                disableGateway: {
                    serializedName: "disableGateway",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ApiManagementServiceBackupRestoreParameters = {
        serializedName: "ApiManagementServiceBackupRestoreParameters",
        type: {
            name: "Composite",
            className: "ApiManagementServiceBackupRestoreParameters",
            modelProperties: {
                storageAccount: {
                    required: true,
                    serializedName: "storageAccount",
                    type: {
                        name: "String"
                    }
                },
                accessKey: {
                    required: true,
                    serializedName: "accessKey",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    required: true,
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                },
                backupName: {
                    required: true,
                    serializedName: "backupName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionConstraint = {
        serializedName: "ApiVersionConstraint",
        type: {
            name: "Composite",
            className: "ApiVersionConstraint",
            modelProperties: {
                minApiVersion: {
                    serializedName: "minApiVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiManagementServiceBaseProperties = {
        serializedName: "ApiManagementServiceBaseProperties",
        type: {
            name: "Composite",
            className: "ApiManagementServiceBaseProperties",
            modelProperties: {
                notificationSenderEmail: {
                    serializedName: "notificationSenderEmail",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                targetProvisioningState: {
                    readOnly: true,
                    serializedName: "targetProvisioningState",
                    type: {
                        name: "String"
                    }
                },
                createdAtUtc: {
                    readOnly: true,
                    serializedName: "createdAtUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                gatewayUrl: {
                    readOnly: true,
                    serializedName: "gatewayUrl",
                    type: {
                        name: "String"
                    }
                },
                gatewayRegionalUrl: {
                    readOnly: true,
                    serializedName: "gatewayRegionalUrl",
                    type: {
                        name: "String"
                    }
                },
                portalUrl: {
                    readOnly: true,
                    serializedName: "portalUrl",
                    type: {
                        name: "String"
                    }
                },
                managementApiUrl: {
                    readOnly: true,
                    serializedName: "managementApiUrl",
                    type: {
                        name: "String"
                    }
                },
                scmUrl: {
                    readOnly: true,
                    serializedName: "scmUrl",
                    type: {
                        name: "String"
                    }
                },
                developerPortalUrl: {
                    readOnly: true,
                    serializedName: "developerPortalUrl",
                    type: {
                        name: "String"
                    }
                },
                hostnameConfigurations: {
                    serializedName: "hostnameConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostnameConfiguration"
                            }
                        }
                    }
                },
                publicIPAddresses: {
                    readOnly: true,
                    serializedName: "publicIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                privateIPAddresses: {
                    readOnly: true,
                    serializedName: "privateIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                virtualNetworkConfiguration: {
                    serializedName: "virtualNetworkConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConfiguration"
                    }
                },
                additionalLocations: {
                    serializedName: "additionalLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdditionalLocation"
                            }
                        }
                    }
                },
                customProperties: {
                    serializedName: "customProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                certificates: {
                    serializedName: "certificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateConfiguration"
                            }
                        }
                    }
                },
                enableClientCertificate: {
                    serializedName: "enableClientCertificate",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                disableGateway: {
                    serializedName: "disableGateway",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                virtualNetworkType: {
                    serializedName: "virtualNetworkType",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                },
                apiVersionConstraint: {
                    serializedName: "apiVersionConstraint",
                    type: {
                        name: "Composite",
                        className: "ApiVersionConstraint"
                    }
                }
            }
        }
    };
    var UserIdentityProperties = {
        serializedName: "UserIdentityProperties",
        type: {
            name: "Composite",
            className: "UserIdentityProperties",
            modelProperties: {
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiManagementServiceIdentity = {
        serializedName: "ApiManagementServiceIdentity",
        type: {
            name: "Composite",
            className: "ApiManagementServiceIdentity",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "UserIdentityProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApimResource = {
        serializedName: "ApimResource",
        type: {
            name: "Composite",
            className: "ApimResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApiManagementServiceResource = {
        serializedName: "ApiManagementServiceResource",
        type: {
            name: "Composite",
            className: "ApiManagementServiceResource",
            modelProperties: __assign(__assign({}, ApimResource.type.modelProperties), { notificationSenderEmail: {
                    serializedName: "properties.notificationSenderEmail",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, targetProvisioningState: {
                    readOnly: true,
                    serializedName: "properties.targetProvisioningState",
                    type: {
                        name: "String"
                    }
                }, createdAtUtc: {
                    readOnly: true,
                    serializedName: "properties.createdAtUtc",
                    type: {
                        name: "DateTime"
                    }
                }, gatewayUrl: {
                    readOnly: true,
                    serializedName: "properties.gatewayUrl",
                    type: {
                        name: "String"
                    }
                }, gatewayRegionalUrl: {
                    readOnly: true,
                    serializedName: "properties.gatewayRegionalUrl",
                    type: {
                        name: "String"
                    }
                }, portalUrl: {
                    readOnly: true,
                    serializedName: "properties.portalUrl",
                    type: {
                        name: "String"
                    }
                }, managementApiUrl: {
                    readOnly: true,
                    serializedName: "properties.managementApiUrl",
                    type: {
                        name: "String"
                    }
                }, scmUrl: {
                    readOnly: true,
                    serializedName: "properties.scmUrl",
                    type: {
                        name: "String"
                    }
                }, developerPortalUrl: {
                    readOnly: true,
                    serializedName: "properties.developerPortalUrl",
                    type: {
                        name: "String"
                    }
                }, hostnameConfigurations: {
                    serializedName: "properties.hostnameConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostnameConfiguration"
                            }
                        }
                    }
                }, publicIPAddresses: {
                    readOnly: true,
                    serializedName: "properties.publicIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, privateIPAddresses: {
                    readOnly: true,
                    serializedName: "properties.privateIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, virtualNetworkConfiguration: {
                    serializedName: "properties.virtualNetworkConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConfiguration"
                    }
                }, additionalLocations: {
                    serializedName: "properties.additionalLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdditionalLocation"
                            }
                        }
                    }
                }, customProperties: {
                    serializedName: "properties.customProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, certificates: {
                    serializedName: "properties.certificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateConfiguration"
                            }
                        }
                    }
                }, enableClientCertificate: {
                    serializedName: "properties.enableClientCertificate",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, disableGateway: {
                    serializedName: "properties.disableGateway",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, virtualNetworkType: {
                    serializedName: "properties.virtualNetworkType",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                }, apiVersionConstraint: {
                    serializedName: "properties.apiVersionConstraint",
                    type: {
                        name: "Composite",
                        className: "ApiVersionConstraint"
                    }
                }, publisherEmail: {
                    required: true,
                    serializedName: "properties.publisherEmail",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, publisherName: {
                    required: true,
                    serializedName: "properties.publisherName",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ApiManagementServiceSkuProperties"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ApiManagementServiceIdentity"
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApiManagementServiceUpdateParameters = {
        serializedName: "ApiManagementServiceUpdateParameters",
        type: {
            name: "Composite",
            className: "ApiManagementServiceUpdateParameters",
            modelProperties: __assign(__assign({}, ApimResource.type.modelProperties), { notificationSenderEmail: {
                    serializedName: "properties.notificationSenderEmail",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, targetProvisioningState: {
                    readOnly: true,
                    serializedName: "properties.targetProvisioningState",
                    type: {
                        name: "String"
                    }
                }, createdAtUtc: {
                    readOnly: true,
                    serializedName: "properties.createdAtUtc",
                    type: {
                        name: "DateTime"
                    }
                }, gatewayUrl: {
                    readOnly: true,
                    serializedName: "properties.gatewayUrl",
                    type: {
                        name: "String"
                    }
                }, gatewayRegionalUrl: {
                    readOnly: true,
                    serializedName: "properties.gatewayRegionalUrl",
                    type: {
                        name: "String"
                    }
                }, portalUrl: {
                    readOnly: true,
                    serializedName: "properties.portalUrl",
                    type: {
                        name: "String"
                    }
                }, managementApiUrl: {
                    readOnly: true,
                    serializedName: "properties.managementApiUrl",
                    type: {
                        name: "String"
                    }
                }, scmUrl: {
                    readOnly: true,
                    serializedName: "properties.scmUrl",
                    type: {
                        name: "String"
                    }
                }, developerPortalUrl: {
                    readOnly: true,
                    serializedName: "properties.developerPortalUrl",
                    type: {
                        name: "String"
                    }
                }, hostnameConfigurations: {
                    serializedName: "properties.hostnameConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostnameConfiguration"
                            }
                        }
                    }
                }, publicIPAddresses: {
                    readOnly: true,
                    serializedName: "properties.publicIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, privateIPAddresses: {
                    readOnly: true,
                    serializedName: "properties.privateIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, virtualNetworkConfiguration: {
                    serializedName: "properties.virtualNetworkConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConfiguration"
                    }
                }, additionalLocations: {
                    serializedName: "properties.additionalLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdditionalLocation"
                            }
                        }
                    }
                }, customProperties: {
                    serializedName: "properties.customProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, certificates: {
                    serializedName: "properties.certificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateConfiguration"
                            }
                        }
                    }
                }, enableClientCertificate: {
                    serializedName: "properties.enableClientCertificate",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, disableGateway: {
                    serializedName: "properties.disableGateway",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, virtualNetworkType: {
                    serializedName: "properties.virtualNetworkType",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                }, apiVersionConstraint: {
                    serializedName: "properties.apiVersionConstraint",
                    type: {
                        name: "Composite",
                        className: "ApiVersionConstraint"
                    }
                }, publisherEmail: {
                    serializedName: "properties.publisherEmail",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, publisherName: {
                    serializedName: "properties.publisherName",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ApiManagementServiceSkuProperties"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ApiManagementServiceIdentity"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApiManagementServiceGetSsoTokenResult = {
        serializedName: "ApiManagementServiceGetSsoTokenResult",
        type: {
            name: "Composite",
            className: "ApiManagementServiceGetSsoTokenResult",
            modelProperties: {
                redirectUri: {
                    serializedName: "redirectUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiManagementServiceCheckNameAvailabilityParameters = {
        serializedName: "ApiManagementServiceCheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "ApiManagementServiceCheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiManagementServiceNameAvailabilityResult = {
        serializedName: "ApiManagementServiceNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "ApiManagementServiceNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Valid",
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                }
            }
        }
    };
    var ApiManagementServiceApplyNetworkConfigurationParameters = {
        serializedName: "ApiManagementServiceApplyNetworkConfigurationParameters",
        type: {
            name: "Composite",
            className: "ApiManagementServiceApplyNetworkConfigurationParameters",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var EmailTemplateParametersContractProperties = {
        serializedName: "EmailTemplateParametersContractProperties",
        type: {
            name: "Composite",
            className: "EmailTemplateParametersContractProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1,
                        Pattern: /^[A-Za-z0-9-._]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                title: {
                    serializedName: "title",
                    constraints: {
                        MaxLength: 4096,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1,
                        Pattern: /^[A-Za-z0-9-._]+$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EmailTemplateUpdateParameters = {
        serializedName: "EmailTemplateUpdateParameters",
        type: {
            name: "Composite",
            className: "EmailTemplateUpdateParameters",
            modelProperties: {
                subject: {
                    serializedName: "properties.subject",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                title: {
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                body: {
                    serializedName: "properties.body",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EmailTemplateParametersContractProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var EmailTemplateContract = {
        serializedName: "EmailTemplateContract",
        type: {
            name: "Composite",
            className: "EmailTemplateContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { subject: {
                    required: true,
                    serializedName: "properties.subject",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, body: {
                    required: true,
                    serializedName: "properties.body",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, title: {
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isDefault: {
                    readOnly: true,
                    serializedName: "properties.isDefault",
                    type: {
                        name: "Boolean"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EmailTemplateParametersContractProperties"
                            }
                        }
                    }
                } })
        }
    };
    var AssociationContract = {
        serializedName: "AssociationContract",
        type: {
            name: "Composite",
            className: "AssociationContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "created"
                        ]
                    }
                } })
        }
    };
    var GatewayHostnameConfigurationContract = {
        serializedName: "GatewayHostnameConfigurationContract",
        type: {
            name: "Composite",
            className: "GatewayHostnameConfigurationContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { hostname: {
                    serializedName: "properties.hostname",
                    type: {
                        name: "String"
                    }
                }, certificateId: {
                    serializedName: "properties.certificateId",
                    type: {
                        name: "String"
                    }
                }, negotiateClientCertificate: {
                    serializedName: "properties.negotiateClientCertificate",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var GatewayTokenContract = {
        serializedName: "GatewayTokenContract",
        type: {
            name: "Composite",
            className: "GatewayTokenContract",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayTokenRequestContract = {
        serializedName: "GatewayTokenRequestContract",
        type: {
            name: "Composite",
            className: "GatewayTokenRequestContract",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    defaultValue: 'primary',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "primary",
                            "secondary"
                        ]
                    }
                },
                expiry: {
                    required: true,
                    serializedName: "expiry",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var GatewayKeyRegenerationRequestContract = {
        serializedName: "GatewayKeyRegenerationRequestContract",
        type: {
            name: "Composite",
            className: "GatewayKeyRegenerationRequestContract",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "primary",
                            "secondary"
                        ]
                    }
                }
            }
        }
    };
    var GatewayKeysContract = {
        serializedName: "GatewayKeysContract",
        type: {
            name: "Composite",
            className: "GatewayKeysContract",
            modelProperties: {
                primary: {
                    serializedName: "primary",
                    type: {
                        name: "String"
                    }
                },
                secondary: {
                    serializedName: "secondary",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceLocationDataContract = {
        serializedName: "ResourceLocationDataContract",
        type: {
            name: "Composite",
            className: "ResourceLocationDataContract",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                city: {
                    serializedName: "city",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                district: {
                    serializedName: "district",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                countryOrRegion: {
                    serializedName: "countryOrRegion",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayContract = {
        serializedName: "GatewayContract",
        type: {
            name: "Composite",
            className: "GatewayContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { locationData: {
                    serializedName: "properties.locationData",
                    type: {
                        name: "Composite",
                        className: "ResourceLocationDataContract"
                    }
                }, description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UserIdentityContract = {
        serializedName: "UserIdentityContract",
        type: {
            name: "Composite",
            className: "UserIdentityContract",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserEntityBaseParameters = {
        serializedName: "UserEntityBaseParameters",
        type: {
            name: "Composite",
            className: "UserEntityBaseParameters",
            modelProperties: {
                state: {
                    serializedName: "state",
                    defaultValue: 'active',
                    type: {
                        name: "String"
                    }
                },
                note: {
                    serializedName: "note",
                    type: {
                        name: "String"
                    }
                },
                identities: {
                    serializedName: "identities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserIdentityContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var GroupContractProperties = {
        serializedName: "GroupContractProperties",
        type: {
            name: "Composite",
            className: "GroupContractProperties",
            modelProperties: {
                displayName: {
                    required: true,
                    serializedName: "displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                },
                builtIn: {
                    readOnly: true,
                    serializedName: "builtIn",
                    type: {
                        name: "Boolean"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "custom",
                            "system",
                            "external"
                        ]
                    }
                },
                externalId: {
                    serializedName: "externalId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserContract = {
        serializedName: "UserContract",
        type: {
            name: "Composite",
            className: "UserContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { state: {
                    serializedName: "properties.state",
                    defaultValue: 'active',
                    type: {
                        name: "String"
                    }
                }, note: {
                    serializedName: "properties.note",
                    type: {
                        name: "String"
                    }
                }, identities: {
                    serializedName: "properties.identities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserIdentityContract"
                            }
                        }
                    }
                }, firstName: {
                    serializedName: "properties.firstName",
                    type: {
                        name: "String"
                    }
                }, lastName: {
                    serializedName: "properties.lastName",
                    type: {
                        name: "String"
                    }
                }, email: {
                    serializedName: "properties.email",
                    type: {
                        name: "String"
                    }
                }, registrationDate: {
                    serializedName: "properties.registrationDate",
                    type: {
                        name: "DateTime"
                    }
                }, groups: {
                    readOnly: true,
                    serializedName: "properties.groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GroupContractProperties"
                            }
                        }
                    }
                } })
        }
    };
    var GroupUpdateParameters = {
        serializedName: "GroupUpdateParameters",
        type: {
            name: "Composite",
            className: "GroupUpdateParameters",
            modelProperties: {
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "properties.type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "custom",
                            "system",
                            "external"
                        ]
                    }
                },
                externalId: {
                    serializedName: "properties.externalId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupContract = {
        serializedName: "GroupContract",
        type: {
            name: "Composite",
            className: "GroupContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 1000
                    },
                    type: {
                        name: "String"
                    }
                }, builtIn: {
                    readOnly: true,
                    serializedName: "properties.builtIn",
                    type: {
                        name: "Boolean"
                    }
                }, groupContractType: {
                    serializedName: "properties.type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "custom",
                            "system",
                            "external"
                        ]
                    }
                }, externalId: {
                    serializedName: "properties.externalId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GroupCreateParameters = {
        serializedName: "GroupCreateParameters",
        type: {
            name: "Composite",
            className: "GroupCreateParameters",
            modelProperties: {
                displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "properties.type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "custom",
                            "system",
                            "external"
                        ]
                    }
                },
                externalId: {
                    serializedName: "properties.externalId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderBaseParameters = {
        serializedName: "IdentityProviderBaseParameters",
        type: {
            name: "Composite",
            className: "IdentityProviderBaseParameters",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                signinTenant: {
                    serializedName: "signinTenant",
                    type: {
                        name: "String"
                    }
                },
                allowedTenants: {
                    serializedName: "allowedTenants",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                authority: {
                    serializedName: "authority",
                    type: {
                        name: "String"
                    }
                },
                signupPolicyName: {
                    serializedName: "signupPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                signinPolicyName: {
                    serializedName: "signinPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                profileEditingPolicyName: {
                    serializedName: "profileEditingPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                passwordResetPolicyName: {
                    serializedName: "passwordResetPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderUpdateParameters = {
        serializedName: "IdentityProviderUpdateParameters",
        type: {
            name: "Composite",
            className: "IdentityProviderUpdateParameters",
            modelProperties: {
                type: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                },
                signinTenant: {
                    serializedName: "properties.signinTenant",
                    type: {
                        name: "String"
                    }
                },
                allowedTenants: {
                    serializedName: "properties.allowedTenants",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                authority: {
                    serializedName: "properties.authority",
                    type: {
                        name: "String"
                    }
                },
                signupPolicyName: {
                    serializedName: "properties.signupPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                signinPolicyName: {
                    serializedName: "properties.signinPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                profileEditingPolicyName: {
                    serializedName: "properties.profileEditingPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                passwordResetPolicyName: {
                    serializedName: "properties.passwordResetPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    serializedName: "properties.clientId",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    serializedName: "properties.clientSecret",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderContract = {
        serializedName: "IdentityProviderContract",
        type: {
            name: "Composite",
            className: "IdentityProviderContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { identityProviderContractType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, signinTenant: {
                    serializedName: "properties.signinTenant",
                    type: {
                        name: "String"
                    }
                }, allowedTenants: {
                    serializedName: "properties.allowedTenants",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, authority: {
                    serializedName: "properties.authority",
                    type: {
                        name: "String"
                    }
                }, signupPolicyName: {
                    serializedName: "properties.signupPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, signinPolicyName: {
                    serializedName: "properties.signinPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, profileEditingPolicyName: {
                    serializedName: "properties.profileEditingPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, passwordResetPolicyName: {
                    serializedName: "properties.passwordResetPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "properties.clientId",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, clientSecret: {
                    serializedName: "properties.clientSecret",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IdentityProviderCreateContract = {
        serializedName: "IdentityProviderCreateContract",
        type: {
            name: "Composite",
            className: "IdentityProviderCreateContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { identityProviderCreateContractType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, signinTenant: {
                    serializedName: "properties.signinTenant",
                    type: {
                        name: "String"
                    }
                }, allowedTenants: {
                    serializedName: "properties.allowedTenants",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, authority: {
                    serializedName: "properties.authority",
                    type: {
                        name: "String"
                    }
                }, signupPolicyName: {
                    serializedName: "properties.signupPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, signinPolicyName: {
                    serializedName: "properties.signinPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, profileEditingPolicyName: {
                    serializedName: "properties.profileEditingPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, passwordResetPolicyName: {
                    serializedName: "properties.passwordResetPolicyName",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "properties.clientId",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, clientSecret: {
                    required: true,
                    serializedName: "properties.clientSecret",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LoggerUpdateContract = {
        serializedName: "LoggerUpdateContract",
        type: {
            name: "Composite",
            className: "LoggerUpdateContract",
            modelProperties: {
                loggerType: {
                    serializedName: "properties.loggerType",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                credentials: {
                    serializedName: "properties.credentials",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isBuffered: {
                    serializedName: "properties.isBuffered",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var LoggerContract = {
        serializedName: "LoggerContract",
        type: {
            name: "Composite",
            className: "LoggerContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { loggerType: {
                    required: true,
                    serializedName: "properties.loggerType",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                }, credentials: {
                    required: true,
                    serializedName: "properties.credentials",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isBuffered: {
                    serializedName: "properties.isBuffered",
                    type: {
                        name: "Boolean"
                    }
                }, resourceId: {
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PropertyValueContract = {
        serializedName: "PropertyValueContract",
        type: {
            name: "Composite",
            className: "PropertyValueContract",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueEntityBaseParameters = {
        serializedName: "NamedValueEntityBaseParameters",
        type: {
            name: "Composite",
            className: "NamedValueEntityBaseParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var NamedValueContract = {
        serializedName: "NamedValueContract",
        type: {
            name: "Composite",
            className: "NamedValueContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "properties.tags",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, secret: {
                    serializedName: "properties.secret",
                    type: {
                        name: "Boolean"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1,
                        Pattern: /^[A-Za-z0-9-._]+$/
                    },
                    type: {
                        name: "String"
                    }
                }, value: {
                    serializedName: "properties.value",
                    constraints: {
                        MaxLength: 4096,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NamedValueUpdateParameters = {
        serializedName: "NamedValueUpdateParameters",
        type: {
            name: "Composite",
            className: "NamedValueUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "properties.tags",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                secret: {
                    serializedName: "properties.secret",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1,
                        Pattern: /^[A-Za-z0-9-._]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "properties.value",
                    constraints: {
                        MaxLength: 4096,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueCreateContract = {
        serializedName: "NamedValueCreateContract",
        type: {
            name: "Composite",
            className: "NamedValueCreateContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "properties.tags",
                    constraints: {
                        MaxItems: 32
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, secret: {
                    serializedName: "properties.secret",
                    type: {
                        name: "Boolean"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1,
                        Pattern: /^[A-Za-z0-9-._]+$/
                    },
                    type: {
                        name: "String"
                    }
                }, value: {
                    required: true,
                    serializedName: "properties.value",
                    constraints: {
                        MaxLength: 4096,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ConnectivityStatusContract = {
        serializedName: "ConnectivityStatusContract",
        type: {
            name: "Composite",
            className: "ConnectivityStatusContract",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "String"
                    }
                },
                lastUpdated: {
                    required: true,
                    serializedName: "lastUpdated",
                    type: {
                        name: "DateTime"
                    }
                },
                lastStatusChange: {
                    required: true,
                    serializedName: "lastStatusChange",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var NetworkStatusContract = {
        serializedName: "NetworkStatusContract",
        type: {
            name: "Composite",
            className: "NetworkStatusContract",
            modelProperties: {
                dnsServers: {
                    required: true,
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                connectivityStatus: {
                    required: true,
                    serializedName: "connectivityStatus",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectivityStatusContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkStatusContractByLocation = {
        serializedName: "NetworkStatusContractByLocation",
        type: {
            name: "Composite",
            className: "NetworkStatusContractByLocation",
            modelProperties: {
                location: {
                    serializedName: "location",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                networkStatus: {
                    serializedName: "networkStatus",
                    type: {
                        name: "Composite",
                        className: "NetworkStatusContract"
                    }
                }
            }
        }
    };
    var RecipientEmailContract = {
        serializedName: "RecipientEmailContract",
        type: {
            name: "Composite",
            className: "RecipientEmailContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { email: {
                    serializedName: "properties.email",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecipientEmailCollection = {
        serializedName: "RecipientEmailCollection",
        type: {
            name: "Composite",
            className: "RecipientEmailCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecipientEmailContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecipientUserContract = {
        serializedName: "RecipientUserContract",
        type: {
            name: "Composite",
            className: "RecipientUserContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { userId: {
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecipientUserCollection = {
        serializedName: "RecipientUserCollection",
        type: {
            name: "Composite",
            className: "RecipientUserCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecipientUserContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecipientsContractProperties = {
        serializedName: "RecipientsContractProperties",
        type: {
            name: "Composite",
            className: "RecipientsContractProperties",
            modelProperties: {
                emails: {
                    serializedName: "emails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                users: {
                    serializedName: "users",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NotificationContract = {
        serializedName: "NotificationContract",
        type: {
            name: "Composite",
            className: "NotificationContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { title: {
                    required: true,
                    serializedName: "properties.title",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, recipients: {
                    serializedName: "properties.recipients",
                    type: {
                        name: "Composite",
                        className: "RecipientsContractProperties"
                    }
                } })
        }
    };
    var OpenidConnectProviderUpdateContract = {
        serializedName: "OpenidConnectProviderUpdateContract",
        type: {
            name: "Composite",
            className: "OpenidConnectProviderUpdateContract",
            modelProperties: {
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 50
                    },
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                metadataEndpoint: {
                    serializedName: "properties.metadataEndpoint",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    serializedName: "properties.clientSecret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenidConnectProviderContract = {
        serializedName: "OpenidConnectProviderContract",
        type: {
            name: "Composite",
            className: "OpenidConnectProviderContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 50
                    },
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, metadataEndpoint: {
                    required: true,
                    serializedName: "properties.metadataEndpoint",
                    type: {
                        name: "String"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientSecret: {
                    serializedName: "properties.clientSecret",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PolicyDescriptionContract = {
        serializedName: "PolicyDescriptionContract",
        type: {
            name: "Composite",
            className: "PolicyDescriptionContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, scope: {
                    readOnly: true,
                    serializedName: "properties.scope",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var PolicyDescriptionCollection = {
        serializedName: "PolicyDescriptionCollection",
        type: {
            name: "Composite",
            className: "PolicyDescriptionCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyDescriptionContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PortalSettingValidationKeyContract = {
        serializedName: "PortalSettingValidationKeyContract",
        type: {
            name: "Composite",
            className: "PortalSettingValidationKeyContract",
            modelProperties: {
                validationKey: {
                    serializedName: "validationKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistrationDelegationSettingsProperties = {
        serializedName: "RegistrationDelegationSettingsProperties",
        type: {
            name: "Composite",
            className: "RegistrationDelegationSettingsProperties",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SubscriptionsDelegationSettingsProperties = {
        serializedName: "SubscriptionsDelegationSettingsProperties",
        type: {
            name: "Composite",
            className: "SubscriptionsDelegationSettingsProperties",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PortalDelegationSettings = {
        serializedName: "PortalDelegationSettings",
        type: {
            name: "Composite",
            className: "PortalDelegationSettings",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { url: {
                    serializedName: "properties.url",
                    type: {
                        name: "String"
                    }
                }, validationKey: {
                    serializedName: "properties.validationKey",
                    type: {
                        name: "String"
                    }
                }, subscriptions: {
                    serializedName: "properties.subscriptions",
                    type: {
                        name: "Composite",
                        className: "SubscriptionsDelegationSettingsProperties"
                    }
                }, userRegistration: {
                    serializedName: "properties.userRegistration",
                    type: {
                        name: "Composite",
                        className: "RegistrationDelegationSettingsProperties"
                    }
                } })
        }
    };
    var TermsOfServiceProperties = {
        serializedName: "TermsOfServiceProperties",
        type: {
            name: "Composite",
            className: "TermsOfServiceProperties",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                consentRequired: {
                    serializedName: "consentRequired",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PortalSignupSettings = {
        serializedName: "PortalSignupSettings",
        type: {
            name: "Composite",
            className: "PortalSignupSettings",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, termsOfService: {
                    serializedName: "properties.termsOfService",
                    type: {
                        name: "Composite",
                        className: "TermsOfServiceProperties"
                    }
                } })
        }
    };
    var PortalSigninSettings = {
        serializedName: "PortalSigninSettings",
        type: {
            name: "Composite",
            className: "PortalSigninSettings",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var SubscriptionContract = {
        serializedName: "SubscriptionContract",
        type: {
            name: "Composite",
            className: "SubscriptionContract",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { ownerId: {
                    serializedName: "properties.ownerId",
                    type: {
                        name: "String"
                    }
                }, scope: {
                    required: true,
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "suspended",
                            "active",
                            "expired",
                            "submitted",
                            "rejected",
                            "cancelled"
                        ]
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, startDate: {
                    serializedName: "properties.startDate",
                    type: {
                        name: "DateTime"
                    }
                }, expirationDate: {
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                }, endDate: {
                    serializedName: "properties.endDate",
                    type: {
                        name: "DateTime"
                    }
                }, notificationDate: {
                    serializedName: "properties.notificationDate",
                    type: {
                        name: "DateTime"
                    }
                }, primaryKey: {
                    serializedName: "properties.primaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, secondaryKey: {
                    serializedName: "properties.secondaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, stateComment: {
                    serializedName: "properties.stateComment",
                    type: {
                        name: "String"
                    }
                }, allowTracing: {
                    serializedName: "properties.allowTracing",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ProductUpdateParameters = {
        serializedName: "ProductUpdateParameters",
        type: {
            name: "Composite",
            className: "ProductUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 1000,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                terms: {
                    serializedName: "properties.terms",
                    type: {
                        name: "String"
                    }
                },
                subscriptionRequired: {
                    serializedName: "properties.subscriptionRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                approvalRequired: {
                    serializedName: "properties.approvalRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                subscriptionsLimit: {
                    serializedName: "properties.subscriptionsLimit",
                    type: {
                        name: "Number"
                    }
                },
                state: {
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "notPublished",
                            "published"
                        ]
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 300,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QuotaCounterValueContractProperties = {
        serializedName: "QuotaCounterValueContractProperties",
        type: {
            name: "Composite",
            className: "QuotaCounterValueContractProperties",
            modelProperties: {
                callsCount: {
                    serializedName: "callsCount",
                    type: {
                        name: "Number"
                    }
                },
                kbTransferred: {
                    serializedName: "kbTransferred",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var QuotaCounterContract = {
        serializedName: "QuotaCounterContract",
        type: {
            name: "Composite",
            className: "QuotaCounterContract",
            modelProperties: {
                counterKey: {
                    required: true,
                    serializedName: "counterKey",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                periodKey: {
                    required: true,
                    serializedName: "periodKey",
                    constraints: {
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                periodStartTime: {
                    required: true,
                    serializedName: "periodStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                periodEndTime: {
                    required: true,
                    serializedName: "periodEndTime",
                    type: {
                        name: "DateTime"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        className: "QuotaCounterValueContractProperties"
                    }
                }
            }
        }
    };
    var QuotaCounterCollection = {
        serializedName: "QuotaCounterCollection",
        type: {
            name: "Composite",
            className: "QuotaCounterCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QuotaCounterContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RequestReportRecordContract = {
        serializedName: "RequestReportRecordContract",
        type: {
            name: "Composite",
            className: "RequestReportRecordContract",
            modelProperties: {
                apiId: {
                    serializedName: "apiId",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                productId: {
                    readOnly: true,
                    serializedName: "productId",
                    type: {
                        name: "String"
                    }
                },
                userId: {
                    readOnly: true,
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                backendResponseCode: {
                    serializedName: "backendResponseCode",
                    type: {
                        name: "String"
                    }
                },
                responseCode: {
                    serializedName: "responseCode",
                    type: {
                        name: "Number"
                    }
                },
                responseSize: {
                    serializedName: "responseSize",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                cache: {
                    serializedName: "cache",
                    type: {
                        name: "String"
                    }
                },
                apiTime: {
                    serializedName: "apiTime",
                    type: {
                        name: "Number"
                    }
                },
                serviceTime: {
                    serializedName: "serviceTime",
                    type: {
                        name: "Number"
                    }
                },
                apiRegion: {
                    serializedName: "apiRegion",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                requestSize: {
                    serializedName: "requestSize",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ReportRecordContract = {
        serializedName: "ReportRecordContract",
        type: {
            name: "Composite",
            className: "ReportRecordContract",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "String"
                    }
                },
                country: {
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                },
                region: {
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                },
                zip: {
                    serializedName: "zip",
                    type: {
                        name: "String"
                    }
                },
                userId: {
                    readOnly: true,
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                productId: {
                    readOnly: true,
                    serializedName: "productId",
                    type: {
                        name: "String"
                    }
                },
                apiId: {
                    serializedName: "apiId",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                apiRegion: {
                    serializedName: "apiRegion",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                callCountSuccess: {
                    serializedName: "callCountSuccess",
                    type: {
                        name: "Number"
                    }
                },
                callCountBlocked: {
                    serializedName: "callCountBlocked",
                    type: {
                        name: "Number"
                    }
                },
                callCountFailed: {
                    serializedName: "callCountFailed",
                    type: {
                        name: "Number"
                    }
                },
                callCountOther: {
                    serializedName: "callCountOther",
                    type: {
                        name: "Number"
                    }
                },
                callCountTotal: {
                    serializedName: "callCountTotal",
                    type: {
                        name: "Number"
                    }
                },
                bandwidth: {
                    serializedName: "bandwidth",
                    type: {
                        name: "Number"
                    }
                },
                cacheHitCount: {
                    serializedName: "cacheHitCount",
                    type: {
                        name: "Number"
                    }
                },
                cacheMissCount: {
                    serializedName: "cacheMissCount",
                    type: {
                        name: "Number"
                    }
                },
                apiTimeAvg: {
                    serializedName: "apiTimeAvg",
                    type: {
                        name: "Number"
                    }
                },
                apiTimeMin: {
                    serializedName: "apiTimeMin",
                    type: {
                        name: "Number"
                    }
                },
                apiTimeMax: {
                    serializedName: "apiTimeMax",
                    type: {
                        name: "Number"
                    }
                },
                serviceTimeAvg: {
                    serializedName: "serviceTimeAvg",
                    type: {
                        name: "Number"
                    }
                },
                serviceTimeMin: {
                    serializedName: "serviceTimeMin",
                    type: {
                        name: "Number"
                    }
                },
                serviceTimeMax: {
                    serializedName: "serviceTimeMax",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SubscriptionKeysContract = {
        serializedName: "SubscriptionKeysContract",
        type: {
            name: "Composite",
            className: "SubscriptionKeysContract",
            modelProperties: {
                primaryKey: {
                    serializedName: "primaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionUpdateParameters = {
        serializedName: "SubscriptionUpdateParameters",
        type: {
            name: "Composite",
            className: "SubscriptionUpdateParameters",
            modelProperties: {
                ownerId: {
                    serializedName: "properties.ownerId",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                },
                expirationDate: {
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "properties.primaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "properties.secondaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "suspended",
                            "active",
                            "expired",
                            "submitted",
                            "rejected",
                            "cancelled"
                        ]
                    }
                },
                stateComment: {
                    serializedName: "properties.stateComment",
                    type: {
                        name: "String"
                    }
                },
                allowTracing: {
                    serializedName: "properties.allowTracing",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SubscriptionCreateParameters = {
        serializedName: "SubscriptionCreateParameters",
        type: {
            name: "Composite",
            className: "SubscriptionCreateParameters",
            modelProperties: {
                ownerId: {
                    serializedName: "properties.ownerId",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    required: true,
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "properties.primaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "properties.secondaryKey",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "suspended",
                            "active",
                            "expired",
                            "submitted",
                            "rejected",
                            "cancelled"
                        ]
                    }
                },
                allowTracing: {
                    serializedName: "properties.allowTracing",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var TagCreateUpdateParameters = {
        serializedName: "TagCreateUpdateParameters",
        type: {
            name: "Composite",
            className: "TagCreateUpdateParameters",
            modelProperties: {
                displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 160,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantConfigurationSyncStateContract = {
        serializedName: "TenantConfigurationSyncStateContract",
        type: {
            name: "Composite",
            className: "TenantConfigurationSyncStateContract",
            modelProperties: {
                branch: {
                    serializedName: "branch",
                    type: {
                        name: "String"
                    }
                },
                commitId: {
                    serializedName: "commitId",
                    type: {
                        name: "String"
                    }
                },
                isExport: {
                    serializedName: "isExport",
                    type: {
                        name: "Boolean"
                    }
                },
                isSynced: {
                    serializedName: "isSynced",
                    type: {
                        name: "Boolean"
                    }
                },
                isGitEnabled: {
                    serializedName: "isGitEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                syncDate: {
                    serializedName: "syncDate",
                    type: {
                        name: "DateTime"
                    }
                },
                configurationChangeDate: {
                    serializedName: "configurationChangeDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var OperationResultLogItemContract = {
        serializedName: "OperationResultLogItemContract",
        type: {
            name: "Composite",
            className: "OperationResultLogItemContract",
            modelProperties: {
                objectType: {
                    serializedName: "objectType",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                objectKey: {
                    serializedName: "objectKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationResultContract = {
        serializedName: "OperationResultContract",
        type: {
            name: "Composite",
            className: "OperationResultContract",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Started",
                            "InProgress",
                            "Succeeded",
                            "Failed"
                        ]
                    }
                },
                started: {
                    serializedName: "started",
                    type: {
                        name: "DateTime"
                    }
                },
                updated: {
                    serializedName: "updated",
                    type: {
                        name: "DateTime"
                    }
                },
                resultInfo: {
                    serializedName: "resultInfo",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponseBody"
                    }
                },
                actionLog: {
                    readOnly: true,
                    serializedName: "actionLog",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationResultLogItemContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeployConfigurationParameters = {
        serializedName: "DeployConfigurationParameters",
        type: {
            name: "Composite",
            className: "DeployConfigurationParameters",
            modelProperties: {
                branch: {
                    required: true,
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                },
                force: {
                    serializedName: "properties.force",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SaveConfigurationParameter = {
        serializedName: "SaveConfigurationParameter",
        type: {
            name: "Composite",
            className: "SaveConfigurationParameter",
            modelProperties: {
                branch: {
                    required: true,
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                },
                force: {
                    serializedName: "properties.force",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AccessInformationContract = {
        serializedName: "AccessInformationContract",
        type: {
            name: "Composite",
            className: "AccessInformationContract",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AccessInformationUpdateParameters = {
        serializedName: "AccessInformationUpdateParameters",
        type: {
            name: "Composite",
            className: "AccessInformationUpdateParameters",
            modelProperties: {
                enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var UserTokenResult = {
        serializedName: "UserTokenResult",
        type: {
            name: "Composite",
            className: "UserTokenResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserTokenParameters = {
        serializedName: "UserTokenParameters",
        type: {
            name: "Composite",
            className: "UserTokenParameters",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "properties.keyType",
                    defaultValue: 'primary',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "primary",
                            "secondary"
                        ]
                    }
                },
                expiry: {
                    required: true,
                    serializedName: "properties.expiry",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var GenerateSsoUrlResult = {
        serializedName: "GenerateSsoUrlResult",
        type: {
            name: "Composite",
            className: "GenerateSsoUrlResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserUpdateParameters = {
        serializedName: "UserUpdateParameters",
        type: {
            name: "Composite",
            className: "UserUpdateParameters",
            modelProperties: {
                state: {
                    serializedName: "properties.state",
                    defaultValue: 'active',
                    type: {
                        name: "String"
                    }
                },
                note: {
                    serializedName: "properties.note",
                    type: {
                        name: "String"
                    }
                },
                identities: {
                    serializedName: "properties.identities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserIdentityContract"
                            }
                        }
                    }
                },
                email: {
                    serializedName: "properties.email",
                    constraints: {
                        MaxLength: 254,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                },
                firstName: {
                    serializedName: "properties.firstName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                lastName: {
                    serializedName: "properties.lastName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserCreateParameters = {
        serializedName: "UserCreateParameters",
        type: {
            name: "Composite",
            className: "UserCreateParameters",
            modelProperties: {
                state: {
                    serializedName: "properties.state",
                    defaultValue: 'active',
                    type: {
                        name: "String"
                    }
                },
                note: {
                    serializedName: "properties.note",
                    type: {
                        name: "String"
                    }
                },
                identities: {
                    serializedName: "properties.identities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserIdentityContract"
                            }
                        }
                    }
                },
                email: {
                    required: true,
                    serializedName: "properties.email",
                    constraints: {
                        MaxLength: 254,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                firstName: {
                    required: true,
                    serializedName: "properties.firstName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                lastName: {
                    required: true,
                    serializedName: "properties.lastName",
                    constraints: {
                        MaxLength: 100,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                },
                appType: {
                    serializedName: "properties.appType",
                    type: {
                        name: "String"
                    }
                },
                confirmation: {
                    serializedName: "properties.confirmation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiRevisionInfoContract = {
        serializedName: "ApiRevisionInfoContract",
        type: {
            name: "Composite",
            className: "ApiRevisionInfoContract",
            modelProperties: {
                sourceApiId: {
                    serializedName: "sourceApiId",
                    type: {
                        name: "String"
                    }
                },
                apiVersionName: {
                    serializedName: "apiVersionName",
                    constraints: {
                        MaxLength: 100
                    },
                    type: {
                        name: "String"
                    }
                },
                apiRevisionDescription: {
                    serializedName: "apiRevisionDescription",
                    constraints: {
                        MaxLength: 256
                    },
                    type: {
                        name: "String"
                    }
                },
                apiVersionSet: {
                    serializedName: "apiVersionSet",
                    type: {
                        name: "Composite",
                        className: "ApiVersionSetContractDetails"
                    }
                }
            }
        }
    };
    var QuotaCounterValueContract = {
        serializedName: "QuotaCounterValueContract",
        type: {
            name: "Composite",
            className: "QuotaCounterValueContract",
            modelProperties: {
                callsCount: {
                    serializedName: "value.callsCount",
                    type: {
                        name: "Number"
                    }
                },
                kbTransferred: {
                    serializedName: "value.kbTransferred",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApiGetEntityTagHeaders = {
        serializedName: "api-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiGetHeaders = {
        serializedName: "api-get-headers",
        type: {
            name: "Composite",
            className: "ApiGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiCreateOrUpdateHeaders = {
        serializedName: "api-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiReleaseGetEntityTagHeaders = {
        serializedName: "apirelease-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiReleaseGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiReleaseGetHeaders = {
        serializedName: "apirelease-get-headers",
        type: {
            name: "Composite",
            className: "ApiReleaseGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiReleaseCreateOrUpdateHeaders = {
        serializedName: "apirelease-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiReleaseCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiOperationGetEntityTagHeaders = {
        serializedName: "apioperation-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiOperationGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiOperationGetHeaders = {
        serializedName: "apioperation-get-headers",
        type: {
            name: "Composite",
            className: "ApiOperationGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiOperationCreateOrUpdateHeaders = {
        serializedName: "apioperation-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiOperationCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiOperationPolicyGetEntityTagHeaders = {
        serializedName: "apioperationpolicy-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiOperationPolicyGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiOperationPolicyGetHeaders = {
        serializedName: "apioperationpolicy-get-headers",
        type: {
            name: "Composite",
            className: "ApiOperationPolicyGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiOperationPolicyCreateOrUpdateHeaders = {
        serializedName: "apioperationpolicy-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiOperationPolicyCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetEntityStateByOperationHeaders = {
        serializedName: "tag-getentitystatebyoperation-headers",
        type: {
            name: "Composite",
            className: "TagGetEntityStateByOperationHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetByOperationHeaders = {
        serializedName: "tag-getbyoperation-headers",
        type: {
            name: "Composite",
            className: "TagGetByOperationHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiPolicyGetEntityTagHeaders = {
        serializedName: "apipolicy-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiPolicyGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiPolicyGetHeaders = {
        serializedName: "apipolicy-get-headers",
        type: {
            name: "Composite",
            className: "ApiPolicyGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiPolicyCreateOrUpdateHeaders = {
        serializedName: "apipolicy-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiPolicyCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiSchemaGetEntityTagHeaders = {
        serializedName: "apischema-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiSchemaGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiSchemaGetHeaders = {
        serializedName: "apischema-get-headers",
        type: {
            name: "Composite",
            className: "ApiSchemaGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiSchemaCreateOrUpdateHeaders = {
        serializedName: "apischema-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiSchemaCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiDiagnosticGetEntityTagHeaders = {
        serializedName: "apidiagnostic-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiDiagnosticGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiDiagnosticGetHeaders = {
        serializedName: "apidiagnostic-get-headers",
        type: {
            name: "Composite",
            className: "ApiDiagnosticGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiDiagnosticCreateOrUpdateHeaders = {
        serializedName: "apidiagnostic-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiDiagnosticCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueGetEntityTagHeaders = {
        serializedName: "apiissue-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiIssueGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueGetHeaders = {
        serializedName: "apiissue-get-headers",
        type: {
            name: "Composite",
            className: "ApiIssueGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueCreateOrUpdateHeaders = {
        serializedName: "apiissue-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiIssueCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueCommentGetEntityTagHeaders = {
        serializedName: "apiissuecomment-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiIssueCommentGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueCommentGetHeaders = {
        serializedName: "apiissuecomment-get-headers",
        type: {
            name: "Composite",
            className: "ApiIssueCommentGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueCommentCreateOrUpdateHeaders = {
        serializedName: "apiissuecomment-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiIssueCommentCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueAttachmentGetEntityTagHeaders = {
        serializedName: "apiissueattachment-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiIssueAttachmentGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueAttachmentGetHeaders = {
        serializedName: "apiissueattachment-get-headers",
        type: {
            name: "Composite",
            className: "ApiIssueAttachmentGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiIssueAttachmentCreateOrUpdateHeaders = {
        serializedName: "apiissueattachment-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiIssueAttachmentCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiTagDescriptionGetEntityTagHeaders = {
        serializedName: "apitagdescription-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiTagDescriptionGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiTagDescriptionGetHeaders = {
        serializedName: "apitagdescription-get-headers",
        type: {
            name: "Composite",
            className: "ApiTagDescriptionGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiTagDescriptionCreateOrUpdateHeaders = {
        serializedName: "apitagdescription-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiTagDescriptionCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetEntityStateByApiHeaders = {
        serializedName: "tag-getentitystatebyapi-headers",
        type: {
            name: "Composite",
            className: "TagGetEntityStateByApiHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetByApiHeaders = {
        serializedName: "tag-getbyapi-headers",
        type: {
            name: "Composite",
            className: "TagGetByApiHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagAssignToApiHeaders = {
        serializedName: "tag-assigntoapi-headers",
        type: {
            name: "Composite",
            className: "TagAssignToApiHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetGetEntityTagHeaders = {
        serializedName: "apiversionset-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ApiVersionSetGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetGetHeaders = {
        serializedName: "apiversionset-get-headers",
        type: {
            name: "Composite",
            className: "ApiVersionSetGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetCreateOrUpdateHeaders = {
        serializedName: "apiversionset-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ApiVersionSetCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationServerGetEntityTagHeaders = {
        serializedName: "authorizationserver-getentitytag-headers",
        type: {
            name: "Composite",
            className: "AuthorizationServerGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationServerGetHeaders = {
        serializedName: "authorizationserver-get-headers",
        type: {
            name: "Composite",
            className: "AuthorizationServerGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationServerCreateOrUpdateHeaders = {
        serializedName: "authorizationserver-createorupdate-headers",
        type: {
            name: "Composite",
            className: "AuthorizationServerCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendGetEntityTagHeaders = {
        serializedName: "backend-getentitytag-headers",
        type: {
            name: "Composite",
            className: "BackendGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendGetHeaders = {
        serializedName: "backend-get-headers",
        type: {
            name: "Composite",
            className: "BackendGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendCreateOrUpdateHeaders = {
        serializedName: "backend-createorupdate-headers",
        type: {
            name: "Composite",
            className: "BackendCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CacheGetEntityTagHeaders = {
        serializedName: "cache-getentitytag-headers",
        type: {
            name: "Composite",
            className: "CacheGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CacheGetHeaders = {
        serializedName: "cache-get-headers",
        type: {
            name: "Composite",
            className: "CacheGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CacheCreateOrUpdateHeaders = {
        serializedName: "cache-createorupdate-headers",
        type: {
            name: "Composite",
            className: "CacheCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateGetEntityTagHeaders = {
        serializedName: "certificate-getentitytag-headers",
        type: {
            name: "Composite",
            className: "CertificateGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateGetHeaders = {
        serializedName: "certificate-get-headers",
        type: {
            name: "Composite",
            className: "CertificateGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateCreateOrUpdateHeaders = {
        serializedName: "certificate-createorupdate-headers",
        type: {
            name: "Composite",
            className: "CertificateCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticGetEntityTagHeaders = {
        serializedName: "diagnostic-getentitytag-headers",
        type: {
            name: "Composite",
            className: "DiagnosticGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticGetHeaders = {
        serializedName: "diagnostic-get-headers",
        type: {
            name: "Composite",
            className: "DiagnosticGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticCreateOrUpdateHeaders = {
        serializedName: "diagnostic-createorupdate-headers",
        type: {
            name: "Composite",
            className: "DiagnosticCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EmailTemplateGetEntityTagHeaders = {
        serializedName: "emailtemplate-getentitytag-headers",
        type: {
            name: "Composite",
            className: "EmailTemplateGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EmailTemplateGetHeaders = {
        serializedName: "emailtemplate-get-headers",
        type: {
            name: "Composite",
            className: "EmailTemplateGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayGetEntityTagHeaders = {
        serializedName: "gateway-getentitytag-headers",
        type: {
            name: "Composite",
            className: "GatewayGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayGetHeaders = {
        serializedName: "gateway-get-headers",
        type: {
            name: "Composite",
            className: "GatewayGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayCreateOrUpdateHeaders = {
        serializedName: "gateway-createorupdate-headers",
        type: {
            name: "Composite",
            className: "GatewayCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayListKeysHeaders = {
        serializedName: "gateway-listkeys-headers",
        type: {
            name: "Composite",
            className: "GatewayListKeysHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayHostnameConfigurationGetEntityTagHeaders = {
        serializedName: "gatewayhostnameconfiguration-getentitytag-headers",
        type: {
            name: "Composite",
            className: "GatewayHostnameConfigurationGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayHostnameConfigurationGetHeaders = {
        serializedName: "gatewayhostnameconfiguration-get-headers",
        type: {
            name: "Composite",
            className: "GatewayHostnameConfigurationGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayHostnameConfigurationCreateOrUpdateHeaders = {
        serializedName: "gatewayhostnameconfiguration-createorupdate-headers",
        type: {
            name: "Composite",
            className: "GatewayHostnameConfigurationCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayApiGetEntityTagHeaders = {
        serializedName: "gatewayapi-getentitytag-headers",
        type: {
            name: "Composite",
            className: "GatewayApiGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupGetEntityTagHeaders = {
        serializedName: "group-getentitytag-headers",
        type: {
            name: "Composite",
            className: "GroupGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupGetHeaders = {
        serializedName: "group-get-headers",
        type: {
            name: "Composite",
            className: "GroupGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupCreateOrUpdateHeaders = {
        serializedName: "group-createorupdate-headers",
        type: {
            name: "Composite",
            className: "GroupCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderGetEntityTagHeaders = {
        serializedName: "identityprovider-getentitytag-headers",
        type: {
            name: "Composite",
            className: "IdentityProviderGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderGetHeaders = {
        serializedName: "identityprovider-get-headers",
        type: {
            name: "Composite",
            className: "IdentityProviderGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderCreateOrUpdateHeaders = {
        serializedName: "identityprovider-createorupdate-headers",
        type: {
            name: "Composite",
            className: "IdentityProviderCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueGetHeaders = {
        serializedName: "issue-get-headers",
        type: {
            name: "Composite",
            className: "IssueGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoggerGetEntityTagHeaders = {
        serializedName: "logger-getentitytag-headers",
        type: {
            name: "Composite",
            className: "LoggerGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoggerGetHeaders = {
        serializedName: "logger-get-headers",
        type: {
            name: "Composite",
            className: "LoggerGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoggerCreateOrUpdateHeaders = {
        serializedName: "logger-createorupdate-headers",
        type: {
            name: "Composite",
            className: "LoggerCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueGetEntityTagHeaders = {
        serializedName: "namedvalue-getentitytag-headers",
        type: {
            name: "Composite",
            className: "NamedValueGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueGetHeaders = {
        serializedName: "namedvalue-get-headers",
        type: {
            name: "Composite",
            className: "NamedValueGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueCreateOrUpdateHeaders = {
        serializedName: "namedvalue-createorupdate-headers",
        type: {
            name: "Composite",
            className: "NamedValueCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueUpdateHeaders = {
        serializedName: "namedvalue-update-headers",
        type: {
            name: "Composite",
            className: "NamedValueUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenIdConnectProviderGetEntityTagHeaders = {
        serializedName: "openidconnectprovider-getentitytag-headers",
        type: {
            name: "Composite",
            className: "OpenIdConnectProviderGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenIdConnectProviderGetHeaders = {
        serializedName: "openidconnectprovider-get-headers",
        type: {
            name: "Composite",
            className: "OpenIdConnectProviderGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenIdConnectProviderCreateOrUpdateHeaders = {
        serializedName: "openidconnectprovider-createorupdate-headers",
        type: {
            name: "Composite",
            className: "OpenIdConnectProviderCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicyGetEntityTagHeaders = {
        serializedName: "policy-getentitytag-headers",
        type: {
            name: "Composite",
            className: "PolicyGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicyGetHeaders = {
        serializedName: "policy-get-headers",
        type: {
            name: "Composite",
            className: "PolicyGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicyCreateOrUpdateHeaders = {
        serializedName: "policy-createorupdate-headers",
        type: {
            name: "Composite",
            className: "PolicyCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignInSettingsGetEntityTagHeaders = {
        serializedName: "signinsettings-getentitytag-headers",
        type: {
            name: "Composite",
            className: "SignInSettingsGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignInSettingsGetHeaders = {
        serializedName: "signinsettings-get-headers",
        type: {
            name: "Composite",
            className: "SignInSettingsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignUpSettingsGetEntityTagHeaders = {
        serializedName: "signupsettings-getentitytag-headers",
        type: {
            name: "Composite",
            className: "SignUpSettingsGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignUpSettingsGetHeaders = {
        serializedName: "signupsettings-get-headers",
        type: {
            name: "Composite",
            className: "SignUpSettingsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DelegationSettingsGetEntityTagHeaders = {
        serializedName: "delegationsettings-getentitytag-headers",
        type: {
            name: "Composite",
            className: "DelegationSettingsGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DelegationSettingsGetHeaders = {
        serializedName: "delegationsettings-get-headers",
        type: {
            name: "Composite",
            className: "DelegationSettingsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductGetEntityTagHeaders = {
        serializedName: "product-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ProductGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductGetHeaders = {
        serializedName: "product-get-headers",
        type: {
            name: "Composite",
            className: "ProductGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductCreateOrUpdateHeaders = {
        serializedName: "product-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ProductCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductPolicyGetEntityTagHeaders = {
        serializedName: "productpolicy-getentitytag-headers",
        type: {
            name: "Composite",
            className: "ProductPolicyGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductPolicyGetHeaders = {
        serializedName: "productpolicy-get-headers",
        type: {
            name: "Composite",
            className: "ProductPolicyGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductPolicyCreateOrUpdateHeaders = {
        serializedName: "productpolicy-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ProductPolicyCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetEntityStateByProductHeaders = {
        serializedName: "tag-getentitystatebyproduct-headers",
        type: {
            name: "Composite",
            className: "TagGetEntityStateByProductHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetByProductHeaders = {
        serializedName: "tag-getbyproduct-headers",
        type: {
            name: "Composite",
            className: "TagGetByProductHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionGetEntityTagHeaders = {
        serializedName: "subscription-getentitytag-headers",
        type: {
            name: "Composite",
            className: "SubscriptionGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionGetHeaders = {
        serializedName: "subscription-get-headers",
        type: {
            name: "Composite",
            className: "SubscriptionGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionCreateOrUpdateHeaders = {
        serializedName: "subscription-createorupdate-headers",
        type: {
            name: "Composite",
            className: "SubscriptionCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetEntityStateHeaders = {
        serializedName: "tag-getentitystate-headers",
        type: {
            name: "Composite",
            className: "TagGetEntityStateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagGetHeaders = {
        serializedName: "tag-get-headers",
        type: {
            name: "Composite",
            className: "TagGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagCreateOrUpdateHeaders = {
        serializedName: "tag-createorupdate-headers",
        type: {
            name: "Composite",
            className: "TagCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantAccessGetEntityTagHeaders = {
        serializedName: "tenantaccess-getentitytag-headers",
        type: {
            name: "Composite",
            className: "TenantAccessGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantAccessGetHeaders = {
        serializedName: "tenantaccess-get-headers",
        type: {
            name: "Composite",
            className: "TenantAccessGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantAccessListSecretsHeaders = {
        serializedName: "tenantaccess-listsecrets-headers",
        type: {
            name: "Composite",
            className: "TenantAccessListSecretsHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantAccessGitGetHeaders = {
        serializedName: "tenantaccessgit-get-headers",
        type: {
            name: "Composite",
            className: "TenantAccessGitGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantAccessGitListSecretsHeaders = {
        serializedName: "tenantaccessgit-listsecrets-headers",
        type: {
            name: "Composite",
            className: "TenantAccessGitListSecretsHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserGetEntityTagHeaders = {
        serializedName: "user-getentitytag-headers",
        type: {
            name: "Composite",
            className: "UserGetEntityTagHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserGetHeaders = {
        serializedName: "user-get-headers",
        type: {
            name: "Composite",
            className: "UserGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserCreateOrUpdateHeaders = {
        serializedName: "user-createorupdate-headers",
        type: {
            name: "Composite",
            className: "UserCreateOrUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiCollection = {
        serializedName: "ApiCollection",
        type: {
            name: "Composite",
            className: "ApiCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagResourceCollection = {
        serializedName: "TagResourceCollection",
        type: {
            name: "Composite",
            className: "TagResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagResourceContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiRevisionCollection = {
        serializedName: "ApiRevisionCollection",
        type: {
            name: "Composite",
            className: "ApiRevisionCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiRevisionContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiReleaseCollection = {
        serializedName: "ApiReleaseCollection",
        type: {
            name: "Composite",
            className: "ApiReleaseCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiReleaseContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationCollection = {
        serializedName: "OperationCollection",
        type: {
            name: "Composite",
            className: "OperationCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagCollection = {
        serializedName: "TagCollection",
        type: {
            name: "Composite",
            className: "TagCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductCollection = {
        serializedName: "ProductCollection",
        type: {
            name: "Composite",
            className: "ProductCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProductContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SchemaCollection = {
        serializedName: "SchemaCollection",
        type: {
            name: "Composite",
            className: "SchemaCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SchemaContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticCollection = {
        serializedName: "DiagnosticCollection",
        type: {
            name: "Composite",
            className: "DiagnosticCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueCollection = {
        serializedName: "IssueCollection",
        type: {
            name: "Composite",
            className: "IssueCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IssueContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueCommentCollection = {
        serializedName: "IssueCommentCollection",
        type: {
            name: "Composite",
            className: "IssueCommentCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IssueCommentContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IssueAttachmentCollection = {
        serializedName: "IssueAttachmentCollection",
        type: {
            name: "Composite",
            className: "IssueAttachmentCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IssueAttachmentContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagDescriptionCollection = {
        serializedName: "TagDescriptionCollection",
        type: {
            name: "Composite",
            className: "TagDescriptionCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagDescriptionContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiVersionSetCollection = {
        serializedName: "ApiVersionSetCollection",
        type: {
            name: "Composite",
            className: "ApiVersionSetCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiVersionSetContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationServerCollection = {
        serializedName: "AuthorizationServerCollection",
        type: {
            name: "Composite",
            className: "AuthorizationServerCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AuthorizationServerContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendCollection = {
        serializedName: "BackendCollection",
        type: {
            name: "Composite",
            className: "BackendCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CacheCollection = {
        serializedName: "CacheCollection",
        type: {
            name: "Composite",
            className: "CacheCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CacheContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateCollection = {
        serializedName: "CertificateCollection",
        type: {
            name: "Composite",
            className: "CertificateCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuResults = {
        serializedName: "ResourceSkuResults",
        type: {
            name: "Composite",
            className: "ResourceSkuResults",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuResult"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiManagementServiceListResult = {
        serializedName: "ApiManagementServiceListResult",
        type: {
            name: "Composite",
            className: "ApiManagementServiceListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiManagementServiceResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EmailTemplateCollection = {
        serializedName: "EmailTemplateCollection",
        type: {
            name: "Composite",
            className: "EmailTemplateCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EmailTemplateContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayCollection = {
        serializedName: "GatewayCollection",
        type: {
            name: "Composite",
            className: "GatewayCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GatewayContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayHostnameConfigurationCollection = {
        serializedName: "GatewayHostnameConfigurationCollection",
        type: {
            name: "Composite",
            className: "GatewayHostnameConfigurationCollection",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GatewayHostnameConfigurationContract"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupCollection = {
        serializedName: "GroupCollection",
        type: {
            name: "Composite",
            className: "GroupCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GroupContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserCollection = {
        serializedName: "UserCollection",
        type: {
            name: "Composite",
            className: "UserCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProviderList = {
        serializedName: "IdentityProviderList",
        type: {
            name: "Composite",
            className: "IdentityProviderList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IdentityProviderContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoggerCollection = {
        serializedName: "LoggerCollection",
        type: {
            name: "Composite",
            className: "LoggerCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoggerContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamedValueCollection = {
        serializedName: "NamedValueCollection",
        type: {
            name: "Composite",
            className: "NamedValueCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NamedValueContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NotificationCollection = {
        serializedName: "NotificationCollection",
        type: {
            name: "Composite",
            className: "NotificationCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NotificationContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenIdConnectProviderCollection = {
        serializedName: "OpenIdConnectProviderCollection",
        type: {
            name: "Composite",
            className: "OpenIdConnectProviderCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenidConnectProviderContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionCollection = {
        serializedName: "SubscriptionCollection",
        type: {
            name: "Composite",
            className: "SubscriptionCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubscriptionContract"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegionListResult = {
        serializedName: "RegionListResult",
        type: {
            name: "Composite",
            className: "RegionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegionContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReportCollection = {
        serializedName: "ReportCollection",
        type: {
            name: "Composite",
            className: "ReportCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportRecordContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RequestReportCollection = {
        serializedName: "RequestReportCollection",
        type: {
            name: "Composite",
            className: "RequestReportCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RequestReportRecordContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UserIdentityCollection = {
        serializedName: "UserIdentityCollection",
        type: {
            name: "Composite",
            className: "UserIdentityCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserIdentityContract"
                            }
                        }
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponseBody: ErrorResponseBody,
        ErrorResponse: ErrorResponse,
        RegionContract: RegionContract,
        Resource: Resource,
        ApiExportResultValue: ApiExportResultValue,
        ApiExportResult: ApiExportResult,
        ProductEntityBaseParameters: ProductEntityBaseParameters,
        ProductTagResourceContractProperties: ProductTagResourceContractProperties,
        OperationTagResourceContractProperties: OperationTagResourceContractProperties,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        ApiCreateOrUpdatePropertiesWsdlSelector: ApiCreateOrUpdatePropertiesWsdlSelector,
        ApiEntityBaseContract: ApiEntityBaseContract,
        ApiContractProperties: ApiContractProperties,
        ApiTagResourceContractProperties: ApiTagResourceContractProperties,
        TagTagResourceContractProperties: TagTagResourceContractProperties,
        TagResourceContract: TagResourceContract,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TagDescriptionCreateParameters: TagDescriptionCreateParameters,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContractBaseProperties: IssueContractBaseProperties,
        IssueUpdateContract: IssueUpdateContract,
        IssueContract: IssueContract,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        SamplingSettings: SamplingSettings,
        DiagnosticContract: DiagnosticContract,
        SchemaContract: SchemaContract,
        PolicyContract: PolicyContract,
        PolicyCollection: PolicyCollection,
        ProductContract: ProductContract,
        ParameterContract: ParameterContract,
        RepresentationContract: RepresentationContract,
        ResponseContract: ResponseContract,
        RequestContract: RequestContract,
        OperationEntityBaseContract: OperationEntityBaseContract,
        OperationUpdateContract: OperationUpdateContract,
        OperationContract: OperationContract,
        ApiReleaseContract: ApiReleaseContract,
        ApiRevisionContract: ApiRevisionContract,
        ApiUpdateContract: ApiUpdateContract,
        ApiContract: ApiContract,
        ApiCreateOrUpdateParameter: ApiCreateOrUpdateParameter,
        ApiVersionSetEntityBase: ApiVersionSetEntityBase,
        ApiVersionSetUpdateParameters: ApiVersionSetUpdateParameters,
        ApiVersionSetContract: ApiVersionSetContract,
        ClientSecretContract: ClientSecretContract,
        TokenBodyParameterContract: TokenBodyParameterContract,
        AuthorizationServerContractBaseProperties: AuthorizationServerContractBaseProperties,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        AuthorizationServerContract: AuthorizationServerContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendTlsProperties: BackendTlsProperties,
        BackendProxyContract: BackendProxyContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendCredentialsContract: BackendCredentialsContract,
        X509CertificateName: X509CertificateName,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendProperties: BackendProperties,
        BackendBaseParameters: BackendBaseParameters,
        BackendUpdateParameters: BackendUpdateParameters,
        BackendContract: BackendContract,
        CacheUpdateParameters: CacheUpdateParameters,
        CacheContract: CacheContract,
        CertificateContract: CertificateContract,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        ResourceSku: ResourceSku,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuResult: ResourceSkuResult,
        CertificateInformation: CertificateInformation,
        CertificateConfiguration: CertificateConfiguration,
        HostnameConfiguration: HostnameConfiguration,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        AdditionalLocation: AdditionalLocation,
        ApiManagementServiceBackupRestoreParameters: ApiManagementServiceBackupRestoreParameters,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiManagementServiceBaseProperties: ApiManagementServiceBaseProperties,
        UserIdentityProperties: UserIdentityProperties,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApimResource: ApimResource,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApiManagementServiceGetSsoTokenResult: ApiManagementServiceGetSsoTokenResult,
        ApiManagementServiceCheckNameAvailabilityParameters: ApiManagementServiceCheckNameAvailabilityParameters,
        ApiManagementServiceNameAvailabilityResult: ApiManagementServiceNameAvailabilityResult,
        ApiManagementServiceApplyNetworkConfigurationParameters: ApiManagementServiceApplyNetworkConfigurationParameters,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        EmailTemplateUpdateParameters: EmailTemplateUpdateParameters,
        EmailTemplateContract: EmailTemplateContract,
        AssociationContract: AssociationContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GatewayTokenContract: GatewayTokenContract,
        GatewayTokenRequestContract: GatewayTokenRequestContract,
        GatewayKeyRegenerationRequestContract: GatewayKeyRegenerationRequestContract,
        GatewayKeysContract: GatewayKeysContract,
        ResourceLocationDataContract: ResourceLocationDataContract,
        GatewayContract: GatewayContract,
        UserIdentityContract: UserIdentityContract,
        UserEntityBaseParameters: UserEntityBaseParameters,
        GroupContractProperties: GroupContractProperties,
        UserContract: UserContract,
        GroupUpdateParameters: GroupUpdateParameters,
        GroupContract: GroupContract,
        GroupCreateParameters: GroupCreateParameters,
        IdentityProviderBaseParameters: IdentityProviderBaseParameters,
        IdentityProviderUpdateParameters: IdentityProviderUpdateParameters,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        LoggerUpdateContract: LoggerUpdateContract,
        LoggerContract: LoggerContract,
        PropertyValueContract: PropertyValueContract,
        NamedValueEntityBaseParameters: NamedValueEntityBaseParameters,
        NamedValueContract: NamedValueContract,
        NamedValueUpdateParameters: NamedValueUpdateParameters,
        NamedValueCreateContract: NamedValueCreateContract,
        ConnectivityStatusContract: ConnectivityStatusContract,
        NetworkStatusContract: NetworkStatusContract,
        NetworkStatusContractByLocation: NetworkStatusContractByLocation,
        RecipientEmailContract: RecipientEmailContract,
        RecipientEmailCollection: RecipientEmailCollection,
        RecipientUserContract: RecipientUserContract,
        RecipientUserCollection: RecipientUserCollection,
        RecipientsContractProperties: RecipientsContractProperties,
        NotificationContract: NotificationContract,
        OpenidConnectProviderUpdateContract: OpenidConnectProviderUpdateContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PolicyDescriptionCollection: PolicyDescriptionCollection,
        PortalSettingValidationKeyContract: PortalSettingValidationKeyContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        PortalDelegationSettings: PortalDelegationSettings,
        TermsOfServiceProperties: TermsOfServiceProperties,
        PortalSignupSettings: PortalSignupSettings,
        PortalSigninSettings: PortalSigninSettings,
        SubscriptionContract: SubscriptionContract,
        ProductUpdateParameters: ProductUpdateParameters,
        QuotaCounterValueContractProperties: QuotaCounterValueContractProperties,
        QuotaCounterContract: QuotaCounterContract,
        QuotaCounterCollection: QuotaCounterCollection,
        RequestReportRecordContract: RequestReportRecordContract,
        ReportRecordContract: ReportRecordContract,
        SubscriptionKeysContract: SubscriptionKeysContract,
        SubscriptionUpdateParameters: SubscriptionUpdateParameters,
        SubscriptionCreateParameters: SubscriptionCreateParameters,
        TagCreateUpdateParameters: TagCreateUpdateParameters,
        TenantConfigurationSyncStateContract: TenantConfigurationSyncStateContract,
        OperationResultLogItemContract: OperationResultLogItemContract,
        OperationResultContract: OperationResultContract,
        DeployConfigurationParameters: DeployConfigurationParameters,
        SaveConfigurationParameter: SaveConfigurationParameter,
        AccessInformationContract: AccessInformationContract,
        AccessInformationUpdateParameters: AccessInformationUpdateParameters,
        UserTokenResult: UserTokenResult,
        UserTokenParameters: UserTokenParameters,
        GenerateSsoUrlResult: GenerateSsoUrlResult,
        UserUpdateParameters: UserUpdateParameters,
        UserCreateParameters: UserCreateParameters,
        ApiRevisionInfoContract: ApiRevisionInfoContract,
        QuotaCounterValueContract: QuotaCounterValueContract,
        ApiGetEntityTagHeaders: ApiGetEntityTagHeaders,
        ApiGetHeaders: ApiGetHeaders,
        ApiCreateOrUpdateHeaders: ApiCreateOrUpdateHeaders,
        ApiReleaseGetEntityTagHeaders: ApiReleaseGetEntityTagHeaders,
        ApiReleaseGetHeaders: ApiReleaseGetHeaders,
        ApiReleaseCreateOrUpdateHeaders: ApiReleaseCreateOrUpdateHeaders,
        ApiOperationGetEntityTagHeaders: ApiOperationGetEntityTagHeaders,
        ApiOperationGetHeaders: ApiOperationGetHeaders,
        ApiOperationCreateOrUpdateHeaders: ApiOperationCreateOrUpdateHeaders,
        ApiOperationPolicyGetEntityTagHeaders: ApiOperationPolicyGetEntityTagHeaders,
        ApiOperationPolicyGetHeaders: ApiOperationPolicyGetHeaders,
        ApiOperationPolicyCreateOrUpdateHeaders: ApiOperationPolicyCreateOrUpdateHeaders,
        TagGetEntityStateByOperationHeaders: TagGetEntityStateByOperationHeaders,
        TagGetByOperationHeaders: TagGetByOperationHeaders,
        ApiPolicyGetEntityTagHeaders: ApiPolicyGetEntityTagHeaders,
        ApiPolicyGetHeaders: ApiPolicyGetHeaders,
        ApiPolicyCreateOrUpdateHeaders: ApiPolicyCreateOrUpdateHeaders,
        ApiSchemaGetEntityTagHeaders: ApiSchemaGetEntityTagHeaders,
        ApiSchemaGetHeaders: ApiSchemaGetHeaders,
        ApiSchemaCreateOrUpdateHeaders: ApiSchemaCreateOrUpdateHeaders,
        ApiDiagnosticGetEntityTagHeaders: ApiDiagnosticGetEntityTagHeaders,
        ApiDiagnosticGetHeaders: ApiDiagnosticGetHeaders,
        ApiDiagnosticCreateOrUpdateHeaders: ApiDiagnosticCreateOrUpdateHeaders,
        ApiIssueGetEntityTagHeaders: ApiIssueGetEntityTagHeaders,
        ApiIssueGetHeaders: ApiIssueGetHeaders,
        ApiIssueCreateOrUpdateHeaders: ApiIssueCreateOrUpdateHeaders,
        ApiIssueCommentGetEntityTagHeaders: ApiIssueCommentGetEntityTagHeaders,
        ApiIssueCommentGetHeaders: ApiIssueCommentGetHeaders,
        ApiIssueCommentCreateOrUpdateHeaders: ApiIssueCommentCreateOrUpdateHeaders,
        ApiIssueAttachmentGetEntityTagHeaders: ApiIssueAttachmentGetEntityTagHeaders,
        ApiIssueAttachmentGetHeaders: ApiIssueAttachmentGetHeaders,
        ApiIssueAttachmentCreateOrUpdateHeaders: ApiIssueAttachmentCreateOrUpdateHeaders,
        ApiTagDescriptionGetEntityTagHeaders: ApiTagDescriptionGetEntityTagHeaders,
        ApiTagDescriptionGetHeaders: ApiTagDescriptionGetHeaders,
        ApiTagDescriptionCreateOrUpdateHeaders: ApiTagDescriptionCreateOrUpdateHeaders,
        TagGetEntityStateByApiHeaders: TagGetEntityStateByApiHeaders,
        TagGetByApiHeaders: TagGetByApiHeaders,
        TagAssignToApiHeaders: TagAssignToApiHeaders,
        ApiVersionSetGetEntityTagHeaders: ApiVersionSetGetEntityTagHeaders,
        ApiVersionSetGetHeaders: ApiVersionSetGetHeaders,
        ApiVersionSetCreateOrUpdateHeaders: ApiVersionSetCreateOrUpdateHeaders,
        AuthorizationServerGetEntityTagHeaders: AuthorizationServerGetEntityTagHeaders,
        AuthorizationServerGetHeaders: AuthorizationServerGetHeaders,
        AuthorizationServerCreateOrUpdateHeaders: AuthorizationServerCreateOrUpdateHeaders,
        BackendGetEntityTagHeaders: BackendGetEntityTagHeaders,
        BackendGetHeaders: BackendGetHeaders,
        BackendCreateOrUpdateHeaders: BackendCreateOrUpdateHeaders,
        CacheGetEntityTagHeaders: CacheGetEntityTagHeaders,
        CacheGetHeaders: CacheGetHeaders,
        CacheCreateOrUpdateHeaders: CacheCreateOrUpdateHeaders,
        CertificateGetEntityTagHeaders: CertificateGetEntityTagHeaders,
        CertificateGetHeaders: CertificateGetHeaders,
        CertificateCreateOrUpdateHeaders: CertificateCreateOrUpdateHeaders,
        DiagnosticGetEntityTagHeaders: DiagnosticGetEntityTagHeaders,
        DiagnosticGetHeaders: DiagnosticGetHeaders,
        DiagnosticCreateOrUpdateHeaders: DiagnosticCreateOrUpdateHeaders,
        EmailTemplateGetEntityTagHeaders: EmailTemplateGetEntityTagHeaders,
        EmailTemplateGetHeaders: EmailTemplateGetHeaders,
        GatewayGetEntityTagHeaders: GatewayGetEntityTagHeaders,
        GatewayGetHeaders: GatewayGetHeaders,
        GatewayCreateOrUpdateHeaders: GatewayCreateOrUpdateHeaders,
        GatewayListKeysHeaders: GatewayListKeysHeaders,
        GatewayHostnameConfigurationGetEntityTagHeaders: GatewayHostnameConfigurationGetEntityTagHeaders,
        GatewayHostnameConfigurationGetHeaders: GatewayHostnameConfigurationGetHeaders,
        GatewayHostnameConfigurationCreateOrUpdateHeaders: GatewayHostnameConfigurationCreateOrUpdateHeaders,
        GatewayApiGetEntityTagHeaders: GatewayApiGetEntityTagHeaders,
        GroupGetEntityTagHeaders: GroupGetEntityTagHeaders,
        GroupGetHeaders: GroupGetHeaders,
        GroupCreateOrUpdateHeaders: GroupCreateOrUpdateHeaders,
        IdentityProviderGetEntityTagHeaders: IdentityProviderGetEntityTagHeaders,
        IdentityProviderGetHeaders: IdentityProviderGetHeaders,
        IdentityProviderCreateOrUpdateHeaders: IdentityProviderCreateOrUpdateHeaders,
        IssueGetHeaders: IssueGetHeaders,
        LoggerGetEntityTagHeaders: LoggerGetEntityTagHeaders,
        LoggerGetHeaders: LoggerGetHeaders,
        LoggerCreateOrUpdateHeaders: LoggerCreateOrUpdateHeaders,
        NamedValueGetEntityTagHeaders: NamedValueGetEntityTagHeaders,
        NamedValueGetHeaders: NamedValueGetHeaders,
        NamedValueCreateOrUpdateHeaders: NamedValueCreateOrUpdateHeaders,
        NamedValueUpdateHeaders: NamedValueUpdateHeaders,
        OpenIdConnectProviderGetEntityTagHeaders: OpenIdConnectProviderGetEntityTagHeaders,
        OpenIdConnectProviderGetHeaders: OpenIdConnectProviderGetHeaders,
        OpenIdConnectProviderCreateOrUpdateHeaders: OpenIdConnectProviderCreateOrUpdateHeaders,
        PolicyGetEntityTagHeaders: PolicyGetEntityTagHeaders,
        PolicyGetHeaders: PolicyGetHeaders,
        PolicyCreateOrUpdateHeaders: PolicyCreateOrUpdateHeaders,
        SignInSettingsGetEntityTagHeaders: SignInSettingsGetEntityTagHeaders,
        SignInSettingsGetHeaders: SignInSettingsGetHeaders,
        SignUpSettingsGetEntityTagHeaders: SignUpSettingsGetEntityTagHeaders,
        SignUpSettingsGetHeaders: SignUpSettingsGetHeaders,
        DelegationSettingsGetEntityTagHeaders: DelegationSettingsGetEntityTagHeaders,
        DelegationSettingsGetHeaders: DelegationSettingsGetHeaders,
        ProductGetEntityTagHeaders: ProductGetEntityTagHeaders,
        ProductGetHeaders: ProductGetHeaders,
        ProductCreateOrUpdateHeaders: ProductCreateOrUpdateHeaders,
        ProductPolicyGetEntityTagHeaders: ProductPolicyGetEntityTagHeaders,
        ProductPolicyGetHeaders: ProductPolicyGetHeaders,
        ProductPolicyCreateOrUpdateHeaders: ProductPolicyCreateOrUpdateHeaders,
        TagGetEntityStateByProductHeaders: TagGetEntityStateByProductHeaders,
        TagGetByProductHeaders: TagGetByProductHeaders,
        SubscriptionGetEntityTagHeaders: SubscriptionGetEntityTagHeaders,
        SubscriptionGetHeaders: SubscriptionGetHeaders,
        SubscriptionCreateOrUpdateHeaders: SubscriptionCreateOrUpdateHeaders,
        TagGetEntityStateHeaders: TagGetEntityStateHeaders,
        TagGetHeaders: TagGetHeaders,
        TagCreateOrUpdateHeaders: TagCreateOrUpdateHeaders,
        TenantAccessGetEntityTagHeaders: TenantAccessGetEntityTagHeaders,
        TenantAccessGetHeaders: TenantAccessGetHeaders,
        TenantAccessListSecretsHeaders: TenantAccessListSecretsHeaders,
        TenantAccessGitGetHeaders: TenantAccessGitGetHeaders,
        TenantAccessGitListSecretsHeaders: TenantAccessGitListSecretsHeaders,
        UserGetEntityTagHeaders: UserGetEntityTagHeaders,
        UserGetHeaders: UserGetHeaders,
        UserCreateOrUpdateHeaders: UserCreateOrUpdateHeaders,
        ApiCollection: ApiCollection,
        TagResourceCollection: TagResourceCollection,
        ApiRevisionCollection: ApiRevisionCollection,
        ApiReleaseCollection: ApiReleaseCollection,
        OperationCollection: OperationCollection,
        TagCollection: TagCollection,
        ProductCollection: ProductCollection,
        SchemaCollection: SchemaCollection,
        DiagnosticCollection: DiagnosticCollection,
        IssueCollection: IssueCollection,
        IssueCommentCollection: IssueCommentCollection,
        IssueAttachmentCollection: IssueAttachmentCollection,
        TagDescriptionCollection: TagDescriptionCollection,
        ApiVersionSetCollection: ApiVersionSetCollection,
        AuthorizationServerCollection: AuthorizationServerCollection,
        BackendCollection: BackendCollection,
        CacheCollection: CacheCollection,
        CertificateCollection: CertificateCollection,
        OperationListResult: OperationListResult,
        ResourceSkuResults: ResourceSkuResults,
        ApiManagementServiceListResult: ApiManagementServiceListResult,
        EmailTemplateCollection: EmailTemplateCollection,
        GatewayCollection: GatewayCollection,
        GatewayHostnameConfigurationCollection: GatewayHostnameConfigurationCollection,
        GroupCollection: GroupCollection,
        UserCollection: UserCollection,
        IdentityProviderList: IdentityProviderList,
        LoggerCollection: LoggerCollection,
        NamedValueCollection: NamedValueCollection,
        NotificationCollection: NotificationCollection,
        OpenIdConnectProviderCollection: OpenIdConnectProviderCollection,
        SubscriptionCollection: SubscriptionCollection,
        RegionListResult: RegionListResult,
        ReportCollection: ReportCollection,
        RequestReportCollection: RequestReportCollection,
        UserIdentityCollection: UserIdentityCollection
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiCollection: ApiCollection,
        ApiContract: ApiContract,
        ApiContractProperties: ApiContractProperties,
        ApiCreateOrUpdateHeaders: ApiCreateOrUpdateHeaders,
        ApiCreateOrUpdateParameter: ApiCreateOrUpdateParameter,
        ApiCreateOrUpdatePropertiesWsdlSelector: ApiCreateOrUpdatePropertiesWsdlSelector,
        ApiEntityBaseContract: ApiEntityBaseContract,
        ApiGetEntityTagHeaders: ApiGetEntityTagHeaders,
        ApiGetHeaders: ApiGetHeaders,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiTagResourceContractProperties: ApiTagResourceContractProperties,
        ApiUpdateContract: ApiUpdateContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        OperationTagResourceContractProperties: OperationTagResourceContractProperties,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        ProductEntityBaseParameters: ProductEntityBaseParameters,
        ProductTagResourceContractProperties: ProductTagResourceContractProperties,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TagResourceCollection: TagResourceCollection,
        TagResourceContract: TagResourceContract,
        TagTagResourceContractProperties: TagTagResourceContractProperties,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accessName = {
        parameterPath: "accessName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "accessName",
            defaultValue: 'access',
            type: {
                name: "String"
            }
        }
    };
    var apiId0 = {
        parameterPath: "apiId",
        mapper: {
            required: true,
            serializedName: "apiId",
            constraints: {
                MaxLength: 256,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var apiId1 = {
        parameterPath: "apiId",
        mapper: {
            required: true,
            serializedName: "apiId",
            constraints: {
                MaxLength: 80,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var attachmentId = {
        parameterPath: "attachmentId",
        mapper: {
            required: true,
            serializedName: "attachmentId",
            constraints: {
                MaxLength: 256,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var authsid = {
        parameterPath: "authsid",
        mapper: {
            required: true,
            serializedName: "authsid",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var backendId = {
        parameterPath: "backendId",
        mapper: {
            required: true,
            serializedName: "backendId",
            constraints: {
                MaxLength: 80,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var cacheId = {
        parameterPath: "cacheId",
        mapper: {
            required: true,
            serializedName: "cacheId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var certificateId = {
        parameterPath: "certificateId",
        mapper: {
            required: true,
            serializedName: "certificateId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var commentId = {
        parameterPath: "commentId",
        mapper: {
            required: true,
            serializedName: "commentId",
            constraints: {
                MaxLength: 256,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var configurationName = {
        parameterPath: "configurationName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "configurationName",
            defaultValue: 'configuration',
            type: {
                name: "String"
            }
        }
    };
    var deleteRevisions = {
        parameterPath: [
            "options",
            "deleteRevisions"
        ],
        mapper: {
            serializedName: "deleteRevisions",
            type: {
                name: "Boolean"
            }
        }
    };
    var deleteSubscriptions = {
        parameterPath: [
            "options",
            "deleteSubscriptions"
        ],
        mapper: {
            serializedName: "deleteSubscriptions",
            type: {
                name: "Boolean"
            }
        }
    };
    var diagnosticId = {
        parameterPath: "diagnosticId",
        mapper: {
            required: true,
            serializedName: "diagnosticId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var email = {
        parameterPath: "email",
        mapper: {
            required: true,
            serializedName: "email",
            type: {
                name: "String"
            }
        }
    };
    var expandApiVersionSet = {
        parameterPath: [
            "options",
            "expandApiVersionSet"
        ],
        mapper: {
            serializedName: "expandApiVersionSet",
            type: {
                name: "Boolean"
            }
        }
    };
    var expandCommentsAttachments = {
        parameterPath: [
            "options",
            "expandCommentsAttachments"
        ],
        mapper: {
            serializedName: "expandCommentsAttachments",
            type: {
                name: "Boolean"
            }
        }
    };
    var expandGroups = {
        parameterPath: [
            "options",
            "expandGroups"
        ],
        mapper: {
            serializedName: "expandGroups",
            type: {
                name: "Boolean"
            }
        }
    };
    var exportParameter = {
        parameterPath: "exportParameter",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "export",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var force = {
        parameterPath: [
            "options",
            "force"
        ],
        mapper: {
            serializedName: "force",
            type: {
                name: "Boolean"
            }
        }
    };
    var format0 = {
        parameterPath: [
            "options",
            "format"
        ],
        mapper: {
            serializedName: "format",
            defaultValue: 'xml',
            type: {
                name: "String"
            }
        }
    };
    var format1 = {
        parameterPath: "format",
        mapper: {
            required: true,
            serializedName: "format",
            type: {
                name: "String"
            }
        }
    };
    var gatewayId = {
        parameterPath: "gatewayId",
        mapper: {
            required: true,
            serializedName: "gatewayId",
            constraints: {
                MaxLength: 80,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var groupId = {
        parameterPath: "groupId",
        mapper: {
            required: true,
            serializedName: "groupId",
            constraints: {
                MaxLength: 256,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var hcId = {
        parameterPath: "hcId",
        mapper: {
            required: true,
            serializedName: "hcId",
            constraints: {
                MaxLength: 80,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var identityProviderName = {
        parameterPath: "identityProviderName",
        mapper: {
            required: true,
            serializedName: "identityProviderName",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch0 = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var includeNotTaggedApis = {
        parameterPath: [
            "options",
            "includeNotTaggedApis"
        ],
        mapper: {
            serializedName: "includeNotTaggedApis",
            type: {
                name: "Boolean"
            }
        }
    };
    var includeNotTaggedOperations = {
        parameterPath: [
            "options",
            "includeNotTaggedOperations"
        ],
        mapper: {
            serializedName: "includeNotTaggedOperations",
            type: {
                name: "Boolean"
            }
        }
    };
    var includeNotTaggedProducts = {
        parameterPath: [
            "options",
            "includeNotTaggedProducts"
        ],
        mapper: {
            serializedName: "includeNotTaggedProducts",
            type: {
                name: "Boolean"
            }
        }
    };
    var interval = {
        parameterPath: "interval",
        mapper: {
            required: true,
            serializedName: "interval",
            type: {
                name: "TimeSpan"
            }
        }
    };
    var issueId = {
        parameterPath: "issueId",
        mapper: {
            required: true,
            serializedName: "issueId",
            constraints: {
                MaxLength: 256,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var loggerId = {
        parameterPath: "loggerId",
        mapper: {
            required: true,
            serializedName: "loggerId",
            constraints: {
                MaxLength: 256,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var namedValueId = {
        parameterPath: "namedValueId",
        mapper: {
            required: true,
            serializedName: "namedValueId",
            constraints: {
                MaxLength: 256,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var notificationName = {
        parameterPath: "notificationName",
        mapper: {
            required: true,
            serializedName: "notificationName",
            type: {
                name: "String"
            }
        }
    };
    var notify = {
        parameterPath: [
            "options",
            "notify"
        ],
        mapper: {
            serializedName: "notify",
            type: {
                name: "Boolean"
            }
        }
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            constraints: {
                MaxLength: 80,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var opid = {
        parameterPath: "opid",
        mapper: {
            required: true,
            serializedName: "opid",
            constraints: {
                MaxLength: 256,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var policyId = {
        parameterPath: "policyId",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "policyId",
            defaultValue: 'policy',
            type: {
                name: "String"
            }
        }
    };
    var productId = {
        parameterPath: "productId",
        mapper: {
            required: true,
            serializedName: "productId",
            constraints: {
                MaxLength: 256,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var quotaCounterKey = {
        parameterPath: "quotaCounterKey",
        mapper: {
            required: true,
            serializedName: "quotaCounterKey",
            type: {
                name: "String"
            }
        }
    };
    var quotaPeriodKey = {
        parameterPath: "quotaPeriodKey",
        mapper: {
            required: true,
            serializedName: "quotaPeriodKey",
            type: {
                name: "String"
            }
        }
    };
    var releaseId = {
        parameterPath: "releaseId",
        mapper: {
            required: true,
            serializedName: "releaseId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var schemaId = {
        parameterPath: "schemaId",
        mapper: {
            required: true,
            serializedName: "schemaId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var scope0 = {
        parameterPath: [
            "options",
            "scope"
        ],
        mapper: {
            serializedName: "scope",
            type: {
                name: "String"
            }
        }
    };
    var scope1 = {
        parameterPath: [
            "options",
            "scope"
        ],
        mapper: {
            serializedName: "scope",
            type: {
                name: "Enum",
                allowedValues: [
                    "Tenant",
                    "Product",
                    "Api",
                    "Operation",
                    "All"
                ]
            }
        }
    };
    var serviceName = {
        parameterPath: "serviceName",
        mapper: {
            required: true,
            serializedName: "serviceName",
            constraints: {
                MaxLength: 50,
                MinLength: 1,
                Pattern: /^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/
            },
            type: {
                name: "String"
            }
        }
    };
    var sid = {
        parameterPath: "sid",
        mapper: {
            required: true,
            serializedName: "sid",
            constraints: {
                MaxLength: 256,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            constraints: {
                InclusiveMinimum: 0
            },
            type: {
                name: "Number"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tagDescriptionId = {
        parameterPath: "tagDescriptionId",
        mapper: {
            required: true,
            serializedName: "tagDescriptionId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var tagId = {
        parameterPath: "tagId",
        mapper: {
            required: true,
            serializedName: "tagId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var tags = {
        parameterPath: [
            "options",
            "tags"
        ],
        mapper: {
            serializedName: "tags",
            type: {
                name: "String"
            }
        }
    };
    var templateName = {
        parameterPath: "templateName",
        mapper: {
            required: true,
            serializedName: "templateName",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var userId = {
        parameterPath: "userId",
        mapper: {
            required: true,
            serializedName: "userId",
            constraints: {
                MaxLength: 80,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var versionSetId = {
        parameterPath: "versionSetId",
        mapper: {
            required: true,
            serializedName: "versionSetId",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[^*#&+:<>?]+$/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Api. */
    var Api = /** @class */ (function () {
        /**
         * Create a Api.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Api(client) {
            this.client = client;
        }
        Api.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec, callback);
        };
        Api.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, getEntityTagOperationSpec, callback);
        };
        Api.prototype.get = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates new or updates existing specified API of the API Management service instance.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param apiId API revision identifier. Must be unique in the current API Management service
         * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
         * @param parameters Create or update parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiCreateOrUpdateResponse>
         */
        Api.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, apiId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Api.prototype.update = function (resourceGroupName, serviceName, apiId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec, callback);
        };
        Api.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Api.prototype.listByTags = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByTagsOperationSpec, callback);
        };
        /**
         * Creates new or updates existing specified API of the API Management service instance.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param apiId API revision identifier. Must be unique in the current API Management service
         * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
         * @param parameters Create or update parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Api.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, apiId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        Api.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec, callback);
        };
        Api.prototype.listByTagsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByTagsNextOperationSpec, callback);
        };
        return Api;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listByServiceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            tags,
            expandApiVersionSet,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getEntityTagOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiContract,
                headersMapper: ApiGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiUpdateContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            deleteRevisions,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByTagsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apisByTags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            includeNotTaggedApis,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiCreateOrUpdateParameter), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiContract,
                headersMapper: ApiCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: ApiContract,
                headersMapper: ApiCreateOrUpdateHeaders
            },
            202: {
                headersMapper: ApiCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByServiceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByTagsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiRevisionCollection: ApiRevisionCollection,
        ApiRevisionContract: ApiRevisionContract,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiRevision. */
    var ApiRevision = /** @class */ (function () {
        /**
         * Create a ApiRevision.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiRevision(client) {
            this.client = client;
        }
        ApiRevision.prototype.listByService = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByServiceOperationSpec$1, callback);
        };
        ApiRevision.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$1, callback);
        };
        return ApiRevision;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listByServiceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/revisions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiRevisionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByServiceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiRevisionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseCollection: ApiReleaseCollection,
        ApiReleaseContract: ApiReleaseContract,
        ApiReleaseCreateOrUpdateHeaders: ApiReleaseCreateOrUpdateHeaders,
        ApiReleaseGetEntityTagHeaders: ApiReleaseGetEntityTagHeaders,
        ApiReleaseGetHeaders: ApiReleaseGetHeaders,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiRelease. */
    var ApiRelease = /** @class */ (function () {
        /**
         * Create a ApiRelease.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiRelease(client) {
            this.client = client;
        }
        ApiRelease.prototype.listByService = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByServiceOperationSpec$2, callback);
        };
        ApiRelease.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, releaseId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                releaseId: releaseId,
                options: options
            }, getEntityTagOperationSpec$1, callback);
        };
        ApiRelease.prototype.get = function (resourceGroupName, serviceName, apiId, releaseId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                releaseId: releaseId,
                options: options
            }, getOperationSpec$1, callback);
        };
        ApiRelease.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, releaseId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                releaseId: releaseId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ApiRelease.prototype.update = function (resourceGroupName, serviceName, apiId, releaseId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                releaseId: releaseId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ApiRelease.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, releaseId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                releaseId: releaseId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ApiRelease.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$2, callback);
        };
        return ApiRelease;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByServiceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiReleaseCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getEntityTagOperationSpec$1 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            releaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiReleaseGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            releaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiReleaseContract,
                headersMapper: ApiReleaseGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            releaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiReleaseContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiReleaseContract,
                headersMapper: ApiReleaseCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: ApiReleaseContract,
                headersMapper: ApiReleaseCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            releaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiReleaseContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            releaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByServiceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiReleaseCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiOperationCreateOrUpdateHeaders: ApiOperationCreateOrUpdateHeaders,
        ApiOperationGetEntityTagHeaders: ApiOperationGetEntityTagHeaders,
        ApiOperationGetHeaders: ApiOperationGetHeaders,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationCollection: OperationCollection,
        OperationContract: OperationContract,
        OperationUpdateContract: OperationUpdateContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiOperation. */
    var ApiOperation = /** @class */ (function () {
        /**
         * Create a ApiOperation.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiOperation(client) {
            this.client = client;
        }
        ApiOperation.prototype.listByApi = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByApiOperationSpec, callback);
        };
        ApiOperation.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                options: options
            }, getEntityTagOperationSpec$2, callback);
        };
        ApiOperation.prototype.get = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                options: options
            }, getOperationSpec$2, callback);
        };
        ApiOperation.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, operationId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        ApiOperation.prototype.update = function (resourceGroupName, serviceName, apiId, operationId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$2, callback);
        };
        ApiOperation.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, operationId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ApiOperation.prototype.listByApiNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByApiNextOperationSpec, callback);
        };
        return ApiOperation;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByApiOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            tags,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getEntityTagOperationSpec$2 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiOperationGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationContract,
                headersMapper: ApiOperationGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OperationContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationContract,
                headersMapper: ApiOperationCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: OperationContract,
                headersMapper: ApiOperationCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OperationUpdateContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByApiNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiOperationPolicyCreateOrUpdateHeaders: ApiOperationPolicyCreateOrUpdateHeaders,
        ApiOperationPolicyGetEntityTagHeaders: ApiOperationPolicyGetEntityTagHeaders,
        ApiOperationPolicyGetHeaders: ApiOperationPolicyGetHeaders,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyCollection: PolicyCollection,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiOperationPolicy. */
    var ApiOperationPolicy = /** @class */ (function () {
        /**
         * Create a ApiOperationPolicy.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiOperationPolicy(client) {
            this.client = client;
        }
        ApiOperationPolicy.prototype.listByOperation = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                options: options
            }, listByOperationOperationSpec, callback);
        };
        ApiOperationPolicy.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                options: options
            }, getEntityTagOperationSpec$3, callback);
        };
        ApiOperationPolicy.prototype.get = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                options: options
            }, getOperationSpec$3, callback);
        };
        ApiOperationPolicy.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, operationId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        ApiOperationPolicy.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, operationId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        return ApiOperationPolicy;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByOperationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getEntityTagOperationSpec$3 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiOperationPolicyGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            format0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: ApiOperationPolicyGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PolicyContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: ApiOperationPolicyCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: PolicyContract,
                headersMapper: ApiOperationPolicyCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagAssignToApiHeaders: TagAssignToApiHeaders,
        TagCollection: TagCollection,
        TagContract: TagContract,
        TagCreateOrUpdateHeaders: TagCreateOrUpdateHeaders,
        TagCreateUpdateParameters: TagCreateUpdateParameters,
        TagDescriptionContract: TagDescriptionContract,
        TagGetByApiHeaders: TagGetByApiHeaders,
        TagGetByOperationHeaders: TagGetByOperationHeaders,
        TagGetByProductHeaders: TagGetByProductHeaders,
        TagGetEntityStateByApiHeaders: TagGetEntityStateByApiHeaders,
        TagGetEntityStateByOperationHeaders: TagGetEntityStateByOperationHeaders,
        TagGetEntityStateByProductHeaders: TagGetEntityStateByProductHeaders,
        TagGetEntityStateHeaders: TagGetEntityStateHeaders,
        TagGetHeaders: TagGetHeaders,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Tag. */
    var Tag = /** @class */ (function () {
        /**
         * Create a Tag.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Tag(client) {
            this.client = client;
        }
        Tag.prototype.listByOperation = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                options: options
            }, listByOperationOperationSpec$1, callback);
        };
        Tag.prototype.getEntityStateByOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                tagId: tagId,
                options: options
            }, getEntityStateByOperationOperationSpec, callback);
        };
        Tag.prototype.getByOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                tagId: tagId,
                options: options
            }, getByOperationOperationSpec, callback);
        };
        Tag.prototype.assignToOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                tagId: tagId,
                options: options
            }, assignToOperationOperationSpec, callback);
        };
        Tag.prototype.detachFromOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                operationId: operationId,
                tagId: tagId,
                options: options
            }, detachFromOperationOperationSpec, callback);
        };
        Tag.prototype.listByApi = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByApiOperationSpec$1, callback);
        };
        Tag.prototype.getEntityStateByApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagId: tagId,
                options: options
            }, getEntityStateByApiOperationSpec, callback);
        };
        Tag.prototype.getByApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagId: tagId,
                options: options
            }, getByApiOperationSpec, callback);
        };
        Tag.prototype.assignToApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagId: tagId,
                options: options
            }, assignToApiOperationSpec, callback);
        };
        Tag.prototype.detachFromApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagId: tagId,
                options: options
            }, detachFromApiOperationSpec, callback);
        };
        Tag.prototype.listByProduct = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, listByProductOperationSpec, callback);
        };
        Tag.prototype.getEntityStateByProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                tagId: tagId,
                options: options
            }, getEntityStateByProductOperationSpec, callback);
        };
        Tag.prototype.getByProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                tagId: tagId,
                options: options
            }, getByProductOperationSpec, callback);
        };
        Tag.prototype.assignToProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                tagId: tagId,
                options: options
            }, assignToProductOperationSpec, callback);
        };
        Tag.prototype.detachFromProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                tagId: tagId,
                options: options
            }, detachFromProductOperationSpec, callback);
        };
        Tag.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$3, callback);
        };
        Tag.prototype.getEntityState = function (resourceGroupName, serviceName, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                tagId: tagId,
                options: options
            }, getEntityStateOperationSpec, callback);
        };
        Tag.prototype.get = function (resourceGroupName, serviceName, tagId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                tagId: tagId,
                options: options
            }, getOperationSpec$4, callback);
        };
        Tag.prototype.createOrUpdate = function (resourceGroupName, serviceName, tagId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                tagId: tagId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        Tag.prototype.update = function (resourceGroupName, serviceName, tagId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                tagId: tagId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$3, callback);
        };
        Tag.prototype.deleteMethod = function (resourceGroupName, serviceName, tagId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                tagId: tagId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Tag.prototype.listByOperationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByOperationNextOperationSpec, callback);
        };
        Tag.prototype.listByApiNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByApiNextOperationSpec$1, callback);
        };
        Tag.prototype.listByProductNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByProductNextOperationSpec, callback);
        };
        Tag.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$3, callback);
        };
        return Tag;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByOperationOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getEntityStateByOperationOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: TagGetEntityStateByOperationHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getByOperationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract,
                headersMapper: TagGetByOperationHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var assignToOperationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract
            },
            201: {
                bodyMapper: TagContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var detachFromOperationOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            operationId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByApiOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getEntityStateByApiOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: TagGetEntityStateByApiHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getByApiOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract,
                headersMapper: TagGetByApiHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var assignToApiOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract,
                headersMapper: TagAssignToApiHeaders
            },
            201: {
                bodyMapper: TagContract,
                headersMapper: TagAssignToApiHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var detachFromApiOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByProductOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getEntityStateByProductOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: TagGetEntityStateByProductHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getByProductOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract,
                headersMapper: TagGetByProductHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var assignToProductOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract
            },
            201: {
                bodyMapper: TagContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var detachFromProductOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByServiceOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            scope0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getEntityStateOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: TagGetEntityStateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagContract,
                headersMapper: TagGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TagCreateUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TagContract,
                headersMapper: TagCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: TagContract,
                headersMapper: TagCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TagCreateUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            tagId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByOperationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByApiNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByProductNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByServiceNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductCollection: ProductCollection,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiProduct. */
    var ApiProduct = /** @class */ (function () {
        /**
         * Create a ApiProduct.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiProduct(client) {
            this.client = client;
        }
        ApiProduct.prototype.listByApis = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByApisOperationSpec, callback);
        };
        ApiProduct.prototype.listByApisNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByApisNextOperationSpec, callback);
        };
        return ApiProduct;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByApisOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByApisNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiPolicyCreateOrUpdateHeaders: ApiPolicyCreateOrUpdateHeaders,
        ApiPolicyGetEntityTagHeaders: ApiPolicyGetEntityTagHeaders,
        ApiPolicyGetHeaders: ApiPolicyGetHeaders,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyCollection: PolicyCollection,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiPolicy. */
    var ApiPolicy = /** @class */ (function () {
        /**
         * Create a ApiPolicy.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiPolicy(client) {
            this.client = client;
        }
        ApiPolicy.prototype.listByApi = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByApiOperationSpec$2, callback);
        };
        ApiPolicy.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, getEntityTagOperationSpec$4, callback);
        };
        ApiPolicy.prototype.get = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, getOperationSpec$5, callback);
        };
        ApiPolicy.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        ApiPolicy.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        return ApiPolicy;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listByApiOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getEntityTagOperationSpec$4 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiPolicyGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            format0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: ApiPolicyGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PolicyContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: ApiPolicyCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: PolicyContract,
                headersMapper: ApiPolicyCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiSchemaCreateOrUpdateHeaders: ApiSchemaCreateOrUpdateHeaders,
        ApiSchemaGetEntityTagHeaders: ApiSchemaGetEntityTagHeaders,
        ApiSchemaGetHeaders: ApiSchemaGetHeaders,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaCollection: SchemaCollection,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiSchema. */
    var ApiSchema = /** @class */ (function () {
        /**
         * Create a ApiSchema.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiSchema(client) {
            this.client = client;
        }
        ApiSchema.prototype.listByApi = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByApiOperationSpec$3, callback);
        };
        ApiSchema.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, schemaId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                schemaId: schemaId,
                options: options
            }, getEntityTagOperationSpec$5, callback);
        };
        ApiSchema.prototype.get = function (resourceGroupName, serviceName, apiId, schemaId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                schemaId: schemaId,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Creates or updates schema configuration for the API.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param apiId API revision identifier. Must be unique in the current API Management service
         * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
         * @param schemaId Schema identifier within an API. Must be unique in the current API Management
         * service instance.
         * @param parameters The schema contents to apply.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiSchemaCreateOrUpdateResponse>
         */
        ApiSchema.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, schemaId, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, apiId, schemaId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApiSchema.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, schemaId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                schemaId: schemaId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        /**
         * Creates or updates schema configuration for the API.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param apiId API revision identifier. Must be unique in the current API Management service
         * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
         * @param schemaId Schema identifier within an API. Must be unique in the current API Management
         * service instance.
         * @param parameters The schema contents to apply.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiSchema.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, apiId, schemaId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                schemaId: schemaId,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        ApiSchema.prototype.listByApiNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByApiNextOperationSpec$2, callback);
        };
        return ApiSchema;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listByApiOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SchemaCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getEntityTagOperationSpec$5 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            schemaId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiSchemaGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            schemaId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SchemaContract,
                headersMapper: ApiSchemaGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            schemaId,
            subscriptionId
        ],
        queryParameters: [
            force,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            schemaId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SchemaContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SchemaContract,
                headersMapper: ApiSchemaCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: SchemaContract,
                headersMapper: ApiSchemaCreateOrUpdateHeaders
            },
            202: {
                headersMapper: ApiSchemaCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listByApiNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SchemaCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiDiagnosticCreateOrUpdateHeaders: ApiDiagnosticCreateOrUpdateHeaders,
        ApiDiagnosticGetEntityTagHeaders: ApiDiagnosticGetEntityTagHeaders,
        ApiDiagnosticGetHeaders: ApiDiagnosticGetHeaders,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticCollection: DiagnosticCollection,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiDiagnostic. */
    var ApiDiagnostic = /** @class */ (function () {
        /**
         * Create a ApiDiagnostic.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiDiagnostic(client) {
            this.client = client;
        }
        ApiDiagnostic.prototype.listByService = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByServiceOperationSpec$4, callback);
        };
        ApiDiagnostic.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, diagnosticId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                diagnosticId: diagnosticId,
                options: options
            }, getEntityTagOperationSpec$6, callback);
        };
        ApiDiagnostic.prototype.get = function (resourceGroupName, serviceName, apiId, diagnosticId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                diagnosticId: diagnosticId,
                options: options
            }, getOperationSpec$7, callback);
        };
        ApiDiagnostic.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, diagnosticId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                diagnosticId: diagnosticId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        ApiDiagnostic.prototype.update = function (resourceGroupName, serviceName, apiId, diagnosticId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                diagnosticId: diagnosticId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$4, callback);
        };
        ApiDiagnostic.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, diagnosticId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                diagnosticId: diagnosticId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        ApiDiagnostic.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$4, callback);
        };
        return ApiDiagnostic;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listByServiceOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getEntityTagOperationSpec$6 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiDiagnosticGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticContract,
                headersMapper: ApiDiagnosticGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DiagnosticContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiagnosticContract,
                headersMapper: ApiDiagnosticCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: DiagnosticContract,
                headersMapper: ApiDiagnosticCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DiagnosticContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listByServiceNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiIssueCreateOrUpdateHeaders: ApiIssueCreateOrUpdateHeaders,
        ApiIssueGetEntityTagHeaders: ApiIssueGetEntityTagHeaders,
        ApiIssueGetHeaders: ApiIssueGetHeaders,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCollection: IssueCollection,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        IssueUpdateContract: IssueUpdateContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiIssue. */
    var ApiIssue = /** @class */ (function () {
        /**
         * Create a ApiIssue.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiIssue(client) {
            this.client = client;
        }
        ApiIssue.prototype.listByService = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByServiceOperationSpec$5, callback);
        };
        ApiIssue.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, issueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                options: options
            }, getEntityTagOperationSpec$7, callback);
        };
        ApiIssue.prototype.get = function (resourceGroupName, serviceName, apiId, issueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                options: options
            }, getOperationSpec$8, callback);
        };
        ApiIssue.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, issueId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        ApiIssue.prototype.update = function (resourceGroupName, serviceName, apiId, issueId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$5, callback);
        };
        ApiIssue.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, issueId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        ApiIssue.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$5, callback);
        };
        return ApiIssue;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByServiceOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            expandCommentsAttachments,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getEntityTagOperationSpec$7 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiIssueGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            expandCommentsAttachments,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueContract,
                headersMapper: ApiIssueGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, IssueContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IssueContract,
                headersMapper: ApiIssueCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: IssueContract,
                headersMapper: ApiIssueCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, IssueUpdateContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listByServiceNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiIssueCommentCreateOrUpdateHeaders: ApiIssueCommentCreateOrUpdateHeaders,
        ApiIssueCommentGetEntityTagHeaders: ApiIssueCommentGetEntityTagHeaders,
        ApiIssueCommentGetHeaders: ApiIssueCommentGetHeaders,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentCollection: IssueCommentCollection,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiIssueComment. */
    var ApiIssueComment = /** @class */ (function () {
        /**
         * Create a ApiIssueComment.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiIssueComment(client) {
            this.client = client;
        }
        ApiIssueComment.prototype.listByService = function (resourceGroupName, serviceName, apiId, issueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                options: options
            }, listByServiceOperationSpec$6, callback);
        };
        ApiIssueComment.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, issueId, commentId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                commentId: commentId,
                options: options
            }, getEntityTagOperationSpec$8, callback);
        };
        ApiIssueComment.prototype.get = function (resourceGroupName, serviceName, apiId, issueId, commentId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                commentId: commentId,
                options: options
            }, getOperationSpec$9, callback);
        };
        ApiIssueComment.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, issueId, commentId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                commentId: commentId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        ApiIssueComment.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, issueId, commentId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                commentId: commentId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$9, callback);
        };
        ApiIssueComment.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$6, callback);
        };
        return ApiIssueComment;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByServiceOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCommentCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getEntityTagOperationSpec$8 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            commentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiIssueCommentGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            commentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCommentContract,
                headersMapper: ApiIssueCommentGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            commentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, IssueCommentContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IssueCommentContract,
                headersMapper: ApiIssueCommentCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: IssueCommentContract,
                headersMapper: ApiIssueCommentCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var deleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            commentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listByServiceNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCommentCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiIssueAttachmentCreateOrUpdateHeaders: ApiIssueAttachmentCreateOrUpdateHeaders,
        ApiIssueAttachmentGetEntityTagHeaders: ApiIssueAttachmentGetEntityTagHeaders,
        ApiIssueAttachmentGetHeaders: ApiIssueAttachmentGetHeaders,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentCollection: IssueAttachmentCollection,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiIssueAttachment. */
    var ApiIssueAttachment = /** @class */ (function () {
        /**
         * Create a ApiIssueAttachment.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiIssueAttachment(client) {
            this.client = client;
        }
        ApiIssueAttachment.prototype.listByService = function (resourceGroupName, serviceName, apiId, issueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                options: options
            }, listByServiceOperationSpec$7, callback);
        };
        ApiIssueAttachment.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, issueId, attachmentId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                attachmentId: attachmentId,
                options: options
            }, getEntityTagOperationSpec$9, callback);
        };
        ApiIssueAttachment.prototype.get = function (resourceGroupName, serviceName, apiId, issueId, attachmentId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                attachmentId: attachmentId,
                options: options
            }, getOperationSpec$a, callback);
        };
        ApiIssueAttachment.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, issueId, attachmentId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                attachmentId: attachmentId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$8, callback);
        };
        ApiIssueAttachment.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, issueId, attachmentId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                issueId: issueId,
                attachmentId: attachmentId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$a, callback);
        };
        ApiIssueAttachment.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$7, callback);
        };
        return ApiIssueAttachment;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByServiceOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueAttachmentCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getEntityTagOperationSpec$9 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            attachmentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiIssueAttachmentGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            attachmentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueAttachmentContract,
                headersMapper: ApiIssueAttachmentGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var createOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            attachmentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, IssueAttachmentContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IssueAttachmentContract,
                headersMapper: ApiIssueAttachmentCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: IssueAttachmentContract,
                headersMapper: ApiIssueAttachmentCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var deleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId1,
            issueId,
            attachmentId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listByServiceNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueAttachmentCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiTagDescriptionCreateOrUpdateHeaders: ApiTagDescriptionCreateOrUpdateHeaders,
        ApiTagDescriptionGetEntityTagHeaders: ApiTagDescriptionGetEntityTagHeaders,
        ApiTagDescriptionGetHeaders: ApiTagDescriptionGetHeaders,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionCollection: TagDescriptionCollection,
        TagDescriptionContract: TagDescriptionContract,
        TagDescriptionCreateParameters: TagDescriptionCreateParameters,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiTagDescription. */
    var ApiTagDescription = /** @class */ (function () {
        /**
         * Create a ApiTagDescription.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiTagDescription(client) {
            this.client = client;
        }
        ApiTagDescription.prototype.listByService = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByServiceOperationSpec$8, callback);
        };
        ApiTagDescription.prototype.getEntityTag = function (resourceGroupName, serviceName, apiId, tagDescriptionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagDescriptionId: tagDescriptionId,
                options: options
            }, getEntityTagOperationSpec$a, callback);
        };
        ApiTagDescription.prototype.get = function (resourceGroupName, serviceName, apiId, tagDescriptionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagDescriptionId: tagDescriptionId,
                options: options
            }, getOperationSpec$b, callback);
        };
        ApiTagDescription.prototype.createOrUpdate = function (resourceGroupName, serviceName, apiId, tagDescriptionId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagDescriptionId: tagDescriptionId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$9, callback);
        };
        ApiTagDescription.prototype.deleteMethod = function (resourceGroupName, serviceName, apiId, tagDescriptionId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                tagDescriptionId: tagDescriptionId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$b, callback);
        };
        ApiTagDescription.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$8, callback);
        };
        return ApiTagDescription;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listByServiceOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagDescriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getEntityTagOperationSpec$a = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagDescriptionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiTagDescriptionGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagDescriptionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagDescriptionContract,
                headersMapper: ApiTagDescriptionGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var createOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagDescriptionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TagDescriptionCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TagDescriptionContract,
                headersMapper: ApiTagDescriptionCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: TagDescriptionContract,
                headersMapper: ApiTagDescriptionCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var deleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            tagDescriptionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listByServiceNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagDescriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiContractProperties: ApiContractProperties,
        ApiEntityBaseContract: ApiEntityBaseContract,
        ApiTagResourceContractProperties: ApiTagResourceContractProperties,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        CloudError: CloudError,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OperationTagResourceContractProperties: OperationTagResourceContractProperties,
        ProductEntityBaseParameters: ProductEntityBaseParameters,
        ProductTagResourceContractProperties: ProductTagResourceContractProperties,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        TagResourceCollection: TagResourceCollection,
        TagResourceContract: TagResourceContract,
        TagTagResourceContractProperties: TagTagResourceContractProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OperationOperations. */
    var OperationOperations = /** @class */ (function () {
        /**
         * Create a OperationOperations.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function OperationOperations(client) {
            this.client = client;
        }
        OperationOperations.prototype.listByTags = function (resourceGroupName, serviceName, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                options: options
            }, listByTagsOperationSpec$1, callback);
        };
        OperationOperations.prototype.listByTagsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByTagsNextOperationSpec$1, callback);
        };
        return OperationOperations;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listByTagsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operationsByTags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            includeNotTaggedOperations,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByTagsNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetCollection: ApiVersionSetCollection,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        ApiVersionSetCreateOrUpdateHeaders: ApiVersionSetCreateOrUpdateHeaders,
        ApiVersionSetGetEntityTagHeaders: ApiVersionSetGetEntityTagHeaders,
        ApiVersionSetGetHeaders: ApiVersionSetGetHeaders,
        ApiVersionSetUpdateParameters: ApiVersionSetUpdateParameters,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiVersionSet. */
    var ApiVersionSet = /** @class */ (function () {
        /**
         * Create a ApiVersionSet.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiVersionSet(client) {
            this.client = client;
        }
        ApiVersionSet.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$9, callback);
        };
        ApiVersionSet.prototype.getEntityTag = function (resourceGroupName, serviceName, versionSetId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                versionSetId: versionSetId,
                options: options
            }, getEntityTagOperationSpec$b, callback);
        };
        ApiVersionSet.prototype.get = function (resourceGroupName, serviceName, versionSetId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                versionSetId: versionSetId,
                options: options
            }, getOperationSpec$c, callback);
        };
        ApiVersionSet.prototype.createOrUpdate = function (resourceGroupName, serviceName, versionSetId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                versionSetId: versionSetId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$a, callback);
        };
        ApiVersionSet.prototype.update = function (resourceGroupName, serviceName, versionSetId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                versionSetId: versionSetId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$6, callback);
        };
        ApiVersionSet.prototype.deleteMethod = function (resourceGroupName, serviceName, versionSetId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                versionSetId: versionSetId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$c, callback);
        };
        ApiVersionSet.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$9, callback);
        };
        return ApiVersionSet;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listByServiceOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apiVersionSets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiVersionSetCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var getEntityTagOperationSpec$b = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apiVersionSets/{versionSetId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            versionSetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ApiVersionSetGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apiVersionSets/{versionSetId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            versionSetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiVersionSetContract,
                headersMapper: ApiVersionSetGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var createOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apiVersionSets/{versionSetId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            versionSetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiVersionSetContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiVersionSetContract,
                headersMapper: ApiVersionSetCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: ApiVersionSetContract,
                headersMapper: ApiVersionSetCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apiVersionSets/{versionSetId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            versionSetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiVersionSetUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var deleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apiVersionSets/{versionSetId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            versionSetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listByServiceNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiVersionSetCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerCollection: AuthorizationServerCollection,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerCreateOrUpdateHeaders: AuthorizationServerCreateOrUpdateHeaders,
        AuthorizationServerGetEntityTagHeaders: AuthorizationServerGetEntityTagHeaders,
        AuthorizationServerGetHeaders: AuthorizationServerGetHeaders,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        ClientSecretContract: ClientSecretContract,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AuthorizationServer. */
    var AuthorizationServer = /** @class */ (function () {
        /**
         * Create a AuthorizationServer.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function AuthorizationServer(client) {
            this.client = client;
        }
        AuthorizationServer.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$a, callback);
        };
        AuthorizationServer.prototype.getEntityTag = function (resourceGroupName, serviceName, authsid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                authsid: authsid,
                options: options
            }, getEntityTagOperationSpec$c, callback);
        };
        AuthorizationServer.prototype.get = function (resourceGroupName, serviceName, authsid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                authsid: authsid,
                options: options
            }, getOperationSpec$d, callback);
        };
        AuthorizationServer.prototype.createOrUpdate = function (resourceGroupName, serviceName, authsid, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                authsid: authsid,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$b, callback);
        };
        AuthorizationServer.prototype.update = function (resourceGroupName, serviceName, authsid, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                authsid: authsid,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$7, callback);
        };
        AuthorizationServer.prototype.deleteMethod = function (resourceGroupName, serviceName, authsid, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                authsid: authsid,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$d, callback);
        };
        AuthorizationServer.prototype.listSecrets = function (resourceGroupName, serviceName, authsid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                authsid: authsid,
                options: options
            }, listSecretsOperationSpec, callback);
        };
        AuthorizationServer.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$a, callback);
        };
        return AuthorizationServer;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listByServiceOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationServerCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var getEntityTagOperationSpec$c = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            authsid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: AuthorizationServerGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            authsid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationServerContract,
                headersMapper: AuthorizationServerGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var createOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            authsid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AuthorizationServerContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AuthorizationServerContract,
                headersMapper: AuthorizationServerCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: AuthorizationServerContract,
                headersMapper: AuthorizationServerCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var updateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            authsid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AuthorizationServerUpdateContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var deleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            authsid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var listSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            authsid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientSecretContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var listByServiceNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationServerCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendCollection: BackendCollection,
        BackendContract: BackendContract,
        BackendCreateOrUpdateHeaders: BackendCreateOrUpdateHeaders,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendGetEntityTagHeaders: BackendGetEntityTagHeaders,
        BackendGetHeaders: BackendGetHeaders,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BackendUpdateParameters: BackendUpdateParameters,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Backend. */
    var Backend = /** @class */ (function () {
        /**
         * Create a Backend.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Backend(client) {
            this.client = client;
        }
        Backend.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$b, callback);
        };
        Backend.prototype.getEntityTag = function (resourceGroupName, serviceName, backendId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                backendId: backendId,
                options: options
            }, getEntityTagOperationSpec$d, callback);
        };
        Backend.prototype.get = function (resourceGroupName, serviceName, backendId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                backendId: backendId,
                options: options
            }, getOperationSpec$e, callback);
        };
        Backend.prototype.createOrUpdate = function (resourceGroupName, serviceName, backendId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                backendId: backendId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$c, callback);
        };
        Backend.prototype.update = function (resourceGroupName, serviceName, backendId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                backendId: backendId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$8, callback);
        };
        Backend.prototype.deleteMethod = function (resourceGroupName, serviceName, backendId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                backendId: backendId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$e, callback);
        };
        Backend.prototype.reconnect = function (resourceGroupName, serviceName, backendId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                backendId: backendId,
                options: options
            }, reconnectOperationSpec, callback);
        };
        Backend.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$b, callback);
        };
        return Backend;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listByServiceOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var getEntityTagOperationSpec$d = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            backendId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: BackendGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            backendId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendContract,
                headersMapper: BackendGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var createOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            backendId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BackendContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackendContract,
                headersMapper: BackendCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: BackendContract,
                headersMapper: BackendCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var updateOperationSpec$8 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            backendId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BackendUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var deleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            backendId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var reconnectOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}/reconnect",
        urlParameters: [
            resourceGroupName,
            serviceName,
            backendId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: BackendReconnectContract
        },
        responses: {
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var listByServiceNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheCollection: CacheCollection,
        CacheContract: CacheContract,
        CacheCreateOrUpdateHeaders: CacheCreateOrUpdateHeaders,
        CacheGetEntityTagHeaders: CacheGetEntityTagHeaders,
        CacheGetHeaders: CacheGetHeaders,
        CacheUpdateParameters: CacheUpdateParameters,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Cache. */
    var Cache = /** @class */ (function () {
        /**
         * Create a Cache.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Cache(client) {
            this.client = client;
        }
        Cache.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$c, callback);
        };
        Cache.prototype.getEntityTag = function (resourceGroupName, serviceName, cacheId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                cacheId: cacheId,
                options: options
            }, getEntityTagOperationSpec$e, callback);
        };
        Cache.prototype.get = function (resourceGroupName, serviceName, cacheId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                cacheId: cacheId,
                options: options
            }, getOperationSpec$f, callback);
        };
        Cache.prototype.createOrUpdate = function (resourceGroupName, serviceName, cacheId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                cacheId: cacheId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$d, callback);
        };
        Cache.prototype.update = function (resourceGroupName, serviceName, cacheId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                cacheId: cacheId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$9, callback);
        };
        Cache.prototype.deleteMethod = function (resourceGroupName, serviceName, cacheId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                cacheId: cacheId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$f, callback);
        };
        Cache.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$c, callback);
        };
        return Cache;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var listByServiceOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CacheCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var getEntityTagOperationSpec$e = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            cacheId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: CacheGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            cacheId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CacheContract,
                headersMapper: CacheGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var createOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            cacheId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CacheContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CacheContract,
                headersMapper: CacheCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: CacheContract,
                headersMapper: CacheCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var updateOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            cacheId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CacheUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var deleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            cacheId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var listByServiceNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CacheCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateCollection: CertificateCollection,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateCreateOrUpdateHeaders: CertificateCreateOrUpdateHeaders,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        CertificateGetEntityTagHeaders: CertificateGetEntityTagHeaders,
        CertificateGetHeaders: CertificateGetHeaders,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Certificate. */
    var Certificate = /** @class */ (function () {
        /**
         * Create a Certificate.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Certificate(client) {
            this.client = client;
        }
        Certificate.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$d, callback);
        };
        Certificate.prototype.getEntityTag = function (resourceGroupName, serviceName, certificateId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateId: certificateId,
                options: options
            }, getEntityTagOperationSpec$f, callback);
        };
        Certificate.prototype.get = function (resourceGroupName, serviceName, certificateId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateId: certificateId,
                options: options
            }, getOperationSpec$g, callback);
        };
        Certificate.prototype.createOrUpdate = function (resourceGroupName, serviceName, certificateId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateId: certificateId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$e, callback);
        };
        Certificate.prototype.deleteMethod = function (resourceGroupName, serviceName, certificateId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateId: certificateId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$g, callback);
        };
        Certificate.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$d, callback);
        };
        return Certificate;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var listByServiceOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var getEntityTagOperationSpec$f = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            certificateId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: CertificateGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            certificateId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateContract,
                headersMapper: CertificateGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var createOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            certificateId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CertificateCreateOrUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CertificateContract,
                headersMapper: CertificateCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: CertificateContract,
                headersMapper: CertificateCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var deleteMethodOperationSpec$g = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            certificateId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var listByServiceNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiManagementOperations. */
    var ApiManagementOperations = /** @class */ (function () {
        /**
         * Create a ApiManagementOperations.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiManagementOperations(client) {
            this.client = client;
        }
        ApiManagementOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ApiManagementOperations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return ApiManagementOperations;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.ApiManagement/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        ResourceSku: ResourceSku,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuResult: ResourceSkuResult,
        ResourceSkuResults: ResourceSkuResults
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiManagementServiceSkus. */
    var ApiManagementServiceSkus = /** @class */ (function () {
        /**
         * Create a ApiManagementServiceSkus.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiManagementServiceSkus(client) {
            this.client = client;
        }
        ApiManagementServiceSkus.prototype.listAvailableServiceSkus = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listAvailableServiceSkusOperationSpec, callback);
        };
        ApiManagementServiceSkus.prototype.listAvailableServiceSkusNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAvailableServiceSkusNextOperationSpec, callback);
        };
        return ApiManagementServiceSkus;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var listAvailableServiceSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/skus",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkuResults
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$l
    };
    var listAvailableServiceSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkuResults
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceApplyNetworkConfigurationParameters: ApiManagementServiceApplyNetworkConfigurationParameters,
        ApiManagementServiceBackupRestoreParameters: ApiManagementServiceBackupRestoreParameters,
        ApiManagementServiceCheckNameAvailabilityParameters: ApiManagementServiceCheckNameAvailabilityParameters,
        ApiManagementServiceGetSsoTokenResult: ApiManagementServiceGetSsoTokenResult,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceListResult: ApiManagementServiceListResult,
        ApiManagementServiceNameAvailabilityResult: ApiManagementServiceNameAvailabilityResult,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        CloudError: CloudError,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiManagementService. */
    var ApiManagementService = /** @class */ (function () {
        /**
         * Create a ApiManagementService.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiManagementService(client) {
            this.client = client;
        }
        /**
         * Restores a backup of an API Management service created using the ApiManagementService_Backup
         * operation on the current service. This is a long running operation and could take several
         * minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the Restore API Management service from backup
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiManagementServiceRestoreResponse>
         */
        ApiManagementService.prototype.restore = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginRestore(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a backup of the API Management service to the given Azure Storage Account. This is long
         * running operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiManagementServiceBackupResponse>
         */
        ApiManagementService.prototype.backup = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginBackup(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an API Management service. This is long running operation and could take
         * several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiManagementServiceCreateOrUpdateResponse>
         */
        ApiManagementService.prototype.createOrUpdate = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing API Management service.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiManagementServiceUpdateResponse>
         */
        ApiManagementService.prototype.update = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApiManagementService.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$h, callback);
        };
        /**
         * Deletes an existing API Management service.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiManagementServiceDeleteMethodResponse>
         */
        ApiManagementService.prototype.deleteMethod = function (resourceGroupName, serviceName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApiManagementService.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        ApiManagementService.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        ApiManagementService.prototype.getSsoToken = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getSsoTokenOperationSpec, callback);
        };
        ApiManagementService.prototype.checkNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated
         * network settings.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApiManagementServiceApplyNetworkConfigurationUpdatesResponse>
         */
        ApiManagementService.prototype.applyNetworkConfigurationUpdates = function (resourceGroupName, serviceName, options) {
            return this.beginApplyNetworkConfigurationUpdates(resourceGroupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restores a backup of an API Management service created using the ApiManagementService_Backup
         * operation on the current service. This is a long running operation and could take several
         * minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the Restore API Management service from backup
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiManagementService.prototype.beginRestore = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginRestoreOperationSpec, options);
        };
        /**
         * Creates a backup of the API Management service to the given Azure Storage Account. This is long
         * running operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiManagementService.prototype.beginBackup = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginBackupOperationSpec, options);
        };
        /**
         * Creates or updates an API Management service. This is long running operation and could take
         * several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiManagementService.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Updates an existing API Management service.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiManagementService.prototype.beginUpdate = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes an existing API Management service.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiManagementService.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated
         * network settings.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApiManagementService.prototype.beginApplyNetworkConfigurationUpdates = function (resourceGroupName, serviceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, beginApplyNetworkConfigurationUpdatesOperationSpec, options);
        };
        ApiManagementService.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        ApiManagementService.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ApiManagementService;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$m);
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiManagementServiceResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiManagementServiceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/service",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiManagementServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var getSsoTokenOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/getssotoken",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiManagementServiceGetSsoTokenResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiManagementServiceCheckNameAvailabilityParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiManagementServiceNameAvailabilityResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var beginRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/restore",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiManagementServiceBackupRestoreParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiManagementServiceResource
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var beginBackupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backup",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiManagementServiceBackupRestoreParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiManagementServiceResource
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiManagementServiceResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiManagementServiceResource
            },
            201: {
                bodyMapper: ApiManagementServiceResource
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ApiManagementServiceUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApiManagementServiceResource
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {
                bodyMapper: ApiManagementServiceResource
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var beginApplyNetworkConfigurationUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/applynetworkconfigurationupdates",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: ApiManagementServiceApplyNetworkConfigurationParameters
        },
        responses: {
            200: {
                bodyMapper: ApiManagementServiceResource
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiManagementServiceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiManagementServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$n = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticCollection: DiagnosticCollection,
        DiagnosticContract: DiagnosticContract,
        DiagnosticCreateOrUpdateHeaders: DiagnosticCreateOrUpdateHeaders,
        DiagnosticGetEntityTagHeaders: DiagnosticGetEntityTagHeaders,
        DiagnosticGetHeaders: DiagnosticGetHeaders,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Diagnostic. */
    var Diagnostic = /** @class */ (function () {
        /**
         * Create a Diagnostic.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Diagnostic(client) {
            this.client = client;
        }
        Diagnostic.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$e, callback);
        };
        Diagnostic.prototype.getEntityTag = function (resourceGroupName, serviceName, diagnosticId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                diagnosticId: diagnosticId,
                options: options
            }, getEntityTagOperationSpec$g, callback);
        };
        Diagnostic.prototype.get = function (resourceGroupName, serviceName, diagnosticId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                diagnosticId: diagnosticId,
                options: options
            }, getOperationSpec$i, callback);
        };
        Diagnostic.prototype.createOrUpdate = function (resourceGroupName, serviceName, diagnosticId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                diagnosticId: diagnosticId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$f, callback);
        };
        Diagnostic.prototype.update = function (resourceGroupName, serviceName, diagnosticId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                diagnosticId: diagnosticId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$a, callback);
        };
        Diagnostic.prototype.deleteMethod = function (resourceGroupName, serviceName, diagnosticId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                diagnosticId: diagnosticId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$h, callback);
        };
        Diagnostic.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$e, callback);
        };
        return Diagnostic;
    }());
    // Operation Specifications
    var serializer$n = new msRest.Serializer(Mappers$n);
    var listByServiceOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var getEntityTagOperationSpec$g = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: DiagnosticGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticContract,
                headersMapper: DiagnosticGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var createOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DiagnosticContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiagnosticContract,
                headersMapper: DiagnosticCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: DiagnosticContract,
                headersMapper: DiagnosticCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var updateOperationSpec$a = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DiagnosticContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var deleteMethodOperationSpec$h = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            diagnosticId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var listByServiceNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$o = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateCollection: EmailTemplateCollection,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateGetEntityTagHeaders: EmailTemplateGetEntityTagHeaders,
        EmailTemplateGetHeaders: EmailTemplateGetHeaders,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        EmailTemplateUpdateParameters: EmailTemplateUpdateParameters,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EmailTemplate. */
    var EmailTemplate = /** @class */ (function () {
        /**
         * Create a EmailTemplate.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function EmailTemplate(client) {
            this.client = client;
        }
        EmailTemplate.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$f, callback);
        };
        EmailTemplate.prototype.getEntityTag = function (resourceGroupName, serviceName, templateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                templateName: templateName,
                options: options
            }, getEntityTagOperationSpec$h, callback);
        };
        EmailTemplate.prototype.get = function (resourceGroupName, serviceName, templateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                templateName: templateName,
                options: options
            }, getOperationSpec$j, callback);
        };
        EmailTemplate.prototype.createOrUpdate = function (resourceGroupName, serviceName, templateName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                templateName: templateName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$g, callback);
        };
        EmailTemplate.prototype.update = function (resourceGroupName, serviceName, templateName, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                templateName: templateName,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$b, callback);
        };
        EmailTemplate.prototype.deleteMethod = function (resourceGroupName, serviceName, templateName, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                templateName: templateName,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$i, callback);
        };
        EmailTemplate.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$f, callback);
        };
        return EmailTemplate;
    }());
    // Operation Specifications
    var serializer$o = new msRest.Serializer(Mappers$o);
    var listByServiceOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EmailTemplateCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var getEntityTagOperationSpec$h = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            templateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: EmailTemplateGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            templateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EmailTemplateContract,
                headersMapper: EmailTemplateGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var createOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            templateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, EmailTemplateUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: EmailTemplateContract
            },
            201: {
                bodyMapper: EmailTemplateContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var updateOperationSpec$b = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            templateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, EmailTemplateUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var deleteMethodOperationSpec$i = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            templateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var listByServiceNextOperationSpec$f = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EmailTemplateCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$p = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayCollection: GatewayCollection,
        GatewayContract: GatewayContract,
        GatewayCreateOrUpdateHeaders: GatewayCreateOrUpdateHeaders,
        GatewayGetEntityTagHeaders: GatewayGetEntityTagHeaders,
        GatewayGetHeaders: GatewayGetHeaders,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GatewayKeyRegenerationRequestContract: GatewayKeyRegenerationRequestContract,
        GatewayKeysContract: GatewayKeysContract,
        GatewayListKeysHeaders: GatewayListKeysHeaders,
        GatewayTokenContract: GatewayTokenContract,
        GatewayTokenRequestContract: GatewayTokenRequestContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Gateway. */
    var Gateway = /** @class */ (function () {
        /**
         * Create a Gateway.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Gateway(client) {
            this.client = client;
        }
        Gateway.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$g, callback);
        };
        Gateway.prototype.getEntityTag = function (resourceGroupName, serviceName, gatewayId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                options: options
            }, getEntityTagOperationSpec$i, callback);
        };
        Gateway.prototype.get = function (resourceGroupName, serviceName, gatewayId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                options: options
            }, getOperationSpec$k, callback);
        };
        Gateway.prototype.createOrUpdate = function (resourceGroupName, serviceName, gatewayId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$h, callback);
        };
        Gateway.prototype.update = function (resourceGroupName, serviceName, gatewayId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$c, callback);
        };
        Gateway.prototype.deleteMethod = function (resourceGroupName, serviceName, gatewayId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$j, callback);
        };
        Gateway.prototype.listKeys = function (resourceGroupName, serviceName, gatewayId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Gateway.prototype.regenerateKey = function (resourceGroupName, serviceName, gatewayId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                parameters: parameters,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        Gateway.prototype.generateToken = function (resourceGroupName, serviceName, gatewayId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                parameters: parameters,
                options: options
            }, generateTokenOperationSpec, callback);
        };
        Gateway.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$g, callback);
        };
        return Gateway;
    }());
    // Operation Specifications
    var serializer$p = new msRest.Serializer(Mappers$p);
    var listByServiceOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var getEntityTagOperationSpec$i = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: GatewayGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var getOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayContract,
                headersMapper: GatewayGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var createOrUpdateOperationSpec$h = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GatewayContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GatewayContract,
                headersMapper: GatewayCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: GatewayContract,
                headersMapper: GatewayCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var updateOperationSpec$c = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GatewayContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var deleteMethodOperationSpec$j = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/listKeys",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayKeysContract,
                headersMapper: GatewayListKeysHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/regenerateKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GatewayKeyRegenerationRequestContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var generateTokenOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/generateToken",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GatewayTokenRequestContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GatewayTokenContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var listByServiceNextOperationSpec$g = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$q = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationCollection: GatewayHostnameConfigurationCollection,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GatewayHostnameConfigurationCreateOrUpdateHeaders: GatewayHostnameConfigurationCreateOrUpdateHeaders,
        GatewayHostnameConfigurationGetEntityTagHeaders: GatewayHostnameConfigurationGetEntityTagHeaders,
        GatewayHostnameConfigurationGetHeaders: GatewayHostnameConfigurationGetHeaders,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GatewayHostnameConfiguration. */
    var GatewayHostnameConfiguration = /** @class */ (function () {
        /**
         * Create a GatewayHostnameConfiguration.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function GatewayHostnameConfiguration(client) {
            this.client = client;
        }
        GatewayHostnameConfiguration.prototype.listByService = function (resourceGroupName, serviceName, gatewayId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                options: options
            }, listByServiceOperationSpec$h, callback);
        };
        GatewayHostnameConfiguration.prototype.getEntityTag = function (resourceGroupName, serviceName, gatewayId, hcId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                hcId: hcId,
                options: options
            }, getEntityTagOperationSpec$j, callback);
        };
        GatewayHostnameConfiguration.prototype.get = function (resourceGroupName, serviceName, gatewayId, hcId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                hcId: hcId,
                options: options
            }, getOperationSpec$l, callback);
        };
        GatewayHostnameConfiguration.prototype.createOrUpdate = function (resourceGroupName, serviceName, gatewayId, hcId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                hcId: hcId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$i, callback);
        };
        GatewayHostnameConfiguration.prototype.deleteMethod = function (resourceGroupName, serviceName, gatewayId, hcId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                hcId: hcId,
                options: options
            }, deleteMethodOperationSpec$k, callback);
        };
        GatewayHostnameConfiguration.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$h, callback);
        };
        return GatewayHostnameConfiguration;
    }());
    // Operation Specifications
    var serializer$q = new msRest.Serializer(Mappers$q);
    var listByServiceOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayHostnameConfigurationCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var getEntityTagOperationSpec$j = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            hcId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: GatewayHostnameConfigurationGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var getOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            hcId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayHostnameConfigurationContract,
                headersMapper: GatewayHostnameConfigurationGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var createOrUpdateOperationSpec$i = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            hcId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GatewayHostnameConfigurationContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GatewayHostnameConfigurationContract,
                headersMapper: GatewayHostnameConfigurationCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: GatewayHostnameConfigurationContract,
                headersMapper: GatewayHostnameConfigurationCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var deleteMethodOperationSpec$k = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            hcId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var listByServiceNextOperationSpec$h = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayHostnameConfigurationCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$r = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiCollection: ApiCollection,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayApiGetEntityTagHeaders: GatewayApiGetEntityTagHeaders,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GatewayApi. */
    var GatewayApi = /** @class */ (function () {
        /**
         * Create a GatewayApi.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function GatewayApi(client) {
            this.client = client;
        }
        GatewayApi.prototype.listByService = function (resourceGroupName, serviceName, gatewayId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                options: options
            }, listByServiceOperationSpec$i, callback);
        };
        GatewayApi.prototype.getEntityTag = function (resourceGroupName, serviceName, gatewayId, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                apiId: apiId,
                options: options
            }, getEntityTagOperationSpec$k, callback);
        };
        GatewayApi.prototype.createOrUpdate = function (resourceGroupName, serviceName, gatewayId, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                apiId: apiId,
                options: options
            }, createOrUpdateOperationSpec$j, callback);
        };
        GatewayApi.prototype.deleteMethod = function (resourceGroupName, serviceName, gatewayId, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                gatewayId: gatewayId,
                apiId: apiId,
                options: options
            }, deleteMethodOperationSpec$l, callback);
        };
        GatewayApi.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$i, callback);
        };
        return GatewayApi;
    }());
    // Operation Specifications
    var serializer$r = new msRest.Serializer(Mappers$r);
    var listByServiceOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/apis",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            subscriptionId
        ],
        queryParameters: [
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var getEntityTagOperationSpec$k = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: GatewayApiGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var createOrUpdateOperationSpec$j = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: AssociationContract
        },
        responses: {
            200: {
                bodyMapper: ApiContract
            },
            201: {
                bodyMapper: ApiContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var deleteMethodOperationSpec$l = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            gatewayId,
            apiId1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var listByServiceNextOperationSpec$i = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$s = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupCollection: GroupCollection,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        GroupCreateOrUpdateHeaders: GroupCreateOrUpdateHeaders,
        GroupCreateParameters: GroupCreateParameters,
        GroupGetEntityTagHeaders: GroupGetEntityTagHeaders,
        GroupGetHeaders: GroupGetHeaders,
        GroupUpdateParameters: GroupUpdateParameters,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Group. */
    var Group = /** @class */ (function () {
        /**
         * Create a Group.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Group(client) {
            this.client = client;
        }
        Group.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$j, callback);
        };
        Group.prototype.getEntityTag = function (resourceGroupName, serviceName, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                options: options
            }, getEntityTagOperationSpec$l, callback);
        };
        Group.prototype.get = function (resourceGroupName, serviceName, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                options: options
            }, getOperationSpec$m, callback);
        };
        Group.prototype.createOrUpdate = function (resourceGroupName, serviceName, groupId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$k, callback);
        };
        Group.prototype.update = function (resourceGroupName, serviceName, groupId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$d, callback);
        };
        Group.prototype.deleteMethod = function (resourceGroupName, serviceName, groupId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$m, callback);
        };
        Group.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$j, callback);
        };
        return Group;
    }());
    // Operation Specifications
    var serializer$s = new msRest.Serializer(Mappers$s);
    var listByServiceOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var getEntityTagOperationSpec$l = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: GroupGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var getOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupContract,
                headersMapper: GroupGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var createOrUpdateOperationSpec$k = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GroupCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GroupContract,
                headersMapper: GroupCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: GroupContract,
                headersMapper: GroupCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var updateOperationSpec$d = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GroupUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var deleteMethodOperationSpec$m = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var listByServiceNextOperationSpec$j = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$t = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserCollection: UserCollection,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GroupUser. */
    var GroupUser = /** @class */ (function () {
        /**
         * Create a GroupUser.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function GroupUser(client) {
            this.client = client;
        }
        GroupUser.prototype.list = function (resourceGroupName, serviceName, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                options: options
            }, listOperationSpec$2, callback);
        };
        GroupUser.prototype.checkEntityExists = function (resourceGroupName, serviceName, groupId, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                userId: userId,
                options: options
            }, checkEntityExistsOperationSpec, callback);
        };
        GroupUser.prototype.create = function (resourceGroupName, serviceName, groupId, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                userId: userId,
                options: options
            }, createOperationSpec, callback);
        };
        GroupUser.prototype.deleteMethod = function (resourceGroupName, serviceName, groupId, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                groupId: groupId,
                userId: userId,
                options: options
            }, deleteMethodOperationSpec$n, callback);
        };
        GroupUser.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return GroupUser;
    }());
    // Operation Specifications
    var serializer$t = new msRest.Serializer(Mappers$t);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };
    var checkEntityExistsOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserContract
            },
            201: {
                bodyMapper: UserContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };
    var deleteMethodOperationSpec$n = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            groupId,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$u = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        ClientSecretContract: ClientSecretContract,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IdentityProviderCreateOrUpdateHeaders: IdentityProviderCreateOrUpdateHeaders,
        IdentityProviderGetEntityTagHeaders: IdentityProviderGetEntityTagHeaders,
        IdentityProviderGetHeaders: IdentityProviderGetHeaders,
        IdentityProviderList: IdentityProviderList,
        IdentityProviderUpdateParameters: IdentityProviderUpdateParameters,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IdentityProvider. */
    var IdentityProvider = /** @class */ (function () {
        /**
         * Create a IdentityProvider.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function IdentityProvider(client) {
            this.client = client;
        }
        IdentityProvider.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$k, callback);
        };
        IdentityProvider.prototype.getEntityTag = function (resourceGroupName, serviceName, identityProviderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                identityProviderName: identityProviderName,
                options: options
            }, getEntityTagOperationSpec$m, callback);
        };
        IdentityProvider.prototype.get = function (resourceGroupName, serviceName, identityProviderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                identityProviderName: identityProviderName,
                options: options
            }, getOperationSpec$n, callback);
        };
        IdentityProvider.prototype.createOrUpdate = function (resourceGroupName, serviceName, identityProviderName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                identityProviderName: identityProviderName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$l, callback);
        };
        IdentityProvider.prototype.update = function (resourceGroupName, serviceName, identityProviderName, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                identityProviderName: identityProviderName,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$e, callback);
        };
        IdentityProvider.prototype.deleteMethod = function (resourceGroupName, serviceName, identityProviderName, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                identityProviderName: identityProviderName,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$o, callback);
        };
        IdentityProvider.prototype.listSecrets = function (resourceGroupName, serviceName, identityProviderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                identityProviderName: identityProviderName,
                options: options
            }, listSecretsOperationSpec$1, callback);
        };
        IdentityProvider.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$k, callback);
        };
        return IdentityProvider;
    }());
    // Operation Specifications
    var serializer$u = new msRest.Serializer(Mappers$u);
    var listByServiceOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentityProviderList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var getEntityTagOperationSpec$m = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            identityProviderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: IdentityProviderGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var getOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            identityProviderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentityProviderContract,
                headersMapper: IdentityProviderGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var createOrUpdateOperationSpec$l = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            identityProviderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, IdentityProviderCreateContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IdentityProviderContract,
                headersMapper: IdentityProviderCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: IdentityProviderContract,
                headersMapper: IdentityProviderCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var updateOperationSpec$e = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            identityProviderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, IdentityProviderUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var deleteMethodOperationSpec$o = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            identityProviderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var listSecretsOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            identityProviderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientSecretContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var listByServiceNextOperationSpec$k = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentityProviderList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$v = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCollection: IssueCollection,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        IssueGetHeaders: IssueGetHeaders,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Issue. */
    var Issue = /** @class */ (function () {
        /**
         * Create a Issue.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Issue(client) {
            this.client = client;
        }
        Issue.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$l, callback);
        };
        Issue.prototype.get = function (resourceGroupName, serviceName, issueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                issueId: issueId,
                options: options
            }, getOperationSpec$o, callback);
        };
        Issue.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$l, callback);
        };
        return Issue;
    }());
    // Operation Specifications
    var serializer$v = new msRest.Serializer(Mappers$v);
    var listByServiceOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/issues",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };
    var getOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/issues/{issueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            issueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueContract,
                headersMapper: IssueGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };
    var listByServiceNextOperationSpec$l = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IssueCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$w = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerCollection: LoggerCollection,
        LoggerContract: LoggerContract,
        LoggerCreateOrUpdateHeaders: LoggerCreateOrUpdateHeaders,
        LoggerGetEntityTagHeaders: LoggerGetEntityTagHeaders,
        LoggerGetHeaders: LoggerGetHeaders,
        LoggerUpdateContract: LoggerUpdateContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Logger. */
    var Logger = /** @class */ (function () {
        /**
         * Create a Logger.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Logger(client) {
            this.client = client;
        }
        Logger.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$m, callback);
        };
        Logger.prototype.getEntityTag = function (resourceGroupName, serviceName, loggerId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                loggerId: loggerId,
                options: options
            }, getEntityTagOperationSpec$n, callback);
        };
        Logger.prototype.get = function (resourceGroupName, serviceName, loggerId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                loggerId: loggerId,
                options: options
            }, getOperationSpec$p, callback);
        };
        Logger.prototype.createOrUpdate = function (resourceGroupName, serviceName, loggerId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                loggerId: loggerId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$m, callback);
        };
        Logger.prototype.update = function (resourceGroupName, serviceName, loggerId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                loggerId: loggerId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$f, callback);
        };
        Logger.prototype.deleteMethod = function (resourceGroupName, serviceName, loggerId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                loggerId: loggerId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$p, callback);
        };
        Logger.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$m, callback);
        };
        return Logger;
    }());
    // Operation Specifications
    var serializer$w = new msRest.Serializer(Mappers$w);
    var listByServiceOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoggerCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var getEntityTagOperationSpec$n = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            loggerId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: LoggerGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var getOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            loggerId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoggerContract,
                headersMapper: LoggerGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var createOrUpdateOperationSpec$m = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            loggerId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, LoggerContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: LoggerContract,
                headersMapper: LoggerCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: LoggerContract,
                headersMapper: LoggerCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var updateOperationSpec$f = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            loggerId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, LoggerUpdateContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var deleteMethodOperationSpec$p = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            loggerId,
            subscriptionId
        ],
        queryParameters: [
            force,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var listByServiceNextOperationSpec$m = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoggerCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$x = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueCollection: NamedValueCollection,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NamedValueCreateOrUpdateHeaders: NamedValueCreateOrUpdateHeaders,
        NamedValueGetEntityTagHeaders: NamedValueGetEntityTagHeaders,
        NamedValueGetHeaders: NamedValueGetHeaders,
        NamedValueUpdateHeaders: NamedValueUpdateHeaders,
        NamedValueUpdateParameters: NamedValueUpdateParameters,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        PropertyValueContract: PropertyValueContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NamedValue. */
    var NamedValue = /** @class */ (function () {
        /**
         * Create a NamedValue.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function NamedValue(client) {
            this.client = client;
        }
        NamedValue.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$n, callback);
        };
        NamedValue.prototype.getEntityTag = function (resourceGroupName, serviceName, namedValueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                namedValueId: namedValueId,
                options: options
            }, getEntityTagOperationSpec$o, callback);
        };
        NamedValue.prototype.get = function (resourceGroupName, serviceName, namedValueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                namedValueId: namedValueId,
                options: options
            }, getOperationSpec$q, callback);
        };
        /**
         * Creates or updates a NamedValue.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param namedValueId Identifier of the NamedValue.
         * @param parameters Create parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.NamedValueCreateOrUpdateResponse>
         */
        NamedValue.prototype.createOrUpdate = function (resourceGroupName, serviceName, namedValueId, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, namedValueId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates the specific NamedValue.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param namedValueId Identifier of the NamedValue.
         * @param parameters Update parameters.
         * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
         * response of the GET request or it should be * for unconditional update.
         * @param [options] The optional parameters
         * @returns Promise<Models.NamedValueUpdateResponse>
         */
        NamedValue.prototype.update = function (resourceGroupName, serviceName, namedValueId, parameters, ifMatch, options) {
            return this.beginUpdate(resourceGroupName, serviceName, namedValueId, parameters, ifMatch, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NamedValue.prototype.deleteMethod = function (resourceGroupName, serviceName, namedValueId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                namedValueId: namedValueId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$q, callback);
        };
        NamedValue.prototype.listValue = function (resourceGroupName, serviceName, namedValueId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                namedValueId: namedValueId,
                options: options
            }, listValueOperationSpec, callback);
        };
        /**
         * Creates or updates a NamedValue.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param namedValueId Identifier of the NamedValue.
         * @param parameters Create parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NamedValue.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, namedValueId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                namedValueId: namedValueId,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Updates the specific NamedValue.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param namedValueId Identifier of the NamedValue.
         * @param parameters Update parameters.
         * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
         * response of the GET request or it should be * for unconditional update.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NamedValue.prototype.beginUpdate = function (resourceGroupName, serviceName, namedValueId, parameters, ifMatch, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                namedValueId: namedValueId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        NamedValue.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$n, callback);
        };
        return NamedValue;
    }());
    // Operation Specifications
    var serializer$x = new msRest.Serializer(Mappers$x);
    var listByServiceOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamedValueCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var getEntityTagOperationSpec$o = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            namedValueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: NamedValueGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var getOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            namedValueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamedValueContract,
                headersMapper: NamedValueGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var deleteMethodOperationSpec$q = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            namedValueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var listValueOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}/listValue",
        urlParameters: [
            resourceGroupName,
            serviceName,
            namedValueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PropertyValueContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            namedValueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, NamedValueCreateContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NamedValueContract,
                headersMapper: NamedValueCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: NamedValueContract,
                headersMapper: NamedValueCreateOrUpdateHeaders
            },
            202: {
                headersMapper: NamedValueCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            namedValueId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, NamedValueUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NamedValueContract,
                headersMapper: NamedValueUpdateHeaders
            },
            202: {
                headersMapper: NamedValueUpdateHeaders
            },
            204: {
                headersMapper: NamedValueUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var listByServiceNextOperationSpec$n = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamedValueCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$y = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ConnectivityStatusContract: ConnectivityStatusContract,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        NetworkStatusContract: NetworkStatusContract,
        NetworkStatusContractByLocation: NetworkStatusContractByLocation
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkStatus. */
    var NetworkStatus = /** @class */ (function () {
        /**
         * Create a NetworkStatus.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function NetworkStatus(client) {
            this.client = client;
        }
        NetworkStatus.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$o, callback);
        };
        NetworkStatus.prototype.listByLocation = function (resourceGroupName, serviceName, locationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                locationName: locationName,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        return NetworkStatus;
    }());
    // Operation Specifications
    var serializer$y = new msRest.Serializer(Mappers$y);
    var listByServiceOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/networkstatus",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkStatusContractByLocation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/locations/{locationName}/networkstatus",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            locationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkStatusContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$z = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationCollection: NotificationCollection,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Notification. */
    var Notification = /** @class */ (function () {
        /**
         * Create a Notification.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Notification(client) {
            this.client = client;
        }
        Notification.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$p, callback);
        };
        Notification.prototype.get = function (resourceGroupName, serviceName, notificationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                options: options
            }, getOperationSpec$r, callback);
        };
        Notification.prototype.createOrUpdate = function (resourceGroupName, serviceName, notificationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                options: options
            }, createOrUpdateOperationSpec$n, callback);
        };
        Notification.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$o, callback);
        };
        return Notification;
    }());
    // Operation Specifications
    var serializer$z = new msRest.Serializer(Mappers$z);
    var listByServiceOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var getOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var createOrUpdateOperationSpec$n = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var listByServiceNextOperationSpec$o = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$A = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserCollection: RecipientUserCollection,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NotificationRecipientUser. */
    var NotificationRecipientUser = /** @class */ (function () {
        /**
         * Create a NotificationRecipientUser.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function NotificationRecipientUser(client) {
            this.client = client;
        }
        NotificationRecipientUser.prototype.listByNotification = function (resourceGroupName, serviceName, notificationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                options: options
            }, listByNotificationOperationSpec, callback);
        };
        NotificationRecipientUser.prototype.checkEntityExists = function (resourceGroupName, serviceName, notificationName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                userId: userId,
                options: options
            }, checkEntityExistsOperationSpec$1, callback);
        };
        NotificationRecipientUser.prototype.createOrUpdate = function (resourceGroupName, serviceName, notificationName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                userId: userId,
                options: options
            }, createOrUpdateOperationSpec$o, callback);
        };
        NotificationRecipientUser.prototype.deleteMethod = function (resourceGroupName, serviceName, notificationName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                userId: userId,
                options: options
            }, deleteMethodOperationSpec$r, callback);
        };
        return NotificationRecipientUser;
    }());
    // Operation Specifications
    var serializer$A = new msRest.Serializer(Mappers$A);
    var listByNotificationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecipientUserCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };
    var checkEntityExistsOperationSpec$1 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };
    var createOrUpdateOperationSpec$o = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecipientUserContract
            },
            201: {
                bodyMapper: RecipientUserContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };
    var deleteMethodOperationSpec$r = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$B = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailCollection: RecipientEmailCollection,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NotificationRecipientEmail. */
    var NotificationRecipientEmail = /** @class */ (function () {
        /**
         * Create a NotificationRecipientEmail.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function NotificationRecipientEmail(client) {
            this.client = client;
        }
        NotificationRecipientEmail.prototype.listByNotification = function (resourceGroupName, serviceName, notificationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                options: options
            }, listByNotificationOperationSpec$1, callback);
        };
        NotificationRecipientEmail.prototype.checkEntityExists = function (resourceGroupName, serviceName, notificationName, email, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                email: email,
                options: options
            }, checkEntityExistsOperationSpec$2, callback);
        };
        NotificationRecipientEmail.prototype.createOrUpdate = function (resourceGroupName, serviceName, notificationName, email, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                email: email,
                options: options
            }, createOrUpdateOperationSpec$p, callback);
        };
        NotificationRecipientEmail.prototype.deleteMethod = function (resourceGroupName, serviceName, notificationName, email, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                notificationName: notificationName,
                email: email,
                options: options
            }, deleteMethodOperationSpec$s, callback);
        };
        return NotificationRecipientEmail;
    }());
    // Operation Specifications
    var serializer$B = new msRest.Serializer(Mappers$B);
    var listByNotificationOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientEmails",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecipientEmailCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var checkEntityExistsOperationSpec$2 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientEmails/{email}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            email,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var createOrUpdateOperationSpec$p = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientEmails/{email}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            email,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecipientEmailContract
            },
            201: {
                bodyMapper: RecipientEmailContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var deleteMethodOperationSpec$s = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientEmails/{email}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            notificationName,
            email,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$C = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        ClientSecretContract: ClientSecretContract,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenIdConnectProviderCollection: OpenIdConnectProviderCollection,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OpenIdConnectProviderCreateOrUpdateHeaders: OpenIdConnectProviderCreateOrUpdateHeaders,
        OpenIdConnectProviderGetEntityTagHeaders: OpenIdConnectProviderGetEntityTagHeaders,
        OpenIdConnectProviderGetHeaders: OpenIdConnectProviderGetHeaders,
        OpenidConnectProviderUpdateContract: OpenidConnectProviderUpdateContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OpenIdConnectProvider. */
    var OpenIdConnectProvider = /** @class */ (function () {
        /**
         * Create a OpenIdConnectProvider.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function OpenIdConnectProvider(client) {
            this.client = client;
        }
        OpenIdConnectProvider.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$q, callback);
        };
        OpenIdConnectProvider.prototype.getEntityTag = function (resourceGroupName, serviceName, opid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                opid: opid,
                options: options
            }, getEntityTagOperationSpec$p, callback);
        };
        OpenIdConnectProvider.prototype.get = function (resourceGroupName, serviceName, opid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                opid: opid,
                options: options
            }, getOperationSpec$s, callback);
        };
        OpenIdConnectProvider.prototype.createOrUpdate = function (resourceGroupName, serviceName, opid, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                opid: opid,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$q, callback);
        };
        OpenIdConnectProvider.prototype.update = function (resourceGroupName, serviceName, opid, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                opid: opid,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$g, callback);
        };
        OpenIdConnectProvider.prototype.deleteMethod = function (resourceGroupName, serviceName, opid, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                opid: opid,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$t, callback);
        };
        OpenIdConnectProvider.prototype.listSecrets = function (resourceGroupName, serviceName, opid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                opid: opid,
                options: options
            }, listSecretsOperationSpec$2, callback);
        };
        OpenIdConnectProvider.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$p, callback);
        };
        return OpenIdConnectProvider;
    }());
    // Operation Specifications
    var serializer$C = new msRest.Serializer(Mappers$C);
    var listByServiceOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenIdConnectProviderCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var getEntityTagOperationSpec$p = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            opid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: OpenIdConnectProviderGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var getOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            opid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenidConnectProviderContract,
                headersMapper: OpenIdConnectProviderGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var createOrUpdateOperationSpec$q = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            opid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OpenidConnectProviderContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OpenidConnectProviderContract,
                headersMapper: OpenIdConnectProviderCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: OpenidConnectProviderContract,
                headersMapper: OpenIdConnectProviderCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var updateOperationSpec$g = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            opid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OpenidConnectProviderUpdateContract), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var deleteMethodOperationSpec$t = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            opid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var listSecretsOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            opid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientSecretContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var listByServiceNextOperationSpec$p = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenIdConnectProviderCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$D = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyCollection: PolicyCollection,
        PolicyContract: PolicyContract,
        PolicyCreateOrUpdateHeaders: PolicyCreateOrUpdateHeaders,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PolicyGetEntityTagHeaders: PolicyGetEntityTagHeaders,
        PolicyGetHeaders: PolicyGetHeaders,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Policy. */
    var Policy = /** @class */ (function () {
        /**
         * Create a Policy.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Policy(client) {
            this.client = client;
        }
        Policy.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$r, callback);
        };
        Policy.prototype.getEntityTag = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getEntityTagOperationSpec$q, callback);
        };
        Policy.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$t, callback);
        };
        Policy.prototype.createOrUpdate = function (resourceGroupName, serviceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$r, callback);
        };
        Policy.prototype.deleteMethod = function (resourceGroupName, serviceName, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$u, callback);
        };
        return Policy;
    }());
    // Operation Specifications
    var serializer$D = new msRest.Serializer(Mappers$D);
    var listByServiceOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var getEntityTagOperationSpec$q = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: PolicyGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var getOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            format0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: PolicyGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var createOrUpdateOperationSpec$r = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PolicyContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: PolicyCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: PolicyContract,
                headersMapper: PolicyCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var deleteMethodOperationSpec$u = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$E = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionCollection: PolicyDescriptionCollection,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PolicyDescription. */
    var PolicyDescription = /** @class */ (function () {
        /**
         * Create a PolicyDescription.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function PolicyDescription(client) {
            this.client = client;
        }
        PolicyDescription.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$s, callback);
        };
        return PolicyDescription;
    }());
    // Operation Specifications
    var serializer$E = new msRest.Serializer(Mappers$E);
    var listByServiceOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policyDescriptions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            scope1,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyDescriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$F = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SignInSettingsGetEntityTagHeaders: SignInSettingsGetEntityTagHeaders,
        SignInSettingsGetHeaders: SignInSettingsGetHeaders,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SignInSettings. */
    var SignInSettings = /** @class */ (function () {
        /**
         * Create a SignInSettings.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function SignInSettings(client) {
            this.client = client;
        }
        SignInSettings.prototype.getEntityTag = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getEntityTagOperationSpec$r, callback);
        };
        SignInSettings.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$u, callback);
        };
        SignInSettings.prototype.update = function (resourceGroupName, serviceName, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$h, callback);
        };
        SignInSettings.prototype.createOrUpdate = function (resourceGroupName, serviceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$s, callback);
        };
        return SignInSettings;
    }());
    // Operation Specifications
    var serializer$F = new msRest.Serializer(Mappers$F);
    var getEntityTagOperationSpec$r = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signin",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: SignInSettingsGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$F
    };
    var getOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signin",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortalSigninSettings,
                headersMapper: SignInSettingsGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$F
    };
    var updateOperationSpec$h = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signin",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PortalSigninSettings), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$F
    };
    var createOrUpdateOperationSpec$s = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signin",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PortalSigninSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PortalSigninSettings
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$F
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$G = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SignUpSettingsGetEntityTagHeaders: SignUpSettingsGetEntityTagHeaders,
        SignUpSettingsGetHeaders: SignUpSettingsGetHeaders,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SignUpSettings. */
    var SignUpSettings = /** @class */ (function () {
        /**
         * Create a SignUpSettings.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function SignUpSettings(client) {
            this.client = client;
        }
        SignUpSettings.prototype.getEntityTag = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getEntityTagOperationSpec$s, callback);
        };
        SignUpSettings.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$v, callback);
        };
        SignUpSettings.prototype.update = function (resourceGroupName, serviceName, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$i, callback);
        };
        SignUpSettings.prototype.createOrUpdate = function (resourceGroupName, serviceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$t, callback);
        };
        return SignUpSettings;
    }());
    // Operation Specifications
    var serializer$G = new msRest.Serializer(Mappers$G);
    var getEntityTagOperationSpec$s = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signup",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: SignUpSettingsGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$G
    };
    var getOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signup",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortalSignupSettings,
                headersMapper: SignUpSettingsGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$G
    };
    var updateOperationSpec$i = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signup",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PortalSignupSettings), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$G
    };
    var createOrUpdateOperationSpec$t = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/signup",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PortalSignupSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PortalSignupSettings
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$G
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$H = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DelegationSettingsGetEntityTagHeaders: DelegationSettingsGetEntityTagHeaders,
        DelegationSettingsGetHeaders: DelegationSettingsGetHeaders,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSettingValidationKeyContract: PortalSettingValidationKeyContract,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DelegationSettings. */
    var DelegationSettings = /** @class */ (function () {
        /**
         * Create a DelegationSettings.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function DelegationSettings(client) {
            this.client = client;
        }
        DelegationSettings.prototype.getEntityTag = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getEntityTagOperationSpec$t, callback);
        };
        DelegationSettings.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$w, callback);
        };
        DelegationSettings.prototype.update = function (resourceGroupName, serviceName, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$j, callback);
        };
        DelegationSettings.prototype.createOrUpdate = function (resourceGroupName, serviceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$u, callback);
        };
        DelegationSettings.prototype.listSecrets = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listSecretsOperationSpec$3, callback);
        };
        return DelegationSettings;
    }());
    // Operation Specifications
    var serializer$H = new msRest.Serializer(Mappers$H);
    var getEntityTagOperationSpec$t = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/delegation",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: DelegationSettingsGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$H
    };
    var getOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/delegation",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortalDelegationSettings,
                headersMapper: DelegationSettingsGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$H
    };
    var updateOperationSpec$j = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/delegation",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PortalDelegationSettings), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$H
    };
    var createOrUpdateOperationSpec$u = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/delegation",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PortalDelegationSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PortalDelegationSettings
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$H
    };
    var listSecretsOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalsettings/delegation/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortalSettingValidationKeyContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$H
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$I = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiContractProperties: ApiContractProperties,
        ApiEntityBaseContract: ApiEntityBaseContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiTagResourceContractProperties: ApiTagResourceContractProperties,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        OperationTagResourceContractProperties: OperationTagResourceContractProperties,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductCollection: ProductCollection,
        ProductContract: ProductContract,
        ProductCreateOrUpdateHeaders: ProductCreateOrUpdateHeaders,
        ProductEntityBaseParameters: ProductEntityBaseParameters,
        ProductGetEntityTagHeaders: ProductGetEntityTagHeaders,
        ProductGetHeaders: ProductGetHeaders,
        ProductTagResourceContractProperties: ProductTagResourceContractProperties,
        ProductUpdateParameters: ProductUpdateParameters,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TagResourceCollection: TagResourceCollection,
        TagResourceContract: TagResourceContract,
        TagTagResourceContractProperties: TagTagResourceContractProperties,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Product. */
    var Product = /** @class */ (function () {
        /**
         * Create a Product.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Product(client) {
            this.client = client;
        }
        Product.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$t, callback);
        };
        Product.prototype.getEntityTag = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, getEntityTagOperationSpec$u, callback);
        };
        Product.prototype.get = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, getOperationSpec$x, callback);
        };
        Product.prototype.createOrUpdate = function (resourceGroupName, serviceName, productId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$v, callback);
        };
        Product.prototype.update = function (resourceGroupName, serviceName, productId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$k, callback);
        };
        Product.prototype.deleteMethod = function (resourceGroupName, serviceName, productId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$v, callback);
        };
        Product.prototype.listByTags = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByTagsOperationSpec$2, callback);
        };
        Product.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$q, callback);
        };
        Product.prototype.listByTagsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByTagsNextOperationSpec$2, callback);
        };
        return Product;
    }());
    // Operation Specifications
    var serializer$I = new msRest.Serializer(Mappers$I);
    var listByServiceOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            expandGroups,
            tags,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var getEntityTagOperationSpec$u = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ProductGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var getOperationSpec$x = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductContract,
                headersMapper: ProductGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var createOrUpdateOperationSpec$v = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProductContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProductContract,
                headersMapper: ProductCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: ProductContract,
                headersMapper: ProductCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var updateOperationSpec$k = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProductUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var deleteMethodOperationSpec$v = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            deleteSubscriptions,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var listByTagsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/productsByTags",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            includeNotTaggedProducts,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var listByServiceNextOperationSpec$q = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProductCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };
    var listByTagsNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$I
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$J = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiCollection: ApiCollection,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProductApi. */
    var ProductApi = /** @class */ (function () {
        /**
         * Create a ProductApi.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ProductApi(client) {
            this.client = client;
        }
        ProductApi.prototype.listByProduct = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, listByProductOperationSpec$1, callback);
        };
        ProductApi.prototype.checkEntityExists = function (resourceGroupName, serviceName, productId, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                apiId: apiId,
                options: options
            }, checkEntityExistsOperationSpec$3, callback);
        };
        ProductApi.prototype.createOrUpdate = function (resourceGroupName, serviceName, productId, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                apiId: apiId,
                options: options
            }, createOrUpdateOperationSpec$w, callback);
        };
        ProductApi.prototype.deleteMethod = function (resourceGroupName, serviceName, productId, apiId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                apiId: apiId,
                options: options
            }, deleteMethodOperationSpec$w, callback);
        };
        ProductApi.prototype.listByProductNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByProductNextOperationSpec$1, callback);
        };
        return ProductApi;
    }());
    // Operation Specifications
    var serializer$J = new msRest.Serializer(Mappers$J);
    var listByProductOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$J
    };
    var checkEntityExistsOperationSpec$3 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$J
    };
    var createOrUpdateOperationSpec$w = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiContract
            },
            201: {
                bodyMapper: ApiContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$J
    };
    var deleteMethodOperationSpec$w = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$J
    };
    var listByProductNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$J
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$K = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupCollection: GroupCollection,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProductGroup. */
    var ProductGroup = /** @class */ (function () {
        /**
         * Create a ProductGroup.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ProductGroup(client) {
            this.client = client;
        }
        ProductGroup.prototype.listByProduct = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, listByProductOperationSpec$2, callback);
        };
        ProductGroup.prototype.checkEntityExists = function (resourceGroupName, serviceName, productId, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                groupId: groupId,
                options: options
            }, checkEntityExistsOperationSpec$4, callback);
        };
        ProductGroup.prototype.createOrUpdate = function (resourceGroupName, serviceName, productId, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                groupId: groupId,
                options: options
            }, createOrUpdateOperationSpec$x, callback);
        };
        ProductGroup.prototype.deleteMethod = function (resourceGroupName, serviceName, productId, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                groupId: groupId,
                options: options
            }, deleteMethodOperationSpec$x, callback);
        };
        ProductGroup.prototype.listByProductNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByProductNextOperationSpec$2, callback);
        };
        return ProductGroup;
    }());
    // Operation Specifications
    var serializer$K = new msRest.Serializer(Mappers$K);
    var listByProductOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$K
    };
    var checkEntityExistsOperationSpec$4 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$K
    };
    var createOrUpdateOperationSpec$x = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupContract
            },
            201: {
                bodyMapper: GroupContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$K
    };
    var deleteMethodOperationSpec$x = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$K
    };
    var listByProductNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$K
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$L = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionCollection: SubscriptionCollection,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProductSubscriptions. */
    var ProductSubscriptions = /** @class */ (function () {
        /**
         * Create a ProductSubscriptions.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ProductSubscriptions(client) {
            this.client = client;
        }
        ProductSubscriptions.prototype.list = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, listOperationSpec$3, callback);
        };
        ProductSubscriptions.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return ProductSubscriptions;
    }());
    // Operation Specifications
    var serializer$L = new msRest.Serializer(Mappers$L);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/subscriptions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$L
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$L
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$M = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyCollection: PolicyCollection,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        ProductPolicyCreateOrUpdateHeaders: ProductPolicyCreateOrUpdateHeaders,
        ProductPolicyGetEntityTagHeaders: ProductPolicyGetEntityTagHeaders,
        ProductPolicyGetHeaders: ProductPolicyGetHeaders,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProductPolicy. */
    var ProductPolicy = /** @class */ (function () {
        /**
         * Create a ProductPolicy.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ProductPolicy(client) {
            this.client = client;
        }
        ProductPolicy.prototype.listByProduct = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, listByProductOperationSpec$3, callback);
        };
        ProductPolicy.prototype.getEntityTag = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, getEntityTagOperationSpec$v, callback);
        };
        ProductPolicy.prototype.get = function (resourceGroupName, serviceName, productId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                options: options
            }, getOperationSpec$y, callback);
        };
        ProductPolicy.prototype.createOrUpdate = function (resourceGroupName, serviceName, productId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$y, callback);
        };
        ProductPolicy.prototype.deleteMethod = function (resourceGroupName, serviceName, productId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                productId: productId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$y, callback);
        };
        return ProductPolicy;
    }());
    // Operation Specifications
    var serializer$M = new msRest.Serializer(Mappers$M);
    var listByProductOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$M
    };
    var getEntityTagOperationSpec$v = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ProductPolicyGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$M
    };
    var getOperationSpec$y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            format0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: ProductPolicyGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$M
    };
    var createOrUpdateOperationSpec$y = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PolicyContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PolicyContract,
                headersMapper: ProductPolicyCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: PolicyContract,
                headersMapper: ProductPolicyCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$M
    };
    var deleteMethodOperationSpec$y = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            productId,
            policyId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$M
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$N = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        QuotaCounterCollection: QuotaCounterCollection,
        QuotaCounterContract: QuotaCounterContract,
        QuotaCounterValueContractProperties: QuotaCounterValueContractProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a QuotaByCounterKeys. */
    var QuotaByCounterKeys = /** @class */ (function () {
        /**
         * Create a QuotaByCounterKeys.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function QuotaByCounterKeys(client) {
            this.client = client;
        }
        QuotaByCounterKeys.prototype.listByService = function (resourceGroupName, serviceName, quotaCounterKey, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                quotaCounterKey: quotaCounterKey,
                options: options
            }, listByServiceOperationSpec$u, callback);
        };
        QuotaByCounterKeys.prototype.update = function (resourceGroupName, serviceName, quotaCounterKey, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                quotaCounterKey: quotaCounterKey,
                parameters: parameters,
                options: options
            }, updateOperationSpec$l, callback);
        };
        return QuotaByCounterKeys;
    }());
    // Operation Specifications
    var serializer$N = new msRest.Serializer(Mappers$N);
    var listByServiceOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/quotas/{quotaCounterKey}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            quotaCounterKey,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: QuotaCounterCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$N
    };
    var updateOperationSpec$l = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/quotas/{quotaCounterKey}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            quotaCounterKey,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, QuotaCounterValueContractProperties), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$N
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$O = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        QuotaCounterContract: QuotaCounterContract,
        QuotaCounterValueContractProperties: QuotaCounterValueContractProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a QuotaByPeriodKeys. */
    var QuotaByPeriodKeys = /** @class */ (function () {
        /**
         * Create a QuotaByPeriodKeys.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function QuotaByPeriodKeys(client) {
            this.client = client;
        }
        QuotaByPeriodKeys.prototype.get = function (resourceGroupName, serviceName, quotaCounterKey, quotaPeriodKey, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                quotaCounterKey: quotaCounterKey,
                quotaPeriodKey: quotaPeriodKey,
                options: options
            }, getOperationSpec$z, callback);
        };
        QuotaByPeriodKeys.prototype.update = function (resourceGroupName, serviceName, quotaCounterKey, quotaPeriodKey, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                quotaCounterKey: quotaCounterKey,
                quotaPeriodKey: quotaPeriodKey,
                parameters: parameters,
                options: options
            }, updateOperationSpec$m, callback);
        };
        return QuotaByPeriodKeys;
    }());
    // Operation Specifications
    var serializer$O = new msRest.Serializer(Mappers$O);
    var getOperationSpec$z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/quotas/{quotaCounterKey}/periods/{quotaPeriodKey}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            quotaCounterKey,
            quotaPeriodKey,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: QuotaCounterContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$O
    };
    var updateOperationSpec$m = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/quotas/{quotaCounterKey}/periods/{quotaPeriodKey}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            quotaCounterKey,
            quotaPeriodKey,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, QuotaCounterValueContractProperties), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$O
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$P = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        RegionContract: RegionContract,
        RegionListResult: RegionListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Region. */
    var Region = /** @class */ (function () {
        /**
         * Create a Region.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Region(client) {
            this.client = client;
        }
        Region.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$v, callback);
        };
        Region.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$r, callback);
        };
        return Region;
    }());
    // Operation Specifications
    var serializer$P = new msRest.Serializer(Mappers$P);
    var listByServiceOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/regions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$P
    };
    var listByServiceNextOperationSpec$r = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$P
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$Q = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ReportCollection: ReportCollection,
        ReportRecordContract: ReportRecordContract,
        RequestReportCollection: RequestReportCollection,
        RequestReportRecordContract: RequestReportRecordContract
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Reports. */
    var Reports = /** @class */ (function () {
        /**
         * Create a Reports.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Reports(client) {
            this.client = client;
        }
        Reports.prototype.listByApi = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listByApiOperationSpec$4, callback);
        };
        Reports.prototype.listByUser = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listByUserOperationSpec, callback);
        };
        Reports.prototype.listByOperation = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listByOperationOperationSpec$2, callback);
        };
        Reports.prototype.listByProduct = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listByProductOperationSpec$4, callback);
        };
        Reports.prototype.listByGeo = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listByGeoOperationSpec, callback);
        };
        Reports.prototype.listBySubscription = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Reports.prototype.listByTime = function (resourceGroupName, serviceName, filter, interval, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                interval: interval,
                options: options
            }, listByTimeOperationSpec, callback);
        };
        Reports.prototype.listByRequest = function (resourceGroupName, serviceName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                filter: filter,
                options: options
            }, listByRequestOperationSpec, callback);
        };
        Reports.prototype.listByApiNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByApiNextOperationSpec$3, callback);
        };
        Reports.prototype.listByUserNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByUserNextOperationSpec, callback);
        };
        Reports.prototype.listByOperationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByOperationNextOperationSpec$1, callback);
        };
        Reports.prototype.listByProductNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByProductNextOperationSpec$3, callback);
        };
        Reports.prototype.listByGeoNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByGeoNextOperationSpec, callback);
        };
        Reports.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        Reports.prototype.listByTimeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByTimeNextOperationSpec, callback);
        };
        return Reports;
    }());
    // Operation Specifications
    var serializer$Q = new msRest.Serializer(Mappers$Q);
    var listByApiOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byApi",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByUserOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byUser",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByOperationOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byOperation",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByProductOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byProduct",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByGeoOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byGeo",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/bySubscription",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByTimeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byTime",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            orderby,
            interval,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByRequestOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byRequest",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RequestReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByApiNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByUserNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByOperationNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByProductNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByGeoNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByTimeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReportCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$R = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionCollection: SubscriptionCollection,
        SubscriptionContract: SubscriptionContract,
        SubscriptionCreateOrUpdateHeaders: SubscriptionCreateOrUpdateHeaders,
        SubscriptionCreateParameters: SubscriptionCreateParameters,
        SubscriptionGetEntityTagHeaders: SubscriptionGetEntityTagHeaders,
        SubscriptionGetHeaders: SubscriptionGetHeaders,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionKeysContract: SubscriptionKeysContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        SubscriptionUpdateParameters: SubscriptionUpdateParameters,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Subscription. */
    var Subscription = /** @class */ (function () {
        /**
         * Create a Subscription.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function Subscription(client) {
            this.client = client;
        }
        Subscription.prototype.list = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listOperationSpec$4, callback);
        };
        Subscription.prototype.getEntityTag = function (resourceGroupName, serviceName, sid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                options: options
            }, getEntityTagOperationSpec$w, callback);
        };
        Subscription.prototype.get = function (resourceGroupName, serviceName, sid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                options: options
            }, getOperationSpec$A, callback);
        };
        Subscription.prototype.createOrUpdate = function (resourceGroupName, serviceName, sid, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$z, callback);
        };
        Subscription.prototype.update = function (resourceGroupName, serviceName, sid, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$n, callback);
        };
        Subscription.prototype.deleteMethod = function (resourceGroupName, serviceName, sid, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$z, callback);
        };
        Subscription.prototype.regeneratePrimaryKey = function (resourceGroupName, serviceName, sid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                options: options
            }, regeneratePrimaryKeyOperationSpec, callback);
        };
        Subscription.prototype.regenerateSecondaryKey = function (resourceGroupName, serviceName, sid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                options: options
            }, regenerateSecondaryKeyOperationSpec, callback);
        };
        Subscription.prototype.listSecrets = function (resourceGroupName, serviceName, sid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                sid: sid,
                options: options
            }, listSecretsOperationSpec$4, callback);
        };
        Subscription.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Subscription;
    }());
    // Operation Specifications
    var serializer$R = new msRest.Serializer(Mappers$R);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var getEntityTagOperationSpec$w = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: SubscriptionGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var getOperationSpec$A = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionContract,
                headersMapper: SubscriptionGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var createOrUpdateOperationSpec$z = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            notify,
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SubscriptionCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SubscriptionContract,
                headersMapper: SubscriptionCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: SubscriptionContract,
                headersMapper: SubscriptionCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var updateOperationSpec$n = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            notify,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SubscriptionUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var deleteMethodOperationSpec$z = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var regeneratePrimaryKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regeneratePrimaryKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var regenerateSecondaryKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regenerateSecondaryKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var listSecretsOperationSpec$4 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            sid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionKeysContract
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$R
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$S = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiContractProperties: ApiContractProperties,
        ApiEntityBaseContract: ApiEntityBaseContract,
        ApiTagResourceContractProperties: ApiTagResourceContractProperties,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OperationTagResourceContractProperties: OperationTagResourceContractProperties,
        ProductEntityBaseParameters: ProductEntityBaseParameters,
        ProductTagResourceContractProperties: ProductTagResourceContractProperties,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        TagResourceCollection: TagResourceCollection,
        TagResourceContract: TagResourceContract,
        TagTagResourceContractProperties: TagTagResourceContractProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TagResource. */
    var TagResource = /** @class */ (function () {
        /**
         * Create a TagResource.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function TagResource(client) {
            this.client = client;
        }
        TagResource.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$w, callback);
        };
        TagResource.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$s, callback);
        };
        return TagResource;
    }());
    // Operation Specifications
    var serializer$S = new msRest.Serializer(Mappers$S);
    var listByServiceOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tagResources",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$S
    };
    var listByServiceNextOperationSpec$s = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$S
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$T = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccessInformationContract: AccessInformationContract,
        AccessInformationUpdateParameters: AccessInformationUpdateParameters,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        TenantAccessGetEntityTagHeaders: TenantAccessGetEntityTagHeaders,
        TenantAccessGetHeaders: TenantAccessGetHeaders,
        TenantAccessListSecretsHeaders: TenantAccessListSecretsHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TenantAccess. */
    var TenantAccess = /** @class */ (function () {
        /**
         * Create a TenantAccess.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function TenantAccess(client) {
            this.client = client;
        }
        TenantAccess.prototype.getEntityTag = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getEntityTagOperationSpec$x, callback);
        };
        TenantAccess.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$B, callback);
        };
        TenantAccess.prototype.update = function (resourceGroupName, serviceName, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$o, callback);
        };
        TenantAccess.prototype.regeneratePrimaryKey = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, regeneratePrimaryKeyOperationSpec$1, callback);
        };
        TenantAccess.prototype.regenerateSecondaryKey = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, regenerateSecondaryKeyOperationSpec$1, callback);
        };
        TenantAccess.prototype.listSecrets = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listSecretsOperationSpec$5, callback);
        };
        return TenantAccess;
    }());
    // Operation Specifications
    var serializer$T = new msRest.Serializer(Mappers$T);
    var getEntityTagOperationSpec$x = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: TenantAccessGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$T
    };
    var getOperationSpec$B = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessInformationContract,
                headersMapper: TenantAccessGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$T
    };
    var updateOperationSpec$o = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            accessName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AccessInformationUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$T
    };
    var regeneratePrimaryKeyOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/regeneratePrimaryKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$T
    };
    var regenerateSecondaryKeyOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/regenerateSecondaryKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$T
    };
    var listSecretsOperationSpec$5 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessInformationContract,
                headersMapper: TenantAccessListSecretsHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$T
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$U = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccessInformationContract: AccessInformationContract,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        TenantAccessGitGetHeaders: TenantAccessGitGetHeaders,
        TenantAccessGitListSecretsHeaders: TenantAccessGitListSecretsHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TenantAccessGit. */
    var TenantAccessGit = /** @class */ (function () {
        /**
         * Create a TenantAccessGit.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function TenantAccessGit(client) {
            this.client = client;
        }
        TenantAccessGit.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$C, callback);
        };
        TenantAccessGit.prototype.regeneratePrimaryKey = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, regeneratePrimaryKeyOperationSpec$2, callback);
        };
        TenantAccessGit.prototype.regenerateSecondaryKey = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, regenerateSecondaryKeyOperationSpec$2, callback);
        };
        TenantAccessGit.prototype.listSecrets = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listSecretsOperationSpec$6, callback);
        };
        return TenantAccessGit;
    }());
    // Operation Specifications
    var serializer$U = new msRest.Serializer(Mappers$U);
    var getOperationSpec$C = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/git",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessInformationContract,
                headersMapper: TenantAccessGitGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$U
    };
    var regeneratePrimaryKeyOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/git/regeneratePrimaryKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$U
    };
    var regenerateSecondaryKeyOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/git/regenerateSecondaryKey",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$U
    };
    var listSecretsOperationSpec$6 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}/git/listSecrets",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            accessName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessInformationContract,
                headersMapper: TenantAccessGitListSecretsHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$U
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$V = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        DeployConfigurationParameters: DeployConfigurationParameters,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        ErrorResponseBody: ErrorResponseBody,
        OperationResultContract: OperationResultContract,
        OperationResultLogItemContract: OperationResultLogItemContract,
        SaveConfigurationParameter: SaveConfigurationParameter,
        TenantConfigurationSyncStateContract: TenantConfigurationSyncStateContract
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TenantConfiguration. */
    var TenantConfiguration = /** @class */ (function () {
        /**
         * Create a TenantConfiguration.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function TenantConfiguration(client) {
            this.client = client;
        }
        /**
         * This operation applies changes from the specified Git branch to the configuration database. This
         * is a long running operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Deploy Configuration parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.TenantConfigurationDeployResponse>
         */
        TenantConfiguration.prototype.deploy = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginDeploy(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * This operation creates a commit with the current configuration snapshot to the specified branch
         * in the repository. This is a long running operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Save Configuration parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.TenantConfigurationSaveResponse>
         */
        TenantConfiguration.prototype.save = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginSave(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * This operation validates the changes in the specified Git branch. This is a long running
         * operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Validate Configuration parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.TenantConfigurationValidateResponse>
         */
        TenantConfiguration.prototype.validate = function (resourceGroupName, serviceName, parameters, options) {
            return this.beginValidate(resourceGroupName, serviceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        TenantConfiguration.prototype.getSyncState = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getSyncStateOperationSpec, callback);
        };
        /**
         * This operation applies changes from the specified Git branch to the configuration database. This
         * is a long running operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Deploy Configuration parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        TenantConfiguration.prototype.beginDeploy = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginDeployOperationSpec, options);
        };
        /**
         * This operation creates a commit with the current configuration snapshot to the specified branch
         * in the repository. This is a long running operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Save Configuration parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        TenantConfiguration.prototype.beginSave = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginSaveOperationSpec, options);
        };
        /**
         * This operation validates the changes in the specified Git branch. This is a long running
         * operation and could take several minutes to complete.
         * @param resourceGroupName The name of the resource group.
         * @param serviceName The name of the API Management service.
         * @param parameters Validate Configuration parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        TenantConfiguration.prototype.beginValidate = function (resourceGroupName, serviceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, beginValidateOperationSpec, options);
        };
        return TenantConfiguration;
    }());
    // Operation Specifications
    var serializer$V = new msRest.Serializer(Mappers$V);
    var getSyncStateOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/syncState",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TenantConfigurationSyncStateContract
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };
    var beginDeployOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/deploy",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DeployConfigurationParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationResultContract
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$V
    };
    var beginSaveOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/save",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SaveConfigurationParameter), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationResultContract
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$V
    };
    var beginValidateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/validate",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DeployConfigurationParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationResultContract
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$V
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$W = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GenerateSsoUrlResult: GenerateSsoUrlResult,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserCollection: UserCollection,
        UserContract: UserContract,
        UserCreateOrUpdateHeaders: UserCreateOrUpdateHeaders,
        UserCreateParameters: UserCreateParameters,
        UserGetEntityTagHeaders: UserGetEntityTagHeaders,
        UserGetHeaders: UserGetHeaders,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        UserTokenParameters: UserTokenParameters,
        UserTokenResult: UserTokenResult,
        UserUpdateParameters: UserUpdateParameters,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a User. */
    var User = /** @class */ (function () {
        /**
         * Create a User.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function User(client) {
            this.client = client;
        }
        User.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listByServiceOperationSpec$x, callback);
        };
        User.prototype.getEntityTag = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, getEntityTagOperationSpec$y, callback);
        };
        User.prototype.get = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, getOperationSpec$D, callback);
        };
        User.prototype.createOrUpdate = function (resourceGroupName, serviceName, userId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$A, callback);
        };
        User.prototype.update = function (resourceGroupName, serviceName, userId, parameters, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                parameters: parameters,
                ifMatch: ifMatch,
                options: options
            }, updateOperationSpec$p, callback);
        };
        User.prototype.deleteMethod = function (resourceGroupName, serviceName, userId, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec$A, callback);
        };
        User.prototype.generateSsoUrl = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, generateSsoUrlOperationSpec, callback);
        };
        User.prototype.getSharedAccessToken = function (resourceGroupName, serviceName, userId, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                parameters: parameters,
                options: options
            }, getSharedAccessTokenOperationSpec, callback);
        };
        User.prototype.listByServiceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServiceNextOperationSpec$t, callback);
        };
        return User;
    }());
    // Operation Specifications
    var serializer$W = new msRest.Serializer(Mappers$W);
    var listByServiceOperationSpec$x = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users",
        urlParameters: [
            resourceGroupName,
            serviceName,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            expandGroups,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var getEntityTagOperationSpec$y = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: UserGetEntityTagHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var getOperationSpec$D = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserContract,
                headersMapper: UserGetHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var createOrUpdateOperationSpec$A = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, UserCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: UserContract,
                headersMapper: UserCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: UserContract,
                headersMapper: UserCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var updateOperationSpec$p = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, UserUpdateParameters), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var deleteMethodOperationSpec$A = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            deleteSubscriptions,
            notify,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var generateSsoUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}/generateSsoUrl",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GenerateSsoUrlResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var getSharedAccessTokenOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}/token",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, UserTokenParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: UserTokenResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };
    var listByServiceNextOperationSpec$t = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$W
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$X = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupCollection: GroupCollection,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UserGroup. */
    var UserGroup = /** @class */ (function () {
        /**
         * Create a UserGroup.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function UserGroup(client) {
            this.client = client;
        }
        UserGroup.prototype.list = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, listOperationSpec$5, callback);
        };
        UserGroup.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return UserGroup;
    }());
    // Operation Specifications
    var serializer$X = new msRest.Serializer(Mappers$X);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}/groups",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$X
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$X
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$Y = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalLocation: AdditionalLocation,
        ApiContract: ApiContract,
        ApiManagementServiceIdentity: ApiManagementServiceIdentity,
        ApiManagementServiceResource: ApiManagementServiceResource,
        ApiManagementServiceSkuProperties: ApiManagementServiceSkuProperties,
        ApiManagementServiceUpdateParameters: ApiManagementServiceUpdateParameters,
        ApimResource: ApimResource,
        ApiReleaseContract: ApiReleaseContract,
        ApiVersionConstraint: ApiVersionConstraint,
        ApiVersionSetContract: ApiVersionSetContract,
        ApiVersionSetContractDetails: ApiVersionSetContractDetails,
        AssociationContract: AssociationContract,
        AuthenticationSettingsContract: AuthenticationSettingsContract,
        AuthorizationServerContract: AuthorizationServerContract,
        AuthorizationServerUpdateContract: AuthorizationServerUpdateContract,
        BackendAuthorizationHeaderCredentials: BackendAuthorizationHeaderCredentials,
        BackendContract: BackendContract,
        BackendCredentialsContract: BackendCredentialsContract,
        BackendProperties: BackendProperties,
        BackendProxyContract: BackendProxyContract,
        BackendReconnectContract: BackendReconnectContract,
        BackendServiceFabricClusterProperties: BackendServiceFabricClusterProperties,
        BackendTlsProperties: BackendTlsProperties,
        BaseResource: BaseResource,
        BodyDiagnosticSettings: BodyDiagnosticSettings,
        CacheContract: CacheContract,
        CertificateConfiguration: CertificateConfiguration,
        CertificateContract: CertificateContract,
        CertificateInformation: CertificateInformation,
        DiagnosticContract: DiagnosticContract,
        EmailTemplateContract: EmailTemplateContract,
        EmailTemplateParametersContractProperties: EmailTemplateParametersContractProperties,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        GatewayContract: GatewayContract,
        GatewayHostnameConfigurationContract: GatewayHostnameConfigurationContract,
        GroupContract: GroupContract,
        GroupContractProperties: GroupContractProperties,
        HostnameConfiguration: HostnameConfiguration,
        HttpMessageDiagnostic: HttpMessageDiagnostic,
        IdentityProviderContract: IdentityProviderContract,
        IdentityProviderCreateContract: IdentityProviderCreateContract,
        IssueAttachmentContract: IssueAttachmentContract,
        IssueCommentContract: IssueCommentContract,
        IssueContract: IssueContract,
        LoggerContract: LoggerContract,
        NamedValueContract: NamedValueContract,
        NamedValueCreateContract: NamedValueCreateContract,
        NotificationContract: NotificationContract,
        OAuth2AuthenticationSettingsContract: OAuth2AuthenticationSettingsContract,
        OpenIdAuthenticationSettingsContract: OpenIdAuthenticationSettingsContract,
        OpenidConnectProviderContract: OpenidConnectProviderContract,
        OperationContract: OperationContract,
        ParameterContract: ParameterContract,
        PipelineDiagnosticSettings: PipelineDiagnosticSettings,
        PolicyContract: PolicyContract,
        PolicyDescriptionContract: PolicyDescriptionContract,
        PortalDelegationSettings: PortalDelegationSettings,
        PortalSigninSettings: PortalSigninSettings,
        PortalSignupSettings: PortalSignupSettings,
        ProductContract: ProductContract,
        RecipientEmailContract: RecipientEmailContract,
        RecipientsContractProperties: RecipientsContractProperties,
        RecipientUserContract: RecipientUserContract,
        RegistrationDelegationSettingsProperties: RegistrationDelegationSettingsProperties,
        RepresentationContract: RepresentationContract,
        RequestContract: RequestContract,
        Resource: Resource,
        ResourceLocationDataContract: ResourceLocationDataContract,
        ResponseContract: ResponseContract,
        SamplingSettings: SamplingSettings,
        SchemaContract: SchemaContract,
        SubscriptionCollection: SubscriptionCollection,
        SubscriptionContract: SubscriptionContract,
        SubscriptionKeyParameterNamesContract: SubscriptionKeyParameterNamesContract,
        SubscriptionsDelegationSettingsProperties: SubscriptionsDelegationSettingsProperties,
        TagContract: TagContract,
        TagDescriptionContract: TagDescriptionContract,
        TermsOfServiceProperties: TermsOfServiceProperties,
        TokenBodyParameterContract: TokenBodyParameterContract,
        UserContract: UserContract,
        UserIdentityContract: UserIdentityContract,
        UserIdentityProperties: UserIdentityProperties,
        VirtualNetworkConfiguration: VirtualNetworkConfiguration,
        X509CertificateName: X509CertificateName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UserSubscription. */
    var UserSubscription = /** @class */ (function () {
        /**
         * Create a UserSubscription.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function UserSubscription(client) {
            this.client = client;
        }
        UserSubscription.prototype.list = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, listOperationSpec$6, callback);
        };
        UserSubscription.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return UserSubscription;
    }());
    // Operation Specifications
    var serializer$Y = new msRest.Serializer(Mappers$Y);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}/subscriptions",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skip,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$Y
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$Y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$Z = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse,
        UserIdentityCollection: UserIdentityCollection,
        UserIdentityContract: UserIdentityContract
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UserIdentities. */
    var UserIdentities = /** @class */ (function () {
        /**
         * Create a UserIdentities.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function UserIdentities(client) {
            this.client = client;
        }
        UserIdentities.prototype.list = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, listOperationSpec$7, callback);
        };
        UserIdentities.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return UserIdentities;
    }());
    // Operation Specifications
    var serializer$Z = new msRest.Serializer(Mappers$Z);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}/identities",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserIdentityCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$Z
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserIdentityCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$Z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$_ = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UserConfirmationPassword. */
    var UserConfirmationPassword = /** @class */ (function () {
        /**
         * Create a UserConfirmationPassword.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function UserConfirmationPassword(client) {
            this.client = client;
        }
        UserConfirmationPassword.prototype.send = function (resourceGroupName, serviceName, userId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                userId: userId,
                options: options
            }, sendOperationSpec, callback);
        };
        return UserConfirmationPassword;
    }());
    // Operation Specifications
    var serializer$_ = new msRest.Serializer(Mappers$_);
    var sendOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}/confirmations/password/send",
        urlParameters: [
            resourceGroupName,
            serviceName,
            userId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$_
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$$ = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiExportResult: ApiExportResult,
        ApiExportResultValue: ApiExportResultValue,
        ErrorFieldContract: ErrorFieldContract,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApiExport. */
    var ApiExport = /** @class */ (function () {
        /**
         * Create a ApiExport.
         * @param {ApiManagementClientContext} client Reference to the service client.
         */
        function ApiExport(client) {
            this.client = client;
        }
        ApiExport.prototype.get = function (resourceGroupName, serviceName, apiId, format, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                apiId: apiId,
                format: format,
                options: options
            }, getOperationSpec$E, callback);
        };
        return ApiExport;
    }());
    // Operation Specifications
    var serializer$$ = new msRest.Serializer(Mappers$$);
    var getOperationSpec$E = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
        urlParameters: [
            resourceGroupName,
            serviceName,
            apiId0,
            subscriptionId
        ],
        queryParameters: [
            format1,
            exportParameter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApiExportResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$$
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-apimanagement";
    var packageVersion = "6.0.0";
    var ApiManagementClientContext = /** @class */ (function (_super) {
        __extends(ApiManagementClientContext, _super);
        /**
         * Initializes a new instance of the ApiManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ApiManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2019-12-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ApiManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ApiManagementClient = /** @class */ (function (_super) {
        __extends(ApiManagementClient, _super);
        /**
         * Initializes a new instance of the ApiManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ApiManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.api = new Api(_this);
            _this.apiRevision = new ApiRevision(_this);
            _this.apiRelease = new ApiRelease(_this);
            _this.apiOperation = new ApiOperation(_this);
            _this.apiOperationPolicy = new ApiOperationPolicy(_this);
            _this.tag = new Tag(_this);
            _this.apiProduct = new ApiProduct(_this);
            _this.apiPolicy = new ApiPolicy(_this);
            _this.apiSchema = new ApiSchema(_this);
            _this.apiDiagnostic = new ApiDiagnostic(_this);
            _this.apiIssue = new ApiIssue(_this);
            _this.apiIssueComment = new ApiIssueComment(_this);
            _this.apiIssueAttachment = new ApiIssueAttachment(_this);
            _this.apiTagDescription = new ApiTagDescription(_this);
            _this.operation = new OperationOperations(_this);
            _this.apiVersionSet = new ApiVersionSet(_this);
            _this.authorizationServer = new AuthorizationServer(_this);
            _this.backend = new Backend(_this);
            _this.cache = new Cache(_this);
            _this.certificate = new Certificate(_this);
            _this.apiManagementOperations = new ApiManagementOperations(_this);
            _this.apiManagementServiceSkus = new ApiManagementServiceSkus(_this);
            _this.apiManagementService = new ApiManagementService(_this);
            _this.diagnostic = new Diagnostic(_this);
            _this.emailTemplate = new EmailTemplate(_this);
            _this.gateway = new Gateway(_this);
            _this.gatewayHostnameConfiguration = new GatewayHostnameConfiguration(_this);
            _this.gatewayApi = new GatewayApi(_this);
            _this.group = new Group(_this);
            _this.groupUser = new GroupUser(_this);
            _this.identityProvider = new IdentityProvider(_this);
            _this.issue = new Issue(_this);
            _this.logger = new Logger(_this);
            _this.namedValue = new NamedValue(_this);
            _this.networkStatus = new NetworkStatus(_this);
            _this.notification = new Notification(_this);
            _this.notificationRecipientUser = new NotificationRecipientUser(_this);
            _this.notificationRecipientEmail = new NotificationRecipientEmail(_this);
            _this.openIdConnectProvider = new OpenIdConnectProvider(_this);
            _this.policy = new Policy(_this);
            _this.policyDescription = new PolicyDescription(_this);
            _this.signInSettings = new SignInSettings(_this);
            _this.signUpSettings = new SignUpSettings(_this);
            _this.delegationSettings = new DelegationSettings(_this);
            _this.product = new Product(_this);
            _this.productApi = new ProductApi(_this);
            _this.productGroup = new ProductGroup(_this);
            _this.productSubscriptions = new ProductSubscriptions(_this);
            _this.productPolicy = new ProductPolicy(_this);
            _this.quotaByCounterKeys = new QuotaByCounterKeys(_this);
            _this.quotaByPeriodKeys = new QuotaByPeriodKeys(_this);
            _this.region = new Region(_this);
            _this.reports = new Reports(_this);
            _this.subscription = new Subscription(_this);
            _this.tagResource = new TagResource(_this);
            _this.tenantAccess = new TenantAccess(_this);
            _this.tenantAccessGit = new TenantAccessGit(_this);
            _this.tenantConfiguration = new TenantConfiguration(_this);
            _this.user = new User(_this);
            _this.userGroup = new UserGroup(_this);
            _this.userSubscription = new UserSubscription(_this);
            _this.userIdentities = new UserIdentities(_this);
            _this.userConfirmationPassword = new UserConfirmationPassword(_this);
            _this.apiExport = new ApiExport(_this);
            return _this;
        }
        return ApiManagementClient;
    }(ApiManagementClientContext));

    exports.Api = Api;
    exports.ApiDiagnostic = ApiDiagnostic;
    exports.ApiExport = ApiExport;
    exports.ApiIssue = ApiIssue;
    exports.ApiIssueAttachment = ApiIssueAttachment;
    exports.ApiIssueComment = ApiIssueComment;
    exports.ApiManagementClient = ApiManagementClient;
    exports.ApiManagementClientContext = ApiManagementClientContext;
    exports.ApiManagementMappers = mappers;
    exports.ApiManagementModels = index;
    exports.ApiManagementOperations = ApiManagementOperations;
    exports.ApiManagementService = ApiManagementService;
    exports.ApiManagementServiceSkus = ApiManagementServiceSkus;
    exports.ApiOperation = ApiOperation;
    exports.ApiOperationPolicy = ApiOperationPolicy;
    exports.ApiPolicy = ApiPolicy;
    exports.ApiProduct = ApiProduct;
    exports.ApiRelease = ApiRelease;
    exports.ApiRevision = ApiRevision;
    exports.ApiSchema = ApiSchema;
    exports.ApiTagDescription = ApiTagDescription;
    exports.ApiVersionSet = ApiVersionSet;
    exports.AuthorizationServer = AuthorizationServer;
    exports.Backend = Backend;
    exports.Cache = Cache;
    exports.Certificate = Certificate;
    exports.DelegationSettings = DelegationSettings;
    exports.Diagnostic = Diagnostic;
    exports.EmailTemplate = EmailTemplate;
    exports.Gateway = Gateway;
    exports.GatewayApi = GatewayApi;
    exports.GatewayHostnameConfiguration = GatewayHostnameConfiguration;
    exports.Group = Group;
    exports.GroupUser = GroupUser;
    exports.IdentityProvider = IdentityProvider;
    exports.Issue = Issue;
    exports.Logger = Logger;
    exports.NamedValue = NamedValue;
    exports.NetworkStatus = NetworkStatus;
    exports.Notification = Notification;
    exports.NotificationRecipientEmail = NotificationRecipientEmail;
    exports.NotificationRecipientUser = NotificationRecipientUser;
    exports.OpenIdConnectProvider = OpenIdConnectProvider;
    exports.OperationOperations = OperationOperations;
    exports.Policy = Policy;
    exports.PolicyDescription = PolicyDescription;
    exports.Product = Product;
    exports.ProductApi = ProductApi;
    exports.ProductGroup = ProductGroup;
    exports.ProductPolicy = ProductPolicy;
    exports.ProductSubscriptions = ProductSubscriptions;
    exports.QuotaByCounterKeys = QuotaByCounterKeys;
    exports.QuotaByPeriodKeys = QuotaByPeriodKeys;
    exports.Region = Region;
    exports.Reports = Reports;
    exports.SignInSettings = SignInSettings;
    exports.SignUpSettings = SignUpSettings;
    exports.Subscription = Subscription;
    exports.Tag = Tag;
    exports.TagResource = TagResource;
    exports.TenantAccess = TenantAccess;
    exports.TenantAccessGit = TenantAccessGit;
    exports.TenantConfiguration = TenantConfiguration;
    exports.User = User;
    exports.UserConfirmationPassword = UserConfirmationPassword;
    exports.UserGroup = UserGroup;
    exports.UserIdentities = UserIdentities;
    exports.UserSubscription = UserSubscription;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-apimanagement.js.map
