/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js'), require('@azure/ms-rest-azure-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js', '@azure/ms-rest-azure-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmAppservice = {}), global.msRest, global.msRestAzure));
}(this, (function (exports, msRest, msRestAzure) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var AppServiceCertificate = {
        serializedName: "AppServiceCertificate",
        type: {
            name: "Composite",
            className: "AppServiceCertificate",
            modelProperties: {
                keyVaultId: {
                    serializedName: "keyVaultId",
                    type: {
                        name: "String"
                    }
                },
                keyVaultSecretName: {
                    serializedName: "keyVaultSecretName",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Initialized",
                            "WaitingOnCertificateOrder",
                            "Succeeded",
                            "CertificateOrderFailed",
                            "OperationNotPermittedOnKeyVault",
                            "AzureServiceUnauthorizedToAccessKeyVault",
                            "KeyVaultDoesNotExist",
                            "KeyVaultSecretDoesNotExist",
                            "UnknownError",
                            "ExternalPrivateKey",
                            "Unknown"
                        ]
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                systemData: {
                    serializedName: "systemData",
                    type: {
                        name: "Composite",
                        className: "SystemData"
                    }
                }
            }
        }
    };
    var AppServiceCertificateResource = {
        serializedName: "AppServiceCertificateResource",
        type: {
            name: "Composite",
            className: "AppServiceCertificateResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { keyVaultId: {
                    serializedName: "properties.keyVaultId",
                    type: {
                        name: "String"
                    }
                }, keyVaultSecretName: {
                    serializedName: "properties.keyVaultSecretName",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Initialized",
                            "WaitingOnCertificateOrder",
                            "Succeeded",
                            "CertificateOrderFailed",
                            "OperationNotPermittedOnKeyVault",
                            "AzureServiceUnauthorizedToAccessKeyVault",
                            "KeyVaultDoesNotExist",
                            "KeyVaultSecretDoesNotExist",
                            "UnknownError",
                            "ExternalPrivateKey",
                            "Unknown"
                        ]
                    }
                } })
        }
    };
    var CertificateDetails = {
        serializedName: "CertificateDetails",
        type: {
            name: "Composite",
            className: "CertificateDetails",
            modelProperties: {
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                },
                serialNumber: {
                    readOnly: true,
                    serializedName: "serialNumber",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    readOnly: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                subject: {
                    readOnly: true,
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                notBefore: {
                    readOnly: true,
                    serializedName: "notBefore",
                    type: {
                        name: "DateTime"
                    }
                },
                notAfter: {
                    readOnly: true,
                    serializedName: "notAfter",
                    type: {
                        name: "DateTime"
                    }
                },
                signatureAlgorithm: {
                    readOnly: true,
                    serializedName: "signatureAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                issuer: {
                    readOnly: true,
                    serializedName: "issuer",
                    type: {
                        name: "String"
                    }
                },
                rawData: {
                    readOnly: true,
                    serializedName: "rawData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppServiceCertificateOrder = {
        serializedName: "AppServiceCertificateOrder",
        type: {
            name: "Composite",
            className: "AppServiceCertificateOrder",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { certificates: {
                    serializedName: "properties.certificates",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AppServiceCertificate"
                            }
                        }
                    }
                }, distinguishedName: {
                    serializedName: "properties.distinguishedName",
                    type: {
                        name: "String"
                    }
                }, domainVerificationToken: {
                    readOnly: true,
                    serializedName: "properties.domainVerificationToken",
                    type: {
                        name: "String"
                    }
                }, validityInYears: {
                    serializedName: "properties.validityInYears",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 3,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, keySize: {
                    serializedName: "properties.keySize",
                    defaultValue: 2048,
                    type: {
                        name: "Number"
                    }
                }, productType: {
                    required: true,
                    serializedName: "properties.productType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StandardDomainValidatedSsl",
                            "StandardDomainValidatedWildCardSsl"
                        ]
                    }
                }, autoRenew: {
                    serializedName: "properties.autoRenew",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Pendingissuance",
                            "Issued",
                            "Revoked",
                            "Canceled",
                            "Denied",
                            "Pendingrevocation",
                            "PendingRekey",
                            "Unused",
                            "Expired",
                            "NotSubmitted"
                        ]
                    }
                }, signedCertificate: {
                    readOnly: true,
                    serializedName: "properties.signedCertificate",
                    type: {
                        name: "Composite",
                        className: "CertificateDetails"
                    }
                }, csr: {
                    serializedName: "properties.csr",
                    type: {
                        name: "String"
                    }
                }, intermediate: {
                    readOnly: true,
                    serializedName: "properties.intermediate",
                    type: {
                        name: "Composite",
                        className: "CertificateDetails"
                    }
                }, root: {
                    readOnly: true,
                    serializedName: "properties.root",
                    type: {
                        name: "Composite",
                        className: "CertificateDetails"
                    }
                }, serialNumber: {
                    readOnly: true,
                    serializedName: "properties.serialNumber",
                    type: {
                        name: "String"
                    }
                }, lastCertificateIssuanceTime: {
                    readOnly: true,
                    serializedName: "properties.lastCertificateIssuanceTime",
                    type: {
                        name: "DateTime"
                    }
                }, expirationTime: {
                    readOnly: true,
                    serializedName: "properties.expirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, isPrivateKeyExternal: {
                    readOnly: true,
                    serializedName: "properties.isPrivateKeyExternal",
                    type: {
                        name: "Boolean"
                    }
                }, appServiceCertificateNotRenewableReasons: {
                    readOnly: true,
                    serializedName: "properties.appServiceCertificateNotRenewableReasons",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, nextAutoRenewalTimeStamp: {
                    readOnly: true,
                    serializedName: "properties.nextAutoRenewalTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ProxyOnlyResource = {
        serializedName: "ProxyOnlyResource",
        type: {
            name: "Composite",
            className: "ProxyOnlyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                systemData: {
                    serializedName: "systemData",
                    type: {
                        name: "Composite",
                        className: "SystemData"
                    }
                }
            }
        }
    };
    var AppServiceCertificateOrderPatchResource = {
        serializedName: "AppServiceCertificateOrderPatchResource",
        type: {
            name: "Composite",
            className: "AppServiceCertificateOrderPatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { certificates: {
                    serializedName: "properties.certificates",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AppServiceCertificate"
                            }
                        }
                    }
                }, distinguishedName: {
                    serializedName: "properties.distinguishedName",
                    type: {
                        name: "String"
                    }
                }, domainVerificationToken: {
                    readOnly: true,
                    serializedName: "properties.domainVerificationToken",
                    type: {
                        name: "String"
                    }
                }, validityInYears: {
                    serializedName: "properties.validityInYears",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 3,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, keySize: {
                    serializedName: "properties.keySize",
                    defaultValue: 2048,
                    type: {
                        name: "Number"
                    }
                }, productType: {
                    required: true,
                    serializedName: "properties.productType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StandardDomainValidatedSsl",
                            "StandardDomainValidatedWildCardSsl"
                        ]
                    }
                }, autoRenew: {
                    serializedName: "properties.autoRenew",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Pendingissuance",
                            "Issued",
                            "Revoked",
                            "Canceled",
                            "Denied",
                            "Pendingrevocation",
                            "PendingRekey",
                            "Unused",
                            "Expired",
                            "NotSubmitted"
                        ]
                    }
                }, signedCertificate: {
                    readOnly: true,
                    serializedName: "properties.signedCertificate",
                    type: {
                        name: "Composite",
                        className: "CertificateDetails"
                    }
                }, csr: {
                    serializedName: "properties.csr",
                    type: {
                        name: "String"
                    }
                }, intermediate: {
                    readOnly: true,
                    serializedName: "properties.intermediate",
                    type: {
                        name: "Composite",
                        className: "CertificateDetails"
                    }
                }, root: {
                    readOnly: true,
                    serializedName: "properties.root",
                    type: {
                        name: "Composite",
                        className: "CertificateDetails"
                    }
                }, serialNumber: {
                    readOnly: true,
                    serializedName: "properties.serialNumber",
                    type: {
                        name: "String"
                    }
                }, lastCertificateIssuanceTime: {
                    readOnly: true,
                    serializedName: "properties.lastCertificateIssuanceTime",
                    type: {
                        name: "DateTime"
                    }
                }, expirationTime: {
                    readOnly: true,
                    serializedName: "properties.expirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, isPrivateKeyExternal: {
                    readOnly: true,
                    serializedName: "properties.isPrivateKeyExternal",
                    type: {
                        name: "Boolean"
                    }
                }, appServiceCertificateNotRenewableReasons: {
                    readOnly: true,
                    serializedName: "properties.appServiceCertificateNotRenewableReasons",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, nextAutoRenewalTimeStamp: {
                    readOnly: true,
                    serializedName: "properties.nextAutoRenewalTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var AppServiceCertificatePatchResource = {
        serializedName: "AppServiceCertificatePatchResource",
        type: {
            name: "Composite",
            className: "AppServiceCertificatePatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { keyVaultId: {
                    serializedName: "properties.keyVaultId",
                    type: {
                        name: "String"
                    }
                }, keyVaultSecretName: {
                    serializedName: "properties.keyVaultSecretName",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Initialized",
                            "WaitingOnCertificateOrder",
                            "Succeeded",
                            "CertificateOrderFailed",
                            "OperationNotPermittedOnKeyVault",
                            "AzureServiceUnauthorizedToAccessKeyVault",
                            "KeyVaultDoesNotExist",
                            "KeyVaultSecretDoesNotExist",
                            "UnknownError",
                            "ExternalPrivateKey",
                            "Unknown"
                        ]
                    }
                } })
        }
    };
    var CertificateEmail = {
        serializedName: "CertificateEmail",
        type: {
            name: "Composite",
            className: "CertificateEmail",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { emailId: {
                    serializedName: "properties.emailId",
                    type: {
                        name: "String"
                    }
                }, timeStamp: {
                    serializedName: "properties.timeStamp",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var CertificateOrderAction = {
        serializedName: "CertificateOrderAction",
        type: {
            name: "Composite",
            className: "CertificateOrderAction",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { actionType: {
                    readOnly: true,
                    serializedName: "properties.actionType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CertificateIssued",
                            "CertificateOrderCanceled",
                            "CertificateOrderCreated",
                            "CertificateRevoked",
                            "DomainValidationComplete",
                            "FraudDetected",
                            "OrgNameChange",
                            "OrgValidationComplete",
                            "SanDrop",
                            "FraudCleared",
                            "CertificateExpired",
                            "CertificateExpirationWarning",
                            "FraudDocumentationRequired",
                            "Unknown"
                        ]
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ReissueCertificateOrderRequest = {
        serializedName: "ReissueCertificateOrderRequest",
        type: {
            name: "Composite",
            className: "ReissueCertificateOrderRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { keySize: {
                    serializedName: "properties.keySize",
                    type: {
                        name: "Number"
                    }
                }, delayExistingRevokeInHours: {
                    serializedName: "properties.delayExistingRevokeInHours",
                    type: {
                        name: "Number"
                    }
                }, csr: {
                    serializedName: "properties.csr",
                    type: {
                        name: "String"
                    }
                }, isPrivateKeyExternal: {
                    serializedName: "properties.isPrivateKeyExternal",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var RenewCertificateOrderRequest = {
        serializedName: "RenewCertificateOrderRequest",
        type: {
            name: "Composite",
            className: "RenewCertificateOrderRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { keySize: {
                    serializedName: "properties.keySize",
                    type: {
                        name: "Number"
                    }
                }, csr: {
                    serializedName: "properties.csr",
                    type: {
                        name: "String"
                    }
                }, isPrivateKeyExternal: {
                    serializedName: "properties.isPrivateKeyExternal",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var SiteSeal = {
        serializedName: "SiteSeal",
        type: {
            name: "Composite",
            className: "SiteSeal",
            modelProperties: {
                html: {
                    required: true,
                    serializedName: "html",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteSealRequest = {
        serializedName: "SiteSealRequest",
        type: {
            name: "Composite",
            className: "SiteSealRequest",
            modelProperties: {
                lightTheme: {
                    serializedName: "lightTheme",
                    type: {
                        name: "Boolean"
                    }
                },
                locale: {
                    serializedName: "locale",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SystemData = {
        serializedName: "systemData",
        type: {
            name: "Composite",
            className: "SystemData",
            modelProperties: {
                createdBy: {
                    serializedName: "createdBy",
                    type: {
                        name: "String"
                    }
                },
                createdByType: {
                    serializedName: "createdByType",
                    type: {
                        name: "String"
                    }
                },
                createdAt: {
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedBy: {
                    serializedName: "lastModifiedBy",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedByType: {
                    serializedName: "lastModifiedByType",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedAt: {
                    serializedName: "lastModifiedAt",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var VnetRoute = {
        serializedName: "VnetRoute",
        type: {
            name: "Composite",
            className: "VnetRoute",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { startAddress: {
                    serializedName: "properties.startAddress",
                    type: {
                        name: "String"
                    }
                }, endAddress: {
                    serializedName: "properties.endAddress",
                    type: {
                        name: "String"
                    }
                }, routeType: {
                    serializedName: "properties.routeType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VnetInfo = {
        serializedName: "VnetInfo",
        type: {
            name: "Composite",
            className: "VnetInfo",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { vnetResourceId: {
                    serializedName: "properties.vnetResourceId",
                    type: {
                        name: "String"
                    }
                }, certThumbprint: {
                    readOnly: true,
                    serializedName: "properties.certThumbprint",
                    type: {
                        name: "String"
                    }
                }, certBlob: {
                    serializedName: "properties.certBlob",
                    type: {
                        name: "String"
                    }
                }, routes: {
                    readOnly: true,
                    serializedName: "properties.routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetRoute"
                            }
                        }
                    }
                }, resyncRequired: {
                    readOnly: true,
                    serializedName: "properties.resyncRequired",
                    type: {
                        name: "Boolean"
                    }
                }, dnsServers: {
                    serializedName: "properties.dnsServers",
                    type: {
                        name: "String"
                    }
                }, isSwift: {
                    serializedName: "properties.isSwift",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var VnetGateway = {
        serializedName: "VnetGateway",
        type: {
            name: "Composite",
            className: "VnetGateway",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { vnetName: {
                    serializedName: "properties.vnetName",
                    type: {
                        name: "String"
                    }
                }, vpnPackageUri: {
                    required: true,
                    serializedName: "properties.vpnPackageUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var User = {
        serializedName: "User",
        type: {
            name: "Composite",
            className: "User",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { publishingUserName: {
                    required: true,
                    serializedName: "properties.publishingUserName",
                    type: {
                        name: "String"
                    }
                }, publishingPassword: {
                    serializedName: "properties.publishingPassword",
                    type: {
                        name: "String"
                    }
                }, publishingPasswordHash: {
                    serializedName: "properties.publishingPasswordHash",
                    type: {
                        name: "String"
                    }
                }, publishingPasswordHashSalt: {
                    serializedName: "properties.publishingPasswordHashSalt",
                    type: {
                        name: "String"
                    }
                }, scmUri: {
                    serializedName: "properties.scmUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StringDictionary = {
        serializedName: "StringDictionary",
        type: {
            name: "Composite",
            className: "StringDictionary",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Snapshot = {
        serializedName: "Snapshot",
        type: {
            name: "Composite",
            className: "Snapshot",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { time: {
                    readOnly: true,
                    serializedName: "properties.time",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PushSettings = {
        serializedName: "PushSettings",
        type: {
            name: "Composite",
            className: "PushSettings",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { isPushEnabled: {
                    required: true,
                    serializedName: "properties.isPushEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, tagWhitelistJson: {
                    serializedName: "properties.tagWhitelistJson",
                    type: {
                        name: "String"
                    }
                }, tagsRequiringAuth: {
                    serializedName: "properties.tagsRequiringAuth",
                    type: {
                        name: "String"
                    }
                }, dynamicTagsJson: {
                    serializedName: "properties.dynamicTagsJson",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Identifier = {
        serializedName: "Identifier",
        type: {
            name: "Composite",
            className: "Identifier",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { value: {
                    serializedName: "properties.id",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HybridConnection = {
        serializedName: "HybridConnection",
        type: {
            name: "Composite",
            className: "HybridConnection",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { serviceBusNamespace: {
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, relayName: {
                    serializedName: "properties.relayName",
                    type: {
                        name: "String"
                    }
                }, relayArmUri: {
                    serializedName: "properties.relayArmUri",
                    type: {
                        name: "String"
                    }
                }, hostname: {
                    serializedName: "properties.hostname",
                    type: {
                        name: "String"
                    }
                }, port: {
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                }, sendKeyName: {
                    serializedName: "properties.sendKeyName",
                    type: {
                        name: "String"
                    }
                }, sendKeyValue: {
                    serializedName: "properties.sendKeyValue",
                    type: {
                        name: "String"
                    }
                }, serviceBusSuffix: {
                    serializedName: "properties.serviceBusSuffix",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DeletedSite = {
        serializedName: "DeletedSite",
        type: {
            name: "Composite",
            className: "DeletedSite",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { deletedSiteId: {
                    readOnly: true,
                    serializedName: "properties.deletedSiteId",
                    type: {
                        name: "Number"
                    }
                }, deletedTimestamp: {
                    readOnly: true,
                    serializedName: "properties.deletedTimestamp",
                    type: {
                        name: "String"
                    }
                }, subscription: {
                    readOnly: true,
                    serializedName: "properties.subscription",
                    type: {
                        name: "String"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, deletedSiteName: {
                    readOnly: true,
                    serializedName: "properties.deletedSiteName",
                    type: {
                        name: "String"
                    }
                }, slot: {
                    readOnly: true,
                    serializedName: "properties.slot",
                    type: {
                        name: "String"
                    }
                }, deletedSiteKind: {
                    readOnly: true,
                    serializedName: "properties.kind",
                    type: {
                        name: "String"
                    }
                }, geoRegionName: {
                    readOnly: true,
                    serializedName: "properties.geoRegionName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedServiceIdentityUserAssignedIdentitiesValue = {
        serializedName: "ManagedServiceIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "ManagedServiceIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedServiceIdentity = {
        serializedName: "ManagedServiceIdentity",
        type: {
            name: "Composite",
            className: "ManagedServiceIdentity",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ManagedServiceIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var SlotSwapStatus = {
        serializedName: "SlotSwapStatus",
        type: {
            name: "Composite",
            className: "SlotSwapStatus",
            modelProperties: {
                timestampUtc: {
                    readOnly: true,
                    serializedName: "timestampUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                sourceSlotName: {
                    readOnly: true,
                    serializedName: "sourceSlotName",
                    type: {
                        name: "String"
                    }
                },
                destinationSlotName: {
                    readOnly: true,
                    serializedName: "destinationSlotName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloningInfo = {
        serializedName: "CloningInfo",
        type: {
            name: "Composite",
            className: "CloningInfo",
            modelProperties: {
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "Uuid"
                    }
                },
                overwrite: {
                    serializedName: "overwrite",
                    type: {
                        name: "Boolean"
                    }
                },
                cloneCustomHostNames: {
                    serializedName: "cloneCustomHostNames",
                    type: {
                        name: "Boolean"
                    }
                },
                cloneSourceControl: {
                    serializedName: "cloneSourceControl",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceWebAppId: {
                    required: true,
                    serializedName: "sourceWebAppId",
                    type: {
                        name: "String"
                    }
                },
                sourceWebAppLocation: {
                    serializedName: "sourceWebAppLocation",
                    type: {
                        name: "String"
                    }
                },
                hostingEnvironment: {
                    serializedName: "hostingEnvironment",
                    type: {
                        name: "String"
                    }
                },
                appSettingsOverrides: {
                    serializedName: "appSettingsOverrides",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                configureLoadBalancing: {
                    serializedName: "configureLoadBalancing",
                    type: {
                        name: "Boolean"
                    }
                },
                trafficManagerProfileId: {
                    serializedName: "trafficManagerProfileId",
                    type: {
                        name: "String"
                    }
                },
                trafficManagerProfileName: {
                    serializedName: "trafficManagerProfileName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HostingEnvironmentProfile = {
        serializedName: "HostingEnvironmentProfile",
        type: {
            name: "Composite",
            className: "HostingEnvironmentProfile",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IpSecurityRestriction = {
        serializedName: "IpSecurityRestriction",
        type: {
            name: "Composite",
            className: "IpSecurityRestriction",
            modelProperties: {
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                subnetMask: {
                    serializedName: "subnetMask",
                    type: {
                        name: "String"
                    }
                },
                vnetSubnetResourceId: {
                    serializedName: "vnetSubnetResourceId",
                    type: {
                        name: "String"
                    }
                },
                vnetTrafficTag: {
                    serializedName: "vnetTrafficTag",
                    type: {
                        name: "Number"
                    }
                },
                subnetTrafficTag: {
                    serializedName: "subnetTrafficTag",
                    type: {
                        name: "Number"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var ApiManagementConfig = {
        serializedName: "ApiManagementConfig",
        type: {
            name: "Composite",
            className: "ApiManagementConfig",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiDefinitionInfo = {
        serializedName: "ApiDefinitionInfo",
        type: {
            name: "Composite",
            className: "ApiDefinitionInfo",
            modelProperties: {
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CorsSettings = {
        serializedName: "CorsSettings",
        type: {
            name: "Composite",
            className: "CorsSettings",
            modelProperties: {
                allowedOrigins: {
                    serializedName: "allowedOrigins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                supportCredentials: {
                    serializedName: "supportCredentials",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AutoHealCustomAction = {
        serializedName: "AutoHealCustomAction",
        type: {
            name: "Composite",
            className: "AutoHealCustomAction",
            modelProperties: {
                exe: {
                    serializedName: "exe",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoHealActions = {
        serializedName: "AutoHealActions",
        type: {
            name: "Composite",
            className: "AutoHealActions",
            modelProperties: {
                actionType: {
                    serializedName: "actionType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Recycle",
                            "LogEvent",
                            "CustomAction"
                        ]
                    }
                },
                customAction: {
                    serializedName: "customAction",
                    type: {
                        name: "Composite",
                        className: "AutoHealCustomAction"
                    }
                },
                minProcessExecutionTime: {
                    serializedName: "minProcessExecutionTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SlowRequestsBasedTrigger = {
        serializedName: "SlowRequestsBasedTrigger",
        type: {
            name: "Composite",
            className: "SlowRequestsBasedTrigger",
            modelProperties: {
                timeTaken: {
                    serializedName: "timeTaken",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                timeInterval: {
                    serializedName: "timeInterval",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StatusCodesBasedTrigger = {
        serializedName: "StatusCodesBasedTrigger",
        type: {
            name: "Composite",
            className: "StatusCodesBasedTrigger",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "Number"
                    }
                },
                subStatus: {
                    serializedName: "subStatus",
                    type: {
                        name: "Number"
                    }
                },
                win32Status: {
                    serializedName: "win32Status",
                    type: {
                        name: "Number"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                timeInterval: {
                    serializedName: "timeInterval",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RequestsBasedTrigger = {
        serializedName: "RequestsBasedTrigger",
        type: {
            name: "Composite",
            className: "RequestsBasedTrigger",
            modelProperties: {
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                timeInterval: {
                    serializedName: "timeInterval",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoHealTriggers = {
        serializedName: "AutoHealTriggers",
        type: {
            name: "Composite",
            className: "AutoHealTriggers",
            modelProperties: {
                requests: {
                    serializedName: "requests",
                    type: {
                        name: "Composite",
                        className: "RequestsBasedTrigger"
                    }
                },
                privateBytesInKB: {
                    serializedName: "privateBytesInKB",
                    type: {
                        name: "Number"
                    }
                },
                statusCodes: {
                    serializedName: "statusCodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StatusCodesBasedTrigger"
                            }
                        }
                    }
                },
                slowRequests: {
                    serializedName: "slowRequests",
                    type: {
                        name: "Composite",
                        className: "SlowRequestsBasedTrigger"
                    }
                }
            }
        }
    };
    var AutoHealRules = {
        serializedName: "AutoHealRules",
        type: {
            name: "Composite",
            className: "AutoHealRules",
            modelProperties: {
                triggers: {
                    serializedName: "triggers",
                    type: {
                        name: "Composite",
                        className: "AutoHealTriggers"
                    }
                },
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Composite",
                        className: "AutoHealActions"
                    }
                }
            }
        }
    };
    var SiteLimits = {
        serializedName: "SiteLimits",
        type: {
            name: "Composite",
            className: "SiteLimits",
            modelProperties: {
                maxPercentageCpu: {
                    serializedName: "maxPercentageCpu",
                    type: {
                        name: "Number"
                    }
                },
                maxMemoryInMb: {
                    serializedName: "maxMemoryInMb",
                    type: {
                        name: "Number"
                    }
                },
                maxDiskSizeInMb: {
                    serializedName: "maxDiskSizeInMb",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RampUpRule = {
        serializedName: "RampUpRule",
        type: {
            name: "Composite",
            className: "RampUpRule",
            modelProperties: {
                actionHostName: {
                    serializedName: "actionHostName",
                    type: {
                        name: "String"
                    }
                },
                reroutePercentage: {
                    serializedName: "reroutePercentage",
                    type: {
                        name: "Number"
                    }
                },
                changeStep: {
                    serializedName: "changeStep",
                    type: {
                        name: "Number"
                    }
                },
                changeIntervalInMinutes: {
                    serializedName: "changeIntervalInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                minReroutePercentage: {
                    serializedName: "minReroutePercentage",
                    type: {
                        name: "Number"
                    }
                },
                maxReroutePercentage: {
                    serializedName: "maxReroutePercentage",
                    type: {
                        name: "Number"
                    }
                },
                changeDecisionCallbackUrl: {
                    serializedName: "changeDecisionCallbackUrl",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Experiments = {
        serializedName: "Experiments",
        type: {
            name: "Composite",
            className: "Experiments",
            modelProperties: {
                rampUpRules: {
                    serializedName: "rampUpRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RampUpRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualDirectory = {
        serializedName: "VirtualDirectory",
        type: {
            name: "Composite",
            className: "VirtualDirectory",
            modelProperties: {
                virtualPath: {
                    serializedName: "virtualPath",
                    type: {
                        name: "String"
                    }
                },
                physicalPath: {
                    serializedName: "physicalPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualApplication = {
        serializedName: "VirtualApplication",
        type: {
            name: "Composite",
            className: "VirtualApplication",
            modelProperties: {
                virtualPath: {
                    serializedName: "virtualPath",
                    type: {
                        name: "String"
                    }
                },
                physicalPath: {
                    serializedName: "physicalPath",
                    type: {
                        name: "String"
                    }
                },
                preloadEnabled: {
                    serializedName: "preloadEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                virtualDirectories: {
                    serializedName: "virtualDirectories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualDirectory"
                            }
                        }
                    }
                }
            }
        }
    };
    var HandlerMapping = {
        serializedName: "HandlerMapping",
        type: {
            name: "Composite",
            className: "HandlerMapping",
            modelProperties: {
                extension: {
                    serializedName: "extension",
                    type: {
                        name: "String"
                    }
                },
                scriptProcessor: {
                    serializedName: "scriptProcessor",
                    type: {
                        name: "String"
                    }
                },
                argumentsProperty: {
                    serializedName: "arguments",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteMachineKey = {
        serializedName: "SiteMachineKey",
        type: {
            name: "Composite",
            className: "SiteMachineKey",
            modelProperties: {
                validation: {
                    serializedName: "validation",
                    type: {
                        name: "String"
                    }
                },
                validationKey: {
                    serializedName: "validationKey",
                    type: {
                        name: "String"
                    }
                },
                decryption: {
                    serializedName: "decryption",
                    type: {
                        name: "String"
                    }
                },
                decryptionKey: {
                    serializedName: "decryptionKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnStringInfo = {
        serializedName: "ConnStringInfo",
        type: {
            name: "Composite",
            className: "ConnStringInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "MySql",
                            "SQLServer",
                            "SQLAzure",
                            "Custom",
                            "NotificationHub",
                            "ServiceBus",
                            "EventHub",
                            "ApiHub",
                            "DocDb",
                            "RedisCache",
                            "PostgreSQL"
                        ]
                    }
                }
            }
        }
    };
    var NameValuePair = {
        serializedName: "NameValuePair",
        type: {
            name: "Composite",
            className: "NameValuePair",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteConfig = {
        serializedName: "SiteConfig",
        type: {
            name: "Composite",
            className: "SiteConfig",
            modelProperties: {
                numberOfWorkers: {
                    serializedName: "numberOfWorkers",
                    type: {
                        name: "Number"
                    }
                },
                defaultDocuments: {
                    serializedName: "defaultDocuments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                netFrameworkVersion: {
                    serializedName: "netFrameworkVersion",
                    defaultValue: 'v4.6',
                    type: {
                        name: "String"
                    }
                },
                phpVersion: {
                    serializedName: "phpVersion",
                    type: {
                        name: "String"
                    }
                },
                pythonVersion: {
                    serializedName: "pythonVersion",
                    type: {
                        name: "String"
                    }
                },
                nodeVersion: {
                    serializedName: "nodeVersion",
                    type: {
                        name: "String"
                    }
                },
                powerShellVersion: {
                    serializedName: "powerShellVersion",
                    type: {
                        name: "String"
                    }
                },
                linuxFxVersion: {
                    serializedName: "linuxFxVersion",
                    type: {
                        name: "String"
                    }
                },
                windowsFxVersion: {
                    serializedName: "windowsFxVersion",
                    type: {
                        name: "String"
                    }
                },
                requestTracingEnabled: {
                    serializedName: "requestTracingEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                requestTracingExpirationTime: {
                    serializedName: "requestTracingExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                remoteDebuggingEnabled: {
                    serializedName: "remoteDebuggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                remoteDebuggingVersion: {
                    serializedName: "remoteDebuggingVersion",
                    type: {
                        name: "String"
                    }
                },
                httpLoggingEnabled: {
                    serializedName: "httpLoggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                logsDirectorySizeLimit: {
                    serializedName: "logsDirectorySizeLimit",
                    type: {
                        name: "Number"
                    }
                },
                detailedErrorLoggingEnabled: {
                    serializedName: "detailedErrorLoggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                publishingUsername: {
                    serializedName: "publishingUsername",
                    type: {
                        name: "String"
                    }
                },
                appSettings: {
                    serializedName: "appSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                },
                connectionStrings: {
                    serializedName: "connectionStrings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnStringInfo"
                            }
                        }
                    }
                },
                machineKey: {
                    readOnly: true,
                    serializedName: "machineKey",
                    type: {
                        name: "Composite",
                        className: "SiteMachineKey"
                    }
                },
                handlerMappings: {
                    serializedName: "handlerMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HandlerMapping"
                            }
                        }
                    }
                },
                documentRoot: {
                    serializedName: "documentRoot",
                    type: {
                        name: "String"
                    }
                },
                scmType: {
                    serializedName: "scmType",
                    type: {
                        name: "String"
                    }
                },
                use32BitWorkerProcess: {
                    serializedName: "use32BitWorkerProcess",
                    type: {
                        name: "Boolean"
                    }
                },
                webSocketsEnabled: {
                    serializedName: "webSocketsEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                alwaysOn: {
                    serializedName: "alwaysOn",
                    type: {
                        name: "Boolean"
                    }
                },
                javaVersion: {
                    serializedName: "javaVersion",
                    type: {
                        name: "String"
                    }
                },
                javaContainer: {
                    serializedName: "javaContainer",
                    type: {
                        name: "String"
                    }
                },
                javaContainerVersion: {
                    serializedName: "javaContainerVersion",
                    type: {
                        name: "String"
                    }
                },
                appCommandLine: {
                    serializedName: "appCommandLine",
                    type: {
                        name: "String"
                    }
                },
                managedPipelineMode: {
                    serializedName: "managedPipelineMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Integrated",
                            "Classic"
                        ]
                    }
                },
                virtualApplications: {
                    serializedName: "virtualApplications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualApplication"
                            }
                        }
                    }
                },
                loadBalancing: {
                    serializedName: "loadBalancing",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "WeightedRoundRobin",
                            "LeastRequests",
                            "LeastResponseTime",
                            "WeightedTotalTraffic",
                            "RequestHash"
                        ]
                    }
                },
                experiments: {
                    serializedName: "experiments",
                    type: {
                        name: "Composite",
                        className: "Experiments"
                    }
                },
                limits: {
                    serializedName: "limits",
                    type: {
                        name: "Composite",
                        className: "SiteLimits"
                    }
                },
                autoHealEnabled: {
                    serializedName: "autoHealEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                autoHealRules: {
                    serializedName: "autoHealRules",
                    type: {
                        name: "Composite",
                        className: "AutoHealRules"
                    }
                },
                tracingOptions: {
                    serializedName: "tracingOptions",
                    type: {
                        name: "String"
                    }
                },
                vnetName: {
                    serializedName: "vnetName",
                    type: {
                        name: "String"
                    }
                },
                vnetRouteAllEnabled: {
                    serializedName: "vnetRouteAllEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                vnetPrivatePortsCount: {
                    serializedName: "vnetPrivatePortsCount",
                    type: {
                        name: "Number"
                    }
                },
                cors: {
                    serializedName: "cors",
                    type: {
                        name: "Composite",
                        className: "CorsSettings"
                    }
                },
                push: {
                    serializedName: "push",
                    type: {
                        name: "Composite",
                        className: "PushSettings"
                    }
                },
                apiDefinition: {
                    serializedName: "apiDefinition",
                    type: {
                        name: "Composite",
                        className: "ApiDefinitionInfo"
                    }
                },
                apiManagementConfig: {
                    serializedName: "apiManagementConfig",
                    type: {
                        name: "Composite",
                        className: "ApiManagementConfig"
                    }
                },
                autoSwapSlotName: {
                    serializedName: "autoSwapSlotName",
                    type: {
                        name: "String"
                    }
                },
                localMySqlEnabled: {
                    serializedName: "localMySqlEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                managedServiceIdentityId: {
                    serializedName: "managedServiceIdentityId",
                    type: {
                        name: "Number"
                    }
                },
                xManagedServiceIdentityId: {
                    serializedName: "xManagedServiceIdentityId",
                    type: {
                        name: "Number"
                    }
                },
                ipSecurityRestrictions: {
                    serializedName: "ipSecurityRestrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpSecurityRestriction"
                            }
                        }
                    }
                },
                scmIpSecurityRestrictions: {
                    serializedName: "scmIpSecurityRestrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpSecurityRestriction"
                            }
                        }
                    }
                },
                scmIpSecurityRestrictionsUseMain: {
                    serializedName: "scmIpSecurityRestrictionsUseMain",
                    type: {
                        name: "Boolean"
                    }
                },
                http20Enabled: {
                    serializedName: "http20Enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                minTlsVersion: {
                    serializedName: "minTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                scmMinTlsVersion: {
                    serializedName: "scmMinTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                ftpsState: {
                    serializedName: "ftpsState",
                    type: {
                        name: "String"
                    }
                },
                preWarmedInstanceCount: {
                    serializedName: "preWarmedInstanceCount",
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                healthCheckPath: {
                    serializedName: "healthCheckPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HostNameSslState = {
        serializedName: "HostNameSslState",
        type: {
            name: "Composite",
            className: "HostNameSslState",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                sslState: {
                    serializedName: "sslState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "SniEnabled",
                            "IpBasedEnabled"
                        ]
                    }
                },
                virtualIP: {
                    serializedName: "virtualIP",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                toUpdate: {
                    serializedName: "toUpdate",
                    type: {
                        name: "Boolean"
                    }
                },
                hostType: {
                    serializedName: "hostType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Repository"
                        ]
                    }
                }
            }
        }
    };
    var Site = {
        serializedName: "Site",
        type: {
            name: "Composite",
            className: "Site",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, hostNames: {
                    readOnly: true,
                    serializedName: "properties.hostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, repositorySiteName: {
                    readOnly: true,
                    serializedName: "properties.repositorySiteName",
                    type: {
                        name: "String"
                    }
                }, usageState: {
                    readOnly: true,
                    serializedName: "properties.usageState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Normal",
                            "Exceeded"
                        ]
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, enabledHostNames: {
                    readOnly: true,
                    serializedName: "properties.enabledHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, availabilityState: {
                    readOnly: true,
                    serializedName: "properties.availabilityState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Normal",
                            "Limited",
                            "DisasterRecoveryMode"
                        ]
                    }
                }, hostNameSslStates: {
                    serializedName: "properties.hostNameSslStates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostNameSslState"
                            }
                        }
                    }
                }, serverFarmId: {
                    serializedName: "properties.serverFarmId",
                    type: {
                        name: "String"
                    }
                }, reserved: {
                    serializedName: "properties.reserved",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, isXenon: {
                    serializedName: "properties.isXenon",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, hyperV: {
                    serializedName: "properties.hyperV",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, lastModifiedTimeUtc: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                }, siteConfig: {
                    serializedName: "properties.siteConfig",
                    type: {
                        name: "Composite",
                        className: "SiteConfig"
                    }
                }, trafficManagerHostNames: {
                    readOnly: true,
                    serializedName: "properties.trafficManagerHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, scmSiteAlsoStopped: {
                    serializedName: "properties.scmSiteAlsoStopped",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, targetSwapSlot: {
                    readOnly: true,
                    serializedName: "properties.targetSwapSlot",
                    type: {
                        name: "String"
                    }
                }, hostingEnvironmentProfile: {
                    serializedName: "properties.hostingEnvironmentProfile",
                    type: {
                        name: "Composite",
                        className: "HostingEnvironmentProfile"
                    }
                }, clientAffinityEnabled: {
                    serializedName: "properties.clientAffinityEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, clientCertEnabled: {
                    serializedName: "properties.clientCertEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, clientCertMode: {
                    serializedName: "properties.clientCertMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Required",
                            "Optional"
                        ]
                    }
                }, clientCertExclusionPaths: {
                    serializedName: "properties.clientCertExclusionPaths",
                    type: {
                        name: "String"
                    }
                }, hostNamesDisabled: {
                    serializedName: "properties.hostNamesDisabled",
                    type: {
                        name: "Boolean"
                    }
                }, customDomainVerificationId: {
                    serializedName: "properties.customDomainVerificationId",
                    type: {
                        name: "String"
                    }
                }, outboundIpAddresses: {
                    readOnly: true,
                    serializedName: "properties.outboundIpAddresses",
                    type: {
                        name: "String"
                    }
                }, possibleOutboundIpAddresses: {
                    readOnly: true,
                    serializedName: "properties.possibleOutboundIpAddresses",
                    type: {
                        name: "String"
                    }
                }, containerSize: {
                    serializedName: "properties.containerSize",
                    type: {
                        name: "Number"
                    }
                }, dailyMemoryTimeQuota: {
                    serializedName: "properties.dailyMemoryTimeQuota",
                    type: {
                        name: "Number"
                    }
                }, suspendedTill: {
                    readOnly: true,
                    serializedName: "properties.suspendedTill",
                    type: {
                        name: "DateTime"
                    }
                }, maxNumberOfWorkers: {
                    readOnly: true,
                    serializedName: "properties.maxNumberOfWorkers",
                    type: {
                        name: "Number"
                    }
                }, cloningInfo: {
                    serializedName: "properties.cloningInfo",
                    type: {
                        name: "Composite",
                        className: "CloningInfo"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, isDefaultContainer: {
                    readOnly: true,
                    serializedName: "properties.isDefaultContainer",
                    type: {
                        name: "Boolean"
                    }
                }, defaultHostName: {
                    readOnly: true,
                    serializedName: "properties.defaultHostName",
                    type: {
                        name: "String"
                    }
                }, slotSwapStatus: {
                    readOnly: true,
                    serializedName: "properties.slotSwapStatus",
                    type: {
                        name: "Composite",
                        className: "SlotSwapStatus"
                    }
                }, httpsOnly: {
                    serializedName: "properties.httpsOnly",
                    type: {
                        name: "Boolean"
                    }
                }, redundancyMode: {
                    serializedName: "properties.redundancyMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Manual",
                            "Failover",
                            "ActiveActive",
                            "GeoRedundant"
                        ]
                    }
                }, inProgressOperationId: {
                    readOnly: true,
                    serializedName: "properties.inProgressOperationId",
                    type: {
                        name: "Uuid"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedServiceIdentity"
                    }
                } })
        }
    };
    var Capability = {
        serializedName: "Capability",
        type: {
            name: "Composite",
            className: "Capability",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuCapacity = {
        serializedName: "SkuCapacity",
        type: {
            name: "Composite",
            className: "SkuCapacity",
            modelProperties: {
                minimum: {
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    serializedName: "scaleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuDescription = {
        serializedName: "SkuDescription",
        type: {
            name: "Composite",
            className: "SkuDescription",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                },
                skuCapacity: {
                    serializedName: "skuCapacity",
                    type: {
                        name: "Composite",
                        className: "SkuCapacity"
                    }
                },
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capability"
                            }
                        }
                    }
                }
            }
        }
    };
    var AppServicePlan = {
        serializedName: "AppServicePlan",
        type: {
            name: "Composite",
            className: "AppServicePlan",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { workerTierName: {
                    serializedName: "properties.workerTierName",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Ready",
                            "Pending",
                            "Creating"
                        ]
                    }
                }, subscription: {
                    readOnly: true,
                    serializedName: "properties.subscription",
                    type: {
                        name: "String"
                    }
                }, hostingEnvironmentProfile: {
                    serializedName: "properties.hostingEnvironmentProfile",
                    type: {
                        name: "Composite",
                        className: "HostingEnvironmentProfile"
                    }
                }, maximumNumberOfWorkers: {
                    readOnly: true,
                    serializedName: "properties.maximumNumberOfWorkers",
                    type: {
                        name: "Number"
                    }
                }, geoRegion: {
                    readOnly: true,
                    serializedName: "properties.geoRegion",
                    type: {
                        name: "String"
                    }
                }, perSiteScaling: {
                    serializedName: "properties.perSiteScaling",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, maximumElasticWorkerCount: {
                    serializedName: "properties.maximumElasticWorkerCount",
                    type: {
                        name: "Number"
                    }
                }, numberOfSites: {
                    readOnly: true,
                    serializedName: "properties.numberOfSites",
                    type: {
                        name: "Number"
                    }
                }, isSpot: {
                    serializedName: "properties.isSpot",
                    type: {
                        name: "Boolean"
                    }
                }, spotExpirationTime: {
                    serializedName: "properties.spotExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, freeOfferExpirationTime: {
                    serializedName: "properties.freeOfferExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, reserved: {
                    serializedName: "properties.reserved",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, isXenon: {
                    serializedName: "properties.isXenon",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, hyperV: {
                    serializedName: "properties.hyperV",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, targetWorkerCount: {
                    serializedName: "properties.targetWorkerCount",
                    type: {
                        name: "Number"
                    }
                }, targetWorkerSizeId: {
                    serializedName: "properties.targetWorkerSizeId",
                    type: {
                        name: "Number"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SkuDescription"
                    }
                } })
        }
    };
    var DefaultErrorResponseErrorDetailsItem = {
        serializedName: "DefaultErrorResponse_error_detailsItem",
        type: {
            name: "Composite",
            className: "DefaultErrorResponseErrorDetailsItem",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DefaultErrorResponseError = {
        serializedName: "DefaultErrorResponse_error",
        type: {
            name: "Composite",
            className: "DefaultErrorResponseError",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DefaultErrorResponseErrorDetailsItem"
                            }
                        }
                    }
                },
                innererror: {
                    readOnly: true,
                    serializedName: "innererror",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DefaultErrorResponse = {
        serializedName: "DefaultErrorResponse",
        type: {
            name: "Composite",
            className: "DefaultErrorResponse",
            modelProperties: {
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "DefaultErrorResponseError"
                    }
                }
            }
        }
    };
    var NameIdentifier = {
        serializedName: "NameIdentifier",
        type: {
            name: "Composite",
            className: "NameIdentifier",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSpecification = {
        serializedName: "LogSpecification",
        type: {
            name: "Composite",
            className: "LogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                },
                logFilterPattern: {
                    serializedName: "logFilterPattern",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricAvailability = {
        serializedName: "MetricAvailability",
        type: {
            name: "Composite",
            className: "MetricAvailability",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dimension = {
        serializedName: "Dimension",
        type: {
            name: "Composite",
            className: "Dimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                internalName: {
                    serializedName: "internalName",
                    type: {
                        name: "String"
                    }
                },
                toBeExportedForShoebox: {
                    serializedName: "toBeExportedForShoebox",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MetricSpecification = {
        serializedName: "MetricSpecification",
        type: {
            name: "Composite",
            className: "MetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                supportsInstanceLevelAggregation: {
                    serializedName: "supportsInstanceLevelAggregation",
                    type: {
                        name: "Boolean"
                    }
                },
                enableRegionalMdmAccount: {
                    serializedName: "enableRegionalMdmAccount",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceMdmAccount: {
                    serializedName: "sourceMdmAccount",
                    type: {
                        name: "String"
                    }
                },
                sourceMdmNamespace: {
                    serializedName: "sourceMdmNamespace",
                    type: {
                        name: "String"
                    }
                },
                metricFilterPattern: {
                    serializedName: "metricFilterPattern",
                    type: {
                        name: "String"
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "Boolean"
                    }
                },
                isInternal: {
                    serializedName: "isInternal",
                    type: {
                        name: "Boolean"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dimension"
                            }
                        }
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                availabilities: {
                    serializedName: "availabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailability"
                            }
                        }
                    }
                },
                supportedTimeGrainTypes: {
                    serializedName: "supportedTimeGrainTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                supportedAggregationTypes: {
                    serializedName: "supportedAggregationTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecification"
                            }
                        }
                    }
                },
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var CsmOperationDescriptionProperties = {
        serializedName: "CsmOperationDescriptionProperties",
        type: {
            name: "Composite",
            className: "CsmOperationDescriptionProperties",
            modelProperties: {
                serviceSpecification: {
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var CsmOperationDisplay = {
        serializedName: "CsmOperationDisplay",
        type: {
            name: "Composite",
            className: "CsmOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CsmOperationDescription = {
        serializedName: "CsmOperationDescription",
        type: {
            name: "Composite",
            className: "CsmOperationDescription",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "CsmOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CsmOperationDescriptionProperties"
                    }
                }
            }
        }
    };
    var Address = {
        serializedName: "Address",
        type: {
            name: "Composite",
            className: "Address",
            modelProperties: {
                address1: {
                    required: true,
                    serializedName: "address1",
                    type: {
                        name: "String"
                    }
                },
                address2: {
                    serializedName: "address2",
                    type: {
                        name: "String"
                    }
                },
                city: {
                    required: true,
                    serializedName: "city",
                    type: {
                        name: "String"
                    }
                },
                country: {
                    required: true,
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                },
                postalCode: {
                    required: true,
                    serializedName: "postalCode",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Contact = {
        serializedName: "Contact",
        type: {
            name: "Composite",
            className: "Contact",
            modelProperties: {
                addressMailing: {
                    serializedName: "addressMailing",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                },
                email: {
                    required: true,
                    serializedName: "email",
                    type: {
                        name: "String"
                    }
                },
                fax: {
                    serializedName: "fax",
                    type: {
                        name: "String"
                    }
                },
                jobTitle: {
                    serializedName: "jobTitle",
                    type: {
                        name: "String"
                    }
                },
                nameFirst: {
                    required: true,
                    serializedName: "nameFirst",
                    type: {
                        name: "String"
                    }
                },
                nameLast: {
                    required: true,
                    serializedName: "nameLast",
                    type: {
                        name: "String"
                    }
                },
                nameMiddle: {
                    serializedName: "nameMiddle",
                    type: {
                        name: "String"
                    }
                },
                organization: {
                    serializedName: "organization",
                    type: {
                        name: "String"
                    }
                },
                phone: {
                    required: true,
                    serializedName: "phone",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HostName = {
        serializedName: "HostName",
        type: {
            name: "Composite",
            className: "HostName",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                siteNames: {
                    serializedName: "siteNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                azureResourceName: {
                    serializedName: "azureResourceName",
                    type: {
                        name: "String"
                    }
                },
                azureResourceType: {
                    serializedName: "azureResourceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Website",
                            "TrafficManager"
                        ]
                    }
                },
                customHostNameDnsRecordType: {
                    serializedName: "customHostNameDnsRecordType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CName",
                            "A"
                        ]
                    }
                },
                hostNameType: {
                    serializedName: "hostNameType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Verified",
                            "Managed"
                        ]
                    }
                }
            }
        }
    };
    var DomainPurchaseConsent = {
        serializedName: "DomainPurchaseConsent",
        type: {
            name: "Composite",
            className: "DomainPurchaseConsent",
            modelProperties: {
                agreementKeys: {
                    serializedName: "agreementKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                agreedBy: {
                    serializedName: "agreedBy",
                    type: {
                        name: "String"
                    }
                },
                agreedAt: {
                    serializedName: "agreedAt",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Domain = {
        serializedName: "Domain",
        type: {
            name: "Composite",
            className: "Domain",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { contactAdmin: {
                    required: true,
                    serializedName: "properties.contactAdmin",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, contactBilling: {
                    required: true,
                    serializedName: "properties.contactBilling",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, contactRegistrant: {
                    required: true,
                    serializedName: "properties.contactRegistrant",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, contactTech: {
                    required: true,
                    serializedName: "properties.contactTech",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, registrationStatus: {
                    readOnly: true,
                    serializedName: "properties.registrationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Awaiting",
                            "Cancelled",
                            "Confiscated",
                            "Disabled",
                            "Excluded",
                            "Expired",
                            "Failed",
                            "Held",
                            "Locked",
                            "Parked",
                            "Pending",
                            "Reserved",
                            "Reverted",
                            "Suspended",
                            "Transferred",
                            "Unknown",
                            "Unlocked",
                            "Unparked",
                            "Updated",
                            "JsonConverterFailed"
                        ]
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, nameServers: {
                    readOnly: true,
                    serializedName: "properties.nameServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, privacy: {
                    serializedName: "properties.privacy",
                    type: {
                        name: "Boolean"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, expirationTime: {
                    readOnly: true,
                    serializedName: "properties.expirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastRenewedTime: {
                    readOnly: true,
                    serializedName: "properties.lastRenewedTime",
                    type: {
                        name: "DateTime"
                    }
                }, autoRenew: {
                    serializedName: "properties.autoRenew",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, readyForDnsRecordManagement: {
                    readOnly: true,
                    serializedName: "properties.readyForDnsRecordManagement",
                    type: {
                        name: "Boolean"
                    }
                }, managedHostNames: {
                    readOnly: true,
                    serializedName: "properties.managedHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostName"
                            }
                        }
                    }
                }, consent: {
                    required: true,
                    serializedName: "properties.consent",
                    type: {
                        name: "Composite",
                        className: "DomainPurchaseConsent"
                    }
                }, domainNotRenewableReasons: {
                    readOnly: true,
                    serializedName: "properties.domainNotRenewableReasons",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, dnsType: {
                    serializedName: "properties.dnsType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AzureDns",
                            "DefaultDomainRegistrarDns"
                        ]
                    }
                }, dnsZoneId: {
                    serializedName: "properties.dnsZoneId",
                    type: {
                        name: "String"
                    }
                }, targetDnsType: {
                    serializedName: "properties.targetDnsType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AzureDns",
                            "DefaultDomainRegistrarDns"
                        ]
                    }
                }, authCode: {
                    serializedName: "properties.authCode",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DomainAvailabilityCheckResult = {
        serializedName: "DomainAvailabilityCheckResult",
        type: {
            name: "Composite",
            className: "DomainAvailabilityCheckResult",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                available: {
                    serializedName: "available",
                    type: {
                        name: "Boolean"
                    }
                },
                domainType: {
                    serializedName: "domainType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Regular",
                            "SoftDeleted"
                        ]
                    }
                }
            }
        }
    };
    var DomainControlCenterSsoRequest = {
        serializedName: "DomainControlCenterSsoRequest",
        type: {
            name: "Composite",
            className: "DomainControlCenterSsoRequest",
            modelProperties: {
                url: {
                    readOnly: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                postParameterKey: {
                    readOnly: true,
                    serializedName: "postParameterKey",
                    type: {
                        name: "String"
                    }
                },
                postParameterValue: {
                    readOnly: true,
                    serializedName: "postParameterValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DomainOwnershipIdentifier = {
        serializedName: "DomainOwnershipIdentifier",
        type: {
            name: "Composite",
            className: "DomainOwnershipIdentifier",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { ownershipId: {
                    serializedName: "properties.ownershipId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DomainPatchResource = {
        serializedName: "DomainPatchResource",
        type: {
            name: "Composite",
            className: "DomainPatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { contactAdmin: {
                    required: true,
                    serializedName: "properties.contactAdmin",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, contactBilling: {
                    required: true,
                    serializedName: "properties.contactBilling",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, contactRegistrant: {
                    required: true,
                    serializedName: "properties.contactRegistrant",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, contactTech: {
                    required: true,
                    serializedName: "properties.contactTech",
                    type: {
                        name: "Composite",
                        className: "Contact"
                    }
                }, registrationStatus: {
                    readOnly: true,
                    serializedName: "properties.registrationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Awaiting",
                            "Cancelled",
                            "Confiscated",
                            "Disabled",
                            "Excluded",
                            "Expired",
                            "Failed",
                            "Held",
                            "Locked",
                            "Parked",
                            "Pending",
                            "Reserved",
                            "Reverted",
                            "Suspended",
                            "Transferred",
                            "Unknown",
                            "Unlocked",
                            "Unparked",
                            "Updated",
                            "JsonConverterFailed"
                        ]
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, nameServers: {
                    readOnly: true,
                    serializedName: "properties.nameServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, privacy: {
                    serializedName: "properties.privacy",
                    type: {
                        name: "Boolean"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, expirationTime: {
                    readOnly: true,
                    serializedName: "properties.expirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastRenewedTime: {
                    readOnly: true,
                    serializedName: "properties.lastRenewedTime",
                    type: {
                        name: "DateTime"
                    }
                }, autoRenew: {
                    serializedName: "properties.autoRenew",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, readyForDnsRecordManagement: {
                    readOnly: true,
                    serializedName: "properties.readyForDnsRecordManagement",
                    type: {
                        name: "Boolean"
                    }
                }, managedHostNames: {
                    readOnly: true,
                    serializedName: "properties.managedHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostName"
                            }
                        }
                    }
                }, consent: {
                    required: true,
                    serializedName: "properties.consent",
                    type: {
                        name: "Composite",
                        className: "DomainPurchaseConsent"
                    }
                }, domainNotRenewableReasons: {
                    readOnly: true,
                    serializedName: "properties.domainNotRenewableReasons",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, dnsType: {
                    serializedName: "properties.dnsType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AzureDns",
                            "DefaultDomainRegistrarDns"
                        ]
                    }
                }, dnsZoneId: {
                    serializedName: "properties.dnsZoneId",
                    type: {
                        name: "String"
                    }
                }, targetDnsType: {
                    serializedName: "properties.targetDnsType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AzureDns",
                            "DefaultDomainRegistrarDns"
                        ]
                    }
                }, authCode: {
                    serializedName: "properties.authCode",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DomainRecommendationSearchParameters = {
        serializedName: "DomainRecommendationSearchParameters",
        type: {
            name: "Composite",
            className: "DomainRecommendationSearchParameters",
            modelProperties: {
                keywords: {
                    serializedName: "keywords",
                    type: {
                        name: "String"
                    }
                },
                maxDomainRecommendations: {
                    serializedName: "maxDomainRecommendations",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TldLegalAgreement = {
        serializedName: "TldLegalAgreement",
        type: {
            name: "Composite",
            className: "TldLegalAgreement",
            modelProperties: {
                agreementKey: {
                    required: true,
                    serializedName: "agreementKey",
                    type: {
                        name: "String"
                    }
                },
                title: {
                    required: true,
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    required: true,
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TopLevelDomain = {
        serializedName: "TopLevelDomain",
        type: {
            name: "Composite",
            className: "TopLevelDomain",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { privacy: {
                    serializedName: "properties.privacy",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var TopLevelDomainAgreementOption = {
        serializedName: "TopLevelDomainAgreementOption",
        type: {
            name: "Composite",
            className: "TopLevelDomainAgreementOption",
            modelProperties: {
                includePrivacy: {
                    serializedName: "includePrivacy",
                    type: {
                        name: "Boolean"
                    }
                },
                forTransfer: {
                    serializedName: "forTransfer",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Certificate = {
        serializedName: "Certificate",
        type: {
            name: "Composite",
            className: "Certificate",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { friendlyName: {
                    readOnly: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, subjectName: {
                    readOnly: true,
                    serializedName: "properties.subjectName",
                    type: {
                        name: "String"
                    }
                }, hostNames: {
                    serializedName: "properties.hostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, pfxBlob: {
                    serializedName: "properties.pfxBlob",
                    type: {
                        name: "ByteArray"
                    }
                }, siteName: {
                    readOnly: true,
                    serializedName: "properties.siteName",
                    type: {
                        name: "String"
                    }
                }, selfLink: {
                    readOnly: true,
                    serializedName: "properties.selfLink",
                    type: {
                        name: "String"
                    }
                }, issuer: {
                    readOnly: true,
                    serializedName: "properties.issuer",
                    type: {
                        name: "String"
                    }
                }, issueDate: {
                    readOnly: true,
                    serializedName: "properties.issueDate",
                    type: {
                        name: "DateTime"
                    }
                }, expirationDate: {
                    readOnly: true,
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                }, password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, valid: {
                    readOnly: true,
                    serializedName: "properties.valid",
                    type: {
                        name: "Boolean"
                    }
                }, cerBlob: {
                    readOnly: true,
                    serializedName: "properties.cerBlob",
                    type: {
                        name: "ByteArray"
                    }
                }, publicKeyHash: {
                    readOnly: true,
                    serializedName: "properties.publicKeyHash",
                    type: {
                        name: "String"
                    }
                }, hostingEnvironmentProfile: {
                    readOnly: true,
                    serializedName: "properties.hostingEnvironmentProfile",
                    type: {
                        name: "Composite",
                        className: "HostingEnvironmentProfile"
                    }
                }, keyVaultId: {
                    serializedName: "properties.keyVaultId",
                    type: {
                        name: "String"
                    }
                }, keyVaultSecretName: {
                    serializedName: "properties.keyVaultSecretName",
                    type: {
                        name: "String"
                    }
                }, keyVaultSecretStatus: {
                    readOnly: true,
                    serializedName: "properties.keyVaultSecretStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Initialized",
                            "WaitingOnCertificateOrder",
                            "Succeeded",
                            "CertificateOrderFailed",
                            "OperationNotPermittedOnKeyVault",
                            "AzureServiceUnauthorizedToAccessKeyVault",
                            "KeyVaultDoesNotExist",
                            "KeyVaultSecretDoesNotExist",
                            "UnknownError",
                            "ExternalPrivateKey",
                            "Unknown"
                        ]
                    }
                }, serverFarmId: {
                    serializedName: "properties.serverFarmId",
                    type: {
                        name: "String"
                    }
                }, canonicalName: {
                    serializedName: "properties.canonicalName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CertificatePatchResource = {
        serializedName: "CertificatePatchResource",
        type: {
            name: "Composite",
            className: "CertificatePatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { friendlyName: {
                    readOnly: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, subjectName: {
                    readOnly: true,
                    serializedName: "properties.subjectName",
                    type: {
                        name: "String"
                    }
                }, hostNames: {
                    serializedName: "properties.hostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, pfxBlob: {
                    serializedName: "properties.pfxBlob",
                    type: {
                        name: "ByteArray"
                    }
                }, siteName: {
                    readOnly: true,
                    serializedName: "properties.siteName",
                    type: {
                        name: "String"
                    }
                }, selfLink: {
                    readOnly: true,
                    serializedName: "properties.selfLink",
                    type: {
                        name: "String"
                    }
                }, issuer: {
                    readOnly: true,
                    serializedName: "properties.issuer",
                    type: {
                        name: "String"
                    }
                }, issueDate: {
                    readOnly: true,
                    serializedName: "properties.issueDate",
                    type: {
                        name: "DateTime"
                    }
                }, expirationDate: {
                    readOnly: true,
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                }, password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, valid: {
                    readOnly: true,
                    serializedName: "properties.valid",
                    type: {
                        name: "Boolean"
                    }
                }, cerBlob: {
                    readOnly: true,
                    serializedName: "properties.cerBlob",
                    type: {
                        name: "ByteArray"
                    }
                }, publicKeyHash: {
                    readOnly: true,
                    serializedName: "properties.publicKeyHash",
                    type: {
                        name: "String"
                    }
                }, hostingEnvironmentProfile: {
                    readOnly: true,
                    serializedName: "properties.hostingEnvironmentProfile",
                    type: {
                        name: "Composite",
                        className: "HostingEnvironmentProfile"
                    }
                }, keyVaultId: {
                    serializedName: "properties.keyVaultId",
                    type: {
                        name: "String"
                    }
                }, keyVaultSecretName: {
                    serializedName: "properties.keyVaultSecretName",
                    type: {
                        name: "String"
                    }
                }, keyVaultSecretStatus: {
                    readOnly: true,
                    serializedName: "properties.keyVaultSecretStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Initialized",
                            "WaitingOnCertificateOrder",
                            "Succeeded",
                            "CertificateOrderFailed",
                            "OperationNotPermittedOnKeyVault",
                            "AzureServiceUnauthorizedToAccessKeyVault",
                            "KeyVaultDoesNotExist",
                            "KeyVaultSecretDoesNotExist",
                            "UnknownError",
                            "ExternalPrivateKey",
                            "Unknown"
                        ]
                    }
                }, serverFarmId: {
                    serializedName: "properties.serverFarmId",
                    type: {
                        name: "String"
                    }
                }, canonicalName: {
                    serializedName: "properties.canonicalName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkProfile = {
        serializedName: "VirtualNetworkProfile",
        type: {
            name: "Composite",
            className: "VirtualNetworkProfile",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                subnet: {
                    serializedName: "subnet",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkerPool = {
        serializedName: "WorkerPool",
        type: {
            name: "Composite",
            className: "WorkerPool",
            modelProperties: {
                workerSizeId: {
                    serializedName: "workerSizeId",
                    type: {
                        name: "Number"
                    }
                },
                computeMode: {
                    serializedName: "computeMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Shared",
                            "Dedicated",
                            "Dynamic"
                        ]
                    }
                },
                workerSize: {
                    serializedName: "workerSize",
                    type: {
                        name: "String"
                    }
                },
                workerCount: {
                    serializedName: "workerCount",
                    type: {
                        name: "Number"
                    }
                },
                instanceNames: {
                    readOnly: true,
                    serializedName: "instanceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualIPMapping = {
        serializedName: "VirtualIPMapping",
        type: {
            name: "Composite",
            className: "VirtualIPMapping",
            modelProperties: {
                virtualIP: {
                    serializedName: "virtualIP",
                    type: {
                        name: "String"
                    }
                },
                internalHttpPort: {
                    serializedName: "internalHttpPort",
                    type: {
                        name: "Number"
                    }
                },
                internalHttpsPort: {
                    serializedName: "internalHttpsPort",
                    type: {
                        name: "Number"
                    }
                },
                inUse: {
                    serializedName: "inUse",
                    type: {
                        name: "Boolean"
                    }
                },
                serviceName: {
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StampCapacity = {
        serializedName: "StampCapacity",
        type: {
            name: "Composite",
            className: "StampCapacity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                availableCapacity: {
                    serializedName: "availableCapacity",
                    type: {
                        name: "Number"
                    }
                },
                totalCapacity: {
                    serializedName: "totalCapacity",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                computeMode: {
                    serializedName: "computeMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Shared",
                            "Dedicated",
                            "Dynamic"
                        ]
                    }
                },
                workerSize: {
                    serializedName: "workerSize",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Small",
                            "Medium",
                            "Large",
                            "D1",
                            "D2",
                            "D3",
                            "NestedSmall",
                            "Default"
                        ]
                    }
                },
                workerSizeId: {
                    serializedName: "workerSizeId",
                    type: {
                        name: "Number"
                    }
                },
                excludeFromCapacityAllocation: {
                    serializedName: "excludeFromCapacityAllocation",
                    type: {
                        name: "Boolean"
                    }
                },
                isApplicableForAllComputeModes: {
                    serializedName: "isApplicableForAllComputeModes",
                    type: {
                        name: "Boolean"
                    }
                },
                siteMode: {
                    serializedName: "siteMode",
                    type: {
                        name: "String"
                    }
                },
                isLinux: {
                    serializedName: "isLinux",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var NetworkAccessControlEntry = {
        serializedName: "NetworkAccessControlEntry",
        type: {
            name: "Composite",
            className: "NetworkAccessControlEntry",
            modelProperties: {
                action: {
                    serializedName: "action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Permit",
                            "Deny"
                        ]
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                order: {
                    serializedName: "order",
                    type: {
                        name: "Number"
                    }
                },
                remoteSubnet: {
                    serializedName: "remoteSubnet",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppServiceEnvironment = {
        serializedName: "AppServiceEnvironment",
        type: {
            name: "Composite",
            className: "AppServiceEnvironment",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Preparing",
                            "Ready",
                            "Scaling",
                            "Deleting"
                        ]
                    }
                },
                vnetName: {
                    serializedName: "vnetName",
                    type: {
                        name: "String"
                    }
                },
                vnetResourceGroupName: {
                    serializedName: "vnetResourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                vnetSubnetName: {
                    serializedName: "vnetSubnetName",
                    type: {
                        name: "String"
                    }
                },
                virtualNetwork: {
                    required: true,
                    serializedName: "virtualNetwork",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkProfile"
                    }
                },
                internalLoadBalancingMode: {
                    serializedName: "internalLoadBalancingMode",
                    type: {
                        name: "String"
                    }
                },
                multiSize: {
                    serializedName: "multiSize",
                    type: {
                        name: "String"
                    }
                },
                multiRoleCount: {
                    serializedName: "multiRoleCount",
                    type: {
                        name: "Number"
                    }
                },
                workerPools: {
                    required: true,
                    serializedName: "workerPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkerPool"
                            }
                        }
                    }
                },
                ipsslAddressCount: {
                    serializedName: "ipsslAddressCount",
                    type: {
                        name: "Number"
                    }
                },
                databaseEdition: {
                    readOnly: true,
                    serializedName: "databaseEdition",
                    type: {
                        name: "String"
                    }
                },
                databaseServiceObjective: {
                    readOnly: true,
                    serializedName: "databaseServiceObjective",
                    type: {
                        name: "String"
                    }
                },
                upgradeDomains: {
                    readOnly: true,
                    serializedName: "upgradeDomains",
                    type: {
                        name: "Number"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                dnsSuffix: {
                    serializedName: "dnsSuffix",
                    type: {
                        name: "String"
                    }
                },
                lastAction: {
                    readOnly: true,
                    serializedName: "lastAction",
                    type: {
                        name: "String"
                    }
                },
                lastActionResult: {
                    readOnly: true,
                    serializedName: "lastActionResult",
                    type: {
                        name: "String"
                    }
                },
                allowedMultiSizes: {
                    readOnly: true,
                    serializedName: "allowedMultiSizes",
                    type: {
                        name: "String"
                    }
                },
                allowedWorkerSizes: {
                    readOnly: true,
                    serializedName: "allowedWorkerSizes",
                    type: {
                        name: "String"
                    }
                },
                maximumNumberOfMachines: {
                    readOnly: true,
                    serializedName: "maximumNumberOfMachines",
                    type: {
                        name: "Number"
                    }
                },
                vipMappings: {
                    readOnly: true,
                    serializedName: "vipMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualIPMapping"
                            }
                        }
                    }
                },
                environmentCapacities: {
                    readOnly: true,
                    serializedName: "environmentCapacities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StampCapacity"
                            }
                        }
                    }
                },
                networkAccessControlList: {
                    serializedName: "networkAccessControlList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkAccessControlEntry"
                            }
                        }
                    }
                },
                environmentIsHealthy: {
                    readOnly: true,
                    serializedName: "environmentIsHealthy",
                    type: {
                        name: "Boolean"
                    }
                },
                environmentStatus: {
                    readOnly: true,
                    serializedName: "environmentStatus",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    readOnly: true,
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                frontEndScaleFactor: {
                    serializedName: "frontEndScaleFactor",
                    type: {
                        name: "Number"
                    }
                },
                defaultFrontEndScaleFactor: {
                    readOnly: true,
                    serializedName: "defaultFrontEndScaleFactor",
                    type: {
                        name: "Number"
                    }
                },
                apiManagementAccountId: {
                    serializedName: "apiManagementAccountId",
                    type: {
                        name: "String"
                    }
                },
                suspended: {
                    serializedName: "suspended",
                    type: {
                        name: "Boolean"
                    }
                },
                dynamicCacheEnabled: {
                    serializedName: "dynamicCacheEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                clusterSettings: {
                    serializedName: "clusterSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                },
                userWhitelistedIpRanges: {
                    serializedName: "userWhitelistedIpRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                hasLinuxWorkers: {
                    serializedName: "hasLinuxWorkers",
                    type: {
                        name: "Boolean"
                    }
                },
                sslCertKeyVaultId: {
                    serializedName: "sslCertKeyVaultId",
                    type: {
                        name: "String"
                    }
                },
                sslCertKeyVaultSecretName: {
                    serializedName: "sslCertKeyVaultSecretName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocalizableString = {
        serializedName: "LocalizableString",
        type: {
            name: "Composite",
            className: "LocalizableString",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CsmUsageQuota = {
        serializedName: "CsmUsageQuota",
        type: {
            name: "Composite",
            className: "CsmUsageQuota",
            modelProperties: {
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                nextResetTime: {
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                }
            }
        }
    };
    var ErrorEntity = {
        serializedName: "ErrorEntity",
        type: {
            name: "Composite",
            className: "ErrorEntity",
            modelProperties: {
                extendedCode: {
                    serializedName: "extendedCode",
                    type: {
                        name: "String"
                    }
                },
                messageTemplate: {
                    serializedName: "messageTemplate",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                innerErrors: {
                    serializedName: "innerErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorEntity"
                            }
                        }
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InProgress",
                            "Failed",
                            "Succeeded",
                            "TimedOut",
                            "Created"
                        ]
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorEntity"
                            }
                        }
                    }
                },
                createdTime: {
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                modifiedTime: {
                    serializedName: "modifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expirationTime: {
                    serializedName: "expirationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                geoMasterOperationId: {
                    serializedName: "geoMasterOperationId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var Solution = {
        serializedName: "Solution",
        type: {
            name: "Composite",
            className: "Solution",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                order: {
                    serializedName: "order",
                    type: {
                        name: "Number"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "QuickSolution",
                            "DeepInvestigation",
                            "BestPractices"
                        ]
                    }
                },
                data: {
                    serializedName: "data",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "NameValuePair"
                                    }
                                }
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "NameValuePair"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var DetectorAbnormalTimePeriod = {
        serializedName: "DetectorAbnormalTimePeriod",
        type: {
            name: "Composite",
            className: "DetectorAbnormalTimePeriod",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                metaData: {
                    serializedName: "metaData",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "NameValuePair"
                                    }
                                }
                            }
                        }
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ServiceIncident",
                            "AppDeployment",
                            "AppCrash",
                            "RuntimeIssueDetected",
                            "AseDeployment",
                            "UserIssue",
                            "PlatformIssue",
                            "Other"
                        ]
                    }
                },
                solutions: {
                    serializedName: "solutions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Solution"
                            }
                        }
                    }
                }
            }
        }
    };
    var AbnormalTimePeriod = {
        serializedName: "AbnormalTimePeriod",
        type: {
            name: "Composite",
            className: "AbnormalTimePeriod",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectorAbnormalTimePeriod"
                            }
                        }
                    }
                },
                solutions: {
                    serializedName: "solutions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Solution"
                            }
                        }
                    }
                }
            }
        }
    };
    var DetectorDefinition = {
        serializedName: "DetectorDefinition",
        type: {
            name: "Composite",
            className: "DetectorDefinition",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, rank: {
                    readOnly: true,
                    serializedName: "properties.rank",
                    type: {
                        name: "Number"
                    }
                }, isEnabled: {
                    readOnly: true,
                    serializedName: "properties.isEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DiagnosticMetricSample = {
        serializedName: "DiagnosticMetricSample",
        type: {
            name: "Composite",
            className: "DiagnosticMetricSample",
            modelProperties: {
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                roleInstance: {
                    serializedName: "roleInstance",
                    type: {
                        name: "String"
                    }
                },
                total: {
                    serializedName: "total",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                isAggregated: {
                    serializedName: "isAggregated",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DiagnosticMetricSet = {
        serializedName: "DiagnosticMetricSet",
        type: {
            name: "Composite",
            className: "DiagnosticMetricSet",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticMetricSample"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataSource = {
        serializedName: "DataSource",
        type: {
            name: "Composite",
            className: "DataSource",
            modelProperties: {
                instructions: {
                    serializedName: "instructions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataSourceUri: {
                    serializedName: "dataSourceUri",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResponseMetaData = {
        serializedName: "ResponseMetaData",
        type: {
            name: "Composite",
            className: "ResponseMetaData",
            modelProperties: {
                dataSource: {
                    serializedName: "dataSource",
                    type: {
                        name: "Composite",
                        className: "DataSource"
                    }
                }
            }
        }
    };
    var AnalysisData = {
        serializedName: "AnalysisData",
        type: {
            name: "Composite",
            className: "AnalysisData",
            modelProperties: {
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                detectorDefinition: {
                    serializedName: "detectorDefinition",
                    type: {
                        name: "Composite",
                        className: "DetectorDefinition"
                    }
                },
                metrics: {
                    serializedName: "metrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticMetricSet"
                            }
                        }
                    }
                },
                data: {
                    serializedName: "data",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "NameValuePair"
                                    }
                                }
                            }
                        }
                    }
                },
                detectorMetaData: {
                    serializedName: "detectorMetaData",
                    type: {
                        name: "Composite",
                        className: "ResponseMetaData"
                    }
                }
            }
        }
    };
    var AnalysisDefinition = {
        serializedName: "AnalysisDefinition",
        type: {
            name: "Composite",
            className: "AnalysisDefinition",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataTableResponseColumn = {
        serializedName: "DataTableResponseColumn",
        type: {
            name: "Composite",
            className: "DataTableResponseColumn",
            modelProperties: {
                columnName: {
                    serializedName: "columnName",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                },
                columnType: {
                    serializedName: "columnType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataTableResponseObject = {
        serializedName: "DataTableResponseObject",
        type: {
            name: "Composite",
            className: "DataTableResponseObject",
            modelProperties: {
                tableName: {
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                },
                columns: {
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataTableResponseColumn"
                            }
                        }
                    }
                },
                rows: {
                    serializedName: "rows",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var DetectorInfo = {
        serializedName: "DetectorInfo",
        type: {
            name: "Composite",
            className: "DetectorInfo",
            modelProperties: {
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    readOnly: true,
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                subCategory: {
                    readOnly: true,
                    serializedName: "subCategory",
                    type: {
                        name: "String"
                    }
                },
                supportTopicId: {
                    readOnly: true,
                    serializedName: "supportTopicId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Rendering = {
        serializedName: "Rendering",
        type: {
            name: "Composite",
            className: "Rendering",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NoGraph",
                            "Table",
                            "TimeSeries",
                            "TimeSeriesPerInstance"
                        ]
                    }
                },
                title: {
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticData = {
        serializedName: "DiagnosticData",
        type: {
            name: "Composite",
            className: "DiagnosticData",
            modelProperties: {
                table: {
                    serializedName: "table",
                    type: {
                        name: "Composite",
                        className: "DataTableResponseObject"
                    }
                },
                renderingProperties: {
                    serializedName: "renderingProperties",
                    type: {
                        name: "Composite",
                        className: "Rendering"
                    }
                }
            }
        }
    };
    var DetectorResponse = {
        serializedName: "DetectorResponse",
        type: {
            name: "Composite",
            className: "DetectorResponse",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Composite",
                        className: "DetectorInfo"
                    }
                }, dataset: {
                    serializedName: "properties.dataset",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticData"
                            }
                        }
                    }
                } })
        }
    };
    var DiagnosticAnalysis = {
        serializedName: "DiagnosticAnalysis",
        type: {
            name: "Composite",
            className: "DiagnosticAnalysis",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, abnormalTimePeriods: {
                    serializedName: "properties.abnormalTimePeriods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AbnormalTimePeriod"
                            }
                        }
                    }
                }, payload: {
                    serializedName: "properties.payload",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AnalysisData"
                            }
                        }
                    }
                }, nonCorrelatedDetectors: {
                    serializedName: "properties.nonCorrelatedDetectors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectorDefinition"
                            }
                        }
                    }
                } })
        }
    };
    var DiagnosticCategory = {
        serializedName: "DiagnosticCategory",
        type: {
            name: "Composite",
            className: "DiagnosticCategory",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DiagnosticDetectorResponse = {
        serializedName: "DiagnosticDetectorResponse",
        type: {
            name: "Composite",
            className: "DiagnosticDetectorResponse",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, issueDetected: {
                    serializedName: "properties.issueDetected",
                    type: {
                        name: "Boolean"
                    }
                }, detectorDefinition: {
                    serializedName: "properties.detectorDefinition",
                    type: {
                        name: "Composite",
                        className: "DetectorDefinition"
                    }
                }, metrics: {
                    serializedName: "properties.metrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticMetricSet"
                            }
                        }
                    }
                }, abnormalTimePeriods: {
                    serializedName: "properties.abnormalTimePeriods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectorAbnormalTimePeriod"
                            }
                        }
                    }
                }, data: {
                    serializedName: "properties.data",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "NameValuePair"
                                    }
                                }
                            }
                        }
                    }
                }, responseMetaData: {
                    serializedName: "properties.responseMetaData",
                    type: {
                        name: "Composite",
                        className: "ResponseMetaData"
                    }
                } })
        }
    };
    var StackMinorVersion = {
        serializedName: "StackMinorVersion",
        type: {
            name: "Composite",
            className: "StackMinorVersion",
            modelProperties: {
                displayVersion: {
                    serializedName: "displayVersion",
                    type: {
                        name: "String"
                    }
                },
                runtimeVersion: {
                    serializedName: "runtimeVersion",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                isRemoteDebuggingEnabled: {
                    serializedName: "isRemoteDebuggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var StackMajorVersion = {
        serializedName: "StackMajorVersion",
        type: {
            name: "Composite",
            className: "StackMajorVersion",
            modelProperties: {
                displayVersion: {
                    serializedName: "displayVersion",
                    type: {
                        name: "String"
                    }
                },
                runtimeVersion: {
                    serializedName: "runtimeVersion",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                minorVersions: {
                    serializedName: "minorVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StackMinorVersion"
                            }
                        }
                    }
                },
                applicationInsights: {
                    serializedName: "applicationInsights",
                    type: {
                        name: "Boolean"
                    }
                },
                isPreview: {
                    serializedName: "isPreview",
                    type: {
                        name: "Boolean"
                    }
                },
                isDeprecated: {
                    serializedName: "isDeprecated",
                    type: {
                        name: "Boolean"
                    }
                },
                isHidden: {
                    serializedName: "isHidden",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ApplicationStack = {
        serializedName: "ApplicationStack",
        type: {
            name: "Composite",
            className: "ApplicationStack",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "String"
                    }
                },
                dependency: {
                    serializedName: "dependency",
                    type: {
                        name: "String"
                    }
                },
                majorVersions: {
                    serializedName: "majorVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StackMajorVersion"
                            }
                        }
                    }
                },
                frameworks: {
                    serializedName: "frameworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationStack"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationStackResource = {
        serializedName: "ApplicationStackResource",
        type: {
            name: "Composite",
            className: "ApplicationStackResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { applicationStackResourceName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, display: {
                    serializedName: "properties.display",
                    type: {
                        name: "String"
                    }
                }, dependency: {
                    serializedName: "properties.dependency",
                    type: {
                        name: "String"
                    }
                }, majorVersions: {
                    serializedName: "properties.majorVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StackMajorVersion"
                            }
                        }
                    }
                }, frameworks: {
                    serializedName: "properties.frameworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationStack"
                            }
                        }
                    }
                } })
        }
    };
    var Recommendation = {
        serializedName: "Recommendation",
        type: {
            name: "Composite",
            className: "Recommendation",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { creationTime: {
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, recommendationId: {
                    serializedName: "properties.recommendationId",
                    type: {
                        name: "Uuid"
                    }
                }, resourceId: {
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                }, resourceScope: {
                    serializedName: "properties.resourceScope",
                    type: {
                        name: "String"
                    }
                }, ruleName: {
                    serializedName: "properties.ruleName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, message: {
                    serializedName: "properties.message",
                    type: {
                        name: "String"
                    }
                }, level: {
                    serializedName: "properties.level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Critical",
                            "Warning",
                            "Information",
                            "NonUrgentSuggestion"
                        ]
                    }
                }, channels: {
                    serializedName: "properties.channels",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Notification",
                            "Api",
                            "Email",
                            "Webhook",
                            "All"
                        ]
                    }
                }, categoryTags: {
                    readOnly: true,
                    serializedName: "properties.categoryTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, actionName: {
                    serializedName: "properties.actionName",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Number"
                    }
                }, states: {
                    serializedName: "properties.states",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, nextNotificationTime: {
                    serializedName: "properties.nextNotificationTime",
                    type: {
                        name: "DateTime"
                    }
                }, notificationExpirationTime: {
                    serializedName: "properties.notificationExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, notifiedTime: {
                    serializedName: "properties.notifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, score: {
                    serializedName: "properties.score",
                    type: {
                        name: "Number"
                    }
                }, isDynamic: {
                    serializedName: "properties.isDynamic",
                    type: {
                        name: "Boolean"
                    }
                }, extensionName: {
                    serializedName: "properties.extensionName",
                    type: {
                        name: "String"
                    }
                }, bladeName: {
                    serializedName: "properties.bladeName",
                    type: {
                        name: "String"
                    }
                }, forwardLink: {
                    serializedName: "properties.forwardLink",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecommendationRule = {
        serializedName: "RecommendationRule",
        type: {
            name: "Composite",
            className: "RecommendationRule",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { recommendationName: {
                    serializedName: "properties.recommendationName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, message: {
                    serializedName: "properties.message",
                    type: {
                        name: "String"
                    }
                }, recommendationId: {
                    serializedName: "properties.recommendationId",
                    type: {
                        name: "Uuid"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, actionName: {
                    serializedName: "properties.actionName",
                    type: {
                        name: "String"
                    }
                }, level: {
                    serializedName: "properties.level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Critical",
                            "Warning",
                            "Information",
                            "NonUrgentSuggestion"
                        ]
                    }
                }, channels: {
                    serializedName: "properties.channels",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Notification",
                            "Api",
                            "Email",
                            "Webhook",
                            "All"
                        ]
                    }
                }, categoryTags: {
                    readOnly: true,
                    serializedName: "properties.categoryTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isDynamic: {
                    serializedName: "properties.isDynamic",
                    type: {
                        name: "Boolean"
                    }
                }, extensionName: {
                    serializedName: "properties.extensionName",
                    type: {
                        name: "String"
                    }
                }, bladeName: {
                    serializedName: "properties.bladeName",
                    type: {
                        name: "String"
                    }
                }, forwardLink: {
                    serializedName: "properties.forwardLink",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AppserviceGithubToken = {
        serializedName: "AppserviceGithubToken",
        type: {
            name: "Composite",
            className: "AppserviceGithubToken",
            modelProperties: {
                accessToken: {
                    serializedName: "accessToken",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                tokenType: {
                    serializedName: "tokenType",
                    type: {
                        name: "String"
                    }
                },
                gotToken: {
                    serializedName: "gotToken",
                    type: {
                        name: "Boolean"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppserviceGithubTokenRequest = {
        serializedName: "AppserviceGithubTokenRequest",
        type: {
            name: "Composite",
            className: "AppserviceGithubTokenRequest",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BillingMeter = {
        serializedName: "BillingMeter",
        type: {
            name: "Composite",
            className: "BillingMeter",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { meterId: {
                    serializedName: "properties.meterId",
                    type: {
                        name: "String"
                    }
                }, billingLocation: {
                    serializedName: "properties.billingLocation",
                    type: {
                        name: "String"
                    }
                }, shortName: {
                    serializedName: "properties.shortName",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, resourceType: {
                    serializedName: "properties.resourceType",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CsmMoveResourceEnvelope = {
        serializedName: "CsmMoveResourceEnvelope",
        type: {
            name: "Composite",
            className: "CsmMoveResourceEnvelope",
            modelProperties: {
                targetResourceGroup: {
                    serializedName: "targetResourceGroup",
                    constraints: {
                        MaxLength: 90,
                        MinLength: 1,
                        Pattern: / ^[-\w\._\(\)]+[^\.]$/
                    },
                    type: {
                        name: "String"
                    }
                },
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GeoRegion = {
        serializedName: "GeoRegion",
        type: {
            name: "Composite",
            className: "GeoRegion",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, orgDomain: {
                    readOnly: true,
                    serializedName: "properties.orgDomain",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HostingEnvironmentDeploymentInfo = {
        serializedName: "HostingEnvironmentDeploymentInfo",
        type: {
            name: "Composite",
            className: "HostingEnvironmentDeploymentInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentLocations = {
        serializedName: "DeploymentLocations",
        type: {
            name: "Composite",
            className: "DeploymentLocations",
            modelProperties: {
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GeoRegion"
                            }
                        }
                    }
                },
                hostingEnvironments: {
                    serializedName: "hostingEnvironments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppServiceEnvironment"
                            }
                        }
                    }
                },
                hostingEnvironmentDeploymentInfos: {
                    serializedName: "hostingEnvironmentDeploymentInfos",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostingEnvironmentDeploymentInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var GlobalCsmSkuDescription = {
        serializedName: "GlobalCsmSkuDescription",
        type: {
            name: "Composite",
            className: "GlobalCsmSkuDescription",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "SkuCapacity"
                    }
                },
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capability"
                            }
                        }
                    }
                }
            }
        }
    };
    var PremierAddOnOffer = {
        serializedName: "PremierAddOnOffer",
        type: {
            name: "Composite",
            className: "PremierAddOnOffer",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "String"
                    }
                }, product: {
                    serializedName: "properties.product",
                    type: {
                        name: "String"
                    }
                }, vendor: {
                    serializedName: "properties.vendor",
                    type: {
                        name: "String"
                    }
                }, promoCodeRequired: {
                    serializedName: "properties.promoCodeRequired",
                    type: {
                        name: "Boolean"
                    }
                }, quota: {
                    serializedName: "properties.quota",
                    type: {
                        name: "Number"
                    }
                }, webHostingPlanRestrictions: {
                    serializedName: "properties.webHostingPlanRestrictions",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Free",
                            "Shared",
                            "Basic",
                            "Standard",
                            "Premium"
                        ]
                    }
                }, privacyPolicyUrl: {
                    serializedName: "properties.privacyPolicyUrl",
                    type: {
                        name: "String"
                    }
                }, legalTermsUrl: {
                    serializedName: "properties.legalTermsUrl",
                    type: {
                        name: "String"
                    }
                }, marketplacePublisher: {
                    serializedName: "properties.marketplacePublisher",
                    type: {
                        name: "String"
                    }
                }, marketplaceOffer: {
                    serializedName: "properties.marketplaceOffer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ResourceNameAvailability = {
        serializedName: "ResourceNameAvailability",
        type: {
            name: "Composite",
            className: "ResourceNameAvailability",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceNameAvailabilityRequest = {
        serializedName: "ResourceNameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "ResourceNameAvailabilityRequest",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                isFqdn: {
                    serializedName: "isFqdn",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SkuInfos = {
        serializedName: "SkuInfos",
        type: {
            name: "Composite",
            className: "SkuInfos",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                skus: {
                    serializedName: "skus",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GlobalCsmSkuDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var SourceControl = {
        serializedName: "SourceControl",
        type: {
            name: "Composite",
            className: "SourceControl",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { token: {
                    serializedName: "properties.token",
                    type: {
                        name: "String"
                    }
                }, tokenSecret: {
                    serializedName: "properties.tokenSecret",
                    type: {
                        name: "String"
                    }
                }, refreshToken: {
                    serializedName: "properties.refreshToken",
                    type: {
                        name: "String"
                    }
                }, expirationTime: {
                    serializedName: "properties.expirationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ValidateRequest = {
        serializedName: "ValidateRequest",
        type: {
            name: "Composite",
            className: "ValidateRequest",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                serverFarmId: {
                    serializedName: "properties.serverFarmId",
                    type: {
                        name: "String"
                    }
                },
                skuName: {
                    serializedName: "properties.skuName",
                    type: {
                        name: "String"
                    }
                },
                needLinuxWorkers: {
                    serializedName: "properties.needLinuxWorkers",
                    type: {
                        name: "Boolean"
                    }
                },
                isSpot: {
                    serializedName: "properties.isSpot",
                    type: {
                        name: "Boolean"
                    }
                },
                capacity: {
                    serializedName: "properties.capacity",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                hostingEnvironment: {
                    serializedName: "properties.hostingEnvironment",
                    type: {
                        name: "String"
                    }
                },
                isXenon: {
                    serializedName: "properties.isXenon",
                    type: {
                        name: "Boolean"
                    }
                },
                containerRegistryBaseUrl: {
                    serializedName: "properties.containerRegistryBaseUrl",
                    type: {
                        name: "String"
                    }
                },
                containerRegistryUsername: {
                    serializedName: "properties.containerRegistryUsername",
                    type: {
                        name: "String"
                    }
                },
                containerRegistryPassword: {
                    serializedName: "properties.containerRegistryPassword",
                    type: {
                        name: "String"
                    }
                },
                containerImageRepository: {
                    serializedName: "properties.containerImageRepository",
                    type: {
                        name: "String"
                    }
                },
                containerImageTag: {
                    serializedName: "properties.containerImageTag",
                    type: {
                        name: "String"
                    }
                },
                containerImagePlatform: {
                    serializedName: "properties.containerImagePlatform",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateResponseError = {
        serializedName: "ValidateResponseError",
        type: {
            name: "Composite",
            className: "ValidateResponseError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateResponse = {
        serializedName: "ValidateResponse",
        type: {
            name: "Composite",
            className: "ValidateResponse",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ValidateResponseError"
                    }
                }
            }
        }
    };
    var VnetParameters = {
        serializedName: "VnetParameters",
        type: {
            name: "Composite",
            className: "VnetParameters",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { vnetResourceGroup: {
                    serializedName: "properties.vnetResourceGroup",
                    type: {
                        name: "String"
                    }
                }, vnetName: {
                    serializedName: "properties.vnetName",
                    type: {
                        name: "String"
                    }
                }, vnetSubnetName: {
                    serializedName: "properties.vnetSubnetName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VnetValidationTestFailure = {
        serializedName: "VnetValidationTestFailure",
        type: {
            name: "Composite",
            className: "VnetValidationTestFailure",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { testName: {
                    serializedName: "properties.testName",
                    type: {
                        name: "String"
                    }
                }, details: {
                    serializedName: "properties.details",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VnetValidationFailureDetails = {
        serializedName: "VnetValidationFailureDetails",
        type: {
            name: "Composite",
            className: "VnetValidationFailureDetails",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { failed: {
                    serializedName: "properties.failed",
                    type: {
                        name: "Boolean"
                    }
                }, failedTests: {
                    serializedName: "properties.failedTests",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetValidationTestFailure"
                            }
                        }
                    }
                } })
        }
    };
    var AllowedAudiencesValidation = {
        serializedName: "AllowedAudiencesValidation",
        type: {
            name: "Composite",
            className: "AllowedAudiencesValidation",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { allowedAudiences: {
                    serializedName: "properties.allowedAudiences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AppRegistration = {
        serializedName: "AppRegistration",
        type: {
            name: "Composite",
            className: "AppRegistration",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { appId: {
                    serializedName: "properties.appId",
                    type: {
                        name: "String"
                    }
                }, appSecretSettingName: {
                    serializedName: "properties.appSecretSettingName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FileSystemApplicationLogsConfig = {
        serializedName: "FileSystemApplicationLogsConfig",
        type: {
            name: "Composite",
            className: "FileSystemApplicationLogsConfig",
            modelProperties: {
                level: {
                    serializedName: "level",
                    defaultValue: 'Off',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "Verbose",
                            "Information",
                            "Warning",
                            "Error"
                        ]
                    }
                }
            }
        }
    };
    var AzureTableStorageApplicationLogsConfig = {
        serializedName: "AzureTableStorageApplicationLogsConfig",
        type: {
            name: "Composite",
            className: "AzureTableStorageApplicationLogsConfig",
            modelProperties: {
                level: {
                    serializedName: "level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "Verbose",
                            "Information",
                            "Warning",
                            "Error"
                        ]
                    }
                },
                sasUrl: {
                    required: true,
                    serializedName: "sasUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureBlobStorageApplicationLogsConfig = {
        serializedName: "AzureBlobStorageApplicationLogsConfig",
        type: {
            name: "Composite",
            className: "AzureBlobStorageApplicationLogsConfig",
            modelProperties: {
                level: {
                    serializedName: "level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "Verbose",
                            "Information",
                            "Warning",
                            "Error"
                        ]
                    }
                },
                sasUrl: {
                    serializedName: "sasUrl",
                    type: {
                        name: "String"
                    }
                },
                retentionInDays: {
                    serializedName: "retentionInDays",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationLogsConfig = {
        serializedName: "ApplicationLogsConfig",
        type: {
            name: "Composite",
            className: "ApplicationLogsConfig",
            modelProperties: {
                fileSystem: {
                    serializedName: "fileSystem",
                    type: {
                        name: "Composite",
                        className: "FileSystemApplicationLogsConfig"
                    }
                },
                azureTableStorage: {
                    serializedName: "azureTableStorage",
                    type: {
                        name: "Composite",
                        className: "AzureTableStorageApplicationLogsConfig"
                    }
                },
                azureBlobStorage: {
                    serializedName: "azureBlobStorage",
                    type: {
                        name: "Composite",
                        className: "AzureBlobStorageApplicationLogsConfig"
                    }
                }
            }
        }
    };
    var AuthPlatform = {
        serializedName: "AuthPlatform",
        type: {
            name: "Composite",
            className: "AuthPlatform",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, runtimeVersion: {
                    serializedName: "properties.runtimeVersion",
                    type: {
                        name: "String"
                    }
                }, configFilePath: {
                    serializedName: "properties.configFilePath",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureActiveDirectoryRegistration = {
        serializedName: "AzureActiveDirectoryRegistration",
        type: {
            name: "Composite",
            className: "AzureActiveDirectoryRegistration",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { openIdIssuer: {
                    serializedName: "properties.openIdIssuer",
                    type: {
                        name: "String"
                    }
                }, clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientSecretSettingName: {
                    serializedName: "properties.clientSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, clientSecretCertificateThumbprint: {
                    serializedName: "properties.clientSecretCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureActiveDirectoryLogin = {
        serializedName: "AzureActiveDirectoryLogin",
        type: {
            name: "Composite",
            className: "AzureActiveDirectoryLogin",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { disableWWWAuthenticate: {
                    serializedName: "properties.disableWWWAuthenticate",
                    type: {
                        name: "Boolean"
                    }
                }, loginParameters: {
                    serializedName: "properties.loginParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var JwtClaimChecks = {
        serializedName: "JwtClaimChecks",
        type: {
            name: "Composite",
            className: "JwtClaimChecks",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { allowedGroups: {
                    serializedName: "properties.allowedGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, allowedClientApplications: {
                    serializedName: "properties.allowedClientApplications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AzureActiveDirectoryValidation = {
        serializedName: "AzureActiveDirectoryValidation",
        type: {
            name: "Composite",
            className: "AzureActiveDirectoryValidation",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { jwtClaimChecks: {
                    serializedName: "properties.jwtClaimChecks",
                    type: {
                        name: "Composite",
                        className: "JwtClaimChecks"
                    }
                }, allowedAudiences: {
                    serializedName: "properties.allowedAudiences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AzureActiveDirectory = {
        serializedName: "AzureActiveDirectory",
        type: {
            name: "Composite",
            className: "AzureActiveDirectory",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, registration: {
                    serializedName: "properties.registration",
                    type: {
                        name: "Composite",
                        className: "AzureActiveDirectoryRegistration"
                    }
                }, login: {
                    serializedName: "properties.login",
                    type: {
                        name: "Composite",
                        className: "AzureActiveDirectoryLogin"
                    }
                }, validation: {
                    serializedName: "properties.validation",
                    type: {
                        name: "Composite",
                        className: "AzureActiveDirectoryValidation"
                    }
                }, isAutoProvisioned: {
                    serializedName: "properties.isAutoProvisioned",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ArmIdWrapper = {
        serializedName: "ArmIdWrapper",
        type: {
            name: "Composite",
            className: "ArmIdWrapper",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureBlobStorageHttpLogsConfig = {
        serializedName: "AzureBlobStorageHttpLogsConfig",
        type: {
            name: "Composite",
            className: "AzureBlobStorageHttpLogsConfig",
            modelProperties: {
                sasUrl: {
                    serializedName: "sasUrl",
                    type: {
                        name: "String"
                    }
                },
                retentionInDays: {
                    serializedName: "retentionInDays",
                    type: {
                        name: "Number"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AzureStorageInfoValue = {
        serializedName: "AzureStorageInfoValue",
        type: {
            name: "Composite",
            className: "AzureStorageInfoValue",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AzureFiles",
                            "AzureBlob"
                        ]
                    }
                },
                accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                shareName: {
                    serializedName: "shareName",
                    type: {
                        name: "String"
                    }
                },
                accessKey: {
                    serializedName: "accessKey",
                    type: {
                        name: "String"
                    }
                },
                mountPath: {
                    serializedName: "mountPath",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Ok",
                            "InvalidCredentials",
                            "InvalidShare"
                        ]
                    }
                }
            }
        }
    };
    var AzureStoragePropertyDictionaryResource = {
        serializedName: "AzureStoragePropertyDictionaryResource",
        type: {
            name: "Composite",
            className: "AzureStoragePropertyDictionaryResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AzureStorageInfoValue"
                            }
                        }
                    }
                } })
        }
    };
    var DatabaseBackupSetting = {
        serializedName: "DatabaseBackupSetting",
        type: {
            name: "Composite",
            className: "DatabaseBackupSetting",
            modelProperties: {
                databaseType: {
                    required: true,
                    serializedName: "databaseType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                connectionStringName: {
                    serializedName: "connectionStringName",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackupItem = {
        serializedName: "BackupItem",
        type: {
            name: "Composite",
            className: "BackupItem",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { backupId: {
                    readOnly: true,
                    serializedName: "properties.id",
                    type: {
                        name: "Number"
                    }
                }, storageAccountUrl: {
                    readOnly: true,
                    serializedName: "properties.storageAccountUrl",
                    type: {
                        name: "String"
                    }
                }, blobName: {
                    readOnly: true,
                    serializedName: "properties.blobName",
                    type: {
                        name: "String"
                    }
                }, backupItemName: {
                    readOnly: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InProgress",
                            "Failed",
                            "Succeeded",
                            "TimedOut",
                            "Created",
                            "Skipped",
                            "PartiallySucceeded",
                            "DeleteInProgress",
                            "DeleteFailed",
                            "Deleted"
                        ]
                    }
                }, sizeInBytes: {
                    readOnly: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, log: {
                    readOnly: true,
                    serializedName: "properties.log",
                    type: {
                        name: "String"
                    }
                }, databases: {
                    readOnly: true,
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseBackupSetting"
                            }
                        }
                    }
                }, scheduled: {
                    readOnly: true,
                    serializedName: "properties.scheduled",
                    type: {
                        name: "Boolean"
                    }
                }, lastRestoreTimeStamp: {
                    readOnly: true,
                    serializedName: "properties.lastRestoreTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                }, finishedTimeStamp: {
                    readOnly: true,
                    serializedName: "properties.finishedTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                }, correlationId: {
                    readOnly: true,
                    serializedName: "properties.correlationId",
                    type: {
                        name: "String"
                    }
                }, websiteSizeInBytes: {
                    readOnly: true,
                    serializedName: "properties.websiteSizeInBytes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var BackupSchedule = {
        serializedName: "BackupSchedule",
        type: {
            name: "Composite",
            className: "BackupSchedule",
            modelProperties: {
                frequencyInterval: {
                    required: true,
                    serializedName: "frequencyInterval",
                    defaultValue: 7,
                    type: {
                        name: "Number"
                    }
                },
                frequencyUnit: {
                    required: true,
                    serializedName: "frequencyUnit",
                    defaultValue: 'Day',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Day",
                            "Hour"
                        ]
                    }
                },
                keepAtLeastOneBackup: {
                    required: true,
                    serializedName: "keepAtLeastOneBackup",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                retentionPeriodInDays: {
                    required: true,
                    serializedName: "retentionPeriodInDays",
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastExecutionTime: {
                    readOnly: true,
                    serializedName: "lastExecutionTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var BackupRequest = {
        serializedName: "BackupRequest",
        type: {
            name: "Composite",
            className: "BackupRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { backupName: {
                    serializedName: "properties.backupName",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, storageAccountUrl: {
                    required: true,
                    serializedName: "properties.storageAccountUrl",
                    type: {
                        name: "String"
                    }
                }, backupSchedule: {
                    serializedName: "properties.backupSchedule",
                    type: {
                        name: "Composite",
                        className: "BackupSchedule"
                    }
                }, databases: {
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseBackupSetting"
                            }
                        }
                    }
                } })
        }
    };
    var BlobStorageTokenStore = {
        serializedName: "BlobStorageTokenStore",
        type: {
            name: "Composite",
            className: "BlobStorageTokenStore",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { sasUrlSettingName: {
                    serializedName: "properties.sasUrlSettingName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ClientRegistration = {
        serializedName: "ClientRegistration",
        type: {
            name: "Composite",
            className: "ClientRegistration",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientSecretSettingName: {
                    serializedName: "properties.clientSecretSettingName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ConnStringValueTypePair = {
        serializedName: "ConnStringValueTypePair",
        type: {
            name: "Composite",
            className: "ConnStringValueTypePair",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "MySql",
                            "SQLServer",
                            "SQLAzure",
                            "Custom",
                            "NotificationHub",
                            "ServiceBus",
                            "EventHub",
                            "ApiHub",
                            "DocDb",
                            "RedisCache",
                            "PostgreSQL"
                        ]
                    }
                }
            }
        }
    };
    var ConnectionStringDictionary = {
        serializedName: "ConnectionStringDictionary",
        type: {
            name: "Composite",
            className: "ConnectionStringDictionary",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ConnStringValueTypePair"
                            }
                        }
                    }
                } })
        }
    };
    var ContainerCpuUsage = {
        serializedName: "ContainerCpuUsage",
        type: {
            name: "Composite",
            className: "ContainerCpuUsage",
            modelProperties: {
                totalUsage: {
                    serializedName: "totalUsage",
                    type: {
                        name: "Number"
                    }
                },
                perCpuUsage: {
                    serializedName: "perCpuUsage",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                kernelModeUsage: {
                    serializedName: "kernelModeUsage",
                    type: {
                        name: "Number"
                    }
                },
                userModeUsage: {
                    serializedName: "userModeUsage",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerThrottlingData = {
        serializedName: "ContainerThrottlingData",
        type: {
            name: "Composite",
            className: "ContainerThrottlingData",
            modelProperties: {
                periods: {
                    serializedName: "periods",
                    type: {
                        name: "Number"
                    }
                },
                throttledPeriods: {
                    serializedName: "throttledPeriods",
                    type: {
                        name: "Number"
                    }
                },
                throttledTime: {
                    serializedName: "throttledTime",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerCpuStatistics = {
        serializedName: "ContainerCpuStatistics",
        type: {
            name: "Composite",
            className: "ContainerCpuStatistics",
            modelProperties: {
                cpuUsage: {
                    serializedName: "cpuUsage",
                    type: {
                        name: "Composite",
                        className: "ContainerCpuUsage"
                    }
                },
                systemCpuUsage: {
                    serializedName: "systemCpuUsage",
                    type: {
                        name: "Number"
                    }
                },
                onlineCpuCount: {
                    serializedName: "onlineCpuCount",
                    type: {
                        name: "Number"
                    }
                },
                throttlingData: {
                    serializedName: "throttlingData",
                    type: {
                        name: "Composite",
                        className: "ContainerThrottlingData"
                    }
                }
            }
        }
    };
    var ContainerMemoryStatistics = {
        serializedName: "ContainerMemoryStatistics",
        type: {
            name: "Composite",
            className: "ContainerMemoryStatistics",
            modelProperties: {
                usage: {
                    serializedName: "usage",
                    type: {
                        name: "Number"
                    }
                },
                maxUsage: {
                    serializedName: "maxUsage",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerNetworkInterfaceStatistics = {
        serializedName: "ContainerNetworkInterfaceStatistics",
        type: {
            name: "Composite",
            className: "ContainerNetworkInterfaceStatistics",
            modelProperties: {
                rxBytes: {
                    serializedName: "rxBytes",
                    type: {
                        name: "Number"
                    }
                },
                rxPackets: {
                    serializedName: "rxPackets",
                    type: {
                        name: "Number"
                    }
                },
                rxErrors: {
                    serializedName: "rxErrors",
                    type: {
                        name: "Number"
                    }
                },
                rxDropped: {
                    serializedName: "rxDropped",
                    type: {
                        name: "Number"
                    }
                },
                txBytes: {
                    serializedName: "txBytes",
                    type: {
                        name: "Number"
                    }
                },
                txPackets: {
                    serializedName: "txPackets",
                    type: {
                        name: "Number"
                    }
                },
                txErrors: {
                    serializedName: "txErrors",
                    type: {
                        name: "Number"
                    }
                },
                txDropped: {
                    serializedName: "txDropped",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerInfo = {
        serializedName: "ContainerInfo",
        type: {
            name: "Composite",
            className: "ContainerInfo",
            modelProperties: {
                currentTimeStamp: {
                    serializedName: "currentTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                previousTimeStamp: {
                    serializedName: "previousTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                currentCpuStats: {
                    serializedName: "currentCpuStats",
                    type: {
                        name: "Composite",
                        className: "ContainerCpuStatistics"
                    }
                },
                previousCpuStats: {
                    serializedName: "previousCpuStats",
                    type: {
                        name: "Composite",
                        className: "ContainerCpuStatistics"
                    }
                },
                memoryStats: {
                    serializedName: "memoryStats",
                    type: {
                        name: "Composite",
                        className: "ContainerMemoryStatistics"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                eth0: {
                    serializedName: "eth0",
                    type: {
                        name: "Composite",
                        className: "ContainerNetworkInterfaceStatistics"
                    }
                }
            }
        }
    };
    var ContinuousWebJob = {
        serializedName: "ContinuousWebJob",
        type: {
            name: "Composite",
            className: "ContinuousWebJob",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Initializing",
                            "Starting",
                            "Running",
                            "PendingRestart",
                            "Stopped"
                        ]
                    }
                }, detailedStatus: {
                    serializedName: "properties.detailed_status",
                    type: {
                        name: "String"
                    }
                }, logUrl: {
                    serializedName: "properties.log_url",
                    type: {
                        name: "String"
                    }
                }, runCommand: {
                    serializedName: "properties.run_command",
                    type: {
                        name: "String"
                    }
                }, url: {
                    serializedName: "properties.url",
                    type: {
                        name: "String"
                    }
                }, extraInfoUrl: {
                    serializedName: "properties.extra_info_url",
                    type: {
                        name: "String"
                    }
                }, webJobType: {
                    serializedName: "properties.web_job_type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Continuous",
                            "Triggered"
                        ]
                    }
                }, error: {
                    serializedName: "properties.error",
                    type: {
                        name: "String"
                    }
                }, usingSdk: {
                    serializedName: "properties.using_sdk",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var CookieExpiration = {
        serializedName: "CookieExpiration",
        type: {
            name: "Composite",
            className: "CookieExpiration",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { convention: {
                    serializedName: "properties.convention",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "FixedTime",
                            "IdentityProviderDerived"
                        ]
                    }
                }, timeToExpiration: {
                    serializedName: "properties.timeToExpiration",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CsmCopySlotEntity = {
        serializedName: "CsmCopySlotEntity",
        type: {
            name: "Composite",
            className: "CsmCopySlotEntity",
            modelProperties: {
                targetSlot: {
                    required: true,
                    serializedName: "targetSlot",
                    type: {
                        name: "String"
                    }
                },
                siteConfig: {
                    required: true,
                    serializedName: "siteConfig",
                    type: {
                        name: "Composite",
                        className: "SiteConfig"
                    }
                }
            }
        }
    };
    var CsmPublishingCredentialsPoliciesEntity = {
        serializedName: "CsmPublishingCredentialsPoliciesEntity",
        type: {
            name: "Composite",
            className: "CsmPublishingCredentialsPoliciesEntity",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { allow: {
                    required: true,
                    serializedName: "properties.allow",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var CsmPublishingCredentialsPoliciesCollection = {
        serializedName: "CsmPublishingCredentialsPoliciesCollection",
        type: {
            name: "Composite",
            className: "CsmPublishingCredentialsPoliciesCollection",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { ftp: {
                    required: true,
                    serializedName: "properties.ftp",
                    type: {
                        name: "Composite",
                        className: "CsmPublishingCredentialsPoliciesEntity"
                    }
                }, scm: {
                    required: true,
                    serializedName: "properties.scm",
                    type: {
                        name: "Composite",
                        className: "CsmPublishingCredentialsPoliciesEntity"
                    }
                } })
        }
    };
    var CsmPublishingProfileOptions = {
        serializedName: "CsmPublishingProfileOptions",
        type: {
            name: "Composite",
            className: "CsmPublishingProfileOptions",
            modelProperties: {
                format: {
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                },
                includeDisasterRecoveryEndpoints: {
                    serializedName: "includeDisasterRecoveryEndpoints",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CsmSlotEntity = {
        serializedName: "CsmSlotEntity",
        type: {
            name: "Composite",
            className: "CsmSlotEntity",
            modelProperties: {
                targetSlot: {
                    required: true,
                    serializedName: "targetSlot",
                    type: {
                        name: "String"
                    }
                },
                preserveVnet: {
                    required: true,
                    serializedName: "preserveVnet",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CustomHostnameAnalysisResult = {
        serializedName: "CustomHostnameAnalysisResult",
        type: {
            name: "Composite",
            className: "CustomHostnameAnalysisResult",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { isHostnameAlreadyVerified: {
                    readOnly: true,
                    serializedName: "properties.isHostnameAlreadyVerified",
                    type: {
                        name: "Boolean"
                    }
                }, customDomainVerificationTest: {
                    readOnly: true,
                    serializedName: "properties.customDomainVerificationTest",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Passed",
                            "Failed",
                            "Skipped"
                        ]
                    }
                }, customDomainVerificationFailureInfo: {
                    readOnly: true,
                    serializedName: "properties.customDomainVerificationFailureInfo",
                    type: {
                        name: "Composite",
                        className: "ErrorEntity"
                    }
                }, hasConflictOnScaleUnit: {
                    readOnly: true,
                    serializedName: "properties.hasConflictOnScaleUnit",
                    type: {
                        name: "Boolean"
                    }
                }, hasConflictAcrossSubscription: {
                    readOnly: true,
                    serializedName: "properties.hasConflictAcrossSubscription",
                    type: {
                        name: "Boolean"
                    }
                }, conflictingAppResourceId: {
                    readOnly: true,
                    serializedName: "properties.conflictingAppResourceId",
                    type: {
                        name: "String"
                    }
                }, cNameRecords: {
                    serializedName: "properties.cNameRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, txtRecords: {
                    serializedName: "properties.txtRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, aRecords: {
                    serializedName: "properties.aRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, alternateCNameRecords: {
                    serializedName: "properties.alternateCNameRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, alternateTxtRecords: {
                    serializedName: "properties.alternateTxtRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var OpenIdConnectClientCredential = {
        serializedName: "OpenIdConnectClientCredential",
        type: {
            name: "Composite",
            className: "OpenIdConnectClientCredential",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { method: {
                    serializedName: "properties.method",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ClientSecretPost"
                        ]
                    }
                }, clientSecretSettingName: {
                    serializedName: "properties.clientSecretSettingName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OpenIdConnectConfig = {
        serializedName: "OpenIdConnectConfig",
        type: {
            name: "Composite",
            className: "OpenIdConnectConfig",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { authorizationEndpoint: {
                    serializedName: "properties.authorizationEndpoint",
                    type: {
                        name: "String"
                    }
                }, tokenEndpoint: {
                    serializedName: "properties.tokenEndpoint",
                    type: {
                        name: "String"
                    }
                }, issuer: {
                    serializedName: "properties.issuer",
                    type: {
                        name: "String"
                    }
                }, certificationUri: {
                    serializedName: "properties.certificationUri",
                    type: {
                        name: "String"
                    }
                }, wellKnownOpenIdConfiguration: {
                    serializedName: "properties.wellKnownOpenIdConfiguration",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OpenIdConnectRegistration = {
        serializedName: "OpenIdConnectRegistration",
        type: {
            name: "Composite",
            className: "OpenIdConnectRegistration",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientCredential: {
                    serializedName: "properties.clientCredential",
                    type: {
                        name: "Composite",
                        className: "OpenIdConnectClientCredential"
                    }
                }, openIdConnectConfiguration: {
                    serializedName: "properties.openIdConnectConfiguration",
                    type: {
                        name: "Composite",
                        className: "OpenIdConnectConfig"
                    }
                } })
        }
    };
    var OpenIdConnectLogin = {
        serializedName: "OpenIdConnectLogin",
        type: {
            name: "Composite",
            className: "OpenIdConnectLogin",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { nameClaimType: {
                    serializedName: "properties.nameClaimType",
                    type: {
                        name: "String"
                    }
                }, scopes: {
                    serializedName: "properties.scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var CustomOpenIdConnectProvider = {
        serializedName: "CustomOpenIdConnectProvider",
        type: {
            name: "Composite",
            className: "CustomOpenIdConnectProvider",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, registration: {
                    serializedName: "properties.registration",
                    type: {
                        name: "Composite",
                        className: "OpenIdConnectRegistration"
                    }
                }, login: {
                    serializedName: "properties.login",
                    type: {
                        name: "Composite",
                        className: "OpenIdConnectLogin"
                    }
                } })
        }
    };
    var DeletedAppRestoreRequest = {
        serializedName: "DeletedAppRestoreRequest",
        type: {
            name: "Composite",
            className: "DeletedAppRestoreRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { deletedSiteId: {
                    serializedName: "properties.deletedSiteId",
                    type: {
                        name: "String"
                    }
                }, recoverConfiguration: {
                    serializedName: "properties.recoverConfiguration",
                    type: {
                        name: "Boolean"
                    }
                }, snapshotTime: {
                    serializedName: "properties.snapshotTime",
                    type: {
                        name: "String"
                    }
                }, useDRSecondary: {
                    serializedName: "properties.useDRSecondary",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var Deployment = {
        serializedName: "Deployment",
        type: {
            name: "Composite",
            className: "Deployment",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Number"
                    }
                }, message: {
                    serializedName: "properties.message",
                    type: {
                        name: "String"
                    }
                }, author: {
                    serializedName: "properties.author",
                    type: {
                        name: "String"
                    }
                }, deployer: {
                    serializedName: "properties.deployer",
                    type: {
                        name: "String"
                    }
                }, authorEmail: {
                    serializedName: "properties.author_email",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    serializedName: "properties.start_time",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.end_time",
                    type: {
                        name: "DateTime"
                    }
                }, active: {
                    serializedName: "properties.active",
                    type: {
                        name: "Boolean"
                    }
                }, details: {
                    serializedName: "properties.details",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EnabledConfig = {
        serializedName: "EnabledConfig",
        type: {
            name: "Composite",
            className: "EnabledConfig",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var LoginScopes = {
        serializedName: "LoginScopes",
        type: {
            name: "Composite",
            className: "LoginScopes",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { scopes: {
                    serializedName: "properties.scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Facebook = {
        serializedName: "Facebook",
        type: {
            name: "Composite",
            className: "Facebook",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, registration: {
                    serializedName: "properties.registration",
                    type: {
                        name: "Composite",
                        className: "AppRegistration"
                    }
                }, graphApiVersion: {
                    serializedName: "properties.graphApiVersion",
                    type: {
                        name: "String"
                    }
                }, login: {
                    serializedName: "properties.login",
                    type: {
                        name: "Composite",
                        className: "LoginScopes"
                    }
                } })
        }
    };
    var FileSystemHttpLogsConfig = {
        serializedName: "FileSystemHttpLogsConfig",
        type: {
            name: "Composite",
            className: "FileSystemHttpLogsConfig",
            modelProperties: {
                retentionInMb: {
                    serializedName: "retentionInMb",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 25
                    },
                    type: {
                        name: "Number"
                    }
                },
                retentionInDays: {
                    serializedName: "retentionInDays",
                    type: {
                        name: "Number"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FileSystemTokenStore = {
        serializedName: "FileSystemTokenStore",
        type: {
            name: "Composite",
            className: "FileSystemTokenStore",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { directory: {
                    serializedName: "properties.directory",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ForwardProxy = {
        serializedName: "ForwardProxy",
        type: {
            name: "Composite",
            className: "ForwardProxy",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { convention: {
                    serializedName: "properties.convention",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NoProxy",
                            "Standard",
                            "Custom"
                        ]
                    }
                }, customHostHeaderName: {
                    serializedName: "properties.customHostHeaderName",
                    type: {
                        name: "String"
                    }
                }, customProtoHeaderName: {
                    serializedName: "properties.customProtoHeaderName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FunctionEnvelope = {
        serializedName: "FunctionEnvelope",
        type: {
            name: "Composite",
            className: "FunctionEnvelope",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { functionAppId: {
                    serializedName: "properties.function_app_id",
                    type: {
                        name: "String"
                    }
                }, scriptRootPathHref: {
                    serializedName: "properties.script_root_path_href",
                    type: {
                        name: "String"
                    }
                }, scriptHref: {
                    serializedName: "properties.script_href",
                    type: {
                        name: "String"
                    }
                }, configHref: {
                    serializedName: "properties.config_href",
                    type: {
                        name: "String"
                    }
                }, testDataHref: {
                    serializedName: "properties.test_data_href",
                    type: {
                        name: "String"
                    }
                }, secretsFileHref: {
                    serializedName: "properties.secrets_file_href",
                    type: {
                        name: "String"
                    }
                }, href: {
                    serializedName: "properties.href",
                    type: {
                        name: "String"
                    }
                }, config: {
                    serializedName: "properties.config",
                    type: {
                        name: "Object"
                    }
                }, files: {
                    serializedName: "properties.files",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, testData: {
                    serializedName: "properties.test_data",
                    type: {
                        name: "String"
                    }
                }, invokeUrlTemplate: {
                    serializedName: "properties.invoke_url_template",
                    type: {
                        name: "String"
                    }
                }, language: {
                    serializedName: "properties.language",
                    type: {
                        name: "String"
                    }
                }, isDisabled: {
                    serializedName: "properties.isDisabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var FunctionSecrets = {
        serializedName: "FunctionSecrets",
        type: {
            name: "Composite",
            className: "FunctionSecrets",
            modelProperties: {
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                triggerUrl: {
                    serializedName: "trigger_url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GitHub = {
        serializedName: "GitHub",
        type: {
            name: "Composite",
            className: "GitHub",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, registration: {
                    serializedName: "properties.registration",
                    type: {
                        name: "Composite",
                        className: "ClientRegistration"
                    }
                }, login: {
                    serializedName: "properties.login",
                    type: {
                        name: "Composite",
                        className: "LoginScopes"
                    }
                } })
        }
    };
    var GlobalValidation = {
        serializedName: "GlobalValidation",
        type: {
            name: "Composite",
            className: "GlobalValidation",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { requireAuthentication: {
                    serializedName: "properties.requireAuthentication",
                    type: {
                        name: "Boolean"
                    }
                }, unauthenticatedClientAction: {
                    serializedName: "properties.unauthenticatedClientAction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RedirectToLoginPage",
                            "AllowAnonymous",
                            "Return401",
                            "Return403"
                        ]
                    }
                }, redirectToProvider: {
                    serializedName: "properties.redirectToProvider",
                    type: {
                        name: "String"
                    }
                }, excludedPaths: {
                    serializedName: "properties.excludedPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Google = {
        serializedName: "Google",
        type: {
            name: "Composite",
            className: "Google",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, registration: {
                    serializedName: "properties.registration",
                    type: {
                        name: "Composite",
                        className: "ClientRegistration"
                    }
                }, login: {
                    serializedName: "properties.login",
                    type: {
                        name: "Composite",
                        className: "LoginScopes"
                    }
                }, validation: {
                    serializedName: "properties.validation",
                    type: {
                        name: "Composite",
                        className: "AllowedAudiencesValidation"
                    }
                } })
        }
    };
    var HostKeys = {
        serializedName: "HostKeys",
        type: {
            name: "Composite",
            className: "HostKeys",
            modelProperties: {
                masterKey: {
                    serializedName: "masterKey",
                    type: {
                        name: "String"
                    }
                },
                functionKeys: {
                    serializedName: "functionKeys",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                systemKeys: {
                    serializedName: "systemKeys",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var HostNameBinding = {
        serializedName: "HostNameBinding",
        type: {
            name: "Composite",
            className: "HostNameBinding",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { siteName: {
                    serializedName: "properties.siteName",
                    type: {
                        name: "String"
                    }
                }, domainId: {
                    serializedName: "properties.domainId",
                    type: {
                        name: "String"
                    }
                }, azureResourceName: {
                    serializedName: "properties.azureResourceName",
                    type: {
                        name: "String"
                    }
                }, azureResourceType: {
                    serializedName: "properties.azureResourceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Website",
                            "TrafficManager"
                        ]
                    }
                }, customHostNameDnsRecordType: {
                    serializedName: "properties.customHostNameDnsRecordType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CName",
                            "A"
                        ]
                    }
                }, hostNameType: {
                    serializedName: "properties.hostNameType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Verified",
                            "Managed"
                        ]
                    }
                }, sslState: {
                    serializedName: "properties.sslState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "SniEnabled",
                            "IpBasedEnabled"
                        ]
                    }
                }, thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, virtualIP: {
                    readOnly: true,
                    serializedName: "properties.virtualIP",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HttpLogsConfig = {
        serializedName: "HttpLogsConfig",
        type: {
            name: "Composite",
            className: "HttpLogsConfig",
            modelProperties: {
                fileSystem: {
                    serializedName: "fileSystem",
                    type: {
                        name: "Composite",
                        className: "FileSystemHttpLogsConfig"
                    }
                },
                azureBlobStorage: {
                    serializedName: "azureBlobStorage",
                    type: {
                        name: "Composite",
                        className: "AzureBlobStorageHttpLogsConfig"
                    }
                }
            }
        }
    };
    var HttpSettingsRoutes = {
        serializedName: "HttpSettingsRoutes",
        type: {
            name: "Composite",
            className: "HttpSettingsRoutes",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { apiPrefix: {
                    serializedName: "properties.apiPrefix",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HttpSettings = {
        serializedName: "HttpSettings",
        type: {
            name: "Composite",
            className: "HttpSettings",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { requireHttps: {
                    serializedName: "properties.requireHttps",
                    type: {
                        name: "Boolean"
                    }
                }, routes: {
                    serializedName: "properties.routes",
                    type: {
                        name: "Composite",
                        className: "HttpSettingsRoutes"
                    }
                }, forwardProxy: {
                    serializedName: "properties.forwardProxy",
                    type: {
                        name: "Composite",
                        className: "ForwardProxy"
                    }
                } })
        }
    };
    var TwitterRegistration = {
        serializedName: "TwitterRegistration",
        type: {
            name: "Composite",
            className: "TwitterRegistration",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { consumerKey: {
                    serializedName: "properties.consumerKey",
                    type: {
                        name: "String"
                    }
                }, consumerSecretSettingName: {
                    serializedName: "properties.consumerSecretSettingName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Twitter = {
        serializedName: "Twitter",
        type: {
            name: "Composite",
            className: "Twitter",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, registration: {
                    serializedName: "properties.registration",
                    type: {
                        name: "Composite",
                        className: "TwitterRegistration"
                    }
                } })
        }
    };
    var IdentityProviders = {
        serializedName: "IdentityProviders",
        type: {
            name: "Composite",
            className: "IdentityProviders",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { azureActiveDirectory: {
                    serializedName: "properties.azureActiveDirectory",
                    type: {
                        name: "Composite",
                        className: "AzureActiveDirectory"
                    }
                }, facebook: {
                    serializedName: "properties.facebook",
                    type: {
                        name: "Composite",
                        className: "Facebook"
                    }
                }, gitHub: {
                    serializedName: "properties.gitHub",
                    type: {
                        name: "Composite",
                        className: "GitHub"
                    }
                }, google: {
                    serializedName: "properties.google",
                    type: {
                        name: "Composite",
                        className: "Google"
                    }
                }, twitter: {
                    serializedName: "properties.twitter",
                    type: {
                        name: "Composite",
                        className: "Twitter"
                    }
                }, customOpenIdConnectProviders: {
                    serializedName: "properties.customOpenIdConnectProviders",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "CustomOpenIdConnectProvider"
                            }
                        }
                    }
                } })
        }
    };
    var KeyInfo = {
        serializedName: "KeyInfo",
        type: {
            name: "Composite",
            className: "KeyInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoginRoutes = {
        serializedName: "LoginRoutes",
        type: {
            name: "Composite",
            className: "LoginRoutes",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { logoutEndpoint: {
                    serializedName: "properties.logoutEndpoint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TokenStore = {
        serializedName: "TokenStore",
        type: {
            name: "Composite",
            className: "TokenStore",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, tokenRefreshExtensionHours: {
                    serializedName: "properties.tokenRefreshExtensionHours",
                    type: {
                        name: "Number"
                    }
                }, fileSystem: {
                    serializedName: "properties.fileSystem",
                    type: {
                        name: "Composite",
                        className: "FileSystemTokenStore"
                    }
                }, azureBlobStorage: {
                    serializedName: "properties.azureBlobStorage",
                    type: {
                        name: "Composite",
                        className: "BlobStorageTokenStore"
                    }
                } })
        }
    };
    var Nonce = {
        serializedName: "Nonce",
        type: {
            name: "Composite",
            className: "Nonce",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { validateNonce: {
                    serializedName: "properties.validateNonce",
                    type: {
                        name: "Boolean"
                    }
                }, nonceExpirationInterval: {
                    serializedName: "properties.nonceExpirationInterval",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Login = {
        serializedName: "Login",
        type: {
            name: "Composite",
            className: "Login",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { routes: {
                    serializedName: "properties.routes",
                    type: {
                        name: "Composite",
                        className: "LoginRoutes"
                    }
                }, tokenStore: {
                    serializedName: "properties.tokenStore",
                    type: {
                        name: "Composite",
                        className: "TokenStore"
                    }
                }, preserveUrlFragmentsForLogins: {
                    serializedName: "properties.preserveUrlFragmentsForLogins",
                    type: {
                        name: "Boolean"
                    }
                }, allowedExternalRedirectUrls: {
                    serializedName: "properties.allowedExternalRedirectUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, cookieExpiration: {
                    serializedName: "properties.cookieExpiration",
                    type: {
                        name: "Composite",
                        className: "CookieExpiration"
                    }
                }, nonce: {
                    serializedName: "properties.nonce",
                    type: {
                        name: "Composite",
                        className: "Nonce"
                    }
                } })
        }
    };
    var MSDeploy = {
        serializedName: "MSDeploy",
        type: {
            name: "Composite",
            className: "MSDeploy",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { packageUri: {
                    serializedName: "properties.packageUri",
                    type: {
                        name: "String"
                    }
                }, connectionString: {
                    serializedName: "properties.connectionString",
                    type: {
                        name: "String"
                    }
                }, dbType: {
                    serializedName: "properties.dbType",
                    type: {
                        name: "String"
                    }
                }, setParametersXmlFileUri: {
                    serializedName: "properties.setParametersXmlFileUri",
                    type: {
                        name: "String"
                    }
                }, setParameters: {
                    serializedName: "properties.setParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, skipAppData: {
                    serializedName: "properties.skipAppData",
                    type: {
                        name: "Boolean"
                    }
                }, appOffline: {
                    serializedName: "properties.appOffline",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MSDeployLogEntry = {
        serializedName: "MSDeployLogEntry",
        type: {
            name: "Composite",
            className: "MSDeployLogEntry",
            modelProperties: {
                time: {
                    readOnly: true,
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Message",
                            "Warning",
                            "Error"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MSDeployLog = {
        serializedName: "MSDeployLog",
        type: {
            name: "Composite",
            className: "MSDeployLog",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { entries: {
                    readOnly: true,
                    serializedName: "properties.entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MSDeployLogEntry"
                            }
                        }
                    }
                } })
        }
    };
    var MSDeployStatus = {
        serializedName: "MSDeployStatus",
        type: {
            name: "Composite",
            className: "MSDeployStatus",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { deployer: {
                    readOnly: true,
                    serializedName: "properties.deployer",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "accepted",
                            "running",
                            "succeeded",
                            "failed",
                            "canceled"
                        ]
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, complete: {
                    readOnly: true,
                    serializedName: "properties.complete",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MigrateMySqlRequest = {
        serializedName: "MigrateMySqlRequest",
        type: {
            name: "Composite",
            className: "MigrateMySqlRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { connectionString: {
                    required: true,
                    serializedName: "properties.connectionString",
                    type: {
                        name: "String"
                    }
                }, migrationType: {
                    required: true,
                    serializedName: "properties.migrationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LocalToRemote",
                            "RemoteToLocal"
                        ]
                    }
                } })
        }
    };
    var MigrateMySqlStatus = {
        serializedName: "MigrateMySqlStatus",
        type: {
            name: "Composite",
            className: "MigrateMySqlStatus",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { migrationOperationStatus: {
                    readOnly: true,
                    serializedName: "properties.migrationOperationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InProgress",
                            "Failed",
                            "Succeeded",
                            "TimedOut",
                            "Created"
                        ]
                    }
                }, operationId: {
                    readOnly: true,
                    serializedName: "properties.operationId",
                    type: {
                        name: "String"
                    }
                }, localMySqlEnabled: {
                    readOnly: true,
                    serializedName: "properties.localMySqlEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var RelayServiceConnectionEntity = {
        serializedName: "RelayServiceConnectionEntity",
        type: {
            name: "Composite",
            className: "RelayServiceConnectionEntity",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { entityName: {
                    serializedName: "properties.entityName",
                    type: {
                        name: "String"
                    }
                }, entityConnectionString: {
                    serializedName: "properties.entityConnectionString",
                    type: {
                        name: "String"
                    }
                }, resourceType: {
                    serializedName: "properties.resourceType",
                    type: {
                        name: "String"
                    }
                }, resourceConnectionString: {
                    serializedName: "properties.resourceConnectionString",
                    type: {
                        name: "String"
                    }
                }, hostname: {
                    serializedName: "properties.hostname",
                    type: {
                        name: "String"
                    }
                }, port: {
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                }, biztalkUri: {
                    serializedName: "properties.biztalkUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkFeatures = {
        serializedName: "NetworkFeatures",
        type: {
            name: "Composite",
            className: "NetworkFeatures",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { virtualNetworkName: {
                    readOnly: true,
                    serializedName: "properties.virtualNetworkName",
                    type: {
                        name: "String"
                    }
                }, virtualNetworkConnection: {
                    readOnly: true,
                    serializedName: "properties.virtualNetworkConnection",
                    type: {
                        name: "Composite",
                        className: "VnetInfo"
                    }
                }, hybridConnections: {
                    readOnly: true,
                    serializedName: "properties.hybridConnections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelayServiceConnectionEntity"
                            }
                        }
                    }
                }, hybridConnectionsV2: {
                    readOnly: true,
                    serializedName: "properties.hybridConnectionsV2",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HybridConnection"
                            }
                        }
                    }
                } })
        }
    };
    var NetworkTrace = {
        serializedName: "NetworkTrace",
        type: {
            name: "Composite",
            className: "NetworkTrace",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PerfMonSample = {
        serializedName: "PerfMonSample",
        type: {
            name: "Composite",
            className: "PerfMonSample",
            modelProperties: {
                time: {
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                },
                instanceName: {
                    serializedName: "instanceName",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PerfMonSet = {
        serializedName: "PerfMonSet",
        type: {
            name: "Composite",
            className: "PerfMonSet",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PerfMonSample"
                            }
                        }
                    }
                }
            }
        }
    };
    var PerfMonResponse = {
        serializedName: "PerfMonResponse",
        type: {
            name: "Composite",
            className: "PerfMonResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                data: {
                    serializedName: "data",
                    type: {
                        name: "Composite",
                        className: "PerfMonSet"
                    }
                }
            }
        }
    };
    var PremierAddOn = {
        serializedName: "PremierAddOn",
        type: {
            name: "Composite",
            className: "PremierAddOn",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "String"
                    }
                }, product: {
                    serializedName: "properties.product",
                    type: {
                        name: "String"
                    }
                }, vendor: {
                    serializedName: "properties.vendor",
                    type: {
                        name: "String"
                    }
                }, marketplacePublisher: {
                    serializedName: "properties.marketplacePublisher",
                    type: {
                        name: "String"
                    }
                }, marketplaceOffer: {
                    serializedName: "properties.marketplaceOffer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PremierAddOnPatchResource = {
        serializedName: "PremierAddOnPatchResource",
        type: {
            name: "Composite",
            className: "PremierAddOnPatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "String"
                    }
                }, product: {
                    serializedName: "properties.product",
                    type: {
                        name: "String"
                    }
                }, vendor: {
                    serializedName: "properties.vendor",
                    type: {
                        name: "String"
                    }
                }, marketplacePublisher: {
                    serializedName: "properties.marketplacePublisher",
                    type: {
                        name: "String"
                    }
                }, marketplaceOffer: {
                    serializedName: "properties.marketplaceOffer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PrivateAccessSubnet = {
        serializedName: "PrivateAccessSubnet",
        type: {
            name: "Composite",
            className: "PrivateAccessSubnet",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PrivateAccessVirtualNetwork = {
        serializedName: "PrivateAccessVirtualNetwork",
        type: {
            name: "Composite",
            className: "PrivateAccessVirtualNetwork",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "Number"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                subnets: {
                    serializedName: "subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateAccessSubnet"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrivateAccess = {
        serializedName: "PrivateAccess",
        type: {
            name: "Composite",
            className: "PrivateAccess",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, virtualNetworks: {
                    serializedName: "properties.virtualNetworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateAccessVirtualNetwork"
                            }
                        }
                    }
                } })
        }
    };
    var PrivateLinkConnectionState = {
        serializedName: "PrivateLinkConnectionState",
        type: {
            name: "Composite",
            className: "PrivateLinkConnectionState",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                actionsRequired: {
                    serializedName: "actionsRequired",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnectionResource = {
        serializedName: "PrivateEndpointConnectionResource",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnectionResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, privateEndpoint: {
                    serializedName: "properties.privateEndpoint",
                    type: {
                        name: "Composite",
                        className: "ArmIdWrapper"
                    }
                }, privateLinkServiceConnectionState: {
                    serializedName: "properties.privateLinkServiceConnectionState",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkConnectionState"
                    }
                } })
        }
    };
    var PrivateLinkConnectionApprovalRequestResource = {
        serializedName: "PrivateLinkConnectionApprovalRequestResource",
        type: {
            name: "Composite",
            className: "PrivateLinkConnectionApprovalRequestResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { privateLinkServiceConnectionState: {
                    serializedName: "properties.privateLinkServiceConnectionState",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkConnectionState"
                    }
                } })
        }
    };
    var PrivateLinkResourceProperties = {
        serializedName: "PrivateLinkResourceProperties",
        type: {
            name: "Composite",
            className: "PrivateLinkResourceProperties",
            modelProperties: {
                groupId: {
                    readOnly: true,
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                },
                requiredMembers: {
                    readOnly: true,
                    serializedName: "requiredMembers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                requiredZoneNames: {
                    readOnly: true,
                    serializedName: "requiredZoneNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrivateLinkResource = {
        serializedName: "PrivateLinkResource",
        type: {
            name: "Composite",
            className: "PrivateLinkResource",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkResourceProperties"
                    }
                }
            }
        }
    };
    var PrivateLinkResourcesWrapper = {
        serializedName: "PrivateLinkResourcesWrapper",
        type: {
            name: "Composite",
            className: "PrivateLinkResourcesWrapper",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateLinkResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProcessThreadInfo = {
        serializedName: "ProcessThreadInfo",
        type: {
            name: "Composite",
            className: "ProcessThreadInfo",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { identifier: {
                    readOnly: true,
                    serializedName: "properties.identifier",
                    type: {
                        name: "Number"
                    }
                }, href: {
                    serializedName: "properties.href",
                    type: {
                        name: "String"
                    }
                }, process: {
                    serializedName: "properties.process",
                    type: {
                        name: "String"
                    }
                }, startAddress: {
                    serializedName: "properties.start_address",
                    type: {
                        name: "String"
                    }
                }, currentPriority: {
                    serializedName: "properties.current_priority",
                    type: {
                        name: "Number"
                    }
                }, priorityLevel: {
                    serializedName: "properties.priority_level",
                    type: {
                        name: "String"
                    }
                }, basePriority: {
                    serializedName: "properties.base_priority",
                    type: {
                        name: "Number"
                    }
                }, startTime: {
                    serializedName: "properties.start_time",
                    type: {
                        name: "DateTime"
                    }
                }, totalProcessorTime: {
                    serializedName: "properties.total_processor_time",
                    type: {
                        name: "String"
                    }
                }, userProcessorTime: {
                    serializedName: "properties.user_processor_time",
                    type: {
                        name: "String"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, waitReason: {
                    serializedName: "properties.wait_reason",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProcessModuleInfo = {
        serializedName: "ProcessModuleInfo",
        type: {
            name: "Composite",
            className: "ProcessModuleInfo",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { baseAddress: {
                    serializedName: "properties.base_address",
                    type: {
                        name: "String"
                    }
                }, fileName: {
                    serializedName: "properties.file_name",
                    type: {
                        name: "String"
                    }
                }, href: {
                    serializedName: "properties.href",
                    type: {
                        name: "String"
                    }
                }, filePath: {
                    serializedName: "properties.file_path",
                    type: {
                        name: "String"
                    }
                }, moduleMemorySize: {
                    serializedName: "properties.module_memory_size",
                    type: {
                        name: "Number"
                    }
                }, fileVersion: {
                    serializedName: "properties.file_version",
                    type: {
                        name: "String"
                    }
                }, fileDescription: {
                    serializedName: "properties.file_description",
                    type: {
                        name: "String"
                    }
                }, product: {
                    serializedName: "properties.product",
                    type: {
                        name: "String"
                    }
                }, productVersion: {
                    serializedName: "properties.product_version",
                    type: {
                        name: "String"
                    }
                }, isDebug: {
                    serializedName: "properties.is_debug",
                    type: {
                        name: "Boolean"
                    }
                }, language: {
                    serializedName: "properties.language",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProcessInfo = {
        serializedName: "ProcessInfo",
        type: {
            name: "Composite",
            className: "ProcessInfo",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { identifier: {
                    readOnly: true,
                    serializedName: "properties.identifier",
                    type: {
                        name: "Number"
                    }
                }, deploymentName: {
                    serializedName: "properties.deployment_name",
                    type: {
                        name: "String"
                    }
                }, href: {
                    serializedName: "properties.href",
                    type: {
                        name: "String"
                    }
                }, minidump: {
                    serializedName: "properties.minidump",
                    type: {
                        name: "String"
                    }
                }, isProfileRunning: {
                    serializedName: "properties.is_profile_running",
                    type: {
                        name: "Boolean"
                    }
                }, isIisProfileRunning: {
                    serializedName: "properties.is_iis_profile_running",
                    type: {
                        name: "Boolean"
                    }
                }, iisProfileTimeoutInSeconds: {
                    serializedName: "properties.iis_profile_timeout_in_seconds",
                    type: {
                        name: "Number"
                    }
                }, parent: {
                    serializedName: "properties.parent",
                    type: {
                        name: "String"
                    }
                }, children: {
                    serializedName: "properties.children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, threads: {
                    serializedName: "properties.threads",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessThreadInfo"
                            }
                        }
                    }
                }, openFileHandles: {
                    serializedName: "properties.open_file_handles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, modules: {
                    serializedName: "properties.modules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessModuleInfo"
                            }
                        }
                    }
                }, fileName: {
                    serializedName: "properties.file_name",
                    type: {
                        name: "String"
                    }
                }, commandLine: {
                    serializedName: "properties.command_line",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "properties.user_name",
                    type: {
                        name: "String"
                    }
                }, handleCount: {
                    serializedName: "properties.handle_count",
                    type: {
                        name: "Number"
                    }
                }, moduleCount: {
                    serializedName: "properties.module_count",
                    type: {
                        name: "Number"
                    }
                }, threadCount: {
                    serializedName: "properties.thread_count",
                    type: {
                        name: "Number"
                    }
                }, startTime: {
                    serializedName: "properties.start_time",
                    type: {
                        name: "DateTime"
                    }
                }, totalCpuTime: {
                    serializedName: "properties.total_cpu_time",
                    type: {
                        name: "String"
                    }
                }, userCpuTime: {
                    serializedName: "properties.user_cpu_time",
                    type: {
                        name: "String"
                    }
                }, privilegedCpuTime: {
                    serializedName: "properties.privileged_cpu_time",
                    type: {
                        name: "String"
                    }
                }, workingSet: {
                    serializedName: "properties.working_set",
                    type: {
                        name: "Number"
                    }
                }, peakWorkingSet: {
                    serializedName: "properties.peak_working_set",
                    type: {
                        name: "Number"
                    }
                }, privateMemory: {
                    serializedName: "properties.private_memory",
                    type: {
                        name: "Number"
                    }
                }, virtualMemory: {
                    serializedName: "properties.virtual_memory",
                    type: {
                        name: "Number"
                    }
                }, peakVirtualMemory: {
                    serializedName: "properties.peak_virtual_memory",
                    type: {
                        name: "Number"
                    }
                }, pagedSystemMemory: {
                    serializedName: "properties.paged_system_memory",
                    type: {
                        name: "Number"
                    }
                }, nonPagedSystemMemory: {
                    serializedName: "properties.non_paged_system_memory",
                    type: {
                        name: "Number"
                    }
                }, pagedMemory: {
                    serializedName: "properties.paged_memory",
                    type: {
                        name: "Number"
                    }
                }, peakPagedMemory: {
                    serializedName: "properties.peak_paged_memory",
                    type: {
                        name: "Number"
                    }
                }, timeStamp: {
                    serializedName: "properties.time_stamp",
                    type: {
                        name: "DateTime"
                    }
                }, environmentVariables: {
                    serializedName: "properties.environment_variables",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isScmSite: {
                    serializedName: "properties.is_scm_site",
                    type: {
                        name: "Boolean"
                    }
                }, isWebjob: {
                    serializedName: "properties.is_webjob",
                    type: {
                        name: "Boolean"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PublicCertificate = {
        serializedName: "PublicCertificate",
        type: {
            name: "Composite",
            className: "PublicCertificate",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { blob: {
                    serializedName: "properties.blob",
                    type: {
                        name: "ByteArray"
                    }
                }, publicCertificateLocation: {
                    serializedName: "properties.publicCertificateLocation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CurrentUserMy",
                            "LocalMachineMy",
                            "Unknown"
                        ]
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RestoreRequest = {
        serializedName: "RestoreRequest",
        type: {
            name: "Composite",
            className: "RestoreRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { storageAccountUrl: {
                    required: true,
                    serializedName: "properties.storageAccountUrl",
                    type: {
                        name: "String"
                    }
                }, blobName: {
                    serializedName: "properties.blobName",
                    type: {
                        name: "String"
                    }
                }, overwrite: {
                    required: true,
                    serializedName: "properties.overwrite",
                    type: {
                        name: "Boolean"
                    }
                }, siteName: {
                    serializedName: "properties.siteName",
                    type: {
                        name: "String"
                    }
                }, databases: {
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseBackupSetting"
                            }
                        }
                    }
                }, ignoreConflictingHostNames: {
                    serializedName: "properties.ignoreConflictingHostNames",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, ignoreDatabases: {
                    serializedName: "properties.ignoreDatabases",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, appServicePlan: {
                    serializedName: "properties.appServicePlan",
                    type: {
                        name: "String"
                    }
                }, operationType: {
                    serializedName: "properties.operationType",
                    defaultValue: 'Default',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Clone",
                            "Relocation",
                            "Snapshot",
                            "CloudFS"
                        ]
                    }
                }, adjustConnectionStrings: {
                    serializedName: "properties.adjustConnectionStrings",
                    type: {
                        name: "Boolean"
                    }
                }, hostingEnvironment: {
                    serializedName: "properties.hostingEnvironment",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SiteAuthSettings = {
        serializedName: "SiteAuthSettings",
        type: {
            name: "Composite",
            className: "SiteAuthSettings",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, runtimeVersion: {
                    serializedName: "properties.runtimeVersion",
                    type: {
                        name: "String"
                    }
                }, unauthenticatedClientAction: {
                    serializedName: "properties.unauthenticatedClientAction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RedirectToLoginPage",
                            "AllowAnonymous"
                        ]
                    }
                }, tokenStoreEnabled: {
                    serializedName: "properties.tokenStoreEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, allowedExternalRedirectUrls: {
                    serializedName: "properties.allowedExternalRedirectUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, defaultProvider: {
                    serializedName: "properties.defaultProvider",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AzureActiveDirectory",
                            "Facebook",
                            "Google",
                            "MicrosoftAccount",
                            "Twitter",
                            "Github"
                        ]
                    }
                }, tokenRefreshExtensionHours: {
                    serializedName: "properties.tokenRefreshExtensionHours",
                    type: {
                        name: "Number"
                    }
                }, clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                }, clientSecret: {
                    serializedName: "properties.clientSecret",
                    type: {
                        name: "String"
                    }
                }, clientSecretSettingName: {
                    serializedName: "properties.clientSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, clientSecretCertificateThumbprint: {
                    serializedName: "properties.clientSecretCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                }, issuer: {
                    serializedName: "properties.issuer",
                    type: {
                        name: "String"
                    }
                }, validateIssuer: {
                    serializedName: "properties.validateIssuer",
                    type: {
                        name: "Boolean"
                    }
                }, allowedAudiences: {
                    serializedName: "properties.allowedAudiences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, additionalLoginParams: {
                    serializedName: "properties.additionalLoginParams",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, aadClaimsAuthorization: {
                    serializedName: "properties.aadClaimsAuthorization",
                    type: {
                        name: "String"
                    }
                }, googleClientId: {
                    serializedName: "properties.googleClientId",
                    type: {
                        name: "String"
                    }
                }, googleClientSecret: {
                    serializedName: "properties.googleClientSecret",
                    type: {
                        name: "String"
                    }
                }, googleClientSecretSettingName: {
                    serializedName: "properties.googleClientSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, googleOAuthScopes: {
                    serializedName: "properties.googleOAuthScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, facebookAppId: {
                    serializedName: "properties.facebookAppId",
                    type: {
                        name: "String"
                    }
                }, facebookAppSecret: {
                    serializedName: "properties.facebookAppSecret",
                    type: {
                        name: "String"
                    }
                }, facebookAppSecretSettingName: {
                    serializedName: "properties.facebookAppSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, facebookOAuthScopes: {
                    serializedName: "properties.facebookOAuthScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, gitHubClientId: {
                    serializedName: "properties.gitHubClientId",
                    type: {
                        name: "String"
                    }
                }, gitHubClientSecret: {
                    serializedName: "properties.gitHubClientSecret",
                    type: {
                        name: "String"
                    }
                }, gitHubClientSecretSettingName: {
                    serializedName: "properties.gitHubClientSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, gitHubOAuthScopes: {
                    serializedName: "properties.gitHubOAuthScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, twitterConsumerKey: {
                    serializedName: "properties.twitterConsumerKey",
                    type: {
                        name: "String"
                    }
                }, twitterConsumerSecret: {
                    serializedName: "properties.twitterConsumerSecret",
                    type: {
                        name: "String"
                    }
                }, twitterConsumerSecretSettingName: {
                    serializedName: "properties.twitterConsumerSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, microsoftAccountClientId: {
                    serializedName: "properties.microsoftAccountClientId",
                    type: {
                        name: "String"
                    }
                }, microsoftAccountClientSecret: {
                    serializedName: "properties.microsoftAccountClientSecret",
                    type: {
                        name: "String"
                    }
                }, microsoftAccountClientSecretSettingName: {
                    serializedName: "properties.microsoftAccountClientSecretSettingName",
                    type: {
                        name: "String"
                    }
                }, microsoftAccountOAuthScopes: {
                    serializedName: "properties.microsoftAccountOAuthScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isAuthFromFile: {
                    serializedName: "properties.isAuthFromFile",
                    type: {
                        name: "String"
                    }
                }, authFilePath: {
                    serializedName: "properties.authFilePath",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SiteAuthSettingsV2 = {
        serializedName: "SiteAuthSettingsV2",
        type: {
            name: "Composite",
            className: "SiteAuthSettingsV2",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { platform: {
                    serializedName: "properties.platform",
                    type: {
                        name: "Composite",
                        className: "AuthPlatform"
                    }
                }, globalValidation: {
                    serializedName: "properties.globalValidation",
                    type: {
                        name: "Composite",
                        className: "GlobalValidation"
                    }
                }, identityProviders: {
                    serializedName: "properties.identityProviders",
                    type: {
                        name: "Composite",
                        className: "IdentityProviders"
                    }
                }, login: {
                    serializedName: "properties.login",
                    type: {
                        name: "Composite",
                        className: "Login"
                    }
                }, httpSettings: {
                    serializedName: "properties.httpSettings",
                    type: {
                        name: "Composite",
                        className: "HttpSettings"
                    }
                } })
        }
    };
    var SiteCloneabilityCriterion = {
        serializedName: "SiteCloneabilityCriterion",
        type: {
            name: "Composite",
            className: "SiteCloneabilityCriterion",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteCloneability = {
        serializedName: "SiteCloneability",
        type: {
            name: "Composite",
            className: "SiteCloneability",
            modelProperties: {
                result: {
                    serializedName: "result",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Cloneable",
                            "PartiallyCloneable",
                            "NotCloneable"
                        ]
                    }
                },
                blockingFeatures: {
                    serializedName: "blockingFeatures",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SiteCloneabilityCriterion"
                            }
                        }
                    }
                },
                unsupportedFeatures: {
                    serializedName: "unsupportedFeatures",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SiteCloneabilityCriterion"
                            }
                        }
                    }
                },
                blockingCharacteristics: {
                    serializedName: "blockingCharacteristics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SiteCloneabilityCriterion"
                            }
                        }
                    }
                }
            }
        }
    };
    var SiteConfigResource = {
        serializedName: "SiteConfigResource",
        type: {
            name: "Composite",
            className: "SiteConfigResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { numberOfWorkers: {
                    serializedName: "properties.numberOfWorkers",
                    type: {
                        name: "Number"
                    }
                }, defaultDocuments: {
                    serializedName: "properties.defaultDocuments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, netFrameworkVersion: {
                    serializedName: "properties.netFrameworkVersion",
                    defaultValue: 'v4.6',
                    type: {
                        name: "String"
                    }
                }, phpVersion: {
                    serializedName: "properties.phpVersion",
                    type: {
                        name: "String"
                    }
                }, pythonVersion: {
                    serializedName: "properties.pythonVersion",
                    type: {
                        name: "String"
                    }
                }, nodeVersion: {
                    serializedName: "properties.nodeVersion",
                    type: {
                        name: "String"
                    }
                }, powerShellVersion: {
                    serializedName: "properties.powerShellVersion",
                    type: {
                        name: "String"
                    }
                }, linuxFxVersion: {
                    serializedName: "properties.linuxFxVersion",
                    type: {
                        name: "String"
                    }
                }, windowsFxVersion: {
                    serializedName: "properties.windowsFxVersion",
                    type: {
                        name: "String"
                    }
                }, requestTracingEnabled: {
                    serializedName: "properties.requestTracingEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, requestTracingExpirationTime: {
                    serializedName: "properties.requestTracingExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, remoteDebuggingEnabled: {
                    serializedName: "properties.remoteDebuggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, remoteDebuggingVersion: {
                    serializedName: "properties.remoteDebuggingVersion",
                    type: {
                        name: "String"
                    }
                }, httpLoggingEnabled: {
                    serializedName: "properties.httpLoggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, logsDirectorySizeLimit: {
                    serializedName: "properties.logsDirectorySizeLimit",
                    type: {
                        name: "Number"
                    }
                }, detailedErrorLoggingEnabled: {
                    serializedName: "properties.detailedErrorLoggingEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, publishingUsername: {
                    serializedName: "properties.publishingUsername",
                    type: {
                        name: "String"
                    }
                }, appSettings: {
                    serializedName: "properties.appSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }, connectionStrings: {
                    serializedName: "properties.connectionStrings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnStringInfo"
                            }
                        }
                    }
                }, machineKey: {
                    readOnly: true,
                    serializedName: "properties.machineKey",
                    type: {
                        name: "Composite",
                        className: "SiteMachineKey"
                    }
                }, handlerMappings: {
                    serializedName: "properties.handlerMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HandlerMapping"
                            }
                        }
                    }
                }, documentRoot: {
                    serializedName: "properties.documentRoot",
                    type: {
                        name: "String"
                    }
                }, scmType: {
                    serializedName: "properties.scmType",
                    type: {
                        name: "String"
                    }
                }, use32BitWorkerProcess: {
                    serializedName: "properties.use32BitWorkerProcess",
                    type: {
                        name: "Boolean"
                    }
                }, webSocketsEnabled: {
                    serializedName: "properties.webSocketsEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, alwaysOn: {
                    serializedName: "properties.alwaysOn",
                    type: {
                        name: "Boolean"
                    }
                }, javaVersion: {
                    serializedName: "properties.javaVersion",
                    type: {
                        name: "String"
                    }
                }, javaContainer: {
                    serializedName: "properties.javaContainer",
                    type: {
                        name: "String"
                    }
                }, javaContainerVersion: {
                    serializedName: "properties.javaContainerVersion",
                    type: {
                        name: "String"
                    }
                }, appCommandLine: {
                    serializedName: "properties.appCommandLine",
                    type: {
                        name: "String"
                    }
                }, managedPipelineMode: {
                    serializedName: "properties.managedPipelineMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Integrated",
                            "Classic"
                        ]
                    }
                }, virtualApplications: {
                    serializedName: "properties.virtualApplications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualApplication"
                            }
                        }
                    }
                }, loadBalancing: {
                    serializedName: "properties.loadBalancing",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "WeightedRoundRobin",
                            "LeastRequests",
                            "LeastResponseTime",
                            "WeightedTotalTraffic",
                            "RequestHash"
                        ]
                    }
                }, experiments: {
                    serializedName: "properties.experiments",
                    type: {
                        name: "Composite",
                        className: "Experiments"
                    }
                }, limits: {
                    serializedName: "properties.limits",
                    type: {
                        name: "Composite",
                        className: "SiteLimits"
                    }
                }, autoHealEnabled: {
                    serializedName: "properties.autoHealEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, autoHealRules: {
                    serializedName: "properties.autoHealRules",
                    type: {
                        name: "Composite",
                        className: "AutoHealRules"
                    }
                }, tracingOptions: {
                    serializedName: "properties.tracingOptions",
                    type: {
                        name: "String"
                    }
                }, vnetName: {
                    serializedName: "properties.vnetName",
                    type: {
                        name: "String"
                    }
                }, vnetRouteAllEnabled: {
                    serializedName: "properties.vnetRouteAllEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, vnetPrivatePortsCount: {
                    serializedName: "properties.vnetPrivatePortsCount",
                    type: {
                        name: "Number"
                    }
                }, cors: {
                    serializedName: "properties.cors",
                    type: {
                        name: "Composite",
                        className: "CorsSettings"
                    }
                }, push: {
                    serializedName: "properties.push",
                    type: {
                        name: "Composite",
                        className: "PushSettings"
                    }
                }, apiDefinition: {
                    serializedName: "properties.apiDefinition",
                    type: {
                        name: "Composite",
                        className: "ApiDefinitionInfo"
                    }
                }, apiManagementConfig: {
                    serializedName: "properties.apiManagementConfig",
                    type: {
                        name: "Composite",
                        className: "ApiManagementConfig"
                    }
                }, autoSwapSlotName: {
                    serializedName: "properties.autoSwapSlotName",
                    type: {
                        name: "String"
                    }
                }, localMySqlEnabled: {
                    serializedName: "properties.localMySqlEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, managedServiceIdentityId: {
                    serializedName: "properties.managedServiceIdentityId",
                    type: {
                        name: "Number"
                    }
                }, xManagedServiceIdentityId: {
                    serializedName: "properties.xManagedServiceIdentityId",
                    type: {
                        name: "Number"
                    }
                }, ipSecurityRestrictions: {
                    serializedName: "properties.ipSecurityRestrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpSecurityRestriction"
                            }
                        }
                    }
                }, scmIpSecurityRestrictions: {
                    serializedName: "properties.scmIpSecurityRestrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpSecurityRestriction"
                            }
                        }
                    }
                }, scmIpSecurityRestrictionsUseMain: {
                    serializedName: "properties.scmIpSecurityRestrictionsUseMain",
                    type: {
                        name: "Boolean"
                    }
                }, http20Enabled: {
                    serializedName: "properties.http20Enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, minTlsVersion: {
                    serializedName: "properties.minTlsVersion",
                    type: {
                        name: "String"
                    }
                }, scmMinTlsVersion: {
                    serializedName: "properties.scmMinTlsVersion",
                    type: {
                        name: "String"
                    }
                }, ftpsState: {
                    serializedName: "properties.ftpsState",
                    type: {
                        name: "String"
                    }
                }, preWarmedInstanceCount: {
                    serializedName: "properties.preWarmedInstanceCount",
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, healthCheckPath: {
                    serializedName: "properties.healthCheckPath",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SiteConfigurationSnapshotInfo = {
        serializedName: "SiteConfigurationSnapshotInfo",
        type: {
            name: "Composite",
            className: "SiteConfigurationSnapshotInfo",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { time: {
                    readOnly: true,
                    serializedName: "properties.time",
                    type: {
                        name: "DateTime"
                    }
                }, snapshotId: {
                    readOnly: true,
                    serializedName: "properties.snapshotId",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var SiteExtensionInfo = {
        serializedName: "SiteExtensionInfo",
        type: {
            name: "Composite",
            className: "SiteExtensionInfo",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { extensionId: {
                    serializedName: "properties.extension_id",
                    type: {
                        name: "String"
                    }
                }, title: {
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, extensionType: {
                    serializedName: "properties.extension_type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Gallery",
                            "WebRoot"
                        ]
                    }
                }, summary: {
                    serializedName: "properties.summary",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, extensionUrl: {
                    serializedName: "properties.extension_url",
                    type: {
                        name: "String"
                    }
                }, projectUrl: {
                    serializedName: "properties.project_url",
                    type: {
                        name: "String"
                    }
                }, iconUrl: {
                    serializedName: "properties.icon_url",
                    type: {
                        name: "String"
                    }
                }, licenseUrl: {
                    serializedName: "properties.license_url",
                    type: {
                        name: "String"
                    }
                }, feedUrl: {
                    serializedName: "properties.feed_url",
                    type: {
                        name: "String"
                    }
                }, authors: {
                    serializedName: "properties.authors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, installerCommandLineParams: {
                    serializedName: "properties.installer_command_line_params",
                    type: {
                        name: "String"
                    }
                }, publishedDateTime: {
                    serializedName: "properties.published_date_time",
                    type: {
                        name: "DateTime"
                    }
                }, downloadCount: {
                    serializedName: "properties.download_count",
                    type: {
                        name: "Number"
                    }
                }, localIsLatestVersion: {
                    serializedName: "properties.local_is_latest_version",
                    type: {
                        name: "Boolean"
                    }
                }, localPath: {
                    serializedName: "properties.local_path",
                    type: {
                        name: "String"
                    }
                }, installedDateTime: {
                    serializedName: "properties.installed_date_time",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, comment: {
                    serializedName: "properties.comment",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SiteLogsConfig = {
        serializedName: "SiteLogsConfig",
        type: {
            name: "Composite",
            className: "SiteLogsConfig",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { applicationLogs: {
                    serializedName: "properties.applicationLogs",
                    type: {
                        name: "Composite",
                        className: "ApplicationLogsConfig"
                    }
                }, httpLogs: {
                    serializedName: "properties.httpLogs",
                    type: {
                        name: "Composite",
                        className: "HttpLogsConfig"
                    }
                }, failedRequestsTracing: {
                    serializedName: "properties.failedRequestsTracing",
                    type: {
                        name: "Composite",
                        className: "EnabledConfig"
                    }
                }, detailedErrorMessages: {
                    serializedName: "properties.detailedErrorMessages",
                    type: {
                        name: "Composite",
                        className: "EnabledConfig"
                    }
                } })
        }
    };
    var SitePatchResource = {
        serializedName: "SitePatchResource",
        type: {
            name: "Composite",
            className: "SitePatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, hostNames: {
                    readOnly: true,
                    serializedName: "properties.hostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, repositorySiteName: {
                    readOnly: true,
                    serializedName: "properties.repositorySiteName",
                    type: {
                        name: "String"
                    }
                }, usageState: {
                    readOnly: true,
                    serializedName: "properties.usageState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Normal",
                            "Exceeded"
                        ]
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, enabledHostNames: {
                    readOnly: true,
                    serializedName: "properties.enabledHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, availabilityState: {
                    readOnly: true,
                    serializedName: "properties.availabilityState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Normal",
                            "Limited",
                            "DisasterRecoveryMode"
                        ]
                    }
                }, hostNameSslStates: {
                    serializedName: "properties.hostNameSslStates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostNameSslState"
                            }
                        }
                    }
                }, serverFarmId: {
                    serializedName: "properties.serverFarmId",
                    type: {
                        name: "String"
                    }
                }, reserved: {
                    serializedName: "properties.reserved",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, isXenon: {
                    serializedName: "properties.isXenon",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, hyperV: {
                    serializedName: "properties.hyperV",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, lastModifiedTimeUtc: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                }, siteConfig: {
                    serializedName: "properties.siteConfig",
                    type: {
                        name: "Composite",
                        className: "SiteConfig"
                    }
                }, trafficManagerHostNames: {
                    readOnly: true,
                    serializedName: "properties.trafficManagerHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, scmSiteAlsoStopped: {
                    serializedName: "properties.scmSiteAlsoStopped",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, targetSwapSlot: {
                    readOnly: true,
                    serializedName: "properties.targetSwapSlot",
                    type: {
                        name: "String"
                    }
                }, hostingEnvironmentProfile: {
                    serializedName: "properties.hostingEnvironmentProfile",
                    type: {
                        name: "Composite",
                        className: "HostingEnvironmentProfile"
                    }
                }, clientAffinityEnabled: {
                    serializedName: "properties.clientAffinityEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, clientCertEnabled: {
                    serializedName: "properties.clientCertEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, clientCertMode: {
                    serializedName: "properties.clientCertMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Required",
                            "Optional"
                        ]
                    }
                }, clientCertExclusionPaths: {
                    serializedName: "properties.clientCertExclusionPaths",
                    type: {
                        name: "String"
                    }
                }, hostNamesDisabled: {
                    serializedName: "properties.hostNamesDisabled",
                    type: {
                        name: "Boolean"
                    }
                }, customDomainVerificationId: {
                    serializedName: "properties.customDomainVerificationId",
                    type: {
                        name: "String"
                    }
                }, outboundIpAddresses: {
                    readOnly: true,
                    serializedName: "properties.outboundIpAddresses",
                    type: {
                        name: "String"
                    }
                }, possibleOutboundIpAddresses: {
                    readOnly: true,
                    serializedName: "properties.possibleOutboundIpAddresses",
                    type: {
                        name: "String"
                    }
                }, containerSize: {
                    serializedName: "properties.containerSize",
                    type: {
                        name: "Number"
                    }
                }, dailyMemoryTimeQuota: {
                    serializedName: "properties.dailyMemoryTimeQuota",
                    type: {
                        name: "Number"
                    }
                }, suspendedTill: {
                    readOnly: true,
                    serializedName: "properties.suspendedTill",
                    type: {
                        name: "DateTime"
                    }
                }, maxNumberOfWorkers: {
                    readOnly: true,
                    serializedName: "properties.maxNumberOfWorkers",
                    type: {
                        name: "Number"
                    }
                }, cloningInfo: {
                    serializedName: "properties.cloningInfo",
                    type: {
                        name: "Composite",
                        className: "CloningInfo"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, isDefaultContainer: {
                    readOnly: true,
                    serializedName: "properties.isDefaultContainer",
                    type: {
                        name: "Boolean"
                    }
                }, defaultHostName: {
                    readOnly: true,
                    serializedName: "properties.defaultHostName",
                    type: {
                        name: "String"
                    }
                }, slotSwapStatus: {
                    readOnly: true,
                    serializedName: "properties.slotSwapStatus",
                    type: {
                        name: "Composite",
                        className: "SlotSwapStatus"
                    }
                }, httpsOnly: {
                    serializedName: "properties.httpsOnly",
                    type: {
                        name: "Boolean"
                    }
                }, redundancyMode: {
                    serializedName: "properties.redundancyMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Manual",
                            "Failover",
                            "ActiveActive",
                            "GeoRedundant"
                        ]
                    }
                }, inProgressOperationId: {
                    readOnly: true,
                    serializedName: "properties.inProgressOperationId",
                    type: {
                        name: "Uuid"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedServiceIdentity"
                    }
                } })
        }
    };
    var SitePhpErrorLogFlag = {
        serializedName: "SitePhpErrorLogFlag",
        type: {
            name: "Composite",
            className: "SitePhpErrorLogFlag",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { localLogErrors: {
                    serializedName: "properties.localLogErrors",
                    type: {
                        name: "String"
                    }
                }, masterLogErrors: {
                    serializedName: "properties.masterLogErrors",
                    type: {
                        name: "String"
                    }
                }, localLogErrorsMaxLength: {
                    serializedName: "properties.localLogErrorsMaxLength",
                    type: {
                        name: "String"
                    }
                }, masterLogErrorsMaxLength: {
                    serializedName: "properties.masterLogErrorsMaxLength",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SiteSourceControl = {
        serializedName: "SiteSourceControl",
        type: {
            name: "Composite",
            className: "SiteSourceControl",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { repoUrl: {
                    serializedName: "properties.repoUrl",
                    type: {
                        name: "String"
                    }
                }, branch: {
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                }, isManualIntegration: {
                    serializedName: "properties.isManualIntegration",
                    type: {
                        name: "Boolean"
                    }
                }, isGitHubAction: {
                    serializedName: "properties.isGitHubAction",
                    type: {
                        name: "Boolean"
                    }
                }, deploymentRollbackEnabled: {
                    serializedName: "properties.deploymentRollbackEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, isMercurial: {
                    serializedName: "properties.isMercurial",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var SlotConfigNamesResource = {
        serializedName: "SlotConfigNamesResource",
        type: {
            name: "Composite",
            className: "SlotConfigNamesResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { connectionStringNames: {
                    serializedName: "properties.connectionStringNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, appSettingNames: {
                    serializedName: "properties.appSettingNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, azureStorageConfigNames: {
                    serializedName: "properties.azureStorageConfigNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var SlotDifference = {
        serializedName: "SlotDifference",
        type: {
            name: "Composite",
            className: "SlotDifference",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { level: {
                    readOnly: true,
                    serializedName: "properties.level",
                    type: {
                        name: "String"
                    }
                }, settingType: {
                    readOnly: true,
                    serializedName: "properties.settingType",
                    type: {
                        name: "String"
                    }
                }, diffRule: {
                    readOnly: true,
                    serializedName: "properties.diffRule",
                    type: {
                        name: "String"
                    }
                }, settingName: {
                    readOnly: true,
                    serializedName: "properties.settingName",
                    type: {
                        name: "String"
                    }
                }, valueInCurrentSlot: {
                    readOnly: true,
                    serializedName: "properties.valueInCurrentSlot",
                    type: {
                        name: "String"
                    }
                }, valueInTargetSlot: {
                    readOnly: true,
                    serializedName: "properties.valueInTargetSlot",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SnapshotRecoverySource = {
        serializedName: "SnapshotRecoverySource",
        type: {
            name: "Composite",
            className: "SnapshotRecoverySource",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SnapshotRestoreRequest = {
        serializedName: "SnapshotRestoreRequest",
        type: {
            name: "Composite",
            className: "SnapshotRestoreRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { snapshotTime: {
                    serializedName: "properties.snapshotTime",
                    type: {
                        name: "String"
                    }
                }, recoverySource: {
                    serializedName: "properties.recoverySource",
                    type: {
                        name: "Composite",
                        className: "SnapshotRecoverySource"
                    }
                }, overwrite: {
                    required: true,
                    serializedName: "properties.overwrite",
                    type: {
                        name: "Boolean"
                    }
                }, recoverConfiguration: {
                    serializedName: "properties.recoverConfiguration",
                    type: {
                        name: "Boolean"
                    }
                }, ignoreConflictingHostNames: {
                    serializedName: "properties.ignoreConflictingHostNames",
                    type: {
                        name: "Boolean"
                    }
                }, useDRSecondary: {
                    serializedName: "properties.useDRSecondary",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StorageMigrationOptions = {
        serializedName: "StorageMigrationOptions",
        type: {
            name: "Composite",
            className: "StorageMigrationOptions",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { azurefilesConnectionString: {
                    required: true,
                    serializedName: "properties.azurefilesConnectionString",
                    type: {
                        name: "String"
                    }
                }, azurefilesShare: {
                    required: true,
                    serializedName: "properties.azurefilesShare",
                    type: {
                        name: "String"
                    }
                }, switchSiteAfterMigration: {
                    serializedName: "properties.switchSiteAfterMigration",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, blockWriteAccessToSite: {
                    serializedName: "properties.blockWriteAccessToSite",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StorageMigrationResponse = {
        serializedName: "StorageMigrationResponse",
        type: {
            name: "Composite",
            className: "StorageMigrationResponse",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { operationId: {
                    readOnly: true,
                    serializedName: "properties.operationId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SwiftVirtualNetwork = {
        serializedName: "SwiftVirtualNetwork",
        type: {
            name: "Composite",
            className: "SwiftVirtualNetwork",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { subnetResourceId: {
                    serializedName: "properties.subnetResourceId",
                    type: {
                        name: "String"
                    }
                }, swiftSupported: {
                    serializedName: "properties.swiftSupported",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var TriggeredJobRun = {
        serializedName: "TriggeredJobRun",
        type: {
            name: "Composite",
            className: "TriggeredJobRun",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { webJobId: {
                    serializedName: "properties.web_job_id",
                    type: {
                        name: "String"
                    }
                }, webJobName: {
                    serializedName: "properties.web_job_name",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Success",
                            "Failed",
                            "Error"
                        ]
                    }
                }, startTime: {
                    serializedName: "properties.start_time",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.end_time",
                    type: {
                        name: "DateTime"
                    }
                }, duration: {
                    serializedName: "properties.duration",
                    type: {
                        name: "String"
                    }
                }, outputUrl: {
                    serializedName: "properties.output_url",
                    type: {
                        name: "String"
                    }
                }, errorUrl: {
                    serializedName: "properties.error_url",
                    type: {
                        name: "String"
                    }
                }, url: {
                    serializedName: "properties.url",
                    type: {
                        name: "String"
                    }
                }, jobName: {
                    serializedName: "properties.job_name",
                    type: {
                        name: "String"
                    }
                }, trigger: {
                    serializedName: "properties.trigger",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TriggeredJobHistory = {
        serializedName: "TriggeredJobHistory",
        type: {
            name: "Composite",
            className: "TriggeredJobHistory",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { runs: {
                    serializedName: "properties.runs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TriggeredJobRun"
                            }
                        }
                    }
                } })
        }
    };
    var TriggeredWebJob = {
        serializedName: "TriggeredWebJob",
        type: {
            name: "Composite",
            className: "TriggeredWebJob",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { latestRun: {
                    serializedName: "properties.latest_run",
                    type: {
                        name: "Composite",
                        className: "TriggeredJobRun"
                    }
                }, historyUrl: {
                    serializedName: "properties.history_url",
                    type: {
                        name: "String"
                    }
                }, schedulerLogsUrl: {
                    serializedName: "properties.scheduler_logs_url",
                    type: {
                        name: "String"
                    }
                }, runCommand: {
                    serializedName: "properties.run_command",
                    type: {
                        name: "String"
                    }
                }, url: {
                    serializedName: "properties.url",
                    type: {
                        name: "String"
                    }
                }, extraInfoUrl: {
                    serializedName: "properties.extra_info_url",
                    type: {
                        name: "String"
                    }
                }, webJobType: {
                    serializedName: "properties.web_job_type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Continuous",
                            "Triggered"
                        ]
                    }
                }, error: {
                    serializedName: "properties.error",
                    type: {
                        name: "String"
                    }
                }, usingSdk: {
                    serializedName: "properties.using_sdk",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var WebSiteInstanceStatus = {
        serializedName: "WebSiteInstanceStatus",
        type: {
            name: "Composite",
            className: "WebSiteInstanceStatus",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { state: {
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "READY",
                            "STOPPED",
                            "UNKNOWN"
                        ]
                    }
                }, statusUrl: {
                    serializedName: "properties.statusUrl",
                    type: {
                        name: "String"
                    }
                }, detectorUrl: {
                    serializedName: "properties.detectorUrl",
                    type: {
                        name: "String"
                    }
                }, consoleUrl: {
                    serializedName: "properties.consoleUrl",
                    type: {
                        name: "String"
                    }
                }, healthCheckUrl: {
                    serializedName: "properties.healthCheckUrl",
                    type: {
                        name: "String"
                    }
                }, containers: {
                    serializedName: "properties.containers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ContainerInfo"
                            }
                        }
                    }
                } })
        }
    };
    var WebJob = {
        serializedName: "WebJob",
        type: {
            name: "Composite",
            className: "WebJob",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { runCommand: {
                    serializedName: "properties.run_command",
                    type: {
                        name: "String"
                    }
                }, url: {
                    serializedName: "properties.url",
                    type: {
                        name: "String"
                    }
                }, extraInfoUrl: {
                    serializedName: "properties.extra_info_url",
                    type: {
                        name: "String"
                    }
                }, webJobType: {
                    serializedName: "properties.web_job_type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Continuous",
                            "Triggered"
                        ]
                    }
                }, error: {
                    serializedName: "properties.error",
                    type: {
                        name: "String"
                    }
                }, usingSdk: {
                    serializedName: "properties.using_sdk",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var StaticSiteBuildProperties = {
        serializedName: "StaticSiteBuildProperties",
        type: {
            name: "Composite",
            className: "StaticSiteBuildProperties",
            modelProperties: {
                appLocation: {
                    serializedName: "appLocation",
                    type: {
                        name: "String"
                    }
                },
                apiLocation: {
                    serializedName: "apiLocation",
                    type: {
                        name: "String"
                    }
                },
                appArtifactLocation: {
                    serializedName: "appArtifactLocation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StaticSiteARMResource = {
        serializedName: "StaticSiteARMResource",
        type: {
            name: "Composite",
            className: "StaticSiteARMResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { defaultHostname: {
                    readOnly: true,
                    serializedName: "properties.defaultHostname",
                    type: {
                        name: "String"
                    }
                }, repositoryUrl: {
                    serializedName: "properties.repositoryUrl",
                    type: {
                        name: "String"
                    }
                }, branch: {
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                }, customDomains: {
                    readOnly: true,
                    serializedName: "properties.customDomains",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, repositoryToken: {
                    serializedName: "properties.repositoryToken",
                    type: {
                        name: "String"
                    }
                }, buildProperties: {
                    serializedName: "properties.buildProperties",
                    type: {
                        name: "Composite",
                        className: "StaticSiteBuildProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SkuDescription"
                    }
                } })
        }
    };
    var StaticSiteBuildARMResource = {
        serializedName: "StaticSiteBuildARMResource",
        type: {
            name: "Composite",
            className: "StaticSiteBuildARMResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { buildId: {
                    readOnly: true,
                    serializedName: "properties.buildId",
                    type: {
                        name: "String"
                    }
                }, sourceBranch: {
                    readOnly: true,
                    serializedName: "properties.sourceBranch",
                    type: {
                        name: "String"
                    }
                }, pullRequestTitle: {
                    readOnly: true,
                    serializedName: "properties.pullRequestTitle",
                    type: {
                        name: "String"
                    }
                }, hostname: {
                    readOnly: true,
                    serializedName: "properties.hostname",
                    type: {
                        name: "String"
                    }
                }, createdTimeUtc: {
                    readOnly: true,
                    serializedName: "properties.createdTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                }, lastUpdatedOn: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedOn",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StaticSiteCustomDomainOverviewARMResource = {
        serializedName: "StaticSiteCustomDomainOverviewARMResource",
        type: {
            name: "Composite",
            className: "StaticSiteCustomDomainOverviewARMResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { domainName: {
                    readOnly: true,
                    serializedName: "properties.domainName",
                    type: {
                        name: "String"
                    }
                }, createdOn: {
                    readOnly: true,
                    serializedName: "properties.createdOn",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var StaticSiteFunctionOverviewARMResource = {
        serializedName: "StaticSiteFunctionOverviewARMResource",
        type: {
            name: "Composite",
            className: "StaticSiteFunctionOverviewARMResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { functionName: {
                    readOnly: true,
                    serializedName: "properties.functionName",
                    type: {
                        name: "String"
                    }
                }, triggerType: {
                    readOnly: true,
                    serializedName: "properties.triggerType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StaticSitePatchResource = {
        serializedName: "StaticSitePatchResource",
        type: {
            name: "Composite",
            className: "StaticSitePatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { defaultHostname: {
                    readOnly: true,
                    serializedName: "properties.defaultHostname",
                    type: {
                        name: "String"
                    }
                }, repositoryUrl: {
                    serializedName: "properties.repositoryUrl",
                    type: {
                        name: "String"
                    }
                }, branch: {
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                }, customDomains: {
                    readOnly: true,
                    serializedName: "properties.customDomains",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, repositoryToken: {
                    serializedName: "properties.repositoryToken",
                    type: {
                        name: "String"
                    }
                }, buildProperties: {
                    serializedName: "properties.buildProperties",
                    type: {
                        name: "Composite",
                        className: "StaticSiteBuildProperties"
                    }
                } })
        }
    };
    var StaticSiteResetPropertiesARMResource = {
        serializedName: "StaticSiteResetPropertiesARMResource",
        type: {
            name: "Composite",
            className: "StaticSiteResetPropertiesARMResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { repositoryToken: {
                    serializedName: "properties.repositoryToken",
                    type: {
                        name: "String"
                    }
                }, shouldUpdateRepository: {
                    serializedName: "properties.shouldUpdateRepository",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StaticSiteUserARMResource = {
        serializedName: "StaticSiteUserARMResource",
        type: {
            name: "Composite",
            className: "StaticSiteUserARMResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { provider: {
                    readOnly: true,
                    serializedName: "properties.provider",
                    type: {
                        name: "String"
                    }
                }, userId: {
                    readOnly: true,
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, roles: {
                    serializedName: "properties.roles",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StaticSiteUserInvitationRequestResource = {
        serializedName: "StaticSiteUserInvitationRequestResource",
        type: {
            name: "Composite",
            className: "StaticSiteUserInvitationRequestResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { domain: {
                    serializedName: "properties.domain",
                    type: {
                        name: "String"
                    }
                }, provider: {
                    serializedName: "properties.provider",
                    type: {
                        name: "String"
                    }
                }, userDetails: {
                    serializedName: "properties.userDetails",
                    type: {
                        name: "String"
                    }
                }, roles: {
                    serializedName: "properties.roles",
                    type: {
                        name: "String"
                    }
                }, numHoursToExpiration: {
                    serializedName: "properties.numHoursToExpiration",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var StaticSiteUserInvitationResponseResource = {
        serializedName: "StaticSiteUserInvitationResponseResource",
        type: {
            name: "Composite",
            className: "StaticSiteUserInvitationResponseResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { expiresOn: {
                    readOnly: true,
                    serializedName: "properties.expiresOn",
                    type: {
                        name: "DateTime"
                    }
                }, invitationUrl: {
                    readOnly: true,
                    serializedName: "properties.invitationUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StaticSitesWorkflowPreview = {
        serializedName: "StaticSitesWorkflowPreview",
        type: {
            name: "Composite",
            className: "StaticSitesWorkflowPreview",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { path: {
                    readOnly: true,
                    serializedName: "properties.path",
                    type: {
                        name: "String"
                    }
                }, contents: {
                    readOnly: true,
                    serializedName: "properties.contents",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StaticSitesWorkflowPreviewRequest = {
        serializedName: "StaticSitesWorkflowPreviewRequest",
        type: {
            name: "Composite",
            className: "StaticSitesWorkflowPreviewRequest",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { repositoryUrl: {
                    serializedName: "properties.repositoryUrl",
                    type: {
                        name: "String"
                    }
                }, branch: {
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                }, buildProperties: {
                    serializedName: "properties.buildProperties",
                    type: {
                        name: "Composite",
                        className: "StaticSiteBuildProperties"
                    }
                } })
        }
    };
    var AddressResponse = {
        serializedName: "AddressResponse",
        type: {
            name: "Composite",
            className: "AddressResponse",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { serviceIpAddress: {
                    serializedName: "properties.serviceIpAddress",
                    type: {
                        name: "String"
                    }
                }, internalIpAddress: {
                    serializedName: "properties.internalIpAddress",
                    type: {
                        name: "String"
                    }
                }, outboundIpAddresses: {
                    serializedName: "properties.outboundIpAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, vipMappings: {
                    serializedName: "properties.vipMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualIPMapping"
                            }
                        }
                    }
                } })
        }
    };
    var AppServiceEnvironmentResource = {
        serializedName: "AppServiceEnvironmentResource",
        type: {
            name: "Composite",
            className: "AppServiceEnvironmentResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { appServiceEnvironmentResourceName: {
                    required: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, appServiceEnvironmentResourceLocation: {
                    required: true,
                    serializedName: "properties.location",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Preparing",
                            "Ready",
                            "Scaling",
                            "Deleting"
                        ]
                    }
                }, vnetName: {
                    serializedName: "properties.vnetName",
                    type: {
                        name: "String"
                    }
                }, vnetResourceGroupName: {
                    serializedName: "properties.vnetResourceGroupName",
                    type: {
                        name: "String"
                    }
                }, vnetSubnetName: {
                    serializedName: "properties.vnetSubnetName",
                    type: {
                        name: "String"
                    }
                }, virtualNetwork: {
                    required: true,
                    serializedName: "properties.virtualNetwork",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkProfile"
                    }
                }, internalLoadBalancingMode: {
                    serializedName: "properties.internalLoadBalancingMode",
                    type: {
                        name: "String"
                    }
                }, multiSize: {
                    serializedName: "properties.multiSize",
                    type: {
                        name: "String"
                    }
                }, multiRoleCount: {
                    serializedName: "properties.multiRoleCount",
                    type: {
                        name: "Number"
                    }
                }, workerPools: {
                    required: true,
                    serializedName: "properties.workerPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkerPool"
                            }
                        }
                    }
                }, ipsslAddressCount: {
                    serializedName: "properties.ipsslAddressCount",
                    type: {
                        name: "Number"
                    }
                }, databaseEdition: {
                    readOnly: true,
                    serializedName: "properties.databaseEdition",
                    type: {
                        name: "String"
                    }
                }, databaseServiceObjective: {
                    readOnly: true,
                    serializedName: "properties.databaseServiceObjective",
                    type: {
                        name: "String"
                    }
                }, upgradeDomains: {
                    readOnly: true,
                    serializedName: "properties.upgradeDomains",
                    type: {
                        name: "Number"
                    }
                }, subscriptionId: {
                    readOnly: true,
                    serializedName: "properties.subscriptionId",
                    type: {
                        name: "String"
                    }
                }, dnsSuffix: {
                    serializedName: "properties.dnsSuffix",
                    type: {
                        name: "String"
                    }
                }, lastAction: {
                    readOnly: true,
                    serializedName: "properties.lastAction",
                    type: {
                        name: "String"
                    }
                }, lastActionResult: {
                    readOnly: true,
                    serializedName: "properties.lastActionResult",
                    type: {
                        name: "String"
                    }
                }, allowedMultiSizes: {
                    readOnly: true,
                    serializedName: "properties.allowedMultiSizes",
                    type: {
                        name: "String"
                    }
                }, allowedWorkerSizes: {
                    readOnly: true,
                    serializedName: "properties.allowedWorkerSizes",
                    type: {
                        name: "String"
                    }
                }, maximumNumberOfMachines: {
                    readOnly: true,
                    serializedName: "properties.maximumNumberOfMachines",
                    type: {
                        name: "Number"
                    }
                }, vipMappings: {
                    readOnly: true,
                    serializedName: "properties.vipMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualIPMapping"
                            }
                        }
                    }
                }, environmentCapacities: {
                    readOnly: true,
                    serializedName: "properties.environmentCapacities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StampCapacity"
                            }
                        }
                    }
                }, networkAccessControlList: {
                    serializedName: "properties.networkAccessControlList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkAccessControlEntry"
                            }
                        }
                    }
                }, environmentIsHealthy: {
                    readOnly: true,
                    serializedName: "properties.environmentIsHealthy",
                    type: {
                        name: "Boolean"
                    }
                }, environmentStatus: {
                    readOnly: true,
                    serializedName: "properties.environmentStatus",
                    type: {
                        name: "String"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, frontEndScaleFactor: {
                    serializedName: "properties.frontEndScaleFactor",
                    type: {
                        name: "Number"
                    }
                }, defaultFrontEndScaleFactor: {
                    readOnly: true,
                    serializedName: "properties.defaultFrontEndScaleFactor",
                    type: {
                        name: "Number"
                    }
                }, apiManagementAccountId: {
                    serializedName: "properties.apiManagementAccountId",
                    type: {
                        name: "String"
                    }
                }, suspended: {
                    serializedName: "properties.suspended",
                    type: {
                        name: "Boolean"
                    }
                }, dynamicCacheEnabled: {
                    serializedName: "properties.dynamicCacheEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, clusterSettings: {
                    serializedName: "properties.clusterSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }, userWhitelistedIpRanges: {
                    serializedName: "properties.userWhitelistedIpRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, hasLinuxWorkers: {
                    serializedName: "properties.hasLinuxWorkers",
                    type: {
                        name: "Boolean"
                    }
                }, sslCertKeyVaultId: {
                    serializedName: "properties.sslCertKeyVaultId",
                    type: {
                        name: "String"
                    }
                }, sslCertKeyVaultSecretName: {
                    serializedName: "properties.sslCertKeyVaultSecretName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AppServiceEnvironmentPatchResource = {
        serializedName: "AppServiceEnvironmentPatchResource",
        type: {
            name: "Composite",
            className: "AppServiceEnvironmentPatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { appServiceEnvironmentPatchResourceName: {
                    required: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, location: {
                    required: true,
                    serializedName: "properties.location",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Preparing",
                            "Ready",
                            "Scaling",
                            "Deleting"
                        ]
                    }
                }, vnetName: {
                    serializedName: "properties.vnetName",
                    type: {
                        name: "String"
                    }
                }, vnetResourceGroupName: {
                    serializedName: "properties.vnetResourceGroupName",
                    type: {
                        name: "String"
                    }
                }, vnetSubnetName: {
                    serializedName: "properties.vnetSubnetName",
                    type: {
                        name: "String"
                    }
                }, virtualNetwork: {
                    required: true,
                    serializedName: "properties.virtualNetwork",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkProfile"
                    }
                }, internalLoadBalancingMode: {
                    serializedName: "properties.internalLoadBalancingMode",
                    type: {
                        name: "String"
                    }
                }, multiSize: {
                    serializedName: "properties.multiSize",
                    type: {
                        name: "String"
                    }
                }, multiRoleCount: {
                    serializedName: "properties.multiRoleCount",
                    type: {
                        name: "Number"
                    }
                }, workerPools: {
                    required: true,
                    serializedName: "properties.workerPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkerPool"
                            }
                        }
                    }
                }, ipsslAddressCount: {
                    serializedName: "properties.ipsslAddressCount",
                    type: {
                        name: "Number"
                    }
                }, databaseEdition: {
                    readOnly: true,
                    serializedName: "properties.databaseEdition",
                    type: {
                        name: "String"
                    }
                }, databaseServiceObjective: {
                    readOnly: true,
                    serializedName: "properties.databaseServiceObjective",
                    type: {
                        name: "String"
                    }
                }, upgradeDomains: {
                    readOnly: true,
                    serializedName: "properties.upgradeDomains",
                    type: {
                        name: "Number"
                    }
                }, subscriptionId: {
                    readOnly: true,
                    serializedName: "properties.subscriptionId",
                    type: {
                        name: "String"
                    }
                }, dnsSuffix: {
                    serializedName: "properties.dnsSuffix",
                    type: {
                        name: "String"
                    }
                }, lastAction: {
                    readOnly: true,
                    serializedName: "properties.lastAction",
                    type: {
                        name: "String"
                    }
                }, lastActionResult: {
                    readOnly: true,
                    serializedName: "properties.lastActionResult",
                    type: {
                        name: "String"
                    }
                }, allowedMultiSizes: {
                    readOnly: true,
                    serializedName: "properties.allowedMultiSizes",
                    type: {
                        name: "String"
                    }
                }, allowedWorkerSizes: {
                    readOnly: true,
                    serializedName: "properties.allowedWorkerSizes",
                    type: {
                        name: "String"
                    }
                }, maximumNumberOfMachines: {
                    readOnly: true,
                    serializedName: "properties.maximumNumberOfMachines",
                    type: {
                        name: "Number"
                    }
                }, vipMappings: {
                    readOnly: true,
                    serializedName: "properties.vipMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualIPMapping"
                            }
                        }
                    }
                }, environmentCapacities: {
                    readOnly: true,
                    serializedName: "properties.environmentCapacities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StampCapacity"
                            }
                        }
                    }
                }, networkAccessControlList: {
                    serializedName: "properties.networkAccessControlList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkAccessControlEntry"
                            }
                        }
                    }
                }, environmentIsHealthy: {
                    readOnly: true,
                    serializedName: "properties.environmentIsHealthy",
                    type: {
                        name: "Boolean"
                    }
                }, environmentStatus: {
                    readOnly: true,
                    serializedName: "properties.environmentStatus",
                    type: {
                        name: "String"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, frontEndScaleFactor: {
                    serializedName: "properties.frontEndScaleFactor",
                    type: {
                        name: "Number"
                    }
                }, defaultFrontEndScaleFactor: {
                    readOnly: true,
                    serializedName: "properties.defaultFrontEndScaleFactor",
                    type: {
                        name: "Number"
                    }
                }, apiManagementAccountId: {
                    serializedName: "properties.apiManagementAccountId",
                    type: {
                        name: "String"
                    }
                }, suspended: {
                    serializedName: "properties.suspended",
                    type: {
                        name: "Boolean"
                    }
                }, dynamicCacheEnabled: {
                    serializedName: "properties.dynamicCacheEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, clusterSettings: {
                    serializedName: "properties.clusterSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }, userWhitelistedIpRanges: {
                    serializedName: "properties.userWhitelistedIpRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, hasLinuxWorkers: {
                    serializedName: "properties.hasLinuxWorkers",
                    type: {
                        name: "Boolean"
                    }
                }, sslCertKeyVaultId: {
                    serializedName: "properties.sslCertKeyVaultId",
                    type: {
                        name: "String"
                    }
                }, sslCertKeyVaultSecretName: {
                    serializedName: "properties.sslCertKeyVaultSecretName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EndpointDetail = {
        serializedName: "EndpointDetail",
        type: {
            name: "Composite",
            className: "EndpointDetail",
            modelProperties: {
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                latency: {
                    serializedName: "latency",
                    type: {
                        name: "Number"
                    }
                },
                isAccessible: {
                    serializedName: "isAccessible",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EndpointDependency = {
        serializedName: "EndpointDependency",
        type: {
            name: "Composite",
            className: "EndpointDependency",
            modelProperties: {
                domainName: {
                    serializedName: "domainName",
                    type: {
                        name: "String"
                    }
                },
                endpointDetails: {
                    serializedName: "endpointDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var HostingEnvironmentDiagnostics = {
        serializedName: "HostingEnvironmentDiagnostics",
        type: {
            name: "Composite",
            className: "HostingEnvironmentDiagnostics",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                diagnosticsOutput: {
                    serializedName: "diagnosticsOutput",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundEnvironmentEndpoint = {
        serializedName: "InboundEnvironmentEndpoint",
        type: {
            name: "Composite",
            className: "InboundEnvironmentEndpoint",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                ports: {
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OutboundEnvironmentEndpoint = {
        serializedName: "OutboundEnvironmentEndpoint",
        type: {
            name: "Composite",
            className: "OutboundEnvironmentEndpoint",
            modelProperties: {
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointDependency"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceMetricAvailability = {
        serializedName: "ResourceMetricAvailability",
        type: {
            name: "Composite",
            className: "ResourceMetricAvailability",
            modelProperties: {
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                retention: {
                    readOnly: true,
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceMetricDefinition = {
        serializedName: "ResourceMetricDefinition",
        type: {
            name: "Composite",
            className: "ResourceMetricDefinition",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { unit: {
                    readOnly: true,
                    serializedName: "properties.unit",
                    type: {
                        name: "String"
                    }
                }, primaryAggregationType: {
                    readOnly: true,
                    serializedName: "properties.primaryAggregationType",
                    type: {
                        name: "String"
                    }
                }, metricAvailabilities: {
                    readOnly: true,
                    serializedName: "properties.metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceMetricAvailability"
                            }
                        }
                    }
                }, resourceUri: {
                    readOnly: true,
                    serializedName: "properties.resourceUri",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    readOnly: true,
                    serializedName: "properties.properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var SkuInfo = {
        serializedName: "SkuInfo",
        type: {
            name: "Composite",
            className: "SkuInfo",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SkuDescription"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "SkuCapacity"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, resourceName: {
                    readOnly: true,
                    serializedName: "properties.resourceName",
                    type: {
                        name: "String"
                    }
                }, unit: {
                    readOnly: true,
                    serializedName: "properties.unit",
                    type: {
                        name: "String"
                    }
                }, currentValue: {
                    readOnly: true,
                    serializedName: "properties.currentValue",
                    type: {
                        name: "Number"
                    }
                }, limit: {
                    readOnly: true,
                    serializedName: "properties.limit",
                    type: {
                        name: "Number"
                    }
                }, nextResetTime: {
                    readOnly: true,
                    serializedName: "properties.nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                }, computeMode: {
                    readOnly: true,
                    serializedName: "properties.computeMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Shared",
                            "Dedicated",
                            "Dynamic"
                        ]
                    }
                }, siteMode: {
                    readOnly: true,
                    serializedName: "properties.siteMode",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WorkerPoolResource = {
        serializedName: "WorkerPoolResource",
        type: {
            name: "Composite",
            className: "WorkerPoolResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { workerSizeId: {
                    serializedName: "properties.workerSizeId",
                    type: {
                        name: "Number"
                    }
                }, computeMode: {
                    serializedName: "properties.computeMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Shared",
                            "Dedicated",
                            "Dynamic"
                        ]
                    }
                }, workerSize: {
                    serializedName: "properties.workerSize",
                    type: {
                        name: "String"
                    }
                }, workerCount: {
                    serializedName: "properties.workerCount",
                    type: {
                        name: "Number"
                    }
                }, instanceNames: {
                    readOnly: true,
                    serializedName: "properties.instanceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SkuDescription"
                    }
                } })
        }
    };
    var AppServicePlanPatchResource = {
        serializedName: "AppServicePlanPatchResource",
        type: {
            name: "Composite",
            className: "AppServicePlanPatchResource",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { workerTierName: {
                    serializedName: "properties.workerTierName",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Ready",
                            "Pending",
                            "Creating"
                        ]
                    }
                }, subscription: {
                    readOnly: true,
                    serializedName: "properties.subscription",
                    type: {
                        name: "String"
                    }
                }, hostingEnvironmentProfile: {
                    serializedName: "properties.hostingEnvironmentProfile",
                    type: {
                        name: "Composite",
                        className: "HostingEnvironmentProfile"
                    }
                }, maximumNumberOfWorkers: {
                    readOnly: true,
                    serializedName: "properties.maximumNumberOfWorkers",
                    type: {
                        name: "Number"
                    }
                }, geoRegion: {
                    readOnly: true,
                    serializedName: "properties.geoRegion",
                    type: {
                        name: "String"
                    }
                }, perSiteScaling: {
                    serializedName: "properties.perSiteScaling",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, maximumElasticWorkerCount: {
                    serializedName: "properties.maximumElasticWorkerCount",
                    type: {
                        name: "Number"
                    }
                }, numberOfSites: {
                    readOnly: true,
                    serializedName: "properties.numberOfSites",
                    type: {
                        name: "Number"
                    }
                }, isSpot: {
                    serializedName: "properties.isSpot",
                    type: {
                        name: "Boolean"
                    }
                }, spotExpirationTime: {
                    serializedName: "properties.spotExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, freeOfferExpirationTime: {
                    serializedName: "properties.freeOfferExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, reserved: {
                    serializedName: "properties.reserved",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, isXenon: {
                    serializedName: "properties.isXenon",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, hyperV: {
                    serializedName: "properties.hyperV",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, targetWorkerCount: {
                    serializedName: "properties.targetWorkerCount",
                    type: {
                        name: "Number"
                    }
                }, targetWorkerSizeId: {
                    serializedName: "properties.targetWorkerSizeId",
                    type: {
                        name: "Number"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "InProgress",
                            "Deleting"
                        ]
                    }
                } })
        }
    };
    var HybridConnectionKey = {
        serializedName: "HybridConnectionKey",
        type: {
            name: "Composite",
            className: "HybridConnectionKey",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { sendKeyName: {
                    readOnly: true,
                    serializedName: "properties.sendKeyName",
                    type: {
                        name: "String"
                    }
                }, sendKeyValue: {
                    readOnly: true,
                    serializedName: "properties.sendKeyValue",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HybridConnectionLimits = {
        serializedName: "HybridConnectionLimits",
        type: {
            name: "Composite",
            className: "HybridConnectionLimits",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { current: {
                    readOnly: true,
                    serializedName: "properties.current",
                    type: {
                        name: "Number"
                    }
                }, maximum: {
                    readOnly: true,
                    serializedName: "properties.maximum",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ResourceHealthMetadata = {
        serializedName: "ResourceHealthMetadata",
        type: {
            name: "Composite",
            className: "ResourceHealthMetadata",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { category: {
                    serializedName: "properties.category",
                    type: {
                        name: "String"
                    }
                }, signalAvailability: {
                    serializedName: "properties.signalAvailability",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var AppServiceCertificateOrderCollection = {
        serializedName: "AppServiceCertificateOrderCollection",
        type: {
            name: "Composite",
            className: "AppServiceCertificateOrderCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppServiceCertificateOrder"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppServiceCertificateCollection = {
        serializedName: "AppServiceCertificateCollection",
        type: {
            name: "Composite",
            className: "AppServiceCertificateCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppServiceCertificateResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CsmOperationCollection = {
        serializedName: "CsmOperationCollection",
        type: {
            name: "Composite",
            className: "CsmOperationCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CsmOperationDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DomainCollection = {
        serializedName: "DomainCollection",
        type: {
            name: "Composite",
            className: "DomainCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Domain"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameIdentifierCollection = {
        serializedName: "NameIdentifierCollection",
        type: {
            name: "Composite",
            className: "NameIdentifierCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameIdentifier"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DomainOwnershipIdentifierCollection = {
        serializedName: "DomainOwnershipIdentifierCollection",
        type: {
            name: "Composite",
            className: "DomainOwnershipIdentifierCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DomainOwnershipIdentifier"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TopLevelDomainCollection = {
        serializedName: "TopLevelDomainCollection",
        type: {
            name: "Composite",
            className: "TopLevelDomainCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TopLevelDomain"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TldLegalAgreementCollection = {
        serializedName: "TldLegalAgreementCollection",
        type: {
            name: "Composite",
            className: "TldLegalAgreementCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TldLegalAgreement"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateCollection = {
        serializedName: "CertificateCollection",
        type: {
            name: "Composite",
            className: "CertificateCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Certificate"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeletedWebAppCollection = {
        serializedName: "DeletedWebAppCollection",
        type: {
            name: "Composite",
            className: "DeletedWebAppCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeletedSite"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DetectorResponseCollection = {
        serializedName: "DetectorResponseCollection",
        type: {
            name: "Composite",
            className: "DetectorResponseCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectorResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticCategoryCollection = {
        serializedName: "DiagnosticCategoryCollection",
        type: {
            name: "Composite",
            className: "DiagnosticCategoryCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticCategory"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticAnalysisCollection = {
        serializedName: "DiagnosticAnalysisCollection",
        type: {
            name: "Composite",
            className: "DiagnosticAnalysisCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AnalysisDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticDetectorCollection = {
        serializedName: "DiagnosticDetectorCollection",
        type: {
            name: "Composite",
            className: "DiagnosticDetectorCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectorDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationStackCollection = {
        serializedName: "ApplicationStackCollection",
        type: {
            name: "Composite",
            className: "ApplicationStackCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationStackResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecommendationCollection = {
        serializedName: "RecommendationCollection",
        type: {
            name: "Composite",
            className: "RecommendationCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Recommendation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlCollection = {
        serializedName: "SourceControlCollection",
        type: {
            name: "Composite",
            className: "SourceControlCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SourceControl"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BillingMeterCollection = {
        serializedName: "BillingMeterCollection",
        type: {
            name: "Composite",
            className: "BillingMeterCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BillingMeter"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GeoRegionCollection = {
        serializedName: "GeoRegionCollection",
        type: {
            name: "Composite",
            className: "GeoRegionCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GeoRegion"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentifierCollection = {
        serializedName: "IdentifierCollection",
        type: {
            name: "Composite",
            className: "IdentifierCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Identifier"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PremierAddOnOfferCollection = {
        serializedName: "PremierAddOnOfferCollection",
        type: {
            name: "Composite",
            className: "PremierAddOnOfferCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PremierAddOnOffer"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebAppCollection = {
        serializedName: "WebAppCollection",
        type: {
            name: "Composite",
            className: "WebAppCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Site"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackupItemCollection = {
        serializedName: "BackupItemCollection",
        type: {
            name: "Composite",
            className: "BackupItemCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupItem"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteConfigResourceCollection = {
        serializedName: "SiteConfigResourceCollection",
        type: {
            name: "Composite",
            className: "SiteConfigResourceCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SiteConfigResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteConfigurationSnapshotInfoCollection = {
        serializedName: "SiteConfigurationSnapshotInfoCollection",
        type: {
            name: "Composite",
            className: "SiteConfigurationSnapshotInfoCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SiteConfigurationSnapshotInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContinuousWebJobCollection = {
        serializedName: "ContinuousWebJobCollection",
        type: {
            name: "Composite",
            className: "ContinuousWebJobCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContinuousWebJob"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentCollection = {
        serializedName: "DeploymentCollection",
        type: {
            name: "Composite",
            className: "DeploymentCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Deployment"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionEnvelopeCollection = {
        serializedName: "FunctionEnvelopeCollection",
        type: {
            name: "Composite",
            className: "FunctionEnvelopeCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FunctionEnvelope"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HostNameBindingCollection = {
        serializedName: "HostNameBindingCollection",
        type: {
            name: "Composite",
            className: "HostNameBindingCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostNameBinding"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebAppInstanceStatusCollection = {
        serializedName: "WebAppInstanceStatusCollection",
        type: {
            name: "Composite",
            className: "WebAppInstanceStatusCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebSiteInstanceStatus"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessInfoCollection = {
        serializedName: "ProcessInfoCollection",
        type: {
            name: "Composite",
            className: "ProcessInfoCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessModuleInfoCollection = {
        serializedName: "ProcessModuleInfoCollection",
        type: {
            name: "Composite",
            className: "ProcessModuleInfoCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessModuleInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessThreadInfoCollection = {
        serializedName: "ProcessThreadInfoCollection",
        type: {
            name: "Composite",
            className: "ProcessThreadInfoCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessThreadInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PerfMonCounterCollection = {
        serializedName: "PerfMonCounterCollection",
        type: {
            name: "Composite",
            className: "PerfMonCounterCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PerfMonResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicCertificateCollection = {
        serializedName: "PublicCertificateCollection",
        type: {
            name: "Composite",
            className: "PublicCertificateCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PublicCertificate"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SiteExtensionInfoCollection = {
        serializedName: "SiteExtensionInfoCollection",
        type: {
            name: "Composite",
            className: "SiteExtensionInfoCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SiteExtensionInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SlotDifferenceCollection = {
        serializedName: "SlotDifferenceCollection",
        type: {
            name: "Composite",
            className: "SlotDifferenceCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SlotDifference"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SnapshotCollection = {
        serializedName: "SnapshotCollection",
        type: {
            name: "Composite",
            className: "SnapshotCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Snapshot"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggeredWebJobCollection = {
        serializedName: "TriggeredWebJobCollection",
        type: {
            name: "Composite",
            className: "TriggeredWebJobCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TriggeredWebJob"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggeredJobHistoryCollection = {
        serializedName: "TriggeredJobHistoryCollection",
        type: {
            name: "Composite",
            className: "TriggeredJobHistoryCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TriggeredJobHistory"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CsmUsageQuotaCollection = {
        serializedName: "CsmUsageQuotaCollection",
        type: {
            name: "Composite",
            className: "CsmUsageQuotaCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CsmUsageQuota"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebJobCollection = {
        serializedName: "WebJobCollection",
        type: {
            name: "Composite",
            className: "WebJobCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebJob"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StaticSiteCollection = {
        serializedName: "StaticSiteCollection",
        type: {
            name: "Composite",
            className: "StaticSiteCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StaticSiteARMResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StaticSiteUserCollection = {
        serializedName: "StaticSiteUserCollection",
        type: {
            name: "Composite",
            className: "StaticSiteUserCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StaticSiteUserARMResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StaticSiteBuildCollection = {
        serializedName: "StaticSiteBuildCollection",
        type: {
            name: "Composite",
            className: "StaticSiteBuildCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StaticSiteBuildARMResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StaticSiteFunctionOverviewCollection = {
        serializedName: "StaticSiteFunctionOverviewCollection",
        type: {
            name: "Composite",
            className: "StaticSiteFunctionOverviewCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StaticSiteFunctionOverviewARMResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StaticSiteCustomDomainOverviewCollection = {
        serializedName: "StaticSiteCustomDomainOverviewCollection",
        type: {
            name: "Composite",
            className: "StaticSiteCustomDomainOverviewCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StaticSiteCustomDomainOverviewARMResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppServiceEnvironmentCollection = {
        serializedName: "AppServiceEnvironmentCollection",
        type: {
            name: "Composite",
            className: "AppServiceEnvironmentCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppServiceEnvironmentResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StampCapacityCollection = {
        serializedName: "StampCapacityCollection",
        type: {
            name: "Composite",
            className: "StampCapacityCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StampCapacity"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundEnvironmentEndpointCollection = {
        serializedName: "InboundEnvironmentEndpointCollection",
        type: {
            name: "Composite",
            className: "InboundEnvironmentEndpointCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundEnvironmentEndpoint"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkerPoolCollection = {
        serializedName: "WorkerPoolCollection",
        type: {
            name: "Composite",
            className: "WorkerPoolCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkerPoolResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceMetricDefinitionCollection = {
        serializedName: "ResourceMetricDefinitionCollection",
        type: {
            name: "Composite",
            className: "ResourceMetricDefinitionCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceMetricDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuInfoCollection = {
        serializedName: "SkuInfoCollection",
        type: {
            name: "Composite",
            className: "SkuInfoCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageCollection = {
        serializedName: "UsageCollection",
        type: {
            name: "Composite",
            className: "UsageCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutboundEnvironmentEndpointCollection = {
        serializedName: "OutboundEnvironmentEndpointCollection",
        type: {
            name: "Composite",
            className: "OutboundEnvironmentEndpointCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutboundEnvironmentEndpoint"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppServicePlanCollection = {
        serializedName: "AppServicePlanCollection",
        type: {
            name: "Composite",
            className: "AppServicePlanCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppServicePlan"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceCollection = {
        serializedName: "ResourceCollection",
        type: {
            name: "Composite",
            className: "ResourceCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HybridConnectionCollection = {
        serializedName: "HybridConnectionCollection",
        type: {
            name: "Composite",
            className: "HybridConnectionCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HybridConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceHealthMetadataCollection = {
        serializedName: "ResourceHealthMetadataCollection",
        type: {
            name: "Composite",
            className: "ResourceHealthMetadataCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceHealthMetadata"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        AppServiceCertificate: AppServiceCertificate,
        Resource: Resource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        CertificateDetails: CertificateDetails,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        ProxyOnlyResource: ProxyOnlyResource,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        SiteSeal: SiteSeal,
        SiteSealRequest: SiteSealRequest,
        SystemData: SystemData,
        VnetRoute: VnetRoute,
        VnetInfo: VnetInfo,
        VnetGateway: VnetGateway,
        User: User,
        StringDictionary: StringDictionary,
        Snapshot: Snapshot,
        PushSettings: PushSettings,
        Identifier: Identifier,
        HybridConnection: HybridConnection,
        DeletedSite: DeletedSite,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        ManagedServiceIdentity: ManagedServiceIdentity,
        SlotSwapStatus: SlotSwapStatus,
        CloningInfo: CloningInfo,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        IpSecurityRestriction: IpSecurityRestriction,
        ApiManagementConfig: ApiManagementConfig,
        ApiDefinitionInfo: ApiDefinitionInfo,
        CorsSettings: CorsSettings,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealActions: AutoHealActions,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        RequestsBasedTrigger: RequestsBasedTrigger,
        AutoHealTriggers: AutoHealTriggers,
        AutoHealRules: AutoHealRules,
        SiteLimits: SiteLimits,
        RampUpRule: RampUpRule,
        Experiments: Experiments,
        VirtualDirectory: VirtualDirectory,
        VirtualApplication: VirtualApplication,
        HandlerMapping: HandlerMapping,
        SiteMachineKey: SiteMachineKey,
        ConnStringInfo: ConnStringInfo,
        NameValuePair: NameValuePair,
        SiteConfig: SiteConfig,
        HostNameSslState: HostNameSslState,
        Site: Site,
        Capability: Capability,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        AppServicePlan: AppServicePlan,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponse: DefaultErrorResponse,
        NameIdentifier: NameIdentifier,
        LogSpecification: LogSpecification,
        MetricAvailability: MetricAvailability,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification,
        CsmOperationDescriptionProperties: CsmOperationDescriptionProperties,
        CsmOperationDisplay: CsmOperationDisplay,
        CsmOperationDescription: CsmOperationDescription,
        Address: Address,
        Contact: Contact,
        HostName: HostName,
        DomainPurchaseConsent: DomainPurchaseConsent,
        Domain: Domain,
        DomainAvailabilityCheckResult: DomainAvailabilityCheckResult,
        DomainControlCenterSsoRequest: DomainControlCenterSsoRequest,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainRecommendationSearchParameters: DomainRecommendationSearchParameters,
        TldLegalAgreement: TldLegalAgreement,
        TopLevelDomain: TopLevelDomain,
        TopLevelDomainAgreementOption: TopLevelDomainAgreementOption,
        Certificate: Certificate,
        CertificatePatchResource: CertificatePatchResource,
        VirtualNetworkProfile: VirtualNetworkProfile,
        WorkerPool: WorkerPool,
        VirtualIPMapping: VirtualIPMapping,
        StampCapacity: StampCapacity,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        AppServiceEnvironment: AppServiceEnvironment,
        LocalizableString: LocalizableString,
        CsmUsageQuota: CsmUsageQuota,
        ErrorEntity: ErrorEntity,
        Operation: Operation,
        Solution: Solution,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        AbnormalTimePeriod: AbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        DataSource: DataSource,
        ResponseMetaData: ResponseMetaData,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DetectorInfo: DetectorInfo,
        Rendering: Rendering,
        DiagnosticData: DiagnosticData,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        StackMinorVersion: StackMinorVersion,
        StackMajorVersion: StackMajorVersion,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        AppserviceGithubToken: AppserviceGithubToken,
        AppserviceGithubTokenRequest: AppserviceGithubTokenRequest,
        BillingMeter: BillingMeter,
        CsmMoveResourceEnvelope: CsmMoveResourceEnvelope,
        GeoRegion: GeoRegion,
        HostingEnvironmentDeploymentInfo: HostingEnvironmentDeploymentInfo,
        DeploymentLocations: DeploymentLocations,
        GlobalCsmSkuDescription: GlobalCsmSkuDescription,
        PremierAddOnOffer: PremierAddOnOffer,
        ResourceNameAvailability: ResourceNameAvailability,
        ResourceNameAvailabilityRequest: ResourceNameAvailabilityRequest,
        SkuInfos: SkuInfos,
        SourceControl: SourceControl,
        ValidateRequest: ValidateRequest,
        ValidateResponseError: ValidateResponseError,
        ValidateResponse: ValidateResponse,
        VnetParameters: VnetParameters,
        VnetValidationTestFailure: VnetValidationTestFailure,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AppRegistration: AppRegistration,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        AuthPlatform: AuthPlatform,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        JwtClaimChecks: JwtClaimChecks,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureActiveDirectory: AzureActiveDirectory,
        ArmIdWrapper: ArmIdWrapper,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        DatabaseBackupSetting: DatabaseBackupSetting,
        BackupItem: BackupItem,
        BackupSchedule: BackupSchedule,
        BackupRequest: BackupRequest,
        BlobStorageTokenStore: BlobStorageTokenStore,
        ClientRegistration: ClientRegistration,
        ConnStringValueTypePair: ConnStringValueTypePair,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerThrottlingData: ContainerThrottlingData,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerInfo: ContainerInfo,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CsmCopySlotEntity: CsmCopySlotEntity,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingProfileOptions: CsmPublishingProfileOptions,
        CsmSlotEntity: CsmSlotEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        OpenIdConnectLogin: OpenIdConnectLogin,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        Deployment: Deployment,
        EnabledConfig: EnabledConfig,
        LoginScopes: LoginScopes,
        Facebook: Facebook,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        FunctionSecrets: FunctionSecrets,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HostKeys: HostKeys,
        HostNameBinding: HostNameBinding,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HttpSettings: HttpSettings,
        TwitterRegistration: TwitterRegistration,
        Twitter: Twitter,
        IdentityProviders: IdentityProviders,
        KeyInfo: KeyInfo,
        LoginRoutes: LoginRoutes,
        TokenStore: TokenStore,
        Nonce: Nonce,
        Login: Login,
        MSDeploy: MSDeploy,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployLog: MSDeployLog,
        MSDeployStatus: MSDeployStatus,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        NetworkFeatures: NetworkFeatures,
        NetworkTrace: NetworkTrace,
        PerfMonSample: PerfMonSample,
        PerfMonSet: PerfMonSet,
        PerfMonResponse: PerfMonResponse,
        PremierAddOn: PremierAddOn,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateAccess: PrivateAccess,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourcesWrapper: PrivateLinkResourcesWrapper,
        ProcessThreadInfo: ProcessThreadInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessInfo: ProcessInfo,
        PublicCertificate: PublicCertificate,
        RestoreRequest: RestoreRequest,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteCloneabilityCriterion: SiteCloneabilityCriterion,
        SiteCloneability: SiteCloneability,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLogsConfig: SiteLogsConfig,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredWebJob: TriggeredWebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WebJob: WebJob,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        AddressResponse: AddressResponse,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        EndpointDetail: EndpointDetail,
        EndpointDependency: EndpointDependency,
        HostingEnvironmentDiagnostics: HostingEnvironmentDiagnostics,
        InboundEnvironmentEndpoint: InboundEnvironmentEndpoint,
        OutboundEnvironmentEndpoint: OutboundEnvironmentEndpoint,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        SkuInfo: SkuInfo,
        Usage: Usage,
        WorkerPoolResource: WorkerPoolResource,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        ResourceHealthMetadata: ResourceHealthMetadata,
        AppServiceCertificateOrderCollection: AppServiceCertificateOrderCollection,
        AppServiceCertificateCollection: AppServiceCertificateCollection,
        CsmOperationCollection: CsmOperationCollection,
        DomainCollection: DomainCollection,
        NameIdentifierCollection: NameIdentifierCollection,
        DomainOwnershipIdentifierCollection: DomainOwnershipIdentifierCollection,
        TopLevelDomainCollection: TopLevelDomainCollection,
        TldLegalAgreementCollection: TldLegalAgreementCollection,
        CertificateCollection: CertificateCollection,
        DeletedWebAppCollection: DeletedWebAppCollection,
        DetectorResponseCollection: DetectorResponseCollection,
        DiagnosticCategoryCollection: DiagnosticCategoryCollection,
        DiagnosticAnalysisCollection: DiagnosticAnalysisCollection,
        DiagnosticDetectorCollection: DiagnosticDetectorCollection,
        ApplicationStackCollection: ApplicationStackCollection,
        RecommendationCollection: RecommendationCollection,
        SourceControlCollection: SourceControlCollection,
        BillingMeterCollection: BillingMeterCollection,
        GeoRegionCollection: GeoRegionCollection,
        IdentifierCollection: IdentifierCollection,
        PremierAddOnOfferCollection: PremierAddOnOfferCollection,
        WebAppCollection: WebAppCollection,
        BackupItemCollection: BackupItemCollection,
        SiteConfigResourceCollection: SiteConfigResourceCollection,
        SiteConfigurationSnapshotInfoCollection: SiteConfigurationSnapshotInfoCollection,
        ContinuousWebJobCollection: ContinuousWebJobCollection,
        DeploymentCollection: DeploymentCollection,
        FunctionEnvelopeCollection: FunctionEnvelopeCollection,
        HostNameBindingCollection: HostNameBindingCollection,
        WebAppInstanceStatusCollection: WebAppInstanceStatusCollection,
        ProcessInfoCollection: ProcessInfoCollection,
        ProcessModuleInfoCollection: ProcessModuleInfoCollection,
        ProcessThreadInfoCollection: ProcessThreadInfoCollection,
        PerfMonCounterCollection: PerfMonCounterCollection,
        PublicCertificateCollection: PublicCertificateCollection,
        SiteExtensionInfoCollection: SiteExtensionInfoCollection,
        SlotDifferenceCollection: SlotDifferenceCollection,
        SnapshotCollection: SnapshotCollection,
        TriggeredWebJobCollection: TriggeredWebJobCollection,
        TriggeredJobHistoryCollection: TriggeredJobHistoryCollection,
        CsmUsageQuotaCollection: CsmUsageQuotaCollection,
        WebJobCollection: WebJobCollection,
        StaticSiteCollection: StaticSiteCollection,
        StaticSiteUserCollection: StaticSiteUserCollection,
        StaticSiteBuildCollection: StaticSiteBuildCollection,
        StaticSiteFunctionOverviewCollection: StaticSiteFunctionOverviewCollection,
        StaticSiteCustomDomainOverviewCollection: StaticSiteCustomDomainOverviewCollection,
        AppServiceEnvironmentCollection: AppServiceEnvironmentCollection,
        StampCapacityCollection: StampCapacityCollection,
        InboundEnvironmentEndpointCollection: InboundEnvironmentEndpointCollection,
        WorkerPoolCollection: WorkerPoolCollection,
        ResourceMetricDefinitionCollection: ResourceMetricDefinitionCollection,
        SkuInfoCollection: SkuInfoCollection,
        UsageCollection: UsageCollection,
        OutboundEnvironmentEndpointCollection: OutboundEnvironmentEndpointCollection,
        AppServicePlanCollection: AppServicePlanCollection,
        ResourceCollection: ResourceCollection,
        HybridConnectionCollection: HybridConnectionCollection,
        ResourceHealthMetadataCollection: ResourceHealthMetadataCollection
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var analysisName = {
        parameterPath: "analysisName",
        mapper: {
            required: true,
            serializedName: "analysisName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var authprovider = {
        parameterPath: "authprovider",
        mapper: {
            required: true,
            serializedName: "authprovider",
            type: {
                name: "String"
            }
        }
    };
    var backupId = {
        parameterPath: "backupId",
        mapper: {
            required: true,
            serializedName: "backupId",
            type: {
                name: "String"
            }
        }
    };
    var baseAddress = {
        parameterPath: "baseAddress",
        mapper: {
            required: true,
            serializedName: "baseAddress",
            type: {
                name: "String"
            }
        }
    };
    var billingLocation = {
        parameterPath: [
            "options",
            "billingLocation"
        ],
        mapper: {
            serializedName: "billingLocation",
            type: {
                name: "String"
            }
        }
    };
    var certificateOrderName = {
        parameterPath: "certificateOrderName",
        mapper: {
            required: true,
            serializedName: "certificateOrderName",
            type: {
                name: "String"
            }
        }
    };
    var deletedSiteId = {
        parameterPath: "deletedSiteId",
        mapper: {
            required: true,
            serializedName: "deletedSiteId",
            type: {
                name: "String"
            }
        }
    };
    var deleteEmptyServerFarm = {
        parameterPath: [
            "options",
            "deleteEmptyServerFarm"
        ],
        mapper: {
            serializedName: "deleteEmptyServerFarm",
            type: {
                name: "Boolean"
            }
        }
    };
    var deleteMetrics = {
        parameterPath: [
            "options",
            "deleteMetrics"
        ],
        mapper: {
            serializedName: "deleteMetrics",
            type: {
                name: "Boolean"
            }
        }
    };
    var detailed = {
        parameterPath: [
            "options",
            "detailed"
        ],
        mapper: {
            serializedName: "detailed",
            type: {
                name: "Boolean"
            }
        }
    };
    var detectorName = {
        parameterPath: "detectorName",
        mapper: {
            required: true,
            serializedName: "detectorName",
            type: {
                name: "String"
            }
        }
    };
    var diagnosticCategory = {
        parameterPath: "diagnosticCategory",
        mapper: {
            required: true,
            serializedName: "diagnosticCategory",
            type: {
                name: "String"
            }
        }
    };
    var diagnosticsName = {
        parameterPath: "diagnosticsName",
        mapper: {
            required: true,
            serializedName: "diagnosticsName",
            type: {
                name: "String"
            }
        }
    };
    var domainName0 = {
        parameterPath: "domainName",
        mapper: {
            required: true,
            serializedName: "domainName",
            type: {
                name: "String"
            }
        }
    };
    var domainName1 = {
        parameterPath: "domainName",
        mapper: {
            required: true,
            serializedName: "domainName",
            constraints: {
                Pattern: /[a-zA-Z0-9][a-zA-Z0-9\.-]+/
            },
            type: {
                name: "String"
            }
        }
    };
    var domainOwnershipIdentifierName = {
        parameterPath: "domainOwnershipIdentifierName",
        mapper: {
            required: true,
            serializedName: "domainOwnershipIdentifierName",
            type: {
                name: "String"
            }
        }
    };
    var durationInSeconds = {
        parameterPath: [
            "options",
            "durationInSeconds"
        ],
        mapper: {
            serializedName: "durationInSeconds",
            type: {
                name: "Number"
            }
        }
    };
    var endTime = {
        parameterPath: [
            "options",
            "endTime"
        ],
        mapper: {
            serializedName: "endTime",
            type: {
                name: "DateTime"
            }
        }
    };
    var entityName = {
        parameterPath: "entityName",
        mapper: {
            required: true,
            serializedName: "entityName",
            type: {
                name: "String"
            }
        }
    };
    var environmentName = {
        parameterPath: "environmentName",
        mapper: {
            required: true,
            serializedName: "environmentName",
            type: {
                name: "String"
            }
        }
    };
    var expiredOnly = {
        parameterPath: [
            "options",
            "expiredOnly"
        ],
        mapper: {
            serializedName: "expiredOnly",
            type: {
                name: "Boolean"
            }
        }
    };
    var featured = {
        parameterPath: [
            "options",
            "featured"
        ],
        mapper: {
            serializedName: "featured",
            type: {
                name: "Boolean"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var forceDelete = {
        parameterPath: [
            "options",
            "forceDelete"
        ],
        mapper: {
            serializedName: "forceDelete",
            type: {
                name: "Boolean"
            }
        }
    };
    var forceHardDeleteDomain = {
        parameterPath: [
            "options",
            "forceHardDeleteDomain"
        ],
        mapper: {
            serializedName: "forceHardDeleteDomain",
            type: {
                name: "Boolean"
            }
        }
    };
    var functionName = {
        parameterPath: "functionName",
        mapper: {
            required: true,
            serializedName: "functionName",
            type: {
                name: "String"
            }
        }
    };
    var gatewayName = {
        parameterPath: "gatewayName",
        mapper: {
            required: true,
            serializedName: "gatewayName",
            type: {
                name: "String"
            }
        }
    };
    var hostingEnvironmentName = {
        parameterPath: "hostingEnvironmentName",
        mapper: {
            required: true,
            serializedName: "hostingEnvironmentName",
            type: {
                name: "String"
            }
        }
    };
    var hostName0 = {
        parameterPath: [
            "options",
            "hostName"
        ],
        mapper: {
            serializedName: "hostName",
            type: {
                name: "String"
            }
        }
    };
    var hostName1 = {
        parameterPath: "hostName",
        mapper: {
            required: true,
            serializedName: "hostName",
            type: {
                name: "String"
            }
        }
    };
    var id = {
        parameterPath: "id",
        mapper: {
            required: true,
            serializedName: "id",
            type: {
                name: "String"
            }
        }
    };
    var includeSlots = {
        parameterPath: [
            "options",
            "includeSlots"
        ],
        mapper: {
            serializedName: "includeSlots",
            type: {
                name: "Boolean"
            }
        }
    };
    var instance = {
        parameterPath: "instance",
        mapper: {
            required: true,
            serializedName: "instance",
            type: {
                name: "String"
            }
        }
    };
    var instanceId = {
        parameterPath: "instanceId",
        mapper: {
            required: true,
            serializedName: "instanceId",
            type: {
                name: "String"
            }
        }
    };
    var keyName = {
        parameterPath: "keyName",
        mapper: {
            required: true,
            serializedName: "keyName",
            type: {
                name: "String"
            }
        }
    };
    var keyType = {
        parameterPath: "keyType",
        mapper: {
            required: true,
            serializedName: "keyType",
            type: {
                name: "String"
            }
        }
    };
    var linuxDynamicWorkersEnabled = {
        parameterPath: [
            "options",
            "linuxDynamicWorkersEnabled"
        ],
        mapper: {
            serializedName: "linuxDynamicWorkersEnabled",
            type: {
                name: "Boolean"
            }
        }
    };
    var linuxWorkersEnabled = {
        parameterPath: [
            "options",
            "linuxWorkersEnabled"
        ],
        mapper: {
            serializedName: "linuxWorkersEnabled",
            type: {
                name: "Boolean"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var maxFrameLength = {
        parameterPath: [
            "options",
            "maxFrameLength"
        ],
        mapper: {
            serializedName: "maxFrameLength",
            type: {
                name: "Number"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var namespaceName = {
        parameterPath: "namespaceName",
        mapper: {
            required: true,
            serializedName: "namespaceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var osType = {
        parameterPath: [
            "options",
            "osType"
        ],
        mapper: {
            serializedName: "osType",
            type: {
                name: "String"
            }
        }
    };
    var osTypeSelected = {
        parameterPath: [
            "options",
            "osTypeSelected"
        ],
        mapper: {
            serializedName: "osTypeSelected",
            type: {
                name: "String"
            }
        }
    };
    var premierAddOnName = {
        parameterPath: "premierAddOnName",
        mapper: {
            required: true,
            serializedName: "premierAddOnName",
            type: {
                name: "String"
            }
        }
    };
    var prId = {
        parameterPath: "prId",
        mapper: {
            required: true,
            serializedName: "prId",
            type: {
                name: "String"
            }
        }
    };
    var privateEndpointConnectionName = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
            required: true,
            serializedName: "privateEndpointConnectionName",
            type: {
                name: "String"
            }
        }
    };
    var processId = {
        parameterPath: "processId",
        mapper: {
            required: true,
            serializedName: "processId",
            type: {
                name: "String"
            }
        }
    };
    var propertiesToInclude = {
        parameterPath: [
            "options",
            "propertiesToInclude"
        ],
        mapper: {
            serializedName: "propertiesToInclude",
            type: {
                name: "String"
            }
        }
    };
    var publicCertificateName = {
        parameterPath: "publicCertificateName",
        mapper: {
            required: true,
            serializedName: "publicCertificateName",
            type: {
                name: "String"
            }
        }
    };
    var recommendationId = {
        parameterPath: [
            "options",
            "recommendationId"
        ],
        mapper: {
            serializedName: "recommendationId",
            type: {
                name: "String"
            }
        }
    };
    var relayName = {
        parameterPath: "relayName",
        mapper: {
            required: true,
            serializedName: "relayName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+[^\.]$/
            },
            type: {
                name: "String"
            }
        }
    };
    var routeName = {
        parameterPath: "routeName",
        mapper: {
            required: true,
            serializedName: "routeName",
            type: {
                name: "String"
            }
        }
    };
    var sasUrl = {
        parameterPath: [
            "options",
            "sasUrl"
        ],
        mapper: {
            serializedName: "sasUrl",
            type: {
                name: "String"
            }
        }
    };
    var siteExtensionId = {
        parameterPath: "siteExtensionId",
        mapper: {
            required: true,
            serializedName: "siteExtensionId",
            type: {
                name: "String"
            }
        }
    };
    var siteName = {
        parameterPath: "siteName",
        mapper: {
            required: true,
            serializedName: "siteName",
            type: {
                name: "String"
            }
        }
    };
    var skipToken = {
        parameterPath: [
            "options",
            "skipToken"
        ],
        mapper: {
            serializedName: "$skipToken",
            type: {
                name: "String"
            }
        }
    };
    var sku = {
        parameterPath: [
            "options",
            "sku"
        ],
        mapper: {
            serializedName: "sku",
            type: {
                name: "String"
            }
        }
    };
    var slot = {
        parameterPath: "slot",
        mapper: {
            required: true,
            serializedName: "slot",
            type: {
                name: "String"
            }
        }
    };
    var snapshotId = {
        parameterPath: "snapshotId",
        mapper: {
            required: true,
            serializedName: "snapshotId",
            type: {
                name: "String"
            }
        }
    };
    var softRestart = {
        parameterPath: [
            "options",
            "softRestart"
        ],
        mapper: {
            serializedName: "softRestart",
            type: {
                name: "Boolean"
            }
        }
    };
    var sourceControlType = {
        parameterPath: "sourceControlType",
        mapper: {
            required: true,
            serializedName: "sourceControlType",
            type: {
                name: "String"
            }
        }
    };
    var startTime = {
        parameterPath: [
            "options",
            "startTime"
        ],
        mapper: {
            serializedName: "startTime",
            type: {
                name: "DateTime"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionName = {
        parameterPath: "subscriptionName",
        mapper: {
            required: true,
            serializedName: "subscriptionName",
            type: {
                name: "String"
            }
        }
    };
    var synchronous = {
        parameterPath: [
            "options",
            "synchronous"
        ],
        mapper: {
            serializedName: "synchronous",
            type: {
                name: "Boolean"
            }
        }
    };
    var timeGrain = {
        parameterPath: [
            "options",
            "timeGrain"
        ],
        mapper: {
            serializedName: "timeGrain",
            constraints: {
                Pattern: /PT[1-9][0-9]+[SMH]/
            },
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "String"
            }
        }
    };
    var updateSeen = {
        parameterPath: [
            "options",
            "updateSeen"
        ],
        mapper: {
            serializedName: "updateSeen",
            type: {
                name: "Boolean"
            }
        }
    };
    var userid = {
        parameterPath: "userid",
        mapper: {
            required: true,
            serializedName: "userid",
            type: {
                name: "String"
            }
        }
    };
    var view = {
        parameterPath: "view",
        mapper: {
            required: true,
            serializedName: "view",
            type: {
                name: "String"
            }
        }
    };
    var vnetName = {
        parameterPath: "vnetName",
        mapper: {
            required: true,
            serializedName: "vnetName",
            type: {
                name: "String"
            }
        }
    };
    var webJobName = {
        parameterPath: "webJobName",
        mapper: {
            required: true,
            serializedName: "webJobName",
            type: {
                name: "String"
            }
        }
    };
    var workerName = {
        parameterPath: "workerName",
        mapper: {
            required: true,
            serializedName: "workerName",
            type: {
                name: "String"
            }
        }
    };
    var workerPoolName = {
        parameterPath: "workerPoolName",
        mapper: {
            required: true,
            serializedName: "workerPoolName",
            type: {
                name: "String"
            }
        }
    };
    var xenonWorkersEnabled = {
        parameterPath: [
            "options",
            "xenonWorkersEnabled"
        ],
        mapper: {
            serializedName: "xenonWorkersEnabled",
            type: {
                name: "Boolean"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateCollection: AppServiceCertificateCollection,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderCollection: AppServiceCertificateOrderCollection,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameIdentifier: NameIdentifier,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSeal: SiteSeal,
        SiteSealRequest: SiteSealRequest,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AppServiceCertificateOrders. */
    var AppServiceCertificateOrders = /** @class */ (function () {
        /**
         * Create a AppServiceCertificateOrders.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function AppServiceCertificateOrders(client) {
            this.client = client;
        }
        AppServiceCertificateOrders.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.validatePurchaseInformation = function (appServiceCertificateOrder, options, callback) {
            return this.client.sendOperationRequest({
                appServiceCertificateOrder: appServiceCertificateOrder,
                options: options
            }, validatePurchaseInformationOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.get = function (resourceGroupName, certificateOrderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Description for Create or update a certificate purchase order.
         * @summary Create or update a certificate purchase order.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param certificateOrderName Name of the certificate order.
         * @param certificateDistinguishedName Distinguished name to use for the certificate order.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceCertificateOrdersCreateOrUpdateResponse>
         */
        AppServiceCertificateOrders.prototype.createOrUpdate = function (resourceGroupName, certificateOrderName, certificateDistinguishedName, options) {
            return this.beginCreateOrUpdate(resourceGroupName, certificateOrderName, certificateDistinguishedName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceCertificateOrders.prototype.deleteMethod = function (resourceGroupName, certificateOrderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.update = function (resourceGroupName, certificateOrderName, certificateDistinguishedName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                certificateDistinguishedName: certificateDistinguishedName,
                options: options
            }, updateOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.listCertificates = function (resourceGroupName, certificateOrderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                options: options
            }, listCertificatesOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.getCertificate = function (resourceGroupName, certificateOrderName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                name: name,
                options: options
            }, getCertificateOperationSpec, callback);
        };
        /**
         * Description for Creates or updates a certificate and associates with key vault secret.
         * @summary Creates or updates a certificate and associates with key vault secret.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param certificateOrderName Name of the certificate order.
         * @param name Name of the certificate.
         * @param keyVaultCertificate Key vault certificate resource Id.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceCertificateOrdersCreateOrUpdateCertificateResponse>
         */
        AppServiceCertificateOrders.prototype.createOrUpdateCertificate = function (resourceGroupName, certificateOrderName, name, keyVaultCertificate, options) {
            return this.beginCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, keyVaultCertificate, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceCertificateOrders.prototype.deleteCertificate = function (resourceGroupName, certificateOrderName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                name: name,
                options: options
            }, deleteCertificateOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.updateCertificate = function (resourceGroupName, certificateOrderName, name, keyVaultCertificate, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                name: name,
                keyVaultCertificate: keyVaultCertificate,
                options: options
            }, updateCertificateOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.reissue = function (resourceGroupName, certificateOrderName, reissueCertificateOrderRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                reissueCertificateOrderRequest: reissueCertificateOrderRequest,
                options: options
            }, reissueOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.renew = function (resourceGroupName, certificateOrderName, renewCertificateOrderRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                renewCertificateOrderRequest: renewCertificateOrderRequest,
                options: options
            }, renewOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.resendEmail = function (resourceGroupName, certificateOrderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                options: options
            }, resendEmailOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.resendRequestEmails = function (resourceGroupName, certificateOrderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                options: options
            }, resendRequestEmailsOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.retrieveSiteSeal = function (resourceGroupName, certificateOrderName, siteSealRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                siteSealRequest: siteSealRequest,
                options: options
            }, retrieveSiteSealOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.verifyDomainOwnership = function (resourceGroupName, certificateOrderName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                options: options
            }, verifyDomainOwnershipOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.retrieveCertificateActions = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, retrieveCertificateActionsOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.retrieveCertificateEmailHistory = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, retrieveCertificateEmailHistoryOperationSpec, callback);
        };
        /**
         * Description for Create or update a certificate purchase order.
         * @summary Create or update a certificate purchase order.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param certificateOrderName Name of the certificate order.
         * @param certificateDistinguishedName Distinguished name to use for the certificate order.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceCertificateOrders.prototype.beginCreateOrUpdate = function (resourceGroupName, certificateOrderName, certificateDistinguishedName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                certificateDistinguishedName: certificateDistinguishedName,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Description for Creates or updates a certificate and associates with key vault secret.
         * @summary Creates or updates a certificate and associates with key vault secret.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param certificateOrderName Name of the certificate order.
         * @param name Name of the certificate.
         * @param keyVaultCertificate Key vault certificate resource Id.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceCertificateOrders.prototype.beginCreateOrUpdateCertificate = function (resourceGroupName, certificateOrderName, name, keyVaultCertificate, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                certificateOrderName: certificateOrderName,
                name: name,
                keyVaultCertificate: keyVaultCertificate,
                options: options
            }, beginCreateOrUpdateCertificateOperationSpec, options);
        };
        AppServiceCertificateOrders.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        AppServiceCertificateOrders.prototype.listCertificatesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listCertificatesNextOperationSpec, callback);
        };
        return AppServiceCertificateOrders;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrderCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var validatePurchaseInformationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appServiceCertificateOrder",
            mapper: __assign(__assign({}, AppServiceCertificateOrder), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrderCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrder
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateDistinguishedName",
            mapper: __assign(__assign({}, AppServiceCertificateOrderPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrder
            },
            201: {
                bodyMapper: AppServiceCertificateOrder
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var listCertificatesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var getCertificateOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var deleteCertificateOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var updateCertificateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "keyVaultCertificate",
            mapper: __assign(__assign({}, AppServiceCertificatePatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServiceCertificateResource
            },
            201: {
                bodyMapper: AppServiceCertificateResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var reissueOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "reissueCertificateOrderRequest",
            mapper: __assign(__assign({}, ReissueCertificateOrderRequest), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var renewOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "renewCertificateOrderRequest",
            mapper: __assign(__assign({}, RenewCertificateOrderRequest), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var resendEmailOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var resendRequestEmailsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ]
            },
            mapper: __assign(__assign({}, NameIdentifier), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var retrieveSiteSealOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteSealRequest",
            mapper: __assign(__assign({}, SiteSealRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteSeal
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var verifyDomainOwnershipOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var retrieveCertificateActionsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateOrderAction"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var retrieveCertificateEmailHistoryOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateEmail"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateDistinguishedName",
            mapper: __assign(__assign({}, AppServiceCertificateOrder), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrder
            },
            201: {
                bodyMapper: AppServiceCertificateOrder
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateCertificateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            certificateOrderName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "keyVaultCertificate",
            mapper: __assign(__assign({}, AppServiceCertificateResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServiceCertificateResource
            },
            201: {
                bodyMapper: AppServiceCertificateResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrderCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateOrderCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };
    var listCertificatesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceCertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CsmOperationCollection: CsmOperationCollection,
        CsmOperationDescription: CsmOperationDescription,
        CsmOperationDescriptionProperties: CsmOperationDescriptionProperties,
        CsmOperationDisplay: CsmOperationDisplay,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        Dimension: Dimension,
        LogSpecification: LogSpecification,
        MetricAvailability: MetricAvailability,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CertificateRegistrationProvider. */
    var CertificateRegistrationProvider = /** @class */ (function () {
        /**
         * Create a CertificateRegistrationProvider.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function CertificateRegistrationProvider(client) {
            this.client = client;
        }
        CertificateRegistrationProvider.prototype.listOperations = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationsOperationSpec, callback);
        };
        CertificateRegistrationProvider.prototype.listOperationsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listOperationsNextOperationSpec, callback);
        };
        return CertificateRegistrationProvider;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$2);
    var listOperationsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.CertificateRegistration/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmOperationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listOperationsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmOperationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainAvailabilityCheckResult: DomainAvailabilityCheckResult,
        DomainCollection: DomainCollection,
        DomainControlCenterSsoRequest: DomainControlCenterSsoRequest,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainOwnershipIdentifierCollection: DomainOwnershipIdentifierCollection,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        DomainRecommendationSearchParameters: DomainRecommendationSearchParameters,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameIdentifier: NameIdentifier,
        NameIdentifierCollection: NameIdentifierCollection,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Domains. */
    var Domains = /** @class */ (function () {
        /**
         * Create a Domains.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function Domains(client) {
            this.client = client;
        }
        Domains.prototype.checkAvailability = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, checkAvailabilityOperationSpec, callback);
        };
        Domains.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Domains.prototype.getControlCenterSsoRequest = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getControlCenterSsoRequestOperationSpec, callback);
        };
        Domains.prototype.listRecommendations = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, listRecommendationsOperationSpec, callback);
        };
        Domains.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        Domains.prototype.get = function (resourceGroupName, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Description for Creates or updates a domain.
         * @summary Creates or updates a domain.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param domainName Name of the domain.
         * @param domain Domain registration information.
         * @param [options] The optional parameters
         * @returns Promise<Models.DomainsCreateOrUpdateResponse>
         */
        Domains.prototype.createOrUpdate = function (resourceGroupName, domainName, domain, options) {
            return this.beginCreateOrUpdate(resourceGroupName, domainName, domain, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Domains.prototype.deleteMethod = function (resourceGroupName, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Domains.prototype.update = function (resourceGroupName, domainName, domain, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                domain: domain,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Domains.prototype.listOwnershipIdentifiers = function (resourceGroupName, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                options: options
            }, listOwnershipIdentifiersOperationSpec, callback);
        };
        Domains.prototype.getOwnershipIdentifier = function (resourceGroupName, domainName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                name: name,
                options: options
            }, getOwnershipIdentifierOperationSpec, callback);
        };
        Domains.prototype.createOrUpdateOwnershipIdentifier = function (resourceGroupName, domainName, name, domainOwnershipIdentifier, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                name: name,
                domainOwnershipIdentifier: domainOwnershipIdentifier,
                options: options
            }, createOrUpdateOwnershipIdentifierOperationSpec, callback);
        };
        Domains.prototype.deleteOwnershipIdentifier = function (resourceGroupName, domainName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                name: name,
                options: options
            }, deleteOwnershipIdentifierOperationSpec, callback);
        };
        Domains.prototype.updateOwnershipIdentifier = function (resourceGroupName, domainName, name, domainOwnershipIdentifier, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                name: name,
                domainOwnershipIdentifier: domainOwnershipIdentifier,
                options: options
            }, updateOwnershipIdentifierOperationSpec, callback);
        };
        Domains.prototype.renew = function (resourceGroupName, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                options: options
            }, renewOperationSpec$1, callback);
        };
        /**
         * Description for Creates or updates a domain.
         * @summary Creates or updates a domain.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param domainName Name of the domain.
         * @param domain Domain registration information.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Domains.prototype.beginCreateOrUpdate = function (resourceGroupName, domainName, domain, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                domainName: domainName,
                domain: domain,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        Domains.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Domains.prototype.listRecommendationsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listRecommendationsNextOperationSpec, callback);
        };
        Domains.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        Domains.prototype.listOwnershipIdentifiersNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listOwnershipIdentifiersNextOperationSpec, callback);
        };
        return Domains;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$3);
    var checkAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ]
            },
            mapper: __assign(__assign({}, NameIdentifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DomainAvailabilityCheckResult
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getControlCenterSsoRequestOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainControlCenterSsoRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listRecommendationsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DomainRecommendationSearchParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameIdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        urlParameters: [
            resourceGroupName,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Domain
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        urlParameters: [
            resourceGroupName,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            forceHardDeleteDomain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        urlParameters: [
            resourceGroupName,
            domainName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domain",
            mapper: __assign(__assign({}, DomainPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Domain
            },
            202: {
                bodyMapper: Domain
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listOwnershipIdentifiersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers",
        urlParameters: [
            resourceGroupName,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainOwnershipIdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOwnershipIdentifierOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        urlParameters: [
            resourceGroupName,
            domainName0,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainOwnershipIdentifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOwnershipIdentifierOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        urlParameters: [
            resourceGroupName,
            domainName0,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainOwnershipIdentifier",
            mapper: __assign(__assign({}, DomainOwnershipIdentifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DomainOwnershipIdentifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteOwnershipIdentifierOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        urlParameters: [
            resourceGroupName,
            domainName0,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateOwnershipIdentifierOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        urlParameters: [
            resourceGroupName,
            domainName0,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainOwnershipIdentifier",
            mapper: __assign(__assign({}, DomainOwnershipIdentifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DomainOwnershipIdentifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var renewOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/renew",
        urlParameters: [
            resourceGroupName,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        urlParameters: [
            resourceGroupName,
            domainName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domain",
            mapper: __assign(__assign({}, Domain), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Domain
            },
            202: {
                bodyMapper: Domain
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listRecommendationsNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NameIdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listOwnershipIdentifiersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainOwnershipIdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TldLegalAgreement: TldLegalAgreement,
        TldLegalAgreementCollection: TldLegalAgreementCollection,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TopLevelDomainAgreementOption: TopLevelDomainAgreementOption,
        TopLevelDomainCollection: TopLevelDomainCollection,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TopLevelDomains. */
    var TopLevelDomains = /** @class */ (function () {
        /**
         * Create a TopLevelDomains.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function TopLevelDomains(client) {
            this.client = client;
        }
        TopLevelDomains.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        TopLevelDomains.prototype.get = function (name, options, callback) {
            return this.client.sendOperationRequest({
                name: name,
                options: options
            }, getOperationSpec$2, callback);
        };
        TopLevelDomains.prototype.listAgreements = function (name, agreementOption, options, callback) {
            return this.client.sendOperationRequest({
                name: name,
                agreementOption: agreementOption,
                options: options
            }, listAgreementsOperationSpec, callback);
        };
        TopLevelDomains.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        TopLevelDomains.prototype.listAgreementsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAgreementsNextOperationSpec, callback);
        };
        return TopLevelDomains;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopLevelDomainCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
        urlParameters: [
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopLevelDomain
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listAgreementsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
        urlParameters: [
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "agreementOption",
            mapper: __assign(__assign({}, TopLevelDomainAgreementOption), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TldLegalAgreementCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopLevelDomainCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listAgreementsNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TldLegalAgreementCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CsmOperationCollection: CsmOperationCollection,
        CsmOperationDescription: CsmOperationDescription,
        CsmOperationDescriptionProperties: CsmOperationDescriptionProperties,
        CsmOperationDisplay: CsmOperationDisplay,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        Dimension: Dimension,
        LogSpecification: LogSpecification,
        MetricAvailability: MetricAvailability,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DomainRegistrationProvider. */
    var DomainRegistrationProvider = /** @class */ (function () {
        /**
         * Create a DomainRegistrationProvider.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function DomainRegistrationProvider(client) {
            this.client = client;
        }
        DomainRegistrationProvider.prototype.listOperations = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationsOperationSpec$1, callback);
        };
        DomainRegistrationProvider.prototype.listOperationsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listOperationsNextOperationSpec$1, callback);
        };
        return DomainRegistrationProvider;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$5);
    var listOperationsOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DomainRegistration/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmOperationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listOperationsNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmOperationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateCollection: CertificateCollection,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Certificates. */
    var Certificates = /** @class */ (function () {
        /**
         * Create a Certificates.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function Certificates(client) {
            this.client = client;
        }
        Certificates.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        Certificates.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        Certificates.prototype.get = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOperationSpec$3, callback);
        };
        Certificates.prototype.createOrUpdate = function (resourceGroupName, name, certificateEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                certificateEnvelope: certificateEnvelope,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Certificates.prototype.deleteMethod = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Certificates.prototype.update = function (resourceGroupName, name, certificateEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                certificateEnvelope: certificateEnvelope,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Certificates.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        Certificates.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        return Certificates;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Certificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateEnvelope",
            mapper: __assign(__assign({}, Certificate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Certificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateEnvelope",
            mapper: __assign(__assign({}, CertificatePatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Certificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        DeletedWebAppCollection: DeletedWebAppCollection,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DeletedWebApps. */
    var DeletedWebApps = /** @class */ (function () {
        /**
         * Create a DeletedWebApps.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function DeletedWebApps(client) {
            this.client = client;
        }
        DeletedWebApps.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        DeletedWebApps.prototype.listByLocation = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        DeletedWebApps.prototype.getDeletedWebAppByLocation = function (location, deletedSiteId, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                deletedSiteId: deletedSiteId,
                options: options
            }, getDeletedWebAppByLocationOperationSpec, callback);
        };
        DeletedWebApps.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        DeletedWebApps.prototype.listByLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByLocationNextOperationSpec, callback);
        };
        return DeletedWebApps;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedWebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites",
        urlParameters: [
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedWebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$6
    };
    var getDeletedWebAppByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/deletedSites/{deletedSiteId}",
        urlParameters: [
            location,
            deletedSiteId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedSite
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedWebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByLocationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedWebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DetectorResponseCollection: DetectorResponseCollection,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticAnalysisCollection: DiagnosticAnalysisCollection,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticCategoryCollection: DiagnosticCategoryCollection,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorCollection: DiagnosticDetectorCollection,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Diagnostics. */
    var Diagnostics = /** @class */ (function () {
        /**
         * Create a Diagnostics.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function Diagnostics(client) {
            this.client = client;
        }
        Diagnostics.prototype.listHostingEnvironmentDetectorResponses = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listHostingEnvironmentDetectorResponsesOperationSpec, callback);
        };
        Diagnostics.prototype.getHostingEnvironmentDetectorResponse = function (resourceGroupName, name, detectorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                detectorName: detectorName,
                options: options
            }, getHostingEnvironmentDetectorResponseOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorResponses = function (resourceGroupName, siteName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                options: options
            }, listSiteDetectorResponsesOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteDetectorResponse = function (resourceGroupName, siteName, detectorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                detectorName: detectorName,
                options: options
            }, getSiteDetectorResponseOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDiagnosticCategories = function (resourceGroupName, siteName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                options: options
            }, listSiteDiagnosticCategoriesOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteDiagnosticCategory = function (resourceGroupName, siteName, diagnosticCategory, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                options: options
            }, getSiteDiagnosticCategoryOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteAnalyses = function (resourceGroupName, siteName, diagnosticCategory, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                options: options
            }, listSiteAnalysesOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteAnalysis = function (resourceGroupName, siteName, diagnosticCategory, analysisName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                analysisName: analysisName,
                options: options
            }, getSiteAnalysisOperationSpec, callback);
        };
        Diagnostics.prototype.executeSiteAnalysis = function (resourceGroupName, siteName, diagnosticCategory, analysisName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                analysisName: analysisName,
                options: options
            }, executeSiteAnalysisOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectors = function (resourceGroupName, siteName, diagnosticCategory, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                options: options
            }, listSiteDetectorsOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteDetector = function (resourceGroupName, siteName, diagnosticCategory, detectorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                detectorName: detectorName,
                options: options
            }, getSiteDetectorOperationSpec, callback);
        };
        Diagnostics.prototype.executeSiteDetector = function (resourceGroupName, siteName, detectorName, diagnosticCategory, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                detectorName: detectorName,
                diagnosticCategory: diagnosticCategory,
                options: options
            }, executeSiteDetectorOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorResponsesSlot = function (resourceGroupName, siteName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                slot: slot,
                options: options
            }, listSiteDetectorResponsesSlotOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteDetectorResponseSlot = function (resourceGroupName, siteName, detectorName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                detectorName: detectorName,
                slot: slot,
                options: options
            }, getSiteDetectorResponseSlotOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDiagnosticCategoriesSlot = function (resourceGroupName, siteName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                slot: slot,
                options: options
            }, listSiteDiagnosticCategoriesSlotOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteDiagnosticCategorySlot = function (resourceGroupName, siteName, diagnosticCategory, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                slot: slot,
                options: options
            }, getSiteDiagnosticCategorySlotOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteAnalysesSlot = function (resourceGroupName, siteName, diagnosticCategory, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                slot: slot,
                options: options
            }, listSiteAnalysesSlotOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteAnalysisSlot = function (resourceGroupName, siteName, diagnosticCategory, analysisName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                analysisName: analysisName,
                slot: slot,
                options: options
            }, getSiteAnalysisSlotOperationSpec, callback);
        };
        Diagnostics.prototype.executeSiteAnalysisSlot = function (resourceGroupName, siteName, diagnosticCategory, analysisName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                analysisName: analysisName,
                slot: slot,
                options: options
            }, executeSiteAnalysisSlotOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorsSlot = function (resourceGroupName, siteName, diagnosticCategory, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                slot: slot,
                options: options
            }, listSiteDetectorsSlotOperationSpec, callback);
        };
        Diagnostics.prototype.getSiteDetectorSlot = function (resourceGroupName, siteName, diagnosticCategory, detectorName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                diagnosticCategory: diagnosticCategory,
                detectorName: detectorName,
                slot: slot,
                options: options
            }, getSiteDetectorSlotOperationSpec, callback);
        };
        Diagnostics.prototype.executeSiteDetectorSlot = function (resourceGroupName, siteName, detectorName, diagnosticCategory, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                detectorName: detectorName,
                diagnosticCategory: diagnosticCategory,
                slot: slot,
                options: options
            }, executeSiteDetectorSlotOperationSpec, callback);
        };
        Diagnostics.prototype.listHostingEnvironmentDetectorResponsesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHostingEnvironmentDetectorResponsesNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorResponsesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteDetectorResponsesNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDiagnosticCategoriesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteDiagnosticCategoriesNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteAnalysesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteAnalysesNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteDetectorsNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorResponsesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteDetectorResponsesSlotNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDiagnosticCategoriesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteDiagnosticCategoriesSlotNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteAnalysesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteAnalysesSlotNextOperationSpec, callback);
        };
        Diagnostics.prototype.listSiteDetectorsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteDetectorsSlotNextOperationSpec, callback);
        };
        return Diagnostics;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$8);
    var listHostingEnvironmentDetectorResponsesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponseCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getHostingEnvironmentDetectorResponseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}",
        urlParameters: [
            resourceGroupName,
            name,
            detectorName,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorResponsesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors",
        urlParameters: [
            resourceGroupName,
            siteName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponseCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteDetectorResponseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}",
        urlParameters: [
            resourceGroupName,
            siteName,
            detectorName,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDiagnosticCategoriesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics",
        urlParameters: [
            resourceGroupName,
            siteName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCategoryCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteDiagnosticCategoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCategory
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteAnalysesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticAnalysisCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteAnalysisOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnalysisDefinition
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var executeSiteAnalysisOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticAnalysis
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticDetectorCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteDetectorOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            detectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorDefinition
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var executeSiteDetectorOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
        urlParameters: [
            resourceGroupName,
            siteName,
            detectorName,
            diagnosticCategory,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticDetectorResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorResponsesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors",
        urlParameters: [
            resourceGroupName,
            siteName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponseCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteDetectorResponseSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}",
        urlParameters: [
            resourceGroupName,
            siteName,
            detectorName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDiagnosticCategoriesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics",
        urlParameters: [
            resourceGroupName,
            siteName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCategoryCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteDiagnosticCategorySlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCategory
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteAnalysesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticAnalysisCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteAnalysisSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnalysisDefinition
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var executeSiteAnalysisSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticAnalysis
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticDetectorCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getSiteDetectorSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
        urlParameters: [
            resourceGroupName,
            siteName,
            diagnosticCategory,
            detectorName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorDefinition
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var executeSiteDetectorSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
        urlParameters: [
            resourceGroupName,
            siteName,
            detectorName,
            diagnosticCategory,
            slot,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            timeGrain,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticDetectorResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listHostingEnvironmentDetectorResponsesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponseCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorResponsesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponseCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDiagnosticCategoriesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCategoryCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteAnalysesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticAnalysisCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticDetectorCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorResponsesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DetectorResponseCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDiagnosticCategoriesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticCategoryCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteAnalysesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticAnalysisCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listSiteDetectorsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticDetectorCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackCollection: ApplicationStackCollection,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmOperationCollection: CsmOperationCollection,
        CsmOperationDescription: CsmOperationDescription,
        CsmOperationDescriptionProperties: CsmOperationDescriptionProperties,
        CsmOperationDisplay: CsmOperationDisplay,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Dimension: Dimension,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        LogSpecification: LogSpecification,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MetricAvailability: MetricAvailability,
        MetricSpecification: MetricSpecification,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        ServiceSpecification: ServiceSpecification,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Provider. */
    var Provider = /** @class */ (function () {
        /**
         * Create a Provider.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function Provider(client) {
            this.client = client;
        }
        Provider.prototype.getAvailableStacks = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getAvailableStacksOperationSpec, callback);
        };
        Provider.prototype.listOperations = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationsOperationSpec$2, callback);
        };
        Provider.prototype.getAvailableStacksOnPrem = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getAvailableStacksOnPremOperationSpec, callback);
        };
        Provider.prototype.getAvailableStacksNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getAvailableStacksNextOperationSpec, callback);
        };
        Provider.prototype.listOperationsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listOperationsNextOperationSpec$2, callback);
        };
        Provider.prototype.getAvailableStacksOnPremNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getAvailableStacksOnPremNextOperationSpec, callback);
        };
        return Provider;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$9);
    var getAvailableStacksOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Web/availableStacks",
        queryParameters: [
            osTypeSelected,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationStackCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listOperationsOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Web/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmOperationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getAvailableStacksOnPremOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            osTypeSelected,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationStackCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getAvailableStacksNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            osTypeSelected,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationStackCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listOperationsNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmOperationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getAvailableStacksOnPremNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            osTypeSelected,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationStackCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationCollection: RecommendationCollection,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Recommendations. */
    var Recommendations = /** @class */ (function () {
        /**
         * Create a Recommendations.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function Recommendations(client) {
            this.client = client;
        }
        Recommendations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        Recommendations.prototype.resetAllFilters = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, resetAllFiltersOperationSpec, callback);
        };
        Recommendations.prototype.disableRecommendationForSubscription = function (name, options, callback) {
            return this.client.sendOperationRequest({
                name: name,
                options: options
            }, disableRecommendationForSubscriptionOperationSpec, callback);
        };
        Recommendations.prototype.listHistoryForHostingEnvironment = function (resourceGroupName, hostingEnvironmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostingEnvironmentName: hostingEnvironmentName,
                options: options
            }, listHistoryForHostingEnvironmentOperationSpec, callback);
        };
        Recommendations.prototype.listRecommendedRulesForHostingEnvironment = function (resourceGroupName, hostingEnvironmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostingEnvironmentName: hostingEnvironmentName,
                options: options
            }, listRecommendedRulesForHostingEnvironmentOperationSpec, callback);
        };
        Recommendations.prototype.disableAllForHostingEnvironment = function (resourceGroupName, environmentName, hostingEnvironmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                environmentName: environmentName,
                hostingEnvironmentName: hostingEnvironmentName,
                options: options
            }, disableAllForHostingEnvironmentOperationSpec, callback);
        };
        Recommendations.prototype.resetAllFiltersForHostingEnvironment = function (resourceGroupName, environmentName, hostingEnvironmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                environmentName: environmentName,
                hostingEnvironmentName: hostingEnvironmentName,
                options: options
            }, resetAllFiltersForHostingEnvironmentOperationSpec, callback);
        };
        Recommendations.prototype.getRuleDetailsByHostingEnvironment = function (resourceGroupName, hostingEnvironmentName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostingEnvironmentName: hostingEnvironmentName,
                name: name,
                options: options
            }, getRuleDetailsByHostingEnvironmentOperationSpec, callback);
        };
        Recommendations.prototype.disableRecommendationForHostingEnvironment = function (resourceGroupName, environmentName, name, hostingEnvironmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                environmentName: environmentName,
                name: name,
                hostingEnvironmentName: hostingEnvironmentName,
                options: options
            }, disableRecommendationForHostingEnvironmentOperationSpec, callback);
        };
        Recommendations.prototype.listHistoryForWebApp = function (resourceGroupName, siteName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                options: options
            }, listHistoryForWebAppOperationSpec, callback);
        };
        Recommendations.prototype.listRecommendedRulesForWebApp = function (resourceGroupName, siteName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                options: options
            }, listRecommendedRulesForWebAppOperationSpec, callback);
        };
        Recommendations.prototype.disableAllForWebApp = function (resourceGroupName, siteName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                options: options
            }, disableAllForWebAppOperationSpec, callback);
        };
        Recommendations.prototype.resetAllFiltersForWebApp = function (resourceGroupName, siteName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                options: options
            }, resetAllFiltersForWebAppOperationSpec, callback);
        };
        Recommendations.prototype.getRuleDetailsByWebApp = function (resourceGroupName, siteName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                name: name,
                options: options
            }, getRuleDetailsByWebAppOperationSpec, callback);
        };
        Recommendations.prototype.disableRecommendationForSite = function (resourceGroupName, siteName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                siteName: siteName,
                name: name,
                options: options
            }, disableRecommendationForSiteOperationSpec, callback);
        };
        Recommendations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        Recommendations.prototype.listHistoryForHostingEnvironmentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHistoryForHostingEnvironmentNextOperationSpec, callback);
        };
        Recommendations.prototype.listRecommendedRulesForHostingEnvironmentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listRecommendedRulesForHostingEnvironmentNextOperationSpec, callback);
        };
        Recommendations.prototype.listHistoryForWebAppNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHistoryForWebAppNextOperationSpec, callback);
        };
        Recommendations.prototype.listRecommendedRulesForWebAppNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listRecommendedRulesForWebAppNextOperationSpec, callback);
        };
        return Recommendations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$a);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            featured,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var resetAllFiltersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var disableRecommendationForSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable",
        urlParameters: [
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listHistoryForHostingEnvironmentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory",
        urlParameters: [
            resourceGroupName,
            hostingEnvironmentName,
            subscriptionId
        ],
        queryParameters: [
            expiredOnly,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listRecommendedRulesForHostingEnvironmentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations",
        urlParameters: [
            resourceGroupName,
            hostingEnvironmentName,
            subscriptionId
        ],
        queryParameters: [
            featured,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var disableAllForHostingEnvironmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable",
        urlParameters: [
            resourceGroupName,
            hostingEnvironmentName,
            subscriptionId
        ],
        queryParameters: [
            environmentName,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var resetAllFiltersForHostingEnvironmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset",
        urlParameters: [
            resourceGroupName,
            hostingEnvironmentName,
            subscriptionId
        ],
        queryParameters: [
            environmentName,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getRuleDetailsByHostingEnvironmentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}",
        urlParameters: [
            resourceGroupName,
            hostingEnvironmentName,
            name,
            subscriptionId
        ],
        queryParameters: [
            updateSeen,
            recommendationId,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationRule
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var disableRecommendationForHostingEnvironmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable",
        urlParameters: [
            resourceGroupName,
            name,
            hostingEnvironmentName,
            subscriptionId
        ],
        queryParameters: [
            environmentName,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listHistoryForWebAppOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
        urlParameters: [
            resourceGroupName,
            siteName,
            subscriptionId
        ],
        queryParameters: [
            expiredOnly,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listRecommendedRulesForWebAppOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
        urlParameters: [
            resourceGroupName,
            siteName,
            subscriptionId
        ],
        queryParameters: [
            featured,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var disableAllForWebAppOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable",
        urlParameters: [
            resourceGroupName,
            siteName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var resetAllFiltersForWebAppOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset",
        urlParameters: [
            resourceGroupName,
            siteName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getRuleDetailsByWebAppOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
        urlParameters: [
            resourceGroupName,
            siteName,
            name,
            subscriptionId
        ],
        queryParameters: [
            updateSeen,
            recommendationId,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationRule
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var disableRecommendationForSiteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable",
        urlParameters: [
            resourceGroupName,
            siteName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            featured,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listHistoryForHostingEnvironmentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            expiredOnly,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listRecommendedRulesForHostingEnvironmentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            featured,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listHistoryForWebAppNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            expiredOnly,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listRecommendedRulesForWebAppNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            featured,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendationCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupItemCollection: BackupItemCollection,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        CloudError: CloudError,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        ContinuousWebJobCollection: ContinuousWebJobCollection,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmCopySlotEntity: CsmCopySlotEntity,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CsmPublishingProfileOptions: CsmPublishingProfileOptions,
        CsmSlotEntity: CsmSlotEntity,
        CsmUsageQuota: CsmUsageQuota,
        CsmUsageQuotaCollection: CsmUsageQuotaCollection,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DeploymentCollection: DeploymentCollection,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        FunctionEnvelopeCollection: FunctionEnvelopeCollection,
        FunctionSecrets: FunctionSecrets,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostKeys: HostKeys,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameBindingCollection: HostNameBindingCollection,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentifierCollection: IdentifierCollection,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        KeyInfo: KeyInfo,
        LocalizableString: LocalizableString,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        NetworkTrace: NetworkTrace,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        Operation: Operation,
        PerfMonCounterCollection: PerfMonCounterCollection,
        PerfMonResponse: PerfMonResponse,
        PerfMonSample: PerfMonSample,
        PerfMonSet: PerfMonSet,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkResourcesWrapper: PrivateLinkResourcesWrapper,
        ProcessInfo: ProcessInfo,
        ProcessInfoCollection: ProcessInfoCollection,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessModuleInfoCollection: ProcessModuleInfoCollection,
        ProcessThreadInfo: ProcessThreadInfo,
        ProcessThreadInfoCollection: ProcessThreadInfoCollection,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PublicCertificateCollection: PublicCertificateCollection,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteCloneability: SiteCloneability,
        SiteCloneabilityCriterion: SiteCloneabilityCriterion,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigResourceCollection: SiteConfigResourceCollection,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteConfigurationSnapshotInfoCollection: SiteConfigurationSnapshotInfoCollection,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteExtensionInfoCollection: SiteExtensionInfoCollection,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotDifferenceCollection: SlotDifferenceCollection,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotCollection: SnapshotCollection,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobHistoryCollection: TriggeredJobHistoryCollection,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        TriggeredWebJobCollection: TriggeredWebJobCollection,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebAppCollection: WebAppCollection,
        WebAppInstanceStatusCollection: WebAppInstanceStatusCollection,
        WebJob: WebJob,
        WebJobCollection: WebJobCollection,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WebApps. */
    var WebApps = /** @class */ (function () {
        /**
         * Create a WebApps.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function WebApps(client) {
            this.client = client;
        }
        WebApps.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$6, callback);
        };
        WebApps.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        WebApps.prototype.get = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
         * an existing app.
         * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
         * existing app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Unique name of the app to create or update. To create or update a deployment slot,
         * use the {slot} parameter.
         * @param siteEnvelope A JSON representation of the app properties. See example.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateOrUpdateResponse>
         */
        WebApps.prototype.createOrUpdate = function (resourceGroupName, name, siteEnvelope, options) {
            return this.beginCreateOrUpdate(resourceGroupName, name, siteEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteMethod = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        WebApps.prototype.update = function (resourceGroupName, name, siteEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteEnvelope: siteEnvelope,
                options: options
            }, updateOperationSpec$3, callback);
        };
        WebApps.prototype.analyzeCustomHostname = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, analyzeCustomHostnameOperationSpec, callback);
        };
        WebApps.prototype.applySlotConfigToProduction = function (resourceGroupName, name, slotSwapEntity, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotSwapEntity: slotSwapEntity,
                options: options
            }, applySlotConfigToProductionOperationSpec, callback);
        };
        WebApps.prototype.backup = function (resourceGroupName, name, request, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                options: options
            }, backupOperationSpec, callback);
        };
        WebApps.prototype.listBackups = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listBackupsOperationSpec, callback);
        };
        WebApps.prototype.getBackupStatus = function (resourceGroupName, name, backupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                options: options
            }, getBackupStatusOperationSpec, callback);
        };
        WebApps.prototype.deleteBackup = function (resourceGroupName, name, backupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                options: options
            }, deleteBackupOperationSpec, callback);
        };
        WebApps.prototype.listBackupStatusSecrets = function (resourceGroupName, name, backupId, request, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                request: request,
                options: options
            }, listBackupStatusSecretsOperationSpec, callback);
        };
        /**
         * Description for Restores a specific backup to another app (or deployment slot, if specified).
         * @summary Restores a specific backup to another app (or deployment slot, if specified).
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param backupId ID of the backup.
         * @param request Information on restore request .
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restore = function (resourceGroupName, name, backupId, request, options) {
            return this.beginRestore(resourceGroupName, name, backupId, request, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getBasicPublishingCredentialsPolicies = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getBasicPublishingCredentialsPoliciesOperationSpec, callback);
        };
        WebApps.prototype.getFtpAllowed = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getFtpAllowedOperationSpec, callback);
        };
        WebApps.prototype.updateFtpAllowed = function (resourceGroupName, name, csmPublishingAccessPoliciesEntity, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                csmPublishingAccessPoliciesEntity: csmPublishingAccessPoliciesEntity,
                options: options
            }, updateFtpAllowedOperationSpec, callback);
        };
        WebApps.prototype.getScmAllowed = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getScmAllowedOperationSpec, callback);
        };
        WebApps.prototype.updateScmAllowed = function (resourceGroupName, name, csmPublishingAccessPoliciesEntity, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                csmPublishingAccessPoliciesEntity: csmPublishingAccessPoliciesEntity,
                options: options
            }, updateScmAllowedOperationSpec, callback);
        };
        WebApps.prototype.listConfigurations = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listConfigurationsOperationSpec, callback);
        };
        WebApps.prototype.updateApplicationSettings = function (resourceGroupName, name, appSettings, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                appSettings: appSettings,
                options: options
            }, updateApplicationSettingsOperationSpec, callback);
        };
        WebApps.prototype.listApplicationSettings = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listApplicationSettingsOperationSpec, callback);
        };
        WebApps.prototype.updateAuthSettings = function (resourceGroupName, name, siteAuthSettings, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteAuthSettings: siteAuthSettings,
                options: options
            }, updateAuthSettingsOperationSpec, callback);
        };
        WebApps.prototype.getAuthSettings = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getAuthSettingsOperationSpec, callback);
        };
        WebApps.prototype.updateAuthSettingsV2 = function (resourceGroupName, name, siteAuthSettingsV2, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteAuthSettingsV2: siteAuthSettingsV2,
                options: options
            }, updateAuthSettingsV2OperationSpec, callback);
        };
        WebApps.prototype.getAuthSettingsV2 = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getAuthSettingsV2OperationSpec, callback);
        };
        WebApps.prototype.updateAzureStorageAccounts = function (resourceGroupName, name, azureStorageAccounts, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                azureStorageAccounts: azureStorageAccounts,
                options: options
            }, updateAzureStorageAccountsOperationSpec, callback);
        };
        WebApps.prototype.listAzureStorageAccounts = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listAzureStorageAccountsOperationSpec, callback);
        };
        WebApps.prototype.updateBackupConfiguration = function (resourceGroupName, name, request, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                options: options
            }, updateBackupConfigurationOperationSpec, callback);
        };
        WebApps.prototype.deleteBackupConfiguration = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteBackupConfigurationOperationSpec, callback);
        };
        WebApps.prototype.getBackupConfiguration = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getBackupConfigurationOperationSpec, callback);
        };
        WebApps.prototype.updateConnectionStrings = function (resourceGroupName, name, connectionStrings, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                connectionStrings: connectionStrings,
                options: options
            }, updateConnectionStringsOperationSpec, callback);
        };
        WebApps.prototype.listConnectionStrings = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listConnectionStringsOperationSpec, callback);
        };
        WebApps.prototype.getDiagnosticLogsConfiguration = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getDiagnosticLogsConfigurationOperationSpec, callback);
        };
        WebApps.prototype.updateDiagnosticLogsConfig = function (resourceGroupName, name, siteLogsConfig, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteLogsConfig: siteLogsConfig,
                options: options
            }, updateDiagnosticLogsConfigOperationSpec, callback);
        };
        WebApps.prototype.updateMetadata = function (resourceGroupName, name, metadata, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                metadata: metadata,
                options: options
            }, updateMetadataOperationSpec, callback);
        };
        WebApps.prototype.listMetadata = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listMetadataOperationSpec, callback);
        };
        /**
         * Description for Gets the Git/FTP publishing credentials of an app.
         * @summary Gets the Git/FTP publishing credentials of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsListPublishingCredentialsResponse>
         */
        WebApps.prototype.listPublishingCredentials = function (resourceGroupName, name, options) {
            return this.beginListPublishingCredentials(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.updateSitePushSettings = function (resourceGroupName, name, pushSettings, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                pushSettings: pushSettings,
                options: options
            }, updateSitePushSettingsOperationSpec, callback);
        };
        WebApps.prototype.listSitePushSettings = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSitePushSettingsOperationSpec, callback);
        };
        WebApps.prototype.listSlotConfigurationNames = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSlotConfigurationNamesOperationSpec, callback);
        };
        WebApps.prototype.updateSlotConfigurationNames = function (resourceGroupName, name, slotConfigNames, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotConfigNames: slotConfigNames,
                options: options
            }, updateSlotConfigurationNamesOperationSpec, callback);
        };
        WebApps.prototype.getConfiguration = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getConfigurationOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateConfiguration = function (resourceGroupName, name, siteConfig, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteConfig: siteConfig,
                options: options
            }, createOrUpdateConfigurationOperationSpec, callback);
        };
        WebApps.prototype.updateConfiguration = function (resourceGroupName, name, siteConfig, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteConfig: siteConfig,
                options: options
            }, updateConfigurationOperationSpec, callback);
        };
        WebApps.prototype.listConfigurationSnapshotInfo = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listConfigurationSnapshotInfoOperationSpec, callback);
        };
        WebApps.prototype.getConfigurationSnapshot = function (resourceGroupName, name, snapshotId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                snapshotId: snapshotId,
                options: options
            }, getConfigurationSnapshotOperationSpec, callback);
        };
        WebApps.prototype.recoverSiteConfigurationSnapshot = function (resourceGroupName, name, snapshotId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                snapshotId: snapshotId,
                options: options
            }, recoverSiteConfigurationSnapshotOperationSpec, callback);
        };
        WebApps.prototype.getWebSiteContainerLogs = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getWebSiteContainerLogsOperationSpec, callback);
        };
        WebApps.prototype.getContainerLogsZip = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getContainerLogsZipOperationSpec, callback);
        };
        WebApps.prototype.listContinuousWebJobs = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listContinuousWebJobsOperationSpec, callback);
        };
        WebApps.prototype.getContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, getContinuousWebJobOperationSpec, callback);
        };
        WebApps.prototype.deleteContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, deleteContinuousWebJobOperationSpec, callback);
        };
        WebApps.prototype.startContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, startContinuousWebJobOperationSpec, callback);
        };
        WebApps.prototype.stopContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, stopContinuousWebJobOperationSpec, callback);
        };
        WebApps.prototype.listDeployments = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listDeploymentsOperationSpec, callback);
        };
        WebApps.prototype.getDeployment = function (resourceGroupName, name, id, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                options: options
            }, getDeploymentOperationSpec, callback);
        };
        WebApps.prototype.createDeployment = function (resourceGroupName, name, id, deployment, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                deployment: deployment,
                options: options
            }, createDeploymentOperationSpec, callback);
        };
        WebApps.prototype.deleteDeployment = function (resourceGroupName, name, id, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                options: options
            }, deleteDeploymentOperationSpec, callback);
        };
        WebApps.prototype.listDeploymentLog = function (resourceGroupName, name, id, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                options: options
            }, listDeploymentLogOperationSpec, callback);
        };
        WebApps.prototype.discoverBackup = function (resourceGroupName, name, request, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                options: options
            }, discoverBackupOperationSpec, callback);
        };
        WebApps.prototype.listDomainOwnershipIdentifiers = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listDomainOwnershipIdentifiersOperationSpec, callback);
        };
        WebApps.prototype.getDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                options: options
            }, getDomainOwnershipIdentifierOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                domainOwnershipIdentifier: domainOwnershipIdentifier,
                options: options
            }, createOrUpdateDomainOwnershipIdentifierOperationSpec, callback);
        };
        WebApps.prototype.deleteDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                options: options
            }, deleteDomainOwnershipIdentifierOperationSpec, callback);
        };
        WebApps.prototype.updateDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                domainOwnershipIdentifier: domainOwnershipIdentifier,
                options: options
            }, updateDomainOwnershipIdentifierOperationSpec, callback);
        };
        WebApps.prototype.getMSDeployStatus = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getMSDeployStatusOperationSpec, callback);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateMSDeployOperationResponse>
         */
        WebApps.prototype.createMSDeployOperation = function (resourceGroupName, name, mSDeploy, options) {
            return this.beginCreateMSDeployOperation(resourceGroupName, name, mSDeploy, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getMSDeployLog = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getMSDeployLogOperationSpec, callback);
        };
        WebApps.prototype.listFunctions = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listFunctionsOperationSpec, callback);
        };
        WebApps.prototype.getFunctionsAdminToken = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getFunctionsAdminTokenOperationSpec, callback);
        };
        WebApps.prototype.getFunction = function (resourceGroupName, name, functionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                options: options
            }, getFunctionOperationSpec, callback);
        };
        /**
         * Description for Create function for web site, or a deployment slot.
         * @summary Create function for web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param functionName Function name.
         * @param functionEnvelope Function details.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateFunctionResponse>
         */
        WebApps.prototype.createFunction = function (resourceGroupName, name, functionName, functionEnvelope, options) {
            return this.beginCreateFunction(resourceGroupName, name, functionName, functionEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteFunction = function (resourceGroupName, name, functionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                options: options
            }, deleteFunctionOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateFunctionSecret = function (resourceGroupName, name, functionName, keyName, key, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                keyName: keyName,
                key: key,
                options: options
            }, createOrUpdateFunctionSecretOperationSpec, callback);
        };
        WebApps.prototype.deleteFunctionSecret = function (resourceGroupName, name, functionName, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                keyName: keyName,
                options: options
            }, deleteFunctionSecretOperationSpec, callback);
        };
        WebApps.prototype.listFunctionKeys = function (resourceGroupName, name, functionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                options: options
            }, listFunctionKeysOperationSpec, callback);
        };
        WebApps.prototype.listFunctionSecrets = function (resourceGroupName, name, functionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                options: options
            }, listFunctionSecretsOperationSpec, callback);
        };
        WebApps.prototype.listHostKeys = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listHostKeysOperationSpec, callback);
        };
        WebApps.prototype.listSyncStatus = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSyncStatusOperationSpec, callback);
        };
        WebApps.prototype.syncFunctions = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, syncFunctionsOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateHostSecret = function (resourceGroupName, name, keyType, keyName, key, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                keyType: keyType,
                keyName: keyName,
                key: key,
                options: options
            }, createOrUpdateHostSecretOperationSpec, callback);
        };
        WebApps.prototype.deleteHostSecret = function (resourceGroupName, name, keyType, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                keyType: keyType,
                keyName: keyName,
                options: options
            }, deleteHostSecretOperationSpec, callback);
        };
        WebApps.prototype.listHostNameBindings = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listHostNameBindingsOperationSpec, callback);
        };
        WebApps.prototype.getHostNameBinding = function (resourceGroupName, name, hostName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                hostName: hostName,
                options: options
            }, getHostNameBindingOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateHostNameBinding = function (resourceGroupName, name, hostName, hostNameBinding, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                hostName: hostName,
                hostNameBinding: hostNameBinding,
                options: options
            }, createOrUpdateHostNameBindingOperationSpec, callback);
        };
        WebApps.prototype.deleteHostNameBinding = function (resourceGroupName, name, hostName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                hostName: hostName,
                options: options
            }, deleteHostNameBindingOperationSpec, callback);
        };
        WebApps.prototype.getHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                options: options
            }, getHybridConnectionOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateHybridConnection = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, createOrUpdateHybridConnectionOperationSpec, callback);
        };
        WebApps.prototype.deleteHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                options: options
            }, deleteHybridConnectionOperationSpec, callback);
        };
        WebApps.prototype.updateHybridConnection = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, updateHybridConnectionOperationSpec, callback);
        };
        WebApps.prototype.listHybridConnections = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listHybridConnectionsOperationSpec, callback);
        };
        WebApps.prototype.listRelayServiceConnections = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listRelayServiceConnectionsOperationSpec, callback);
        };
        WebApps.prototype.getRelayServiceConnection = function (resourceGroupName, name, entityName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                options: options
            }, getRelayServiceConnectionOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateRelayServiceConnection = function (resourceGroupName, name, entityName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, createOrUpdateRelayServiceConnectionOperationSpec, callback);
        };
        WebApps.prototype.deleteRelayServiceConnection = function (resourceGroupName, name, entityName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                options: options
            }, deleteRelayServiceConnectionOperationSpec, callback);
        };
        WebApps.prototype.updateRelayServiceConnection = function (resourceGroupName, name, entityName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, updateRelayServiceConnectionOperationSpec, callback);
        };
        WebApps.prototype.listInstanceIdentifiers = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listInstanceIdentifiersOperationSpec, callback);
        };
        WebApps.prototype.getInstanceInfo = function (resourceGroupName, name, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instanceId: instanceId,
                options: options
            }, getInstanceInfoOperationSpec, callback);
        };
        WebApps.prototype.getInstanceMsDeployStatus = function (resourceGroupName, name, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instanceId: instanceId,
                options: options
            }, getInstanceMsDeployStatusOperationSpec, callback);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param instanceId ID of web app instance.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse>
         */
        WebApps.prototype.createInstanceMSDeployOperation = function (resourceGroupName, name, instanceId, mSDeploy, options) {
            return this.beginCreateInstanceMSDeployOperation(resourceGroupName, name, instanceId, mSDeploy, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getInstanceMSDeployLog = function (resourceGroupName, name, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instanceId: instanceId,
                options: options
            }, getInstanceMSDeployLogOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcesses = function (resourceGroupName, name, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instanceId: instanceId,
                options: options
            }, listInstanceProcessesOperationSpec, callback);
        };
        WebApps.prototype.getInstanceProcess = function (resourceGroupName, name, processId, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                instanceId: instanceId,
                options: options
            }, getInstanceProcessOperationSpec, callback);
        };
        WebApps.prototype.deleteInstanceProcess = function (resourceGroupName, name, processId, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                instanceId: instanceId,
                options: options
            }, deleteInstanceProcessOperationSpec, callback);
        };
        WebApps.prototype.getInstanceProcessDump = function (resourceGroupName, name, processId, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                instanceId: instanceId,
                options: options
            }, getInstanceProcessDumpOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessModules = function (resourceGroupName, name, processId, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                instanceId: instanceId,
                options: options
            }, listInstanceProcessModulesOperationSpec, callback);
        };
        WebApps.prototype.getInstanceProcessModule = function (resourceGroupName, name, processId, baseAddress, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                baseAddress: baseAddress,
                instanceId: instanceId,
                options: options
            }, getInstanceProcessModuleOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessThreads = function (resourceGroupName, name, processId, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                instanceId: instanceId,
                options: options
            }, listInstanceProcessThreadsOperationSpec, callback);
        };
        WebApps.prototype.isCloneable = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, isCloneableOperationSpec, callback);
        };
        WebApps.prototype.listSiteBackups = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSiteBackupsOperationSpec, callback);
        };
        WebApps.prototype.listSyncFunctionTriggers = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSyncFunctionTriggersOperationSpec, callback);
        };
        /**
         * Description for Restores a web app.
         * @summary Restores a web app.
         * @param subscriptionName Azure subscription.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param migrationOptions Migration migrationOptions.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsMigrateStorageResponse>
         */
        WebApps.prototype.migrateStorage = function (subscriptionName, resourceGroupName, name, migrationOptions, options) {
            return this.beginMigrateStorage(subscriptionName, resourceGroupName, name, migrationOptions, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Migrates a local (in-app) MySql database to a remote MySql database.
         * @summary Migrates a local (in-app) MySql database to a remote MySql database.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param migrationRequestEnvelope MySql migration options.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsMigrateMySqlResponse>
         */
        WebApps.prototype.migrateMySql = function (resourceGroupName, name, migrationRequestEnvelope, options) {
            return this.beginMigrateMySql(resourceGroupName, name, migrationRequestEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getMigrateMySqlStatus = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getMigrateMySqlStatusOperationSpec, callback);
        };
        WebApps.prototype.getSwiftVirtualNetworkConnection = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getSwiftVirtualNetworkConnectionOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateSwiftVirtualNetworkConnection = function (resourceGroupName, name, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, createOrUpdateSwiftVirtualNetworkConnectionOperationSpec, callback);
        };
        WebApps.prototype.deleteSwiftVirtualNetwork = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteSwiftVirtualNetworkOperationSpec, callback);
        };
        WebApps.prototype.updateSwiftVirtualNetworkConnection = function (resourceGroupName, name, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, updateSwiftVirtualNetworkConnectionOperationSpec, callback);
        };
        WebApps.prototype.listNetworkFeatures = function (resourceGroupName, name, view, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                view: view,
                options: options
            }, listNetworkFeaturesOperationSpec, callback);
        };
        WebApps.prototype.getNetworkTraceOperation = function (resourceGroupName, name, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                options: options
            }, getNetworkTraceOperationOperationSpec, callback);
        };
        WebApps.prototype.startWebSiteNetworkTrace = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, startWebSiteNetworkTraceOperationSpec, callback);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse>
         */
        WebApps.prototype.startWebSiteNetworkTraceOperation = function (resourceGroupName, name, options) {
            return this.beginStartWebSiteNetworkTraceOperation(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.stopWebSiteNetworkTrace = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, stopWebSiteNetworkTraceOperationSpec, callback);
        };
        WebApps.prototype.getNetworkTraces = function (resourceGroupName, name, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                options: options
            }, getNetworkTracesOperationSpec, callback);
        };
        WebApps.prototype.getNetworkTraceOperationV2 = function (resourceGroupName, name, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                options: options
            }, getNetworkTraceOperationV2OperationSpec, callback);
        };
        WebApps.prototype.getNetworkTracesV2 = function (resourceGroupName, name, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                options: options
            }, getNetworkTracesV2OperationSpec, callback);
        };
        WebApps.prototype.generateNewSitePublishingPassword = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, generateNewSitePublishingPasswordOperationSpec, callback);
        };
        WebApps.prototype.listPerfMonCounters = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listPerfMonCountersOperationSpec, callback);
        };
        WebApps.prototype.getSitePhpErrorLogFlag = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getSitePhpErrorLogFlagOperationSpec, callback);
        };
        WebApps.prototype.listPremierAddOns = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listPremierAddOnsOperationSpec, callback);
        };
        WebApps.prototype.getPremierAddOn = function (resourceGroupName, name, premierAddOnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                options: options
            }, getPremierAddOnOperationSpec, callback);
        };
        WebApps.prototype.addPremierAddOn = function (resourceGroupName, name, premierAddOnName, premierAddOn, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                premierAddOn: premierAddOn,
                options: options
            }, addPremierAddOnOperationSpec, callback);
        };
        WebApps.prototype.deletePremierAddOn = function (resourceGroupName, name, premierAddOnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                options: options
            }, deletePremierAddOnOperationSpec, callback);
        };
        WebApps.prototype.updatePremierAddOn = function (resourceGroupName, name, premierAddOnName, premierAddOn, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                premierAddOn: premierAddOn,
                options: options
            }, updatePremierAddOnOperationSpec, callback);
        };
        WebApps.prototype.getPrivateAccess = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getPrivateAccessOperationSpec, callback);
        };
        WebApps.prototype.putPrivateAccessVnet = function (resourceGroupName, name, access, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                access: access,
                options: options
            }, putPrivateAccessVnetOperationSpec, callback);
        };
        WebApps.prototype.listProcesses = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listProcessesOperationSpec, callback);
        };
        WebApps.prototype.getProcess = function (resourceGroupName, name, processId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                options: options
            }, getProcessOperationSpec, callback);
        };
        WebApps.prototype.deleteProcess = function (resourceGroupName, name, processId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                options: options
            }, deleteProcessOperationSpec, callback);
        };
        WebApps.prototype.getProcessDump = function (resourceGroupName, name, processId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                options: options
            }, getProcessDumpOperationSpec, callback);
        };
        WebApps.prototype.listProcessModules = function (resourceGroupName, name, processId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                options: options
            }, listProcessModulesOperationSpec, callback);
        };
        WebApps.prototype.getProcessModule = function (resourceGroupName, name, processId, baseAddress, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                baseAddress: baseAddress,
                options: options
            }, getProcessModuleOperationSpec, callback);
        };
        WebApps.prototype.listProcessThreads = function (resourceGroupName, name, processId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                options: options
            }, listProcessThreadsOperationSpec, callback);
        };
        WebApps.prototype.listPublicCertificates = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listPublicCertificatesOperationSpec, callback);
        };
        WebApps.prototype.getPublicCertificate = function (resourceGroupName, name, publicCertificateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                publicCertificateName: publicCertificateName,
                options: options
            }, getPublicCertificateOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdatePublicCertificate = function (resourceGroupName, name, publicCertificateName, publicCertificate, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                publicCertificateName: publicCertificateName,
                publicCertificate: publicCertificate,
                options: options
            }, createOrUpdatePublicCertificateOperationSpec, callback);
        };
        WebApps.prototype.deletePublicCertificate = function (resourceGroupName, name, publicCertificateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                publicCertificateName: publicCertificateName,
                options: options
            }, deletePublicCertificateOperationSpec, callback);
        };
        WebApps.prototype.listPublishingProfileXmlWithSecrets = function (resourceGroupName, name, publishingProfileOptions, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                publishingProfileOptions: publishingProfileOptions,
                options: options
            }, listPublishingProfileXmlWithSecretsOperationSpec, callback);
        };
        WebApps.prototype.resetProductionSlotConfig = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, resetProductionSlotConfigOperationSpec, callback);
        };
        WebApps.prototype.restart = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, restartOperationSpec, callback);
        };
        /**
         * Description for Restores an app from a backup blob in Azure Storage.
         * @summary Restores an app from a backup blob in Azure Storage.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param request Information on restore request .
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreFromBackupBlob = function (resourceGroupName, name, request, options) {
            return this.beginRestoreFromBackupBlob(resourceGroupName, name, request, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Restores a deleted web app to this web app.
         * @summary Restores a deleted web app to this web app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Deleted web app restore information.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreFromDeletedApp = function (resourceGroupName, name, restoreRequest, options) {
            return this.beginRestoreFromDeletedApp(resourceGroupName, name, restoreRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Restores a web app from a snapshot.
         * @summary Restores a web app from a snapshot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
         * GetDeletedSites or GetSiteSnapshots API.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreSnapshot = function (resourceGroupName, name, restoreRequest, options) {
            return this.beginRestoreSnapshot(resourceGroupName, name, restoreRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listSiteExtensions = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSiteExtensionsOperationSpec, callback);
        };
        WebApps.prototype.getSiteExtension = function (resourceGroupName, name, siteExtensionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteExtensionId: siteExtensionId,
                options: options
            }, getSiteExtensionOperationSpec, callback);
        };
        /**
         * Description for Install site extension on a web site, or a deployment slot.
         * @summary Install site extension on a web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param siteExtensionId Site extension name.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsInstallSiteExtensionResponse>
         */
        WebApps.prototype.installSiteExtension = function (resourceGroupName, name, siteExtensionId, options) {
            return this.beginInstallSiteExtension(resourceGroupName, name, siteExtensionId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteSiteExtension = function (resourceGroupName, name, siteExtensionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteExtensionId: siteExtensionId,
                options: options
            }, deleteSiteExtensionOperationSpec, callback);
        };
        /**
         * Description for Copies a deployment slot to another deployment slot of an app.
         * @summary Copies a deployment slot to another deployment slot of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param copySlotEntity JSON object that contains the target slot name and site config properties
         * to override the source slot config. See example.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.copyProductionSlot = function (resourceGroupName, name, copySlotEntity, options) {
            return this.beginCopyProductionSlot(resourceGroupName, name, copySlotEntity, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listSlots = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSlotsOperationSpec, callback);
        };
        WebApps.prototype.getSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getSlotOperationSpec, callback);
        };
        /**
         * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
         * an existing app.
         * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
         * existing app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Unique name of the app to create or update. To create or update a deployment slot,
         * use the {slot} parameter.
         * @param siteEnvelope A JSON representation of the app properties. See example.
         * @param slot Name of the deployment slot to create or update. By default, this API attempts to
         * create or modify the production slot.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateOrUpdateSlotResponse>
         */
        WebApps.prototype.createOrUpdateSlot = function (resourceGroupName, name, siteEnvelope, slot, options) {
            return this.beginCreateOrUpdateSlot(resourceGroupName, name, siteEnvelope, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, deleteSlotOperationSpec, callback);
        };
        WebApps.prototype.updateSlot = function (resourceGroupName, name, siteEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteEnvelope: siteEnvelope,
                slot: slot,
                options: options
            }, updateSlotOperationSpec, callback);
        };
        WebApps.prototype.analyzeCustomHostnameSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, analyzeCustomHostnameSlotOperationSpec, callback);
        };
        WebApps.prototype.applySlotConfigurationSlot = function (resourceGroupName, name, slotSwapEntity, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotSwapEntity: slotSwapEntity,
                slot: slot,
                options: options
            }, applySlotConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.backupSlot = function (resourceGroupName, name, request, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                slot: slot,
                options: options
            }, backupSlotOperationSpec, callback);
        };
        WebApps.prototype.listBackupsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listBackupsSlotOperationSpec, callback);
        };
        WebApps.prototype.getBackupStatusSlot = function (resourceGroupName, name, backupId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                slot: slot,
                options: options
            }, getBackupStatusSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteBackupSlot = function (resourceGroupName, name, backupId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                slot: slot,
                options: options
            }, deleteBackupSlotOperationSpec, callback);
        };
        WebApps.prototype.listBackupStatusSecretsSlot = function (resourceGroupName, name, backupId, request, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                request: request,
                slot: slot,
                options: options
            }, listBackupStatusSecretsSlotOperationSpec, callback);
        };
        /**
         * Description for Restores a specific backup to another app (or deployment slot, if specified).
         * @summary Restores a specific backup to another app (or deployment slot, if specified).
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param backupId ID of the backup.
         * @param request Information on restore request .
         * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
         * backup of the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreSlot = function (resourceGroupName, name, backupId, request, slot, options) {
            return this.beginRestoreSlot(resourceGroupName, name, backupId, request, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listConfigurationsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listConfigurationsSlotOperationSpec, callback);
        };
        WebApps.prototype.updateApplicationSettingsSlot = function (resourceGroupName, name, appSettings, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                appSettings: appSettings,
                slot: slot,
                options: options
            }, updateApplicationSettingsSlotOperationSpec, callback);
        };
        WebApps.prototype.listApplicationSettingsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listApplicationSettingsSlotOperationSpec, callback);
        };
        WebApps.prototype.updateAuthSettingsSlot = function (resourceGroupName, name, siteAuthSettings, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteAuthSettings: siteAuthSettings,
                slot: slot,
                options: options
            }, updateAuthSettingsSlotOperationSpec, callback);
        };
        WebApps.prototype.getAuthSettingsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getAuthSettingsSlotOperationSpec, callback);
        };
        WebApps.prototype.updateAuthSettingsV2Slot = function (resourceGroupName, name, siteAuthSettingsV2, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteAuthSettingsV2: siteAuthSettingsV2,
                slot: slot,
                options: options
            }, updateAuthSettingsV2SlotOperationSpec, callback);
        };
        WebApps.prototype.getAuthSettingsV2Slot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getAuthSettingsV2SlotOperationSpec, callback);
        };
        WebApps.prototype.updateAzureStorageAccountsSlot = function (resourceGroupName, name, azureStorageAccounts, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                azureStorageAccounts: azureStorageAccounts,
                slot: slot,
                options: options
            }, updateAzureStorageAccountsSlotOperationSpec, callback);
        };
        WebApps.prototype.listAzureStorageAccountsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listAzureStorageAccountsSlotOperationSpec, callback);
        };
        WebApps.prototype.updateBackupConfigurationSlot = function (resourceGroupName, name, request, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                slot: slot,
                options: options
            }, updateBackupConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteBackupConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, deleteBackupConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.getBackupConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getBackupConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.updateConnectionStringsSlot = function (resourceGroupName, name, connectionStrings, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                connectionStrings: connectionStrings,
                slot: slot,
                options: options
            }, updateConnectionStringsSlotOperationSpec, callback);
        };
        WebApps.prototype.listConnectionStringsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listConnectionStringsSlotOperationSpec, callback);
        };
        WebApps.prototype.getDiagnosticLogsConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getDiagnosticLogsConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.updateDiagnosticLogsConfigSlot = function (resourceGroupName, name, siteLogsConfig, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteLogsConfig: siteLogsConfig,
                slot: slot,
                options: options
            }, updateDiagnosticLogsConfigSlotOperationSpec, callback);
        };
        WebApps.prototype.updateMetadataSlot = function (resourceGroupName, name, metadata, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                metadata: metadata,
                slot: slot,
                options: options
            }, updateMetadataSlotOperationSpec, callback);
        };
        WebApps.prototype.listMetadataSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listMetadataSlotOperationSpec, callback);
        };
        /**
         * Description for Gets the Git/FTP publishing credentials of an app.
         * @summary Gets the Git/FTP publishing credentials of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
         * publishing credentials for the production slot.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsListPublishingCredentialsSlotResponse>
         */
        WebApps.prototype.listPublishingCredentialsSlot = function (resourceGroupName, name, slot, options) {
            return this.beginListPublishingCredentialsSlot(resourceGroupName, name, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.updateSitePushSettingsSlot = function (resourceGroupName, name, pushSettings, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                pushSettings: pushSettings,
                slot: slot,
                options: options
            }, updateSitePushSettingsSlotOperationSpec, callback);
        };
        WebApps.prototype.listSitePushSettingsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSitePushSettingsSlotOperationSpec, callback);
        };
        WebApps.prototype.getConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateConfigurationSlot = function (resourceGroupName, name, siteConfig, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteConfig: siteConfig,
                slot: slot,
                options: options
            }, createOrUpdateConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.updateConfigurationSlot = function (resourceGroupName, name, siteConfig, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteConfig: siteConfig,
                slot: slot,
                options: options
            }, updateConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.listConfigurationSnapshotInfoSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listConfigurationSnapshotInfoSlotOperationSpec, callback);
        };
        WebApps.prototype.getConfigurationSnapshotSlot = function (resourceGroupName, name, snapshotId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                snapshotId: snapshotId,
                slot: slot,
                options: options
            }, getConfigurationSnapshotSlotOperationSpec, callback);
        };
        WebApps.prototype.recoverSiteConfigurationSnapshotSlot = function (resourceGroupName, name, snapshotId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                snapshotId: snapshotId,
                slot: slot,
                options: options
            }, recoverSiteConfigurationSnapshotSlotOperationSpec, callback);
        };
        WebApps.prototype.getWebSiteContainerLogsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getWebSiteContainerLogsSlotOperationSpec, callback);
        };
        WebApps.prototype.getContainerLogsZipSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getContainerLogsZipSlotOperationSpec, callback);
        };
        WebApps.prototype.listContinuousWebJobsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listContinuousWebJobsSlotOperationSpec, callback);
        };
        WebApps.prototype.getContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, getContinuousWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, deleteContinuousWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.startContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, startContinuousWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.stopContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, stopContinuousWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.listDeploymentsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listDeploymentsSlotOperationSpec, callback);
        };
        WebApps.prototype.getDeploymentSlot = function (resourceGroupName, name, id, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                slot: slot,
                options: options
            }, getDeploymentSlotOperationSpec, callback);
        };
        WebApps.prototype.createDeploymentSlot = function (resourceGroupName, name, id, slot, deployment, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                slot: slot,
                deployment: deployment,
                options: options
            }, createDeploymentSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteDeploymentSlot = function (resourceGroupName, name, id, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                slot: slot,
                options: options
            }, deleteDeploymentSlotOperationSpec, callback);
        };
        WebApps.prototype.listDeploymentLogSlot = function (resourceGroupName, name, id, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                id: id,
                slot: slot,
                options: options
            }, listDeploymentLogSlotOperationSpec, callback);
        };
        WebApps.prototype.discoverBackupSlot = function (resourceGroupName, name, request, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                slot: slot,
                options: options
            }, discoverBackupSlotOperationSpec, callback);
        };
        WebApps.prototype.listDomainOwnershipIdentifiersSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listDomainOwnershipIdentifiersSlotOperationSpec, callback);
        };
        WebApps.prototype.getDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                slot: slot,
                options: options
            }, getDomainOwnershipIdentifierSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                domainOwnershipIdentifier: domainOwnershipIdentifier,
                slot: slot,
                options: options
            }, createOrUpdateDomainOwnershipIdentifierSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                slot: slot,
                options: options
            }, deleteDomainOwnershipIdentifierSlotOperationSpec, callback);
        };
        WebApps.prototype.updateDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainOwnershipIdentifierName: domainOwnershipIdentifierName,
                domainOwnershipIdentifier: domainOwnershipIdentifier,
                slot: slot,
                options: options
            }, updateDomainOwnershipIdentifierSlotOperationSpec, callback);
        };
        WebApps.prototype.getMSDeployStatusSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getMSDeployStatusSlotOperationSpec, callback);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateMSDeployOperationSlotResponse>
         */
        WebApps.prototype.createMSDeployOperationSlot = function (resourceGroupName, name, slot, mSDeploy, options) {
            return this.beginCreateMSDeployOperationSlot(resourceGroupName, name, slot, mSDeploy, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getMSDeployLogSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getMSDeployLogSlotOperationSpec, callback);
        };
        WebApps.prototype.listInstanceFunctionsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listInstanceFunctionsSlotOperationSpec, callback);
        };
        WebApps.prototype.getFunctionsAdminTokenSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getFunctionsAdminTokenSlotOperationSpec, callback);
        };
        WebApps.prototype.getInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                slot: slot,
                options: options
            }, getInstanceFunctionSlotOperationSpec, callback);
        };
        /**
         * Description for Create function for web site, or a deployment slot.
         * @summary Create function for web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param functionName Function name.
         * @param slot Name of the deployment slot.
         * @param functionEnvelope Function details.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateInstanceFunctionSlotResponse>
         */
        WebApps.prototype.createInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, functionEnvelope, options) {
            return this.beginCreateInstanceFunctionSlot(resourceGroupName, name, functionName, slot, functionEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                slot: slot,
                options: options
            }, deleteInstanceFunctionSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateFunctionSecretSlot = function (resourceGroupName, name, functionName, keyName, slot, key, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                keyName: keyName,
                slot: slot,
                key: key,
                options: options
            }, createOrUpdateFunctionSecretSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteFunctionSecretSlot = function (resourceGroupName, name, functionName, keyName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                keyName: keyName,
                slot: slot,
                options: options
            }, deleteFunctionSecretSlotOperationSpec, callback);
        };
        WebApps.prototype.listFunctionKeysSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                slot: slot,
                options: options
            }, listFunctionKeysSlotOperationSpec, callback);
        };
        WebApps.prototype.listFunctionSecretsSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                slot: slot,
                options: options
            }, listFunctionSecretsSlotOperationSpec, callback);
        };
        WebApps.prototype.listHostKeysSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listHostKeysSlotOperationSpec, callback);
        };
        WebApps.prototype.listSyncStatusSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSyncStatusSlotOperationSpec, callback);
        };
        WebApps.prototype.syncFunctionsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, syncFunctionsSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateHostSecretSlot = function (resourceGroupName, name, keyType, keyName, slot, key, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                keyType: keyType,
                keyName: keyName,
                slot: slot,
                key: key,
                options: options
            }, createOrUpdateHostSecretSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteHostSecretSlot = function (resourceGroupName, name, keyType, keyName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                keyType: keyType,
                keyName: keyName,
                slot: slot,
                options: options
            }, deleteHostSecretSlotOperationSpec, callback);
        };
        WebApps.prototype.listHostNameBindingsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listHostNameBindingsSlotOperationSpec, callback);
        };
        WebApps.prototype.getHostNameBindingSlot = function (resourceGroupName, name, slot, hostName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                hostName: hostName,
                options: options
            }, getHostNameBindingSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateHostNameBindingSlot = function (resourceGroupName, name, hostName, hostNameBinding, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                hostName: hostName,
                hostNameBinding: hostNameBinding,
                slot: slot,
                options: options
            }, createOrUpdateHostNameBindingSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteHostNameBindingSlot = function (resourceGroupName, name, slot, hostName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                hostName: hostName,
                options: options
            }, deleteHostNameBindingSlotOperationSpec, callback);
        };
        WebApps.prototype.getHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                slot: slot,
                options: options
            }, getHybridConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, createOrUpdateHybridConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                slot: slot,
                options: options
            }, deleteHybridConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.updateHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, updateHybridConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.listHybridConnectionsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listHybridConnectionsSlotOperationSpec, callback);
        };
        WebApps.prototype.listRelayServiceConnectionsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listRelayServiceConnectionsSlotOperationSpec, callback);
        };
        WebApps.prototype.getRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                slot: slot,
                options: options
            }, getRelayServiceConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, createOrUpdateRelayServiceConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                slot: slot,
                options: options
            }, deleteRelayServiceConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.updateRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                entityName: entityName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, updateRelayServiceConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.listInstanceIdentifiersSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listInstanceIdentifiersSlotOperationSpec, callback);
        };
        WebApps.prototype.getInstanceInfoSlot = function (resourceGroupName, name, instanceId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instanceId: instanceId,
                slot: slot,
                options: options
            }, getInstanceInfoSlotOperationSpec, callback);
        };
        WebApps.prototype.getInstanceMsDeployStatusSlot = function (resourceGroupName, name, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, getInstanceMsDeployStatusSlotOperationSpec, callback);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param instanceId ID of web app instance.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse>
         */
        WebApps.prototype.createInstanceMSDeployOperationSlot = function (resourceGroupName, name, slot, instanceId, mSDeploy, options) {
            return this.beginCreateInstanceMSDeployOperationSlot(resourceGroupName, name, slot, instanceId, mSDeploy, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getInstanceMSDeployLogSlot = function (resourceGroupName, name, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, getInstanceMSDeployLogSlotOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessesSlot = function (resourceGroupName, name, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, listInstanceProcessesSlotOperationSpec, callback);
        };
        WebApps.prototype.getInstanceProcessSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, getInstanceProcessSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteInstanceProcessSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, deleteInstanceProcessSlotOperationSpec, callback);
        };
        WebApps.prototype.getInstanceProcessDumpSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, getInstanceProcessDumpSlotOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessModulesSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, listInstanceProcessModulesSlotOperationSpec, callback);
        };
        WebApps.prototype.getInstanceProcessModuleSlot = function (resourceGroupName, name, processId, baseAddress, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                baseAddress: baseAddress,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, getInstanceProcessModuleSlotOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessThreadsSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                instanceId: instanceId,
                options: options
            }, listInstanceProcessThreadsSlotOperationSpec, callback);
        };
        WebApps.prototype.isCloneableSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, isCloneableSlotOperationSpec, callback);
        };
        WebApps.prototype.listSiteBackupsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSiteBackupsSlotOperationSpec, callback);
        };
        WebApps.prototype.listSyncFunctionTriggersSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSyncFunctionTriggersSlotOperationSpec, callback);
        };
        WebApps.prototype.getMigrateMySqlStatusSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getMigrateMySqlStatusSlotOperationSpec, callback);
        };
        WebApps.prototype.getSwiftVirtualNetworkConnectionSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getSwiftVirtualNetworkConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateSwiftVirtualNetworkConnectionSlot = function (resourceGroupName, name, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteSwiftVirtualNetworkSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, deleteSwiftVirtualNetworkSlotOperationSpec, callback);
        };
        WebApps.prototype.updateSwiftVirtualNetworkConnectionSlot = function (resourceGroupName, name, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, updateSwiftVirtualNetworkConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.listNetworkFeaturesSlot = function (resourceGroupName, name, view, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                view: view,
                slot: slot,
                options: options
            }, listNetworkFeaturesSlotOperationSpec, callback);
        };
        WebApps.prototype.getNetworkTraceOperationSlot = function (resourceGroupName, name, operationId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                slot: slot,
                options: options
            }, getNetworkTraceOperationSlotOperationSpec, callback);
        };
        WebApps.prototype.startWebSiteNetworkTraceSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, startWebSiteNetworkTraceSlotOperationSpec, callback);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param slot The name of the slot for this web app.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse>
         */
        WebApps.prototype.startWebSiteNetworkTraceOperationSlot = function (resourceGroupName, name, slot, options) {
            return this.beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName, name, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.stopWebSiteNetworkTraceSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, stopWebSiteNetworkTraceSlotOperationSpec, callback);
        };
        WebApps.prototype.getNetworkTracesSlot = function (resourceGroupName, name, operationId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                slot: slot,
                options: options
            }, getNetworkTracesSlotOperationSpec, callback);
        };
        WebApps.prototype.getNetworkTraceOperationSlotV2 = function (resourceGroupName, name, operationId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                slot: slot,
                options: options
            }, getNetworkTraceOperationSlotV2OperationSpec, callback);
        };
        WebApps.prototype.getNetworkTracesSlotV2 = function (resourceGroupName, name, operationId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                operationId: operationId,
                slot: slot,
                options: options
            }, getNetworkTracesSlotV2OperationSpec, callback);
        };
        WebApps.prototype.generateNewSitePublishingPasswordSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, generateNewSitePublishingPasswordSlotOperationSpec, callback);
        };
        WebApps.prototype.listPerfMonCountersSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listPerfMonCountersSlotOperationSpec, callback);
        };
        WebApps.prototype.getSitePhpErrorLogFlagSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getSitePhpErrorLogFlagSlotOperationSpec, callback);
        };
        WebApps.prototype.listPremierAddOnsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listPremierAddOnsSlotOperationSpec, callback);
        };
        WebApps.prototype.getPremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                slot: slot,
                options: options
            }, getPremierAddOnSlotOperationSpec, callback);
        };
        WebApps.prototype.addPremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, premierAddOn, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                premierAddOn: premierAddOn,
                slot: slot,
                options: options
            }, addPremierAddOnSlotOperationSpec, callback);
        };
        WebApps.prototype.deletePremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                slot: slot,
                options: options
            }, deletePremierAddOnSlotOperationSpec, callback);
        };
        WebApps.prototype.updatePremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, premierAddOn, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                premierAddOnName: premierAddOnName,
                premierAddOn: premierAddOn,
                slot: slot,
                options: options
            }, updatePremierAddOnSlotOperationSpec, callback);
        };
        WebApps.prototype.getPrivateAccessSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getPrivateAccessSlotOperationSpec, callback);
        };
        WebApps.prototype.putPrivateAccessVnetSlot = function (resourceGroupName, name, access, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                access: access,
                slot: slot,
                options: options
            }, putPrivateAccessVnetSlotOperationSpec, callback);
        };
        WebApps.prototype.getPrivateEndpointConnection = function (resourceGroupName, name, privateEndpointConnectionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, getPrivateEndpointConnectionOperationSpec, callback);
        };
        /**
         * Description for Approves or rejects a private endpoint connection
         * @summary Approves or rejects a private endpoint connection
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the site.
         * @param privateEndpointConnectionName
         * @param privateEndpointWrapper
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsApproveOrRejectPrivateEndpointConnectionResponse>
         */
        WebApps.prototype.approveOrRejectPrivateEndpointConnection = function (resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, options) {
            return this.beginApproveOrRejectPrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Deletes a private endpoint connection
         * @summary Deletes a private endpoint connection
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the site.
         * @param privateEndpointConnectionName
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsDeletePrivateEndpointConnectionResponse>
         */
        WebApps.prototype.deletePrivateEndpointConnection = function (resourceGroupName, name, privateEndpointConnectionName, options) {
            return this.beginDeletePrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.getPrivateLinkResources = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getPrivateLinkResourcesOperationSpec, callback);
        };
        WebApps.prototype.listProcessesSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listProcessesSlotOperationSpec, callback);
        };
        WebApps.prototype.getProcessSlot = function (resourceGroupName, name, processId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                options: options
            }, getProcessSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteProcessSlot = function (resourceGroupName, name, processId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                options: options
            }, deleteProcessSlotOperationSpec, callback);
        };
        WebApps.prototype.getProcessDumpSlot = function (resourceGroupName, name, processId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                options: options
            }, getProcessDumpSlotOperationSpec, callback);
        };
        WebApps.prototype.listProcessModulesSlot = function (resourceGroupName, name, processId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                options: options
            }, listProcessModulesSlotOperationSpec, callback);
        };
        WebApps.prototype.getProcessModuleSlot = function (resourceGroupName, name, processId, baseAddress, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                baseAddress: baseAddress,
                slot: slot,
                options: options
            }, getProcessModuleSlotOperationSpec, callback);
        };
        WebApps.prototype.listProcessThreadsSlot = function (resourceGroupName, name, processId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                processId: processId,
                slot: slot,
                options: options
            }, listProcessThreadsSlotOperationSpec, callback);
        };
        WebApps.prototype.listPublicCertificatesSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listPublicCertificatesSlotOperationSpec, callback);
        };
        WebApps.prototype.getPublicCertificateSlot = function (resourceGroupName, name, slot, publicCertificateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                publicCertificateName: publicCertificateName,
                options: options
            }, getPublicCertificateSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdatePublicCertificateSlot = function (resourceGroupName, name, publicCertificateName, publicCertificate, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                publicCertificateName: publicCertificateName,
                publicCertificate: publicCertificate,
                slot: slot,
                options: options
            }, createOrUpdatePublicCertificateSlotOperationSpec, callback);
        };
        WebApps.prototype.deletePublicCertificateSlot = function (resourceGroupName, name, slot, publicCertificateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                publicCertificateName: publicCertificateName,
                options: options
            }, deletePublicCertificateSlotOperationSpec, callback);
        };
        WebApps.prototype.listPublishingProfileXmlWithSecretsSlot = function (resourceGroupName, name, publishingProfileOptions, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                publishingProfileOptions: publishingProfileOptions,
                slot: slot,
                options: options
            }, listPublishingProfileXmlWithSecretsSlotOperationSpec, callback);
        };
        WebApps.prototype.resetSlotConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, resetSlotConfigurationSlotOperationSpec, callback);
        };
        WebApps.prototype.restartSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, restartSlotOperationSpec, callback);
        };
        /**
         * Description for Restores an app from a backup blob in Azure Storage.
         * @summary Restores an app from a backup blob in Azure Storage.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param request Information on restore request .
         * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
         * backup of the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreFromBackupBlobSlot = function (resourceGroupName, name, request, slot, options) {
            return this.beginRestoreFromBackupBlobSlot(resourceGroupName, name, request, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Restores a deleted web app to this web app.
         * @summary Restores a deleted web app to this web app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Deleted web app restore information.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreFromDeletedAppSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
            return this.beginRestoreFromDeletedAppSlot(resourceGroupName, name, restoreRequest, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Restores a web app from a snapshot.
         * @summary Restores a web app from a snapshot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
         * GetDeletedSites or GetSiteSnapshots API.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.restoreSnapshotSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
            return this.beginRestoreSnapshotSlot(resourceGroupName, name, restoreRequest, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listSiteExtensionsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSiteExtensionsSlotOperationSpec, callback);
        };
        WebApps.prototype.getSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteExtensionId: siteExtensionId,
                slot: slot,
                options: options
            }, getSiteExtensionSlotOperationSpec, callback);
        };
        /**
         * Description for Install site extension on a web site, or a deployment slot.
         * @summary Install site extension on a web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param siteExtensionId Site extension name.
         * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
         * slot.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsInstallSiteExtensionSlotResponse>
         */
        WebApps.prototype.installSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options) {
            return this.beginInstallSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteExtensionId: siteExtensionId,
                slot: slot,
                options: options
            }, deleteSiteExtensionSlotOperationSpec, callback);
        };
        /**
         * Description for Copies a deployment slot to another deployment slot of an app.
         * @summary Copies a deployment slot to another deployment slot of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param copySlotEntity JSON object that contains the target slot name and site config properties
         * to override the source slot config. See example.
         * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
         * the source slot.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.copySlotSlot = function (resourceGroupName, name, copySlotEntity, slot, options) {
            return this.beginCopySlotSlot(resourceGroupName, name, copySlotEntity, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listSlotDifferencesSlot = function (resourceGroupName, name, slotSwapEntity, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotSwapEntity: slotSwapEntity,
                slot: slot,
                options: options
            }, listSlotDifferencesSlotOperationSpec, callback);
        };
        /**
         * Description for Swaps two deployment slots of an app.
         * @summary Swaps two deployment slots of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param slotSwapEntity JSON object that contains the target slot name. See example.
         * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
         * the source slot.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.swapSlotSlot = function (resourceGroupName, name, slotSwapEntity, slot, options) {
            return this.beginSwapSlotSlot(resourceGroupName, name, slotSwapEntity, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listSnapshotsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSnapshotsSlotOperationSpec, callback);
        };
        WebApps.prototype.listSnapshotsFromDRSecondarySlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listSnapshotsFromDRSecondarySlotOperationSpec, callback);
        };
        WebApps.prototype.getSourceControlSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getSourceControlSlotOperationSpec, callback);
        };
        /**
         * Description for Updates the source control configuration of an app.
         * @summary Updates the source control configuration of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
         * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
         * source control configuration for the production slot.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse>
         */
        WebApps.prototype.createOrUpdateSourceControlSlot = function (resourceGroupName, name, siteSourceControl, slot, options) {
            return this.beginCreateOrUpdateSourceControlSlot(resourceGroupName, name, siteSourceControl, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteSourceControlSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, deleteSourceControlSlotOperationSpec, callback);
        };
        WebApps.prototype.updateSourceControlSlot = function (resourceGroupName, name, siteSourceControl, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteSourceControl: siteSourceControl,
                slot: slot,
                options: options
            }, updateSourceControlSlotOperationSpec, callback);
        };
        WebApps.prototype.startSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, startSlotOperationSpec, callback);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param slot The name of the slot for this web app.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsStartNetworkTraceSlotResponse>
         */
        WebApps.prototype.startNetworkTraceSlot = function (resourceGroupName, name, slot, options) {
            return this.beginStartNetworkTraceSlot(resourceGroupName, name, slot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.stopSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, stopSlotOperationSpec, callback);
        };
        WebApps.prototype.stopNetworkTraceSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, stopNetworkTraceSlotOperationSpec, callback);
        };
        WebApps.prototype.syncRepositorySlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, syncRepositorySlotOperationSpec, callback);
        };
        WebApps.prototype.syncFunctionTriggersSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, syncFunctionTriggersSlotOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listTriggeredWebJobsSlotOperationSpec, callback);
        };
        WebApps.prototype.getTriggeredWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, getTriggeredWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteTriggeredWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, deleteTriggeredWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobHistorySlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, listTriggeredWebJobHistorySlotOperationSpec, callback);
        };
        WebApps.prototype.getTriggeredWebJobHistorySlot = function (resourceGroupName, name, webJobName, id, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                id: id,
                slot: slot,
                options: options
            }, getTriggeredWebJobHistorySlotOperationSpec, callback);
        };
        WebApps.prototype.runTriggeredWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, runTriggeredWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.listUsagesSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listUsagesSlotOperationSpec, callback);
        };
        WebApps.prototype.listVnetConnectionsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listVnetConnectionsSlotOperationSpec, callback);
        };
        WebApps.prototype.getVnetConnectionSlot = function (resourceGroupName, name, vnetName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                slot: slot,
                options: options
            }, getVnetConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateVnetConnectionSlot = function (resourceGroupName, name, vnetName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, createOrUpdateVnetConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.deleteVnetConnectionSlot = function (resourceGroupName, name, vnetName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                slot: slot,
                options: options
            }, deleteVnetConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.updateVnetConnectionSlot = function (resourceGroupName, name, vnetName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, updateVnetConnectionSlotOperationSpec, callback);
        };
        WebApps.prototype.getVnetConnectionGatewaySlot = function (resourceGroupName, name, vnetName, gatewayName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                slot: slot,
                options: options
            }, getVnetConnectionGatewaySlotOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateVnetConnectionGatewaySlot = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, createOrUpdateVnetConnectionGatewaySlotOperationSpec, callback);
        };
        WebApps.prototype.updateVnetConnectionGatewaySlot = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                connectionEnvelope: connectionEnvelope,
                slot: slot,
                options: options
            }, updateVnetConnectionGatewaySlotOperationSpec, callback);
        };
        WebApps.prototype.listWebJobsSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listWebJobsSlotOperationSpec, callback);
        };
        WebApps.prototype.getWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                slot: slot,
                options: options
            }, getWebJobSlotOperationSpec, callback);
        };
        WebApps.prototype.listSlotDifferencesFromProduction = function (resourceGroupName, name, slotSwapEntity, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotSwapEntity: slotSwapEntity,
                options: options
            }, listSlotDifferencesFromProductionOperationSpec, callback);
        };
        /**
         * Description for Swaps two deployment slots of an app.
         * @summary Swaps two deployment slots of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param slotSwapEntity JSON object that contains the target slot name. See example.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        WebApps.prototype.swapSlotWithProduction = function (resourceGroupName, name, slotSwapEntity, options) {
            return this.beginSwapSlotWithProduction(resourceGroupName, name, slotSwapEntity, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.listSnapshots = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSnapshotsOperationSpec, callback);
        };
        WebApps.prototype.listSnapshotsFromDRSecondary = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listSnapshotsFromDRSecondaryOperationSpec, callback);
        };
        WebApps.prototype.getSourceControl = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getSourceControlOperationSpec, callback);
        };
        /**
         * Description for Updates the source control configuration of an app.
         * @summary Updates the source control configuration of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlResponse>
         */
        WebApps.prototype.createOrUpdateSourceControl = function (resourceGroupName, name, siteSourceControl, options) {
            return this.beginCreateOrUpdateSourceControl(resourceGroupName, name, siteSourceControl, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.deleteSourceControl = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteSourceControlOperationSpec, callback);
        };
        WebApps.prototype.updateSourceControl = function (resourceGroupName, name, siteSourceControl, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteSourceControl: siteSourceControl,
                options: options
            }, updateSourceControlOperationSpec, callback);
        };
        WebApps.prototype.start = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, startOperationSpec, callback);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebAppsStartNetworkTraceResponse>
         */
        WebApps.prototype.startNetworkTrace = function (resourceGroupName, name, options) {
            return this.beginStartNetworkTrace(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        WebApps.prototype.stop = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, stopOperationSpec, callback);
        };
        WebApps.prototype.stopNetworkTrace = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, stopNetworkTraceOperationSpec, callback);
        };
        WebApps.prototype.syncRepository = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, syncRepositoryOperationSpec, callback);
        };
        WebApps.prototype.syncFunctionTriggers = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, syncFunctionTriggersOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobs = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listTriggeredWebJobsOperationSpec, callback);
        };
        WebApps.prototype.getTriggeredWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, getTriggeredWebJobOperationSpec, callback);
        };
        WebApps.prototype.deleteTriggeredWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, deleteTriggeredWebJobOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobHistory = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, listTriggeredWebJobHistoryOperationSpec, callback);
        };
        WebApps.prototype.getTriggeredWebJobHistory = function (resourceGroupName, name, webJobName, id, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                id: id,
                options: options
            }, getTriggeredWebJobHistoryOperationSpec, callback);
        };
        WebApps.prototype.runTriggeredWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, runTriggeredWebJobOperationSpec, callback);
        };
        WebApps.prototype.listUsages = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listUsagesOperationSpec, callback);
        };
        WebApps.prototype.listVnetConnections = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listVnetConnectionsOperationSpec, callback);
        };
        WebApps.prototype.getVnetConnection = function (resourceGroupName, name, vnetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                options: options
            }, getVnetConnectionOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateVnetConnection = function (resourceGroupName, name, vnetName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, createOrUpdateVnetConnectionOperationSpec, callback);
        };
        WebApps.prototype.deleteVnetConnection = function (resourceGroupName, name, vnetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                options: options
            }, deleteVnetConnectionOperationSpec, callback);
        };
        WebApps.prototype.updateVnetConnection = function (resourceGroupName, name, vnetName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, updateVnetConnectionOperationSpec, callback);
        };
        WebApps.prototype.getVnetConnectionGateway = function (resourceGroupName, name, vnetName, gatewayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                options: options
            }, getVnetConnectionGatewayOperationSpec, callback);
        };
        WebApps.prototype.createOrUpdateVnetConnectionGateway = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, createOrUpdateVnetConnectionGatewayOperationSpec, callback);
        };
        WebApps.prototype.updateVnetConnectionGateway = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, updateVnetConnectionGatewayOperationSpec, callback);
        };
        WebApps.prototype.listWebJobs = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listWebJobsOperationSpec, callback);
        };
        WebApps.prototype.getWebJob = function (resourceGroupName, name, webJobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                webJobName: webJobName,
                options: options
            }, getWebJobOperationSpec, callback);
        };
        /**
         * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
         * an existing app.
         * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
         * existing app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Unique name of the app to create or update. To create or update a deployment slot,
         * use the {slot} parameter.
         * @param siteEnvelope A JSON representation of the app properties. See example.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateOrUpdate = function (resourceGroupName, name, siteEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteEnvelope: siteEnvelope,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Description for Restores a specific backup to another app (or deployment slot, if specified).
         * @summary Restores a specific backup to another app (or deployment slot, if specified).
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param backupId ID of the backup.
         * @param request Information on restore request .
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestore = function (resourceGroupName, name, backupId, request, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                request: request,
                options: options
            }, beginRestoreOperationSpec, options);
        };
        /**
         * Description for Gets the Git/FTP publishing credentials of an app.
         * @summary Gets the Git/FTP publishing credentials of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginListPublishingCredentials = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginListPublishingCredentialsOperationSpec, options);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateMSDeployOperation = function (resourceGroupName, name, mSDeploy, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                mSDeploy: mSDeploy,
                options: options
            }, beginCreateMSDeployOperationOperationSpec, options);
        };
        /**
         * Description for Create function for web site, or a deployment slot.
         * @summary Create function for web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param functionName Function name.
         * @param functionEnvelope Function details.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateFunction = function (resourceGroupName, name, functionName, functionEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                functionEnvelope: functionEnvelope,
                options: options
            }, beginCreateFunctionOperationSpec, options);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param instanceId ID of web app instance.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateInstanceMSDeployOperation = function (resourceGroupName, name, instanceId, mSDeploy, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instanceId: instanceId,
                mSDeploy: mSDeploy,
                options: options
            }, beginCreateInstanceMSDeployOperationOperationSpec, options);
        };
        /**
         * Description for Restores a web app.
         * @summary Restores a web app.
         * @param subscriptionName Azure subscription.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param migrationOptions Migration migrationOptions.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginMigrateStorage = function (subscriptionName, resourceGroupName, name, migrationOptions, options) {
            return this.client.sendLRORequest({
                subscriptionName: subscriptionName,
                resourceGroupName: resourceGroupName,
                name: name,
                migrationOptions: migrationOptions,
                options: options
            }, beginMigrateStorageOperationSpec, options);
        };
        /**
         * Description for Migrates a local (in-app) MySql database to a remote MySql database.
         * @summary Migrates a local (in-app) MySql database to a remote MySql database.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param migrationRequestEnvelope MySql migration options.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginMigrateMySql = function (resourceGroupName, name, migrationRequestEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                migrationRequestEnvelope: migrationRequestEnvelope,
                options: options
            }, beginMigrateMySqlOperationSpec, options);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginStartWebSiteNetworkTraceOperation = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginStartWebSiteNetworkTraceOperationOperationSpec, options);
        };
        /**
         * Description for Restores an app from a backup blob in Azure Storage.
         * @summary Restores an app from a backup blob in Azure Storage.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param request Information on restore request .
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreFromBackupBlob = function (resourceGroupName, name, request, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                options: options
            }, beginRestoreFromBackupBlobOperationSpec, options);
        };
        /**
         * Description for Restores a deleted web app to this web app.
         * @summary Restores a deleted web app to this web app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Deleted web app restore information.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreFromDeletedApp = function (resourceGroupName, name, restoreRequest, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                restoreRequest: restoreRequest,
                options: options
            }, beginRestoreFromDeletedAppOperationSpec, options);
        };
        /**
         * Description for Restores a web app from a snapshot.
         * @summary Restores a web app from a snapshot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
         * GetDeletedSites or GetSiteSnapshots API.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreSnapshot = function (resourceGroupName, name, restoreRequest, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                restoreRequest: restoreRequest,
                options: options
            }, beginRestoreSnapshotOperationSpec, options);
        };
        /**
         * Description for Install site extension on a web site, or a deployment slot.
         * @summary Install site extension on a web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param siteExtensionId Site extension name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginInstallSiteExtension = function (resourceGroupName, name, siteExtensionId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteExtensionId: siteExtensionId,
                options: options
            }, beginInstallSiteExtensionOperationSpec, options);
        };
        /**
         * Description for Copies a deployment slot to another deployment slot of an app.
         * @summary Copies a deployment slot to another deployment slot of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param copySlotEntity JSON object that contains the target slot name and site config properties
         * to override the source slot config. See example.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCopyProductionSlot = function (resourceGroupName, name, copySlotEntity, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                copySlotEntity: copySlotEntity,
                options: options
            }, beginCopyProductionSlotOperationSpec, options);
        };
        /**
         * Description for Creates a new web, mobile, or API app in an existing resource group, or updates
         * an existing app.
         * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
         * existing app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Unique name of the app to create or update. To create or update a deployment slot,
         * use the {slot} parameter.
         * @param siteEnvelope A JSON representation of the app properties. See example.
         * @param slot Name of the deployment slot to create or update. By default, this API attempts to
         * create or modify the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateOrUpdateSlot = function (resourceGroupName, name, siteEnvelope, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteEnvelope: siteEnvelope,
                slot: slot,
                options: options
            }, beginCreateOrUpdateSlotOperationSpec, options);
        };
        /**
         * Description for Restores a specific backup to another app (or deployment slot, if specified).
         * @summary Restores a specific backup to another app (or deployment slot, if specified).
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param backupId ID of the backup.
         * @param request Information on restore request .
         * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
         * backup of the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreSlot = function (resourceGroupName, name, backupId, request, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                backupId: backupId,
                request: request,
                slot: slot,
                options: options
            }, beginRestoreSlotOperationSpec, options);
        };
        /**
         * Description for Gets the Git/FTP publishing credentials of an app.
         * @summary Gets the Git/FTP publishing credentials of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
         * publishing credentials for the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginListPublishingCredentialsSlot = function (resourceGroupName, name, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, beginListPublishingCredentialsSlotOperationSpec, options);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateMSDeployOperationSlot = function (resourceGroupName, name, slot, mSDeploy, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                mSDeploy: mSDeploy,
                options: options
            }, beginCreateMSDeployOperationSlotOperationSpec, options);
        };
        /**
         * Description for Create function for web site, or a deployment slot.
         * @summary Create function for web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param functionName Function name.
         * @param slot Name of the deployment slot.
         * @param functionEnvelope Function details.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, functionEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                functionName: functionName,
                slot: slot,
                functionEnvelope: functionEnvelope,
                options: options
            }, beginCreateInstanceFunctionSlotOperationSpec, options);
        };
        /**
         * Description for Invoke the MSDeploy web app extension.
         * @summary Invoke the MSDeploy web app extension.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param instanceId ID of web app instance.
         * @param mSDeploy Details of MSDeploy operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateInstanceMSDeployOperationSlot = function (resourceGroupName, name, slot, instanceId, mSDeploy, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                instanceId: instanceId,
                mSDeploy: mSDeploy,
                options: options
            }, beginCreateInstanceMSDeployOperationSlotOperationSpec, options);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param slot The name of the slot for this web app.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginStartWebSiteNetworkTraceOperationSlot = function (resourceGroupName, name, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, beginStartWebSiteNetworkTraceOperationSlotOperationSpec, options);
        };
        /**
         * Description for Approves or rejects a private endpoint connection
         * @summary Approves or rejects a private endpoint connection
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the site.
         * @param privateEndpointConnectionName
         * @param privateEndpointWrapper
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginApproveOrRejectPrivateEndpointConnection = function (resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                privateEndpointConnectionName: privateEndpointConnectionName,
                privateEndpointWrapper: privateEndpointWrapper,
                options: options
            }, beginApproveOrRejectPrivateEndpointConnectionOperationSpec, options);
        };
        /**
         * Description for Deletes a private endpoint connection
         * @summary Deletes a private endpoint connection
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the site.
         * @param privateEndpointConnectionName
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginDeletePrivateEndpointConnection = function (resourceGroupName, name, privateEndpointConnectionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, beginDeletePrivateEndpointConnectionOperationSpec, options);
        };
        /**
         * Description for Restores an app from a backup blob in Azure Storage.
         * @summary Restores an app from a backup blob in Azure Storage.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param request Information on restore request .
         * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
         * backup of the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreFromBackupBlobSlot = function (resourceGroupName, name, request, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                request: request,
                slot: slot,
                options: options
            }, beginRestoreFromBackupBlobSlotOperationSpec, options);
        };
        /**
         * Description for Restores a deleted web app to this web app.
         * @summary Restores a deleted web app to this web app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Deleted web app restore information.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreFromDeletedAppSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                restoreRequest: restoreRequest,
                slot: slot,
                options: options
            }, beginRestoreFromDeletedAppSlotOperationSpec, options);
        };
        /**
         * Description for Restores a web app from a snapshot.
         * @summary Restores a web app from a snapshot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of web app.
         * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
         * GetDeletedSites or GetSiteSnapshots API.
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginRestoreSnapshotSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                restoreRequest: restoreRequest,
                slot: slot,
                options: options
            }, beginRestoreSnapshotSlotOperationSpec, options);
        };
        /**
         * Description for Install site extension on a web site, or a deployment slot.
         * @summary Install site extension on a web site, or a deployment slot.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Site name.
         * @param siteExtensionId Site extension name.
         * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
         * slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginInstallSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteExtensionId: siteExtensionId,
                slot: slot,
                options: options
            }, beginInstallSiteExtensionSlotOperationSpec, options);
        };
        /**
         * Description for Copies a deployment slot to another deployment slot of an app.
         * @summary Copies a deployment slot to another deployment slot of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param copySlotEntity JSON object that contains the target slot name and site config properties
         * to override the source slot config. See example.
         * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
         * the source slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCopySlotSlot = function (resourceGroupName, name, copySlotEntity, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                copySlotEntity: copySlotEntity,
                slot: slot,
                options: options
            }, beginCopySlotSlotOperationSpec, options);
        };
        /**
         * Description for Swaps two deployment slots of an app.
         * @summary Swaps two deployment slots of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param slotSwapEntity JSON object that contains the target slot name. See example.
         * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
         * the source slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginSwapSlotSlot = function (resourceGroupName, name, slotSwapEntity, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotSwapEntity: slotSwapEntity,
                slot: slot,
                options: options
            }, beginSwapSlotSlotOperationSpec, options);
        };
        /**
         * Description for Updates the source control configuration of an app.
         * @summary Updates the source control configuration of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
         * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
         * source control configuration for the production slot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateOrUpdateSourceControlSlot = function (resourceGroupName, name, siteSourceControl, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteSourceControl: siteSourceControl,
                slot: slot,
                options: options
            }, beginCreateOrUpdateSourceControlSlotOperationSpec, options);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param slot The name of the slot for this web app.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginStartNetworkTraceSlot = function (resourceGroupName, name, slot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, beginStartNetworkTraceSlotOperationSpec, options);
        };
        /**
         * Description for Swaps two deployment slots of an app.
         * @summary Swaps two deployment slots of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param slotSwapEntity JSON object that contains the target slot name. See example.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginSwapSlotWithProduction = function (resourceGroupName, name, slotSwapEntity, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slotSwapEntity: slotSwapEntity,
                options: options
            }, beginSwapSlotWithProductionOperationSpec, options);
        };
        /**
         * Description for Updates the source control configuration of an app.
         * @summary Updates the source control configuration of an app.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the app.
         * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginCreateOrUpdateSourceControl = function (resourceGroupName, name, siteSourceControl, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                siteSourceControl: siteSourceControl,
                options: options
            }, beginCreateOrUpdateSourceControlOperationSpec, options);
        };
        /**
         * Description for Start capturing network packets for the site.
         * @summary Start capturing network packets for the site.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name The name of the web app.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        WebApps.prototype.beginStartNetworkTrace = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginStartNetworkTraceOperationSpec, options);
        };
        WebApps.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        WebApps.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        WebApps.prototype.listBackupsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBackupsNextOperationSpec, callback);
        };
        WebApps.prototype.listConfigurationsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listConfigurationsNextOperationSpec, callback);
        };
        WebApps.prototype.listConfigurationSnapshotInfoNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listConfigurationSnapshotInfoNextOperationSpec, callback);
        };
        WebApps.prototype.listContinuousWebJobsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listContinuousWebJobsNextOperationSpec, callback);
        };
        WebApps.prototype.listDeploymentsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listDeploymentsNextOperationSpec, callback);
        };
        WebApps.prototype.listDomainOwnershipIdentifiersNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listDomainOwnershipIdentifiersNextOperationSpec, callback);
        };
        WebApps.prototype.listFunctionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listFunctionsNextOperationSpec, callback);
        };
        WebApps.prototype.listHostNameBindingsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHostNameBindingsNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceIdentifiersNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceIdentifiersNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceProcessesNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessModulesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceProcessModulesNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessThreadsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceProcessThreadsNextOperationSpec, callback);
        };
        WebApps.prototype.listSiteBackupsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteBackupsNextOperationSpec, callback);
        };
        WebApps.prototype.listPerfMonCountersNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listPerfMonCountersNextOperationSpec, callback);
        };
        WebApps.prototype.listProcessesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listProcessesNextOperationSpec, callback);
        };
        WebApps.prototype.listProcessModulesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listProcessModulesNextOperationSpec, callback);
        };
        WebApps.prototype.listProcessThreadsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listProcessThreadsNextOperationSpec, callback);
        };
        WebApps.prototype.listPublicCertificatesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listPublicCertificatesNextOperationSpec, callback);
        };
        WebApps.prototype.listSiteExtensionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteExtensionsNextOperationSpec, callback);
        };
        WebApps.prototype.listSlotsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSlotsNextOperationSpec, callback);
        };
        WebApps.prototype.listBackupsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBackupsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listConfigurationsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listConfigurationsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listConfigurationSnapshotInfoSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listConfigurationSnapshotInfoSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listContinuousWebJobsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listContinuousWebJobsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listDeploymentsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listDeploymentsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listDomainOwnershipIdentifiersSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listDomainOwnershipIdentifiersSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceFunctionsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceFunctionsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listHostNameBindingsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHostNameBindingsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceIdentifiersSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceIdentifiersSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceProcessesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessModulesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceProcessModulesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listInstanceProcessThreadsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listInstanceProcessThreadsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listSiteBackupsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteBackupsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listPerfMonCountersSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listPerfMonCountersSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listProcessesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listProcessesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listProcessModulesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listProcessModulesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listProcessThreadsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listProcessThreadsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listPublicCertificatesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listPublicCertificatesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listSiteExtensionsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteExtensionsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listSlotDifferencesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSlotDifferencesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listSnapshotsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSnapshotsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listSnapshotsFromDRSecondarySlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSnapshotsFromDRSecondarySlotNextOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listTriggeredWebJobsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobHistorySlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listTriggeredWebJobHistorySlotNextOperationSpec, callback);
        };
        WebApps.prototype.listUsagesSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listUsagesSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listWebJobsSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebJobsSlotNextOperationSpec, callback);
        };
        WebApps.prototype.listSlotDifferencesFromProductionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSlotDifferencesFromProductionNextOperationSpec, callback);
        };
        WebApps.prototype.listSnapshotsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSnapshotsNextOperationSpec, callback);
        };
        WebApps.prototype.listSnapshotsFromDRSecondaryNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSnapshotsFromDRSecondaryNextOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listTriggeredWebJobsNextOperationSpec, callback);
        };
        WebApps.prototype.listTriggeredWebJobHistoryNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listTriggeredWebJobHistoryNextOperationSpec, callback);
        };
        WebApps.prototype.listUsagesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listUsagesNextOperationSpec, callback);
        };
        WebApps.prototype.listWebJobsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebJobsNextOperationSpec, callback);
        };
        return WebApps;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$b);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            includeSlots,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Site
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            deleteMetrics,
            deleteEmptyServerFarm,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteEnvelope",
            mapper: __assign(__assign({}, SitePatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Site
            },
            202: {
                bodyMapper: Site
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var analyzeCustomHostnameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            hostName0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomHostnameAnalysisResult
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var applySlotConfigToProductionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotSwapEntity",
            mapper: __assign(__assign({}, CsmSlotEntity), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var backupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, BackupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupItem
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listBackupsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getBackupStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItem
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteBackupOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listBackupStatusSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, BackupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupItem
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getBasicPublishingCredentialsPoliciesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/basicPublishingCredentialsPolicies",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmPublishingCredentialsPoliciesCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getFtpAllowedOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/basicPublishingCredentialsPolicies/ftp",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmPublishingCredentialsPoliciesEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateFtpAllowedOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/basicPublishingCredentialsPolicies/ftp",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "csmPublishingAccessPoliciesEntity",
            mapper: __assign(__assign({}, CsmPublishingCredentialsPoliciesEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CsmPublishingCredentialsPoliciesEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getScmAllowedOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/basicPublishingCredentialsPolicies/scm",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmPublishingCredentialsPoliciesEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateScmAllowedOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/basicPublishingCredentialsPolicies/scm",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "csmPublishingAccessPoliciesEntity",
            mapper: __assign(__assign({}, CsmPublishingCredentialsPoliciesEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CsmPublishingCredentialsPoliciesEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResourceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateApplicationSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appSettings",
            mapper: __assign(__assign({}, StringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listApplicationSettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateAuthSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteAuthSettings",
            mapper: __assign(__assign({}, SiteAuthSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteAuthSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getAuthSettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteAuthSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateAuthSettingsV2OperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettingsV2",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteAuthSettingsV2",
            mapper: __assign(__assign({}, SiteAuthSettingsV2), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteAuthSettingsV2
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getAuthSettingsV2OperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettingsV2/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteAuthSettingsV2
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateAzureStorageAccountsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "azureStorageAccounts",
            mapper: __assign(__assign({}, AzureStoragePropertyDictionaryResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AzureStoragePropertyDictionaryResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listAzureStorageAccountsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureStoragePropertyDictionaryResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateBackupConfigurationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, BackupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteBackupConfigurationOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getBackupConfigurationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateConnectionStringsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionStrings",
            mapper: __assign(__assign({}, ConnectionStringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionStringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConnectionStringsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionStringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getDiagnosticLogsConfigurationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteLogsConfig
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateDiagnosticLogsConfigOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteLogsConfig",
            mapper: __assign(__assign({}, SiteLogsConfig), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteLogsConfig
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateMetadataOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "metadata",
            mapper: __assign(__assign({}, StringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listMetadataOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSitePushSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "pushSettings",
            mapper: __assign(__assign({}, PushSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PushSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSitePushSettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PushSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotConfigurationNamesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SlotConfigNamesResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSlotConfigurationNamesOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotConfigNames",
            mapper: __assign(__assign({}, SlotConfigNamesResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SlotConfigNamesResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getConfigurationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateConfigurationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteConfig",
            mapper: __assign(__assign({}, SiteConfigResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateConfigurationOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteConfig",
            mapper: __assign(__assign({}, SiteConfigResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationSnapshotInfoOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigurationSnapshotInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getConfigurationSnapshotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
        urlParameters: [
            resourceGroupName,
            name,
            snapshotId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var recoverSiteConfigurationSnapshotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
        urlParameters: [
            resourceGroupName,
            name,
            snapshotId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getWebSiteContainerLogsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getContainerLogsZipOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listContinuousWebJobsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContinuousWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getContinuousWebJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContinuousWebJob
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteContinuousWebJobOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var startContinuousWebJobOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopContinuousWebJobOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDeploymentsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getDeploymentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Deployment
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createDeploymentOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "deployment",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Deployment
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteDeploymentOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDeploymentLogOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Deployment
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var discoverBackupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, RestoreRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RestoreRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDomainOwnershipIdentifiersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getDomainOwnershipIdentifierOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Identifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateDomainOwnershipIdentifierOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainOwnershipIdentifier",
            mapper: __assign(__assign({}, Identifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Identifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteDomainOwnershipIdentifierOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateDomainOwnershipIdentifierOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainOwnershipIdentifier",
            mapper: __assign(__assign({}, Identifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Identifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getMSDeployStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getMSDeployLogOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployLog
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listFunctionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionEnvelopeCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getFunctionsAdminTokenOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getFunctionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionEnvelope
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteFunctionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateFunctionSecretOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "key",
            mapper: __assign(__assign({}, KeyInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: KeyInfo
            },
            201: {
                bodyMapper: KeyInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteFunctionSecretOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listFunctionKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listkeys",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listFunctionSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionSecrets
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHostKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listkeys",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostKeys
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSyncStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listsyncstatus",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var syncFunctionsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/sync",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateHostSecretOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            keyType,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "key",
            mapper: __assign(__assign({}, KeyInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: KeyInfo
            },
            201: {
                bodyMapper: KeyInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteHostSecretOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            keyType,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHostNameBindingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostNameBindingCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getHostNameBindingOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        urlParameters: [
            resourceGroupName,
            name,
            hostName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostNameBinding
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateHostNameBindingOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        urlParameters: [
            resourceGroupName,
            name,
            hostName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "hostNameBinding",
            mapper: __assign(__assign({}, HostNameBinding), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HostNameBinding
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteHostNameBindingOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        urlParameters: [
            resourceGroupName,
            name,
            hostName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getHybridConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateHybridConnectionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, HybridConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteHybridConnectionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateHybridConnectionOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, HybridConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHybridConnectionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listRelayServiceConnectionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getRelayServiceConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateRelayServiceConnectionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, RelayServiceConnectionEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteRelayServiceConnectionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateRelayServiceConnectionOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, RelayServiceConnectionEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceIdentifiersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppInstanceStatusCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceInfoOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}",
        urlParameters: [
            resourceGroupName,
            name,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebSiteInstanceStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceMsDeployStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceMSDeployLogOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
        urlParameters: [
            resourceGroupName,
            name,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployLog
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
        urlParameters: [
            resourceGroupName,
            name,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceProcessOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteInstanceProcessOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceProcessDumpOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessModulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceProcessModuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            baseAddress,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessThreadsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var isCloneableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteCloneability
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteBackupsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listbackups",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSyncFunctionTriggersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionSecrets
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getMigrateMySqlStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MigrateMySqlStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSwiftVirtualNetworkConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SwiftVirtualNetwork
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateSwiftVirtualNetworkConnectionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, SwiftVirtualNetwork), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SwiftVirtualNetwork
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSwiftVirtualNetworkOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSwiftVirtualNetworkConnectionOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, SwiftVirtualNetwork), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SwiftVirtualNetwork
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listNetworkFeaturesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
        urlParameters: [
            resourceGroupName,
            name,
            view,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkFeatures
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTraceOperationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var startWebSiteNetworkTraceOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            durationInSeconds,
            maxFrameLength,
            sasUrl,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopWebSiteNetworkTraceOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTracesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTraceOperationV2OperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTracesV2OperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var generateNewSitePublishingPasswordOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPerfMonCountersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PerfMonCounterCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSitePhpErrorLogFlagOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SitePhpErrorLogFlag
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPremierAddOnsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPremierAddOnOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var addPremierAddOnOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "premierAddOn",
            mapper: __assign(__assign({}, PremierAddOn), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deletePremierAddOnOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updatePremierAddOnOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "premierAddOn",
            mapper: __assign(__assign({}, PremierAddOnPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPrivateAccessOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateAccess
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var putPrivateAccessVnetOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "access",
            mapper: __assign(__assign({}, PrivateAccess), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PrivateAccess
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getProcessOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteProcessOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getProcessDumpOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessModulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getProcessModuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            baseAddress,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessThreadsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPublicCertificatesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicCertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPublicCertificateOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
        urlParameters: [
            resourceGroupName,
            name,
            publicCertificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicCertificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdatePublicCertificateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
        urlParameters: [
            resourceGroupName,
            name,
            publicCertificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "publicCertificate",
            mapper: __assign(__assign({}, PublicCertificate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PublicCertificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deletePublicCertificateOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
        urlParameters: [
            resourceGroupName,
            name,
            publicCertificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPublishingProfileXmlWithSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "publishingProfileOptions",
            mapper: __assign(__assign({}, CsmPublishingProfileOptions), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var resetProductionSlotConfigOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var restartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            softRestart,
            synchronous,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteExtensionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSiteExtensionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
        urlParameters: [
            resourceGroupName,
            name,
            siteExtensionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSiteExtensionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
        urlParameters: [
            resourceGroupName,
            name,
            siteExtensionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Site
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            deleteMetrics,
            deleteEmptyServerFarm,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteEnvelope",
            mapper: __assign(__assign({}, SitePatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Site
            },
            202: {
                bodyMapper: Site
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var analyzeCustomHostnameSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            hostName0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomHostnameAnalysisResult
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var applySlotConfigurationSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotSwapEntity",
            mapper: __assign(__assign({}, CsmSlotEntity), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var backupSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, BackupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupItem
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listBackupsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getBackupStatusSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItem
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteBackupSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listBackupStatusSecretsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, BackupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupItem
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResourceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateApplicationSettingsSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appSettings",
            mapper: __assign(__assign({}, StringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listApplicationSettingsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateAuthSettingsSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteAuthSettings",
            mapper: __assign(__assign({}, SiteAuthSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteAuthSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getAuthSettingsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteAuthSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateAuthSettingsV2SlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettingsV2",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteAuthSettingsV2",
            mapper: __assign(__assign({}, SiteAuthSettingsV2), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteAuthSettingsV2
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getAuthSettingsV2SlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettingsV2/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteAuthSettingsV2
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateAzureStorageAccountsSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "azureStorageAccounts",
            mapper: __assign(__assign({}, AzureStoragePropertyDictionaryResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AzureStoragePropertyDictionaryResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listAzureStorageAccountsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureStoragePropertyDictionaryResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateBackupConfigurationSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, BackupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteBackupConfigurationSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getBackupConfigurationSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateConnectionStringsSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionStrings",
            mapper: __assign(__assign({}, ConnectionStringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionStringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConnectionStringsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionStringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getDiagnosticLogsConfigurationSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteLogsConfig
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateDiagnosticLogsConfigSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteLogsConfig",
            mapper: __assign(__assign({}, SiteLogsConfig), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteLogsConfig
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateMetadataSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "metadata",
            mapper: __assign(__assign({}, StringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listMetadataSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSitePushSettingsSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "pushSettings",
            mapper: __assign(__assign({}, PushSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PushSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSitePushSettingsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PushSettings
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getConfigurationSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateConfigurationSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteConfig",
            mapper: __assign(__assign({}, SiteConfigResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateConfigurationSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteConfig",
            mapper: __assign(__assign({}, SiteConfigResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationSnapshotInfoSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigurationSnapshotInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getConfigurationSnapshotSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
        urlParameters: [
            resourceGroupName,
            name,
            snapshotId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var recoverSiteConfigurationSnapshotSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
        urlParameters: [
            resourceGroupName,
            name,
            snapshotId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getWebSiteContainerLogsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getContainerLogsZipSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listContinuousWebJobsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContinuousWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getContinuousWebJobSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContinuousWebJob
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteContinuousWebJobSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var startContinuousWebJobSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopContinuousWebJobSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDeploymentsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getDeploymentSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Deployment
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createDeploymentSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "deployment",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Deployment
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteDeploymentSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDeploymentLogSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
        urlParameters: [
            resourceGroupName,
            name,
            id,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Deployment
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var discoverBackupSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, RestoreRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RestoreRequest
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDomainOwnershipIdentifiersSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getDomainOwnershipIdentifierSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Identifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateDomainOwnershipIdentifierSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainOwnershipIdentifier",
            mapper: __assign(__assign({}, Identifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Identifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteDomainOwnershipIdentifierSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateDomainOwnershipIdentifierSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainOwnershipIdentifierName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainOwnershipIdentifier",
            mapper: __assign(__assign({}, Identifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Identifier
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getMSDeployStatusSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getMSDeployLogSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployLog
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceFunctionsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionEnvelopeCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getFunctionsAdminTokenSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceFunctionSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionEnvelope
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteInstanceFunctionSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateFunctionSecretSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            keyName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "key",
            mapper: __assign(__assign({}, KeyInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: KeyInfo
            },
            201: {
                bodyMapper: KeyInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteFunctionSecretSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            keyName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listFunctionKeysSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listkeys",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listFunctionSecretsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionSecrets
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHostKeysSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostKeys
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSyncStatusSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var syncFunctionsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateHostSecretSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            keyType,
            keyName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "key",
            mapper: __assign(__assign({}, KeyInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: KeyInfo
            },
            201: {
                bodyMapper: KeyInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteHostSecretSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}",
        urlParameters: [
            resourceGroupName,
            name,
            keyType,
            keyName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHostNameBindingsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostNameBindingCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getHostNameBindingSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            hostName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostNameBinding
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateHostNameBindingSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        urlParameters: [
            resourceGroupName,
            name,
            hostName1,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "hostNameBinding",
            mapper: __assign(__assign({}, HostNameBinding), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HostNameBinding
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteHostNameBindingSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            hostName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getHybridConnectionSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateHybridConnectionSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, HybridConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteHybridConnectionSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateHybridConnectionSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, HybridConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHybridConnectionsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listRelayServiceConnectionsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getRelayServiceConnectionSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateRelayServiceConnectionSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, RelayServiceConnectionEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteRelayServiceConnectionSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateRelayServiceConnectionSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        urlParameters: [
            resourceGroupName,
            name,
            entityName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, RelayServiceConnectionEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelayServiceConnectionEntity
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceIdentifiersSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppInstanceStatusCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceInfoSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}",
        urlParameters: [
            resourceGroupName,
            name,
            instanceId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebSiteInstanceStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceMsDeployStatusSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceMSDeployLogSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MSDeployLog
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceProcessSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteInstanceProcessSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceProcessDumpSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessModulesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getInstanceProcessModuleSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            baseAddress,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessThreadsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var isCloneableSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteCloneability
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteBackupsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSyncFunctionTriggersSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionSecrets
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getMigrateMySqlStatusSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MigrateMySqlStatus
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSwiftVirtualNetworkConnectionSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SwiftVirtualNetwork
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, SwiftVirtualNetwork), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SwiftVirtualNetwork
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSwiftVirtualNetworkSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSwiftVirtualNetworkConnectionSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, SwiftVirtualNetwork), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SwiftVirtualNetwork
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listNetworkFeaturesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
        urlParameters: [
            resourceGroupName,
            name,
            view,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkFeatures
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTraceOperationSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var startWebSiteNetworkTraceSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            durationInSeconds,
            maxFrameLength,
            sasUrl,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopWebSiteNetworkTraceSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTracesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTraceOperationSlotV2OperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getNetworkTracesSlotV2OperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
        urlParameters: [
            resourceGroupName,
            name,
            operationId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var generateNewSitePublishingPasswordSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPerfMonCountersSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PerfMonCounterCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSitePhpErrorLogFlagSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SitePhpErrorLogFlag
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPremierAddOnsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPremierAddOnSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var addPremierAddOnSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "premierAddOn",
            mapper: __assign(__assign({}, PremierAddOn), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deletePremierAddOnSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updatePremierAddOnSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        urlParameters: [
            resourceGroupName,
            name,
            premierAddOnName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "premierAddOn",
            mapper: __assign(__assign({}, PremierAddOnPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PremierAddOn
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPrivateAccessSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateAccess
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var putPrivateAccessVnetSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "access",
            mapper: __assign(__assign({}, PrivateAccess), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PrivateAccess
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPrivateEndpointConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            name,
            privateEndpointConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPrivateLinkResourcesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateLinkResources",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateLinkResourcesWrapper
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getProcessSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteProcessSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getProcessDumpSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessModulesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getProcessModuleSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            baseAddress,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessThreadsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
        urlParameters: [
            resourceGroupName,
            name,
            processId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPublicCertificatesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicCertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getPublicCertificateSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            publicCertificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicCertificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdatePublicCertificateSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
        urlParameters: [
            resourceGroupName,
            name,
            publicCertificateName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "publicCertificate",
            mapper: __assign(__assign({}, PublicCertificate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PublicCertificate
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deletePublicCertificateSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            publicCertificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPublishingProfileXmlWithSecretsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "publishingProfileOptions",
            mapper: __assign(__assign({}, CsmPublishingProfileOptions), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var resetSlotConfigurationSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var restartSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            softRestart,
            synchronous,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteExtensionsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSiteExtensionSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
        urlParameters: [
            resourceGroupName,
            name,
            siteExtensionId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSiteExtensionSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
        urlParameters: [
            resourceGroupName,
            name,
            siteExtensionId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotDifferencesSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotSwapEntity",
            mapper: __assign(__assign({}, CsmSlotEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SlotDifferenceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsFromDRSecondarySlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSourceControlSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteSourceControl
            },
            201: {
                bodyMapper: SiteSourceControl
            },
            202: {
                bodyMapper: SiteSourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSourceControlSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSourceControlSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteSourceControl",
            mapper: __assign(__assign({}, SiteSourceControl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteSourceControl
            },
            201: {
                bodyMapper: SiteSourceControl
            },
            202: {
                bodyMapper: SiteSourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var startSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopNetworkTraceSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var syncRepositorySlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var syncFunctionTriggersSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getTriggeredWebJobSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredWebJob
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteTriggeredWebJobSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobHistorySlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredJobHistoryCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getTriggeredWebJobHistorySlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            id,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredJobHistory
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var runTriggeredWebJobSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listUsagesSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listVnetConnectionsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getVnetConnectionSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateVnetConnectionSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteVnetConnectionSlotOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateVnetConnectionSlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getVnetConnectionGatewaySlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateVnetConnectionGatewaySlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetGateway), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateVnetConnectionGatewaySlotOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetGateway), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listWebJobsSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getWebJobSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebJob
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotDifferencesFromProductionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotSwapEntity",
            mapper: __assign(__assign({}, CsmSlotEntity), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SlotDifferenceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsFromDRSecondaryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getSourceControlOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteSourceControl
            },
            201: {
                bodyMapper: SiteSourceControl
            },
            202: {
                bodyMapper: SiteSourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteSourceControlOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateSourceControlOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteSourceControl",
            mapper: __assign(__assign({}, SiteSourceControl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteSourceControl
            },
            201: {
                bodyMapper: SiteSourceControl
            },
            202: {
                bodyMapper: SiteSourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var startOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var stopNetworkTraceOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var syncRepositoryOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var syncFunctionTriggersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getTriggeredWebJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredWebJob
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteTriggeredWebJobOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobHistoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredJobHistoryCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getTriggeredWebJobHistoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            id,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredJobHistory
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var runTriggeredWebJobOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listVnetConnectionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getVnetConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateVnetConnectionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var deleteVnetConnectionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateVnetConnectionOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetInfo), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getVnetConnectionGatewayOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateVnetConnectionGatewayOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetGateway), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateVnetConnectionGatewayOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetGateway), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listWebJobsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getWebJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
        urlParameters: [
            resourceGroupName,
            name,
            webJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebJob
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteEnvelope",
            mapper: __assign(__assign({}, Site), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Site
            },
            202: {
                bodyMapper: Site
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, RestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginListPublishingCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateMSDeployOperationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "mSDeploy",
            mapper: __assign(__assign({}, MSDeploy), { required: true })
        },
        responses: {
            201: {
                bodyMapper: MSDeployStatus
            },
            409: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateFunctionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "functionEnvelope",
            mapper: __assign(__assign({}, FunctionEnvelope), { required: true })
        },
        responses: {
            201: {
                bodyMapper: FunctionEnvelope
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateInstanceMSDeployOperationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "mSDeploy",
            mapper: __assign(__assign({}, MSDeploy), { required: true })
        },
        responses: {
            201: {
                bodyMapper: MSDeployStatus
            },
            409: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginMigrateStorageOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            subscriptionName,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "migrationOptions",
            mapper: __assign(__assign({}, StorageMigrationOptions), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageMigrationResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginMigrateMySqlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "migrationRequestEnvelope",
            mapper: __assign(__assign({}, MigrateMySqlRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Operation
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginStartWebSiteNetworkTraceOperationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            durationInSeconds,
            maxFrameLength,
            sasUrl,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreFromBackupBlobOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, RestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreFromDeletedAppOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "restoreRequest",
            mapper: __assign(__assign({}, DeletedAppRestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreSnapshotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "restoreRequest",
            mapper: __assign(__assign({}, SnapshotRestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginInstallSiteExtensionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
        urlParameters: [
            resourceGroupName,
            name,
            siteExtensionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfo
            },
            201: {
                bodyMapper: SiteExtensionInfo
            },
            429: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCopyProductionSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "copySlotEntity",
            mapper: __assign(__assign({}, CsmCopySlotEntity), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteEnvelope",
            mapper: __assign(__assign({}, Site), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Site
            },
            202: {
                bodyMapper: Site
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
        urlParameters: [
            resourceGroupName,
            name,
            backupId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, RestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginListPublishingCredentialsSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateMSDeployOperationSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "mSDeploy",
            mapper: __assign(__assign({}, MSDeploy), { required: true })
        },
        responses: {
            201: {
                bodyMapper: MSDeployStatus
            },
            409: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateInstanceFunctionSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
        urlParameters: [
            resourceGroupName,
            name,
            functionName,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "functionEnvelope",
            mapper: __assign(__assign({}, FunctionEnvelope), { required: true })
        },
        responses: {
            201: {
                bodyMapper: FunctionEnvelope
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateInstanceMSDeployOperationSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "mSDeploy",
            mapper: __assign(__assign({}, MSDeploy), { required: true })
        },
        responses: {
            201: {
                bodyMapper: MSDeployStatus
            },
            409: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginStartWebSiteNetworkTraceOperationSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            durationInSeconds,
            maxFrameLength,
            sasUrl,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginApproveOrRejectPrivateEndpointConnectionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            name,
            privateEndpointConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "privateEndpointWrapper",
            mapper: __assign(__assign({}, PrivateLinkConnectionApprovalRequestResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionResource
            },
            202: {
                bodyMapper: PrivateEndpointConnectionResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginDeletePrivateEndpointConnectionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            name,
            privateEndpointConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            204: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreFromBackupBlobSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign(__assign({}, RestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreFromDeletedAppSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "restoreRequest",
            mapper: __assign(__assign({}, DeletedAppRestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginRestoreSnapshotSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "restoreRequest",
            mapper: __assign(__assign({}, SnapshotRestoreRequest), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginInstallSiteExtensionSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
        urlParameters: [
            resourceGroupName,
            name,
            siteExtensionId,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfo
            },
            201: {
                bodyMapper: SiteExtensionInfo
            },
            429: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCopySlotSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "copySlotEntity",
            mapper: __assign(__assign({}, CsmCopySlotEntity), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginSwapSlotSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotSwapEntity",
            mapper: __assign(__assign({}, CsmSlotEntity), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateSourceControlSlotOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteSourceControl",
            mapper: __assign(__assign({}, SiteSourceControl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteSourceControl
            },
            201: {
                bodyMapper: SiteSourceControl
            },
            202: {
                bodyMapper: SiteSourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginStartNetworkTraceSlotOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            durationInSeconds,
            maxFrameLength,
            sasUrl,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginSwapSlotWithProductionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "slotSwapEntity",
            mapper: __assign(__assign({}, CsmSlotEntity), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateSourceControlOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "siteSourceControl",
            mapper: __assign(__assign({}, SiteSourceControl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SiteSourceControl
            },
            201: {
                bodyMapper: SiteSourceControl
            },
            202: {
                bodyMapper: SiteSourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var beginStartNetworkTraceOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            durationInSeconds,
            maxFrameLength,
            sasUrl,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            202: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkTrace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            includeSlots,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listBackupsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResourceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationSnapshotInfoNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigurationSnapshotInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listContinuousWebJobsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContinuousWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDeploymentsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDomainOwnershipIdentifiersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listFunctionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionEnvelopeCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHostNameBindingsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostNameBindingCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceIdentifiersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppInstanceStatusCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessModulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessThreadsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteBackupsNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPerfMonCountersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PerfMonCounterCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessModulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessThreadsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPublicCertificatesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicCertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteExtensionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listBackupsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigResourceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listConfigurationSnapshotInfoSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteConfigurationSnapshotInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listContinuousWebJobsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContinuousWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDeploymentsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listDomainOwnershipIdentifiersSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceFunctionsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionEnvelopeCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listHostNameBindingsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostNameBindingCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceIdentifiersSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppInstanceStatusCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessModulesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listInstanceProcessThreadsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteBackupsSlotNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupItemCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPerfMonCountersSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PerfMonCounterCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessModulesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessModuleInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listProcessThreadsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessThreadInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listPublicCertificatesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicCertificateCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSiteExtensionsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SiteExtensionInfoCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotDifferencesSlotNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SlotDifferenceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsFromDRSecondarySlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobHistorySlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredJobHistoryCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listUsagesSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listWebJobsSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSlotDifferencesFromProductionNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SlotDifferenceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listSnapshotsFromDRSecondaryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredWebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listTriggeredWebJobHistoryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggeredJobHistoryCollection
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listUsagesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listWebJobsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebJobCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildCollection: StaticSiteBuildCollection,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCollection: StaticSiteCollection,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteCustomDomainOverviewCollection: StaticSiteCustomDomainOverviewCollection,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSiteFunctionOverviewCollection: StaticSiteFunctionOverviewCollection,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserCollection: StaticSiteUserCollection,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StaticSites. */
    var StaticSites = /** @class */ (function () {
        /**
         * Create a StaticSites.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function StaticSites(client) {
            this.client = client;
        }
        StaticSites.prototype.previewWorkflow = function (location, staticSitesWorkflowPreviewRequest, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                staticSitesWorkflowPreviewRequest: staticSitesWorkflowPreviewRequest,
                options: options
            }, previewWorkflowOperationSpec, callback);
        };
        StaticSites.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$7, callback);
        };
        StaticSites.prototype.getStaticSitesByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, getStaticSitesByResourceGroupOperationSpec, callback);
        };
        StaticSites.prototype.getStaticSite = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getStaticSiteOperationSpec, callback);
        };
        StaticSites.prototype.createOrUpdateStaticSite = function (resourceGroupName, name, staticSiteEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                staticSiteEnvelope: staticSiteEnvelope,
                options: options
            }, createOrUpdateStaticSiteOperationSpec, callback);
        };
        StaticSites.prototype.deleteStaticSite = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteStaticSiteOperationSpec, callback);
        };
        StaticSites.prototype.updateStaticSite = function (resourceGroupName, name, staticSiteEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                staticSiteEnvelope: staticSiteEnvelope,
                options: options
            }, updateStaticSiteOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteUsers = function (resourceGroupName, name, authprovider, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                authprovider: authprovider,
                options: options
            }, listStaticSiteUsersOperationSpec, callback);
        };
        StaticSites.prototype.deleteStaticSiteUser = function (resourceGroupName, name, authprovider, userid, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                authprovider: authprovider,
                userid: userid,
                options: options
            }, deleteStaticSiteUserOperationSpec, callback);
        };
        StaticSites.prototype.updateStaticSiteUser = function (resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                authprovider: authprovider,
                userid: userid,
                staticSiteUserEnvelope: staticSiteUserEnvelope,
                options: options
            }, updateStaticSiteUserOperationSpec, callback);
        };
        StaticSites.prototype.getStaticSiteBuilds = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getStaticSiteBuildsOperationSpec, callback);
        };
        StaticSites.prototype.getStaticSiteBuild = function (resourceGroupName, name, prId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                prId: prId,
                options: options
            }, getStaticSiteBuildOperationSpec, callback);
        };
        StaticSites.prototype.deleteStaticSiteBuild = function (resourceGroupName, name, prId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                prId: prId,
                options: options
            }, deleteStaticSiteBuildOperationSpec, callback);
        };
        StaticSites.prototype.createOrUpdateStaticSiteBuildFunctionAppSettings = function (resourceGroupName, name, prId, appSettings, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                prId: prId,
                appSettings: appSettings,
                options: options
            }, createOrUpdateStaticSiteBuildFunctionAppSettingsOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteBuildFunctions = function (resourceGroupName, name, prId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                prId: prId,
                options: options
            }, listStaticSiteBuildFunctionsOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteBuildFunctionAppSettings = function (resourceGroupName, name, prId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                prId: prId,
                options: options
            }, listStaticSiteBuildFunctionAppSettingsOperationSpec, callback);
        };
        StaticSites.prototype.createOrUpdateStaticSiteFunctionAppSettings = function (resourceGroupName, name, appSettings, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                appSettings: appSettings,
                options: options
            }, createOrUpdateStaticSiteFunctionAppSettingsOperationSpec, callback);
        };
        StaticSites.prototype.createUserRolesInvitationLink = function (resourceGroupName, name, staticSiteUserRolesInvitationEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                staticSiteUserRolesInvitationEnvelope: staticSiteUserRolesInvitationEnvelope,
                options: options
            }, createUserRolesInvitationLinkOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteCustomDomains = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listStaticSiteCustomDomainsOperationSpec, callback);
        };
        StaticSites.prototype.createOrUpdateStaticSiteCustomDomain = function (resourceGroupName, name, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainName: domainName,
                options: options
            }, createOrUpdateStaticSiteCustomDomainOperationSpec, callback);
        };
        StaticSites.prototype.deleteStaticSiteCustomDomain = function (resourceGroupName, name, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainName: domainName,
                options: options
            }, deleteStaticSiteCustomDomainOperationSpec, callback);
        };
        StaticSites.prototype.validateCustomDomainCanBeAddedToStaticSite = function (resourceGroupName, name, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                domainName: domainName,
                options: options
            }, validateCustomDomainCanBeAddedToStaticSiteOperationSpec, callback);
        };
        StaticSites.prototype.detachStaticSite = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, detachStaticSiteOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteFunctions = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listStaticSiteFunctionsOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteFunctionAppSettings = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listStaticSiteFunctionAppSettingsOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteSecrets = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listStaticSiteSecretsOperationSpec, callback);
        };
        StaticSites.prototype.resetStaticSiteApiKey = function (resourceGroupName, name, resetPropertiesEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                resetPropertiesEnvelope: resetPropertiesEnvelope,
                options: options
            }, resetStaticSiteApiKeyOperationSpec, callback);
        };
        StaticSites.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        StaticSites.prototype.getStaticSitesByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getStaticSitesByResourceGroupNextOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteUsersNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listStaticSiteUsersNextOperationSpec, callback);
        };
        StaticSites.prototype.getStaticSiteBuildsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getStaticSiteBuildsNextOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteBuildFunctionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listStaticSiteBuildFunctionsNextOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteCustomDomainsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listStaticSiteCustomDomainsNextOperationSpec, callback);
        };
        StaticSites.prototype.listStaticSiteFunctionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listStaticSiteFunctionsNextOperationSpec, callback);
        };
        return StaticSites;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$c);
    var previewWorkflowOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/previewStaticSiteWorkflowFile",
        urlParameters: [
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "staticSitesWorkflowPreviewRequest",
            mapper: __assign(__assign({}, StaticSitesWorkflowPreviewRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StaticSitesWorkflowPreview
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getStaticSitesByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getStaticSiteOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteARMResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateStaticSiteOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "staticSiteEnvelope",
            mapper: __assign(__assign({}, StaticSiteARMResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StaticSiteARMResource
            },
            202: {
                bodyMapper: StaticSiteARMResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var deleteStaticSiteOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var updateStaticSiteOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "staticSiteEnvelope",
            mapper: __assign(__assign({}, StaticSitePatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StaticSiteARMResource
            },
            202: {
                bodyMapper: StaticSiteARMResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteUsersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/listUsers",
        urlParameters: [
            resourceGroupName,
            name,
            authprovider,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteUserCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var deleteStaticSiteUserOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}",
        urlParameters: [
            resourceGroupName,
            name,
            authprovider,
            userid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var updateStaticSiteUserOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}",
        urlParameters: [
            resourceGroupName,
            name,
            authprovider,
            userid,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "staticSiteUserEnvelope",
            mapper: __assign(__assign({}, StaticSiteUserARMResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StaticSiteUserARMResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getStaticSiteBuildsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteBuildCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getStaticSiteBuildOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}",
        urlParameters: [
            resourceGroupName,
            name,
            prId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteBuildARMResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var deleteStaticSiteBuildOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}",
        urlParameters: [
            resourceGroupName,
            name,
            prId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateStaticSiteBuildFunctionAppSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/config/functionappsettings",
        urlParameters: [
            resourceGroupName,
            name,
            prId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appSettings",
            mapper: __assign(__assign({}, StringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            202: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteBuildFunctionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/functions",
        urlParameters: [
            resourceGroupName,
            name,
            prId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteFunctionOverviewCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteBuildFunctionAppSettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/listFunctionAppSettings",
        urlParameters: [
            resourceGroupName,
            name,
            prId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            202: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateStaticSiteFunctionAppSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/config/functionappsettings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appSettings",
            mapper: __assign(__assign({}, StringDictionary), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            202: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createUserRolesInvitationLinkOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/createUserInvitation",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "staticSiteUserRolesInvitationEnvelope",
            mapper: __assign(__assign({}, StaticSiteUserInvitationRequestResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StaticSiteUserInvitationResponseResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteCustomDomainsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCustomDomainOverviewCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateStaticSiteCustomDomainOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCustomDomainOverviewARMResource
            },
            202: {
                bodyMapper: StaticSiteCustomDomainOverviewARMResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var deleteStaticSiteCustomDomainOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}",
        urlParameters: [
            resourceGroupName,
            name,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var validateCustomDomainCanBeAddedToStaticSiteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}/validate",
        urlParameters: [
            resourceGroupName,
            name,
            domainName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var detachStaticSiteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/detach",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteFunctionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/functions",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteFunctionOverviewCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteFunctionAppSettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listFunctionAppSettings",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            202: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listSecrets",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StringDictionary
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var resetStaticSiteApiKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/resetapikey",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resetPropertiesEnvelope",
            mapper: __assign(__assign({}, StaticSiteResetPropertiesARMResource), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getStaticSitesByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteUsersNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteUserCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getStaticSiteBuildsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteBuildCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteBuildFunctionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteFunctionOverviewCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteCustomDomainsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteCustomDomainOverviewCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listStaticSiteFunctionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StaticSiteFunctionOverviewCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentCollection: AppServiceEnvironmentCollection,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanCollection: AppServicePlanCollection,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CsmUsageQuota: CsmUsageQuota,
        CsmUsageQuotaCollection: CsmUsageQuotaCollection,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        EndpointDependency: EndpointDependency,
        EndpointDetail: EndpointDetail,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentDiagnostics: HostingEnvironmentDiagnostics,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        InboundEnvironmentEndpoint: InboundEnvironmentEndpoint,
        InboundEnvironmentEndpointCollection: InboundEnvironmentEndpointCollection,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        LocalizableString: LocalizableString,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        Operation: Operation,
        OutboundEnvironmentEndpoint: OutboundEnvironmentEndpoint,
        OutboundEnvironmentEndpointCollection: OutboundEnvironmentEndpointCollection,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResourceMetricDefinitionCollection: ResourceMetricDefinitionCollection,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SkuInfo: SkuInfo,
        SkuInfoCollection: SkuInfoCollection,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StampCapacityCollection: StampCapacityCollection,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        UsageCollection: UsageCollection,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebAppCollection: WebAppCollection,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolCollection: WorkerPoolCollection,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AppServiceEnvironments. */
    var AppServiceEnvironments = /** @class */ (function () {
        /**
         * Create a AppServiceEnvironments.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function AppServiceEnvironments(client) {
            this.client = client;
        }
        AppServiceEnvironments.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$8, callback);
        };
        AppServiceEnvironments.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        AppServiceEnvironments.prototype.get = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Description for Create or update an App Service Environment.
         * @summary Create or update an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsCreateOrUpdateResponse>
         */
        AppServiceEnvironments.prototype.createOrUpdate = function (resourceGroupName, name, hostingEnvironmentEnvelope, options) {
            return this.beginCreateOrUpdate(resourceGroupName, name, hostingEnvironmentEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Description for Delete an App Service Environment.
         * @summary Delete an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        AppServiceEnvironments.prototype.deleteMethod = function (resourceGroupName, name, options) {
            return this.beginDeleteMethod(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.update = function (resourceGroupName, name, hostingEnvironmentEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                hostingEnvironmentEnvelope: hostingEnvironmentEnvelope,
                options: options
            }, updateOperationSpec$4, callback);
        };
        AppServiceEnvironments.prototype.listCapacities = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listCapacitiesOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.getVipInfo = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getVipInfoOperationSpec, callback);
        };
        /**
         * Description for Move an App Service Environment to a different VNET.
         * @summary Move an App Service Environment to a different VNET.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param vnetInfo Details for the new virtual network.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsChangeVnetResponse>
         */
        AppServiceEnvironments.prototype.changeVnet = function (resourceGroupName, name, vnetInfo, options) {
            return this.beginChangeVnet(resourceGroupName, name, vnetInfo, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.listDiagnostics = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listDiagnosticsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.getDiagnosticsItem = function (resourceGroupName, name, diagnosticsName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                diagnosticsName: diagnosticsName,
                options: options
            }, getDiagnosticsItemOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.getInboundNetworkDependenciesEndpoints = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getInboundNetworkDependenciesEndpointsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRolePools = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listMultiRolePoolsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.getMultiRolePool = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getMultiRolePoolOperationSpec, callback);
        };
        /**
         * Description for Create or update a multi-role pool.
         * @summary Create or update a multi-role pool.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param multiRolePoolEnvelope Properties of the multi-role pool.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsCreateOrUpdateMultiRolePoolResponse>
         */
        AppServiceEnvironments.prototype.createOrUpdateMultiRolePool = function (resourceGroupName, name, multiRolePoolEnvelope, options) {
            return this.beginCreateOrUpdateMultiRolePool(resourceGroupName, name, multiRolePoolEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.updateMultiRolePool = function (resourceGroupName, name, multiRolePoolEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                multiRolePoolEnvelope: multiRolePoolEnvelope,
                options: options
            }, updateMultiRolePoolOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRolePoolInstanceMetricDefinitions = function (resourceGroupName, name, instance, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                instance: instance,
                options: options
            }, listMultiRolePoolInstanceMetricDefinitionsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRoleMetricDefinitions = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listMultiRoleMetricDefinitionsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRolePoolSkus = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listMultiRolePoolSkusOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRoleUsages = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listMultiRoleUsagesOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listOperations = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listOperationsOperationSpec$3, callback);
        };
        AppServiceEnvironments.prototype.getOutboundNetworkDependenciesEndpoints = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOutboundNetworkDependenciesEndpointsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.reboot = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, rebootOperationSpec, callback);
        };
        /**
         * Description for Resume an App Service Environment.
         * @summary Resume an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsResumeResponse>
         */
        AppServiceEnvironments.prototype.resume = function (resourceGroupName, name, options) {
            return this.beginResume(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.listAppServicePlans = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listAppServicePlansOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWebApps = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listWebAppsOperationSpec, callback);
        };
        /**
         * Description for Suspend an App Service Environment.
         * @summary Suspend an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsSuspendResponse>
         */
        AppServiceEnvironments.prototype.suspend = function (resourceGroupName, name, options) {
            return this.beginSuspend(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.listUsages = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listUsagesOperationSpec$1, callback);
        };
        AppServiceEnvironments.prototype.listWorkerPools = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listWorkerPoolsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.getWorkerPool = function (resourceGroupName, name, workerPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                options: options
            }, getWorkerPoolOperationSpec, callback);
        };
        /**
         * Description for Create or update a worker pool.
         * @summary Create or update a worker pool.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param workerPoolName Name of the worker pool.
         * @param workerPoolEnvelope Properties of the worker pool.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsCreateOrUpdateWorkerPoolResponse>
         */
        AppServiceEnvironments.prototype.createOrUpdateWorkerPool = function (resourceGroupName, name, workerPoolName, workerPoolEnvelope, options) {
            return this.beginCreateOrUpdateWorkerPool(resourceGroupName, name, workerPoolName, workerPoolEnvelope, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.updateWorkerPool = function (resourceGroupName, name, workerPoolName, workerPoolEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                workerPoolEnvelope: workerPoolEnvelope,
                options: options
            }, updateWorkerPoolOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWorkerPoolInstanceMetricDefinitions = function (resourceGroupName, name, workerPoolName, instance, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                instance: instance,
                options: options
            }, listWorkerPoolInstanceMetricDefinitionsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWebWorkerMetricDefinitions = function (resourceGroupName, name, workerPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                options: options
            }, listWebWorkerMetricDefinitionsOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWorkerPoolSkus = function (resourceGroupName, name, workerPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                options: options
            }, listWorkerPoolSkusOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWebWorkerUsages = function (resourceGroupName, name, workerPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                options: options
            }, listWebWorkerUsagesOperationSpec, callback);
        };
        /**
         * Description for Create or update an App Service Environment.
         * @summary Create or update an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginCreateOrUpdate = function (resourceGroupName, name, hostingEnvironmentEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                hostingEnvironmentEnvelope: hostingEnvironmentEnvelope,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Description for Delete an App Service Environment.
         * @summary Delete an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginDeleteMethod = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Description for Move an App Service Environment to a different VNET.
         * @summary Move an App Service Environment to a different VNET.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param vnetInfo Details for the new virtual network.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginChangeVnet = function (resourceGroupName, name, vnetInfo, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetInfo: vnetInfo,
                options: options
            }, beginChangeVnetOperationSpec, options);
        };
        /**
         * Description for Create or update a multi-role pool.
         * @summary Create or update a multi-role pool.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param multiRolePoolEnvelope Properties of the multi-role pool.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginCreateOrUpdateMultiRolePool = function (resourceGroupName, name, multiRolePoolEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                multiRolePoolEnvelope: multiRolePoolEnvelope,
                options: options
            }, beginCreateOrUpdateMultiRolePoolOperationSpec, options);
        };
        /**
         * Description for Resume an App Service Environment.
         * @summary Resume an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginResume = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginResumeOperationSpec, options);
        };
        /**
         * Description for Suspend an App Service Environment.
         * @summary Suspend an App Service Environment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginSuspend = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginSuspendOperationSpec, options);
        };
        /**
         * Description for Create or update a worker pool.
         * @summary Create or update a worker pool.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service Environment.
         * @param workerPoolName Name of the worker pool.
         * @param workerPoolEnvelope Properties of the worker pool.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginCreateOrUpdateWorkerPool = function (resourceGroupName, name, workerPoolName, workerPoolEnvelope, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerPoolName: workerPoolName,
                workerPoolEnvelope: workerPoolEnvelope,
                options: options
            }, beginCreateOrUpdateWorkerPoolOperationSpec, options);
        };
        AppServiceEnvironments.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        AppServiceEnvironments.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$4, callback);
        };
        AppServiceEnvironments.prototype.listCapacitiesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listCapacitiesNextOperationSpec, callback);
        };
        /**
         * Description for Move an App Service Environment to a different VNET.
         * @summary Move an App Service Environment to a different VNET.
         * @param nextPageLink The NextLink from the previous successful call to List operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsChangeVnetNextResponse>
         */
        AppServiceEnvironments.prototype.changeVnetNext = function (nextPageLink, options) {
            return this.beginChangeVnetNext(nextPageLink, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.getInboundNetworkDependenciesEndpointsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getInboundNetworkDependenciesEndpointsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRolePoolsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listMultiRolePoolsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRolePoolInstanceMetricDefinitionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listMultiRolePoolInstanceMetricDefinitionsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRoleMetricDefinitionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listMultiRoleMetricDefinitionsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRolePoolSkusNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listMultiRolePoolSkusNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listMultiRoleUsagesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listMultiRoleUsagesNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.getOutboundNetworkDependenciesEndpointsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getOutboundNetworkDependenciesEndpointsNextOperationSpec, callback);
        };
        /**
         * Description for Resume an App Service Environment.
         * @summary Resume an App Service Environment.
         * @param nextPageLink The NextLink from the previous successful call to List operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsResumeNextResponse>
         */
        AppServiceEnvironments.prototype.resumeNext = function (nextPageLink, options) {
            return this.beginResumeNext(nextPageLink, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.listAppServicePlansNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAppServicePlansNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWebAppsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebAppsNextOperationSpec, callback);
        };
        /**
         * Description for Suspend an App Service Environment.
         * @summary Suspend an App Service Environment.
         * @param nextPageLink The NextLink from the previous successful call to List operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServiceEnvironmentsSuspendNextResponse>
         */
        AppServiceEnvironments.prototype.suspendNext = function (nextPageLink, options) {
            return this.beginSuspendNext(nextPageLink, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServiceEnvironments.prototype.listUsagesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listUsagesNextOperationSpec$1, callback);
        };
        AppServiceEnvironments.prototype.listWorkerPoolsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWorkerPoolsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWorkerPoolInstanceMetricDefinitionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWorkerPoolInstanceMetricDefinitionsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWebWorkerMetricDefinitionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebWorkerMetricDefinitionsNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWorkerPoolSkusNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWorkerPoolSkusNextOperationSpec, callback);
        };
        AppServiceEnvironments.prototype.listWebWorkerUsagesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebWorkerUsagesNextOperationSpec, callback);
        };
        /**
         * Description for Move an App Service Environment to a different VNET.
         * @summary Move an App Service Environment to a different VNET.
         * @param nextPageLink The NextLink from the previous successful call to List operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginChangeVnetNext = function (nextPageLink, options) {
            return this.client.sendLRORequest({
                nextPageLink: nextPageLink,
                options: options
            }, beginChangeVnetNextOperationSpec, options);
        };
        /**
         * Description for Resume an App Service Environment.
         * @summary Resume an App Service Environment.
         * @param nextPageLink The NextLink from the previous successful call to List operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginResumeNext = function (nextPageLink, options) {
            return this.client.sendLRORequest({
                nextPageLink: nextPageLink,
                options: options
            }, beginResumeNextOperationSpec, options);
        };
        /**
         * Description for Suspend an App Service Environment.
         * @summary Suspend an App Service Environment.
         * @param nextPageLink The NextLink from the previous successful call to List operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServiceEnvironments.prototype.beginSuspendNext = function (nextPageLink, options) {
            return this.client.sendLRORequest({
                nextPageLink: nextPageLink,
                options: options
            }, beginSuspendNextOperationSpec, options);
        };
        return AppServiceEnvironments;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$d);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "hostingEnvironmentEnvelope",
            mapper: __assign(__assign({}, AppServiceEnvironmentPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentResource
            },
            201: {
                bodyMapper: AppServiceEnvironmentResource
            },
            202: {
                bodyMapper: AppServiceEnvironmentResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listCapacitiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StampCapacityCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getVipInfoOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AddressResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listDiagnosticsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HostingEnvironmentDiagnostics"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getDiagnosticsItemOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}",
        urlParameters: [
            resourceGroupName,
            name,
            diagnosticsName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HostingEnvironmentDiagnostics
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getInboundNetworkDependenciesEndpointsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/inboundNetworkDependenciesEndpoints",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InboundEnvironmentEndpointCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRolePoolsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkerPoolCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getMultiRolePoolOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkerPoolResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var updateMultiRolePoolOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "multiRolePoolEnvelope",
            mapper: __assign(__assign({}, WorkerPoolResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkerPoolResource
            },
            202: {
                bodyMapper: WorkerPoolResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRolePoolInstanceMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions",
        urlParameters: [
            resourceGroupName,
            name,
            instance,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRoleMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRolePoolSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRoleUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listOperationsOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getOutboundNetworkDependenciesEndpointsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/outboundNetworkDependenciesEndpoints",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OutboundEnvironmentEndpointCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var rebootOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listAppServicePlansOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlanCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWebAppsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            propertiesToInclude,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listUsagesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWorkerPoolsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkerPoolCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getWorkerPoolOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkerPoolResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var updateWorkerPoolOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workerPoolEnvelope",
            mapper: __assign(__assign({}, WorkerPoolResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkerPoolResource
            },
            202: {
                bodyMapper: WorkerPoolResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWorkerPoolInstanceMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            instance,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWebWorkerMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWorkerPoolSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWebWorkerUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "hostingEnvironmentEnvelope",
            mapper: __assign(__assign({}, AppServiceEnvironmentResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentResource
            },
            201: {
                bodyMapper: AppServiceEnvironmentResource
            },
            202: {
                bodyMapper: AppServiceEnvironmentResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            forceDelete,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginChangeVnetOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/changeVirtualNetwork",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vnetInfo",
            mapper: __assign(__assign({}, VirtualNetworkProfile), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            202: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginCreateOrUpdateMultiRolePoolOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "multiRolePoolEnvelope",
            mapper: __assign(__assign({}, WorkerPoolResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkerPoolResource
            },
            202: {
                bodyMapper: WorkerPoolResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginResumeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            202: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginSuspendOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            202: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginCreateOrUpdateWorkerPoolOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        urlParameters: [
            resourceGroupName,
            name,
            workerPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workerPoolEnvelope",
            mapper: __assign(__assign({}, WorkerPoolResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkerPoolResource
            },
            202: {
                bodyMapper: WorkerPoolResource
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listByResourceGroupNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServiceEnvironmentCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listCapacitiesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StampCapacityCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getInboundNetworkDependenciesEndpointsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InboundEnvironmentEndpointCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRolePoolsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkerPoolCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRolePoolInstanceMetricDefinitionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRoleMetricDefinitionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRolePoolSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listMultiRoleUsagesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var getOutboundNetworkDependenciesEndpointsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OutboundEnvironmentEndpointCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listAppServicePlansNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlanCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWebAppsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            propertiesToInclude,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listUsagesNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWorkerPoolsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkerPoolCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWorkerPoolInstanceMetricDefinitionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWebWorkerMetricDefinitionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceMetricDefinitionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWorkerPoolSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuInfoCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listWebWorkerUsagesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginChangeVnetNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            202: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginResumeNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            202: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };
    var beginSuspendNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            202: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanCollection: AppServicePlanCollection,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CsmUsageQuota: CsmUsageQuota,
        CsmUsageQuotaCollection: CsmUsageQuotaCollection,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionCollection: HybridConnectionCollection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        LocalizableString: LocalizableString,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceCollection: ResourceCollection,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebAppCollection: WebAppCollection,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AppServicePlans. */
    var AppServicePlans = /** @class */ (function () {
        /**
         * Create a AppServicePlans.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function AppServicePlans(client) {
            this.client = client;
        }
        AppServicePlans.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$9, callback);
        };
        AppServicePlans.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$5, callback);
        };
        AppServicePlans.prototype.get = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Description for Creates or updates an App Service Plan.
         * @summary Creates or updates an App Service Plan.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service plan.
         * @param appServicePlan Details of the App Service plan.
         * @param [options] The optional parameters
         * @returns Promise<Models.AppServicePlansCreateOrUpdateResponse>
         */
        AppServicePlans.prototype.createOrUpdate = function (resourceGroupName, name, appServicePlan, options) {
            return this.beginCreateOrUpdate(resourceGroupName, name, appServicePlan, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AppServicePlans.prototype.deleteMethod = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        AppServicePlans.prototype.update = function (resourceGroupName, name, appServicePlan, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                appServicePlan: appServicePlan,
                options: options
            }, updateOperationSpec$5, callback);
        };
        AppServicePlans.prototype.listCapabilities = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listCapabilitiesOperationSpec, callback);
        };
        AppServicePlans.prototype.getHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                options: options
            }, getHybridConnectionOperationSpec$1, callback);
        };
        AppServicePlans.prototype.deleteHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                options: options
            }, deleteHybridConnectionOperationSpec$1, callback);
        };
        AppServicePlans.prototype.listHybridConnectionKeys = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                options: options
            }, listHybridConnectionKeysOperationSpec, callback);
        };
        AppServicePlans.prototype.listWebAppsByHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                namespaceName: namespaceName,
                relayName: relayName,
                options: options
            }, listWebAppsByHybridConnectionOperationSpec, callback);
        };
        AppServicePlans.prototype.getHybridConnectionPlanLimit = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getHybridConnectionPlanLimitOperationSpec, callback);
        };
        AppServicePlans.prototype.listHybridConnections = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listHybridConnectionsOperationSpec$1, callback);
        };
        AppServicePlans.prototype.restartWebApps = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, restartWebAppsOperationSpec, callback);
        };
        AppServicePlans.prototype.listWebApps = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listWebAppsOperationSpec$1, callback);
        };
        AppServicePlans.prototype.getServerFarmSkus = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getServerFarmSkusOperationSpec, callback);
        };
        AppServicePlans.prototype.listUsages = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listUsagesOperationSpec$2, callback);
        };
        AppServicePlans.prototype.listVnets = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listVnetsOperationSpec, callback);
        };
        AppServicePlans.prototype.getVnetFromServerFarm = function (resourceGroupName, name, vnetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                options: options
            }, getVnetFromServerFarmOperationSpec, callback);
        };
        AppServicePlans.prototype.getVnetGateway = function (resourceGroupName, name, vnetName, gatewayName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                options: options
            }, getVnetGatewayOperationSpec, callback);
        };
        AppServicePlans.prototype.updateVnetGateway = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                gatewayName: gatewayName,
                connectionEnvelope: connectionEnvelope,
                options: options
            }, updateVnetGatewayOperationSpec, callback);
        };
        AppServicePlans.prototype.listRoutesForVnet = function (resourceGroupName, name, vnetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                options: options
            }, listRoutesForVnetOperationSpec, callback);
        };
        AppServicePlans.prototype.getRouteForVnet = function (resourceGroupName, name, vnetName, routeName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                routeName: routeName,
                options: options
            }, getRouteForVnetOperationSpec, callback);
        };
        AppServicePlans.prototype.createOrUpdateVnetRoute = function (resourceGroupName, name, vnetName, routeName, route, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                routeName: routeName,
                route: route,
                options: options
            }, createOrUpdateVnetRouteOperationSpec, callback);
        };
        AppServicePlans.prototype.deleteVnetRoute = function (resourceGroupName, name, vnetName, routeName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                routeName: routeName,
                options: options
            }, deleteVnetRouteOperationSpec, callback);
        };
        AppServicePlans.prototype.updateVnetRoute = function (resourceGroupName, name, vnetName, routeName, route, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                vnetName: vnetName,
                routeName: routeName,
                route: route,
                options: options
            }, updateVnetRouteOperationSpec, callback);
        };
        AppServicePlans.prototype.rebootWorker = function (resourceGroupName, name, workerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                workerName: workerName,
                options: options
            }, rebootWorkerOperationSpec, callback);
        };
        /**
         * Description for Creates or updates an App Service Plan.
         * @summary Creates or updates an App Service Plan.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param name Name of the App Service plan.
         * @param appServicePlan Details of the App Service plan.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AppServicePlans.prototype.beginCreateOrUpdate = function (resourceGroupName, name, appServicePlan, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                appServicePlan: appServicePlan,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        AppServicePlans.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        AppServicePlans.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$5, callback);
        };
        AppServicePlans.prototype.listWebAppsByHybridConnectionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebAppsByHybridConnectionNextOperationSpec, callback);
        };
        AppServicePlans.prototype.listHybridConnectionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHybridConnectionsNextOperationSpec, callback);
        };
        AppServicePlans.prototype.listWebAppsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listWebAppsNextOperationSpec$1, callback);
        };
        AppServicePlans.prototype.listUsagesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listUsagesNextOperationSpec$2, callback);
        };
        return AppServicePlans;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$e);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            detailed,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlanCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listByResourceGroupOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlanCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlan
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appServicePlan",
            mapper: __assign(__assign({}, AppServicePlanPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServicePlan
            },
            202: {
                bodyMapper: AppServicePlan
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listCapabilitiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capability"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getHybridConnectionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var deleteHybridConnectionOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listHybridConnectionKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnectionKey
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listWebAppsByHybridConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites",
        urlParameters: [
            resourceGroupName,
            name,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getHybridConnectionPlanLimitOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnectionLimits
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listHybridConnectionsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnectionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var restartWebAppsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            softRestart,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listWebAppsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            skipToken,
            filter,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getServerFarmSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listUsagesOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listVnetsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getVnetFromServerFarmOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VnetInfo
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getVnetGatewayOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var updateVnetGatewayOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            gatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "connectionEnvelope",
            mapper: __assign(__assign({}, VnetGateway), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetGateway
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listRoutesForVnetOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetRoute"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var getRouteForVnetOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VnetRoute"
                            }
                        }
                    }
                }
            },
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var createOrUpdateVnetRouteOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "route",
            mapper: __assign(__assign({}, VnetRoute), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetRoute
            },
            400: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var deleteVnetRouteOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var updateVnetRouteOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            name,
            vnetName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "route",
            mapper: __assign(__assign({}, VnetRoute), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetRoute
            },
            400: {},
            404: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var rebootWorkerOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
        urlParameters: [
            resourceGroupName,
            name,
            workerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appServicePlan",
            mapper: __assign(__assign({}, AppServicePlan), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppServicePlan
            },
            202: {
                bodyMapper: AppServicePlan
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            detailed,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlanCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listByResourceGroupNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppServicePlanCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listWebAppsByHybridConnectionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listHybridConnectionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnectionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listWebAppsNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            skipToken,
            filter,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebAppCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listUsagesNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CsmUsageQuotaCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbnormalTimePeriod: AbnormalTimePeriod,
        Address: Address,
        AddressResponse: AddressResponse,
        AllowedAudiencesValidation: AllowedAudiencesValidation,
        AnalysisData: AnalysisData,
        AnalysisDefinition: AnalysisDefinition,
        ApiDefinitionInfo: ApiDefinitionInfo,
        ApiManagementConfig: ApiManagementConfig,
        ApplicationLogsConfig: ApplicationLogsConfig,
        ApplicationStack: ApplicationStack,
        ApplicationStackResource: ApplicationStackResource,
        AppRegistration: AppRegistration,
        AppServiceCertificate: AppServiceCertificate,
        AppServiceCertificateOrder: AppServiceCertificateOrder,
        AppServiceCertificateOrderPatchResource: AppServiceCertificateOrderPatchResource,
        AppServiceCertificatePatchResource: AppServiceCertificatePatchResource,
        AppServiceCertificateResource: AppServiceCertificateResource,
        AppServiceEnvironmentPatchResource: AppServiceEnvironmentPatchResource,
        AppServiceEnvironmentResource: AppServiceEnvironmentResource,
        AppServicePlan: AppServicePlan,
        AppServicePlanPatchResource: AppServicePlanPatchResource,
        ArmIdWrapper: ArmIdWrapper,
        AuthPlatform: AuthPlatform,
        AutoHealActions: AutoHealActions,
        AutoHealCustomAction: AutoHealCustomAction,
        AutoHealRules: AutoHealRules,
        AutoHealTriggers: AutoHealTriggers,
        AzureActiveDirectory: AzureActiveDirectory,
        AzureActiveDirectoryLogin: AzureActiveDirectoryLogin,
        AzureActiveDirectoryRegistration: AzureActiveDirectoryRegistration,
        AzureActiveDirectoryValidation: AzureActiveDirectoryValidation,
        AzureBlobStorageApplicationLogsConfig: AzureBlobStorageApplicationLogsConfig,
        AzureBlobStorageHttpLogsConfig: AzureBlobStorageHttpLogsConfig,
        AzureStorageInfoValue: AzureStorageInfoValue,
        AzureStoragePropertyDictionaryResource: AzureStoragePropertyDictionaryResource,
        AzureTableStorageApplicationLogsConfig: AzureTableStorageApplicationLogsConfig,
        BackupItem: BackupItem,
        BackupRequest: BackupRequest,
        BackupSchedule: BackupSchedule,
        BaseResource: BaseResource,
        BillingMeter: BillingMeter,
        BlobStorageTokenStore: BlobStorageTokenStore,
        Capability: Capability,
        Certificate: Certificate,
        CertificateDetails: CertificateDetails,
        CertificateEmail: CertificateEmail,
        CertificateOrderAction: CertificateOrderAction,
        CertificatePatchResource: CertificatePatchResource,
        ClientRegistration: ClientRegistration,
        CloningInfo: CloningInfo,
        ConnectionStringDictionary: ConnectionStringDictionary,
        ConnStringInfo: ConnStringInfo,
        ConnStringValueTypePair: ConnStringValueTypePair,
        Contact: Contact,
        ContainerCpuStatistics: ContainerCpuStatistics,
        ContainerCpuUsage: ContainerCpuUsage,
        ContainerInfo: ContainerInfo,
        ContainerMemoryStatistics: ContainerMemoryStatistics,
        ContainerNetworkInterfaceStatistics: ContainerNetworkInterfaceStatistics,
        ContainerThrottlingData: ContainerThrottlingData,
        ContinuousWebJob: ContinuousWebJob,
        CookieExpiration: CookieExpiration,
        CorsSettings: CorsSettings,
        CsmPublishingCredentialsPoliciesCollection: CsmPublishingCredentialsPoliciesCollection,
        CsmPublishingCredentialsPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
        CustomHostnameAnalysisResult: CustomHostnameAnalysisResult,
        CustomOpenIdConnectProvider: CustomOpenIdConnectProvider,
        DatabaseBackupSetting: DatabaseBackupSetting,
        DataSource: DataSource,
        DataTableResponseColumn: DataTableResponseColumn,
        DataTableResponseObject: DataTableResponseObject,
        DefaultErrorResponse: DefaultErrorResponse,
        DefaultErrorResponseError: DefaultErrorResponseError,
        DefaultErrorResponseErrorDetailsItem: DefaultErrorResponseErrorDetailsItem,
        DeletedAppRestoreRequest: DeletedAppRestoreRequest,
        DeletedSite: DeletedSite,
        Deployment: Deployment,
        DetectorAbnormalTimePeriod: DetectorAbnormalTimePeriod,
        DetectorDefinition: DetectorDefinition,
        DetectorInfo: DetectorInfo,
        DetectorResponse: DetectorResponse,
        DiagnosticAnalysis: DiagnosticAnalysis,
        DiagnosticCategory: DiagnosticCategory,
        DiagnosticData: DiagnosticData,
        DiagnosticDetectorResponse: DiagnosticDetectorResponse,
        DiagnosticMetricSample: DiagnosticMetricSample,
        DiagnosticMetricSet: DiagnosticMetricSet,
        Domain: Domain,
        DomainOwnershipIdentifier: DomainOwnershipIdentifier,
        DomainPatchResource: DomainPatchResource,
        DomainPurchaseConsent: DomainPurchaseConsent,
        EnabledConfig: EnabledConfig,
        ErrorEntity: ErrorEntity,
        Experiments: Experiments,
        Facebook: Facebook,
        FileSystemApplicationLogsConfig: FileSystemApplicationLogsConfig,
        FileSystemHttpLogsConfig: FileSystemHttpLogsConfig,
        FileSystemTokenStore: FileSystemTokenStore,
        ForwardProxy: ForwardProxy,
        FunctionEnvelope: FunctionEnvelope,
        GeoRegion: GeoRegion,
        GitHub: GitHub,
        GlobalValidation: GlobalValidation,
        Google: Google,
        HandlerMapping: HandlerMapping,
        HostingEnvironmentProfile: HostingEnvironmentProfile,
        HostName: HostName,
        HostNameBinding: HostNameBinding,
        HostNameSslState: HostNameSslState,
        HttpLogsConfig: HttpLogsConfig,
        HttpSettings: HttpSettings,
        HttpSettingsRoutes: HttpSettingsRoutes,
        HybridConnection: HybridConnection,
        HybridConnectionKey: HybridConnectionKey,
        HybridConnectionLimits: HybridConnectionLimits,
        Identifier: Identifier,
        IdentityProviders: IdentityProviders,
        IpSecurityRestriction: IpSecurityRestriction,
        JwtClaimChecks: JwtClaimChecks,
        Login: Login,
        LoginRoutes: LoginRoutes,
        LoginScopes: LoginScopes,
        ManagedServiceIdentity: ManagedServiceIdentity,
        ManagedServiceIdentityUserAssignedIdentitiesValue: ManagedServiceIdentityUserAssignedIdentitiesValue,
        MigrateMySqlRequest: MigrateMySqlRequest,
        MigrateMySqlStatus: MigrateMySqlStatus,
        MSDeploy: MSDeploy,
        MSDeployLog: MSDeployLog,
        MSDeployLogEntry: MSDeployLogEntry,
        MSDeployStatus: MSDeployStatus,
        NameValuePair: NameValuePair,
        NetworkAccessControlEntry: NetworkAccessControlEntry,
        NetworkFeatures: NetworkFeatures,
        Nonce: Nonce,
        OpenIdConnectClientCredential: OpenIdConnectClientCredential,
        OpenIdConnectConfig: OpenIdConnectConfig,
        OpenIdConnectLogin: OpenIdConnectLogin,
        OpenIdConnectRegistration: OpenIdConnectRegistration,
        PremierAddOn: PremierAddOn,
        PremierAddOnOffer: PremierAddOnOffer,
        PremierAddOnPatchResource: PremierAddOnPatchResource,
        PrivateAccess: PrivateAccess,
        PrivateAccessSubnet: PrivateAccessSubnet,
        PrivateAccessVirtualNetwork: PrivateAccessVirtualNetwork,
        PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
        PrivateLinkConnectionApprovalRequestResource: PrivateLinkConnectionApprovalRequestResource,
        PrivateLinkConnectionState: PrivateLinkConnectionState,
        ProcessInfo: ProcessInfo,
        ProcessModuleInfo: ProcessModuleInfo,
        ProcessThreadInfo: ProcessThreadInfo,
        ProxyOnlyResource: ProxyOnlyResource,
        PublicCertificate: PublicCertificate,
        PushSettings: PushSettings,
        RampUpRule: RampUpRule,
        Recommendation: Recommendation,
        RecommendationRule: RecommendationRule,
        ReissueCertificateOrderRequest: ReissueCertificateOrderRequest,
        RelayServiceConnectionEntity: RelayServiceConnectionEntity,
        Rendering: Rendering,
        RenewCertificateOrderRequest: RenewCertificateOrderRequest,
        RequestsBasedTrigger: RequestsBasedTrigger,
        Resource: Resource,
        ResourceHealthMetadata: ResourceHealthMetadata,
        ResourceHealthMetadataCollection: ResourceHealthMetadataCollection,
        ResourceMetricAvailability: ResourceMetricAvailability,
        ResourceMetricDefinition: ResourceMetricDefinition,
        ResponseMetaData: ResponseMetaData,
        RestoreRequest: RestoreRequest,
        Site: Site,
        SiteAuthSettings: SiteAuthSettings,
        SiteAuthSettingsV2: SiteAuthSettingsV2,
        SiteConfig: SiteConfig,
        SiteConfigResource: SiteConfigResource,
        SiteConfigurationSnapshotInfo: SiteConfigurationSnapshotInfo,
        SiteExtensionInfo: SiteExtensionInfo,
        SiteLimits: SiteLimits,
        SiteLogsConfig: SiteLogsConfig,
        SiteMachineKey: SiteMachineKey,
        SitePatchResource: SitePatchResource,
        SitePhpErrorLogFlag: SitePhpErrorLogFlag,
        SiteSourceControl: SiteSourceControl,
        SkuCapacity: SkuCapacity,
        SkuDescription: SkuDescription,
        SlotConfigNamesResource: SlotConfigNamesResource,
        SlotDifference: SlotDifference,
        SlotSwapStatus: SlotSwapStatus,
        SlowRequestsBasedTrigger: SlowRequestsBasedTrigger,
        Snapshot: Snapshot,
        SnapshotRecoverySource: SnapshotRecoverySource,
        SnapshotRestoreRequest: SnapshotRestoreRequest,
        Solution: Solution,
        SourceControl: SourceControl,
        StackMajorVersion: StackMajorVersion,
        StackMinorVersion: StackMinorVersion,
        StampCapacity: StampCapacity,
        StaticSiteARMResource: StaticSiteARMResource,
        StaticSiteBuildARMResource: StaticSiteBuildARMResource,
        StaticSiteBuildProperties: StaticSiteBuildProperties,
        StaticSiteCustomDomainOverviewARMResource: StaticSiteCustomDomainOverviewARMResource,
        StaticSiteFunctionOverviewARMResource: StaticSiteFunctionOverviewARMResource,
        StaticSitePatchResource: StaticSitePatchResource,
        StaticSiteResetPropertiesARMResource: StaticSiteResetPropertiesARMResource,
        StaticSitesWorkflowPreview: StaticSitesWorkflowPreview,
        StaticSitesWorkflowPreviewRequest: StaticSitesWorkflowPreviewRequest,
        StaticSiteUserARMResource: StaticSiteUserARMResource,
        StaticSiteUserInvitationRequestResource: StaticSiteUserInvitationRequestResource,
        StaticSiteUserInvitationResponseResource: StaticSiteUserInvitationResponseResource,
        StatusCodesBasedTrigger: StatusCodesBasedTrigger,
        StorageMigrationOptions: StorageMigrationOptions,
        StorageMigrationResponse: StorageMigrationResponse,
        StringDictionary: StringDictionary,
        SwiftVirtualNetwork: SwiftVirtualNetwork,
        SystemData: SystemData,
        TokenStore: TokenStore,
        TopLevelDomain: TopLevelDomain,
        TriggeredJobHistory: TriggeredJobHistory,
        TriggeredJobRun: TriggeredJobRun,
        TriggeredWebJob: TriggeredWebJob,
        Twitter: Twitter,
        TwitterRegistration: TwitterRegistration,
        Usage: Usage,
        User: User,
        VirtualApplication: VirtualApplication,
        VirtualDirectory: VirtualDirectory,
        VirtualIPMapping: VirtualIPMapping,
        VirtualNetworkProfile: VirtualNetworkProfile,
        VnetGateway: VnetGateway,
        VnetInfo: VnetInfo,
        VnetParameters: VnetParameters,
        VnetRoute: VnetRoute,
        VnetValidationFailureDetails: VnetValidationFailureDetails,
        VnetValidationTestFailure: VnetValidationTestFailure,
        WebJob: WebJob,
        WebSiteInstanceStatus: WebSiteInstanceStatus,
        WorkerPool: WorkerPool,
        WorkerPoolResource: WorkerPoolResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceHealthMetadataOperations. */
    var ResourceHealthMetadataOperations = /** @class */ (function () {
        /**
         * Create a ResourceHealthMetadataOperations.
         * @param {WebSiteManagementClientContext} client Reference to the service client.
         */
        function ResourceHealthMetadataOperations(client) {
            this.client = client;
        }
        ResourceHealthMetadataOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$a, callback);
        };
        ResourceHealthMetadataOperations.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$6, callback);
        };
        ResourceHealthMetadataOperations.prototype.listBySite = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listBySiteOperationSpec, callback);
        };
        ResourceHealthMetadataOperations.prototype.getBySite = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getBySiteOperationSpec, callback);
        };
        ResourceHealthMetadataOperations.prototype.listBySiteSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, listBySiteSlotOperationSpec, callback);
        };
        ResourceHealthMetadataOperations.prototype.getBySiteSlot = function (resourceGroupName, name, slot, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                slot: slot,
                options: options
            }, getBySiteSlotOperationSpec, callback);
        };
        ResourceHealthMetadataOperations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        ResourceHealthMetadataOperations.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$6, callback);
        };
        ResourceHealthMetadataOperations.prototype.listBySiteNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySiteNextOperationSpec, callback);
        };
        ResourceHealthMetadataOperations.prototype.listBySiteSlotNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySiteSlotNextOperationSpec, callback);
        };
        return ResourceHealthMetadataOperations;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$f);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/resourceHealthMetadata",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listByResourceGroupOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/resourceHealthMetadata",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listBySiteOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resourceHealthMetadata",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var getBySiteOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resourceHealthMetadata/default",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadata
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listBySiteSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resourceHealthMetadata",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var getBySiteSlotOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resourceHealthMetadata/default",
        urlParameters: [
            resourceGroupName,
            name,
            slot,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadata
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listByResourceGroupNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listBySiteNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listBySiteSlotNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceHealthMetadataCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-appservice";
    var packageVersion = "7.0.0";
    var WebSiteManagementClientContext = /** @class */ (function (_super) {
        __extends(WebSiteManagementClientContext, _super);
        /**
         * Initializes a new instance of the WebSiteManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g.
         * 00000000-0000-0000-0000-000000000000).
         * @param [options] The parameter options
         */
        function WebSiteManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2020-09-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return WebSiteManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var WebSiteManagementClient = /** @class */ (function (_super) {
        __extends(WebSiteManagementClient, _super);
        /**
         * Initializes a new instance of the WebSiteManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g.
         * 00000000-0000-0000-0000-000000000000).
         * @param [options] The parameter options
         */
        function WebSiteManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.appServiceCertificateOrders = new AppServiceCertificateOrders(_this);
            _this.certificateRegistrationProvider = new CertificateRegistrationProvider(_this);
            _this.domains = new Domains(_this);
            _this.topLevelDomains = new TopLevelDomains(_this);
            _this.domainRegistrationProvider = new DomainRegistrationProvider(_this);
            _this.certificates = new Certificates(_this);
            _this.deletedWebApps = new DeletedWebApps(_this);
            _this.diagnostics = new Diagnostics(_this);
            _this.provider = new Provider(_this);
            _this.recommendations = new Recommendations(_this);
            _this.webApps = new WebApps(_this);
            _this.staticSites = new StaticSites(_this);
            _this.appServiceEnvironments = new AppServiceEnvironments(_this);
            _this.appServicePlans = new AppServicePlans(_this);
            _this.resourceHealthMetadata = new ResourceHealthMetadataOperations(_this);
            return _this;
        }
        WebSiteManagementClient.prototype.generateGithubAccessTokenForAppserviceCLIAsync = function (code, state, options, callback) {
            return this.sendOperationRequest({
                code: code,
                state: state,
                options: options
            }, generateGithubAccessTokenForAppserviceCLIAsyncOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.getPublishingUser = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, getPublishingUserOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.updatePublishingUser = function (userDetails, options, callback) {
            return this.sendOperationRequest({
                userDetails: userDetails,
                options: options
            }, updatePublishingUserOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listSourceControls = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listSourceControlsOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.getSourceControl = function (sourceControlType, options, callback) {
            return this.sendOperationRequest({
                sourceControlType: sourceControlType,
                options: options
            }, getSourceControlOperationSpec$1, callback);
        };
        WebSiteManagementClient.prototype.updateSourceControl = function (sourceControlType, requestMessage, options, callback) {
            return this.sendOperationRequest({
                sourceControlType: sourceControlType,
                requestMessage: requestMessage,
                options: options
            }, updateSourceControlOperationSpec$1, callback);
        };
        WebSiteManagementClient.prototype.listBillingMeters = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listBillingMetersOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.checkNameAvailability = function (name, type, options, callback) {
            return this.sendOperationRequest({
                name: name,
                type: type,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.getSubscriptionDeploymentLocations = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, getSubscriptionDeploymentLocationsOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listGeoRegions = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listGeoRegionsOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listSiteIdentifiersAssignedToHostName = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listSiteIdentifiersAssignedToHostNameOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listPremierAddOnOffers = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listPremierAddOnOffersOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listSkus = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listSkusOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.verifyHostingEnvironmentVnet = function (parameters, options, callback) {
            return this.sendOperationRequest({
                parameters: parameters,
                options: options
            }, verifyHostingEnvironmentVnetOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.move = function (resourceGroupName, moveResourceEnvelope, options, callback) {
            return this.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                moveResourceEnvelope: moveResourceEnvelope,
                options: options
            }, moveOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.validate = function (resourceGroupName, validateRequest, options, callback) {
            return this.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                validateRequest: validateRequest,
                options: options
            }, validateOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.validateMove = function (resourceGroupName, moveResourceEnvelope, options, callback) {
            return this.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                moveResourceEnvelope: moveResourceEnvelope,
                options: options
            }, validateMoveOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listSourceControlsNext = function (nextPageLink, options, callback) {
            return this.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSourceControlsNextOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listBillingMetersNext = function (nextPageLink, options, callback) {
            return this.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBillingMetersNextOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listGeoRegionsNext = function (nextPageLink, options, callback) {
            return this.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listGeoRegionsNextOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listSiteIdentifiersAssignedToHostNameNext = function (nextPageLink, options, callback) {
            return this.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSiteIdentifiersAssignedToHostNameNextOperationSpec, callback);
        };
        WebSiteManagementClient.prototype.listPremierAddOnOffersNext = function (nextPageLink, options, callback) {
            return this.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listPremierAddOnOffersNextOperationSpec, callback);
        };
        return WebSiteManagementClient;
    }(WebSiteManagementClientContext));
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers);
    var generateGithubAccessTokenForAppserviceCLIAsyncOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Web/generateGithubAccessTokenForAppserviceCLI",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                code: "code",
                state: "state"
            },
            mapper: __assign(__assign({}, AppserviceGithubTokenRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppserviceGithubToken
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var getPublishingUserOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Web/publishingUsers/web",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var updatePublishingUserOperationSpec = {
        httpMethod: "PUT",
        path: "providers/Microsoft.Web/publishingUsers/web",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "userDetails",
            mapper: __assign(__assign({}, User), { required: true })
        },
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listSourceControlsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Web/sourcecontrols",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var getSourceControlOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        urlParameters: [
            sourceControlType
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var updateSourceControlOperationSpec$1 = {
        httpMethod: "PUT",
        path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        urlParameters: [
            sourceControlType
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "requestMessage",
            mapper: __assign(__assign({}, SourceControl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SourceControl
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listBillingMetersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            billingLocation,
            osType,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BillingMeterCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name",
                type: "type",
                isFqdn: [
                    "options",
                    "isFqdn"
                ]
            },
            mapper: __assign(__assign({}, ResourceNameAvailabilityRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceNameAvailability
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var getSubscriptionDeploymentLocationsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentLocations
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listGeoRegionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            sku,
            linuxWorkersEnabled,
            xenonWorkersEnabled,
            linuxDynamicWorkersEnabled,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GeoRegionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listSiteIdentifiersAssignedToHostNameOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ]
            },
            mapper: __assign(__assign({}, NameIdentifier), { required: true })
        },
        responses: {
            200: {
                bodyMapper: IdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listPremierAddOnOffersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremierAddOnOfferCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuInfos
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var verifyHostingEnvironmentVnetOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VnetParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VnetValidationFailureDetails
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var moveOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "moveResourceEnvelope",
            mapper: __assign(__assign({}, CsmMoveResourceEnvelope), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var validateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "validateRequest",
            mapper: __assign(__assign({}, ValidateRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ValidateResponse
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var validateMoveOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "moveResourceEnvelope",
            mapper: __assign(__assign({}, CsmMoveResourceEnvelope), { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listSourceControlsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listBillingMetersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            billingLocation,
            osType,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BillingMeterCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listGeoRegionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            sku,
            linuxWorkersEnabled,
            xenonWorkersEnabled,
            linuxDynamicWorkersEnabled,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GeoRegionCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listSiteIdentifiersAssignedToHostNameNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IdentifierCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listPremierAddOnOffersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremierAddOnOfferCollection
            },
            default: {
                bodyMapper: DefaultErrorResponse
            }
        },
        serializer: serializer$f
    };

    exports.AppServiceCertificateOrders = AppServiceCertificateOrders;
    exports.AppServiceEnvironments = AppServiceEnvironments;
    exports.AppServicePlans = AppServicePlans;
    exports.CertificateRegistrationProvider = CertificateRegistrationProvider;
    exports.Certificates = Certificates;
    exports.DeletedWebApps = DeletedWebApps;
    exports.Diagnostics = Diagnostics;
    exports.DomainRegistrationProvider = DomainRegistrationProvider;
    exports.Domains = Domains;
    exports.Provider = Provider;
    exports.Recommendations = Recommendations;
    exports.ResourceHealthMetadataOperations = ResourceHealthMetadataOperations;
    exports.StaticSites = StaticSites;
    exports.TopLevelDomains = TopLevelDomains;
    exports.WebApps = WebApps;
    exports.WebSiteManagementClient = WebSiteManagementClient;
    exports.WebSiteManagementClientContext = WebSiteManagementClientContext;
    exports.WebSiteManagementMappers = Mappers;
    exports.WebSiteManagementModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-appservice.js.map
