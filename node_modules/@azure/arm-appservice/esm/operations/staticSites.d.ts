import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";
/** Class representing a StaticSites. */
export declare class StaticSites {
    private readonly client;
    /**
     * Create a StaticSites.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    constructor(client: WebSiteManagementClientContext);
    /**
     * Description for Generates a preview workflow file for the static site
     * @summary Generates a preview workflow file for the static site
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the
     * StaticSitesWorkflowPreviewRequest properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesPreviewWorkflowResponse>
     */
    previewWorkflow(location: string, staticSitesWorkflowPreviewRequest: Models.StaticSitesWorkflowPreviewRequest, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesPreviewWorkflowResponse>;
    /**
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the
     * StaticSitesWorkflowPreviewRequest properties. See example.
     * @param callback The callback
     */
    previewWorkflow(location: string, staticSitesWorkflowPreviewRequest: Models.StaticSitesWorkflowPreviewRequest, callback: msRest.ServiceCallback<Models.StaticSitesWorkflowPreview>): void;
    /**
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the
     * StaticSitesWorkflowPreviewRequest properties. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    previewWorkflow(location: string, staticSitesWorkflowPreviewRequest: Models.StaticSitesWorkflowPreviewRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSitesWorkflowPreview>): void;
    /**
     * Description for Get all Static Sites for a subscription.
     * @summary Get all Static Sites for a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * Description for Gets all static sites in the specified resource group.
     * @summary Gets all static sites in the specified resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesGetStaticSitesByResourceGroupResponse>
     */
    getStaticSitesByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSitesByResourceGroupResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param callback The callback
     */
    getStaticSitesByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStaticSitesByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * Description for Gets the details of a static site.
     * @summary Gets the details of a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesGetStaticSiteResponse>
     */
    getStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param callback The callback
     */
    getStaticSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStaticSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
    /**
     * Description for Creates a new static site in an existing resource group, or updates an existing
     * static site.
     * @summary Creates a new static site in an existing resource group, or updates an existing static
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteResponse>
     */
    createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param callback The callback
     */
    createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSiteARMResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
    /**
     * Description for Deletes a static site.
     * @summary Deletes a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @param callback The callback
     */
    deleteStaticSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteStaticSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Creates a new static site in an existing resource group, or updates an existing
     * static site.
     * @summary Creates a new static site in an existing resource group, or updates an existing static
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesUpdateStaticSiteResponse>
     */
    updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesUpdateStaticSiteResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param callback The callback
     */
    updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateStaticSite(resourceGroupName: string, name: string, staticSiteEnvelope: Models.StaticSitePatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteARMResource>): void;
    /**
     * Description for Gets the list of users of a static site.
     * @summary Gets the list of users of a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteUsersResponse>
     */
    listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteUsersResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @param callback The callback
     */
    listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteUsers(resourceGroupName: string, name: string, authprovider: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
    /**
     * Description for Deletes the user entry from the static site.
     * @summary Deletes the user entry from the static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param callback The callback
     */
    deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Updates a user entry with the listed roles
     * @summary Updates a user entry with the listed roles
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See
     * example.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesUpdateStaticSiteUserResponse>
     */
    updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesUpdateStaticSiteUserResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See
     * example.
     * @param callback The callback
     */
    updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, callback: msRest.ServiceCallback<Models.StaticSiteUserARMResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See
     * example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateStaticSiteUser(resourceGroupName: string, name: string, authprovider: string, userid: string, staticSiteUserEnvelope: Models.StaticSiteUserARMResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserARMResource>): void;
    /**
     * Description for Gets all static site builds for a particular static site.
     * @summary Gets all static site builds for a particular static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesGetStaticSiteBuildsResponse>
     */
    getStaticSiteBuilds(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteBuildsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param callback The callback
     */
    getStaticSiteBuilds(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStaticSiteBuilds(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
    /**
     * Description for Gets the details of a static site build.
     * @summary Gets the details of a static site build.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesGetStaticSiteBuildResponse>
     */
    getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteBuildResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param callback The callback
     */
    getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<Models.StaticSiteBuildARMResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteBuildARMResource>): void;
    /**
     * Description for Deletes a static site build.
     * @summary Deletes a static site build.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param callback The callback
     */
    deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteStaticSiteBuild(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Creates or updates the function app settings of a static site build.
     * @summary Creates or updates the function app settings of a static site build.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse>
     */
    createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings
     * @param callback The callback
     */
    createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Description for Gets the functions of a particular static site build.
     * @summary Gets the functions of a particular static site build.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteBuildFunctionsResponse>
     */
    listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteBuildFunctionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param callback The callback
     */
    listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteBuildFunctions(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * Description for Gets the application settings of a static site.
     * @summary Gets the application settings of a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>
     */
    listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteBuildFunctionAppSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param callback The callback
     */
    listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteBuildFunctionAppSettings(resourceGroupName: string, name: string, prId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Description for Creates or updates the function app settings of a static site.
     * @summary Creates or updates the function app settings of a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse>
     */
    createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings
     * @param callback The callback
     */
    createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Description for Creates an invitation link for a user with the role
     * @summary Creates an invitation link for a user with the role
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesCreateUserRolesInvitationLinkResponse>
     */
    createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateUserRolesInvitationLinkResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope
     * @param callback The callback
     */
    createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, callback: msRest.ServiceCallback<Models.StaticSiteUserInvitationResponseResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope
     * @param options The optional parameters
     * @param callback The callback
     */
    createUserRolesInvitationLink(resourceGroupName: string, name: string, staticSiteUserRolesInvitationEnvelope: Models.StaticSiteUserInvitationRequestResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserInvitationResponseResource>): void;
    /**
     * Description for Gets all static site custom domains for a particular static site.
     * @summary Gets all static site custom domains for a particular static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteCustomDomainsResponse>
     */
    listStaticSiteCustomDomains(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteCustomDomainsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @param callback The callback
     */
    listStaticSiteCustomDomains(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteCustomDomains(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
    /**
     * Description for Creates a new static site custom domain in an existing resource group and static
     * site.
     * @summary Creates a new static site custom domain in an existing resource group and static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>
     */
    createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesCreateOrUpdateStaticSiteCustomDomainResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @param callback The callback
     */
    createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewARMResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewARMResource>): void;
    /**
     * Description for Deletes a custom domain.
     * @summary Deletes a custom domain.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @param callback The callback
     */
    deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteStaticSiteCustomDomain(resourceGroupName: string, name: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Validates a particular custom domain can be added to a static site.
     * @summary Validates a particular custom domain can be added to a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @param callback The callback
     */
    validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateCustomDomainCanBeAddedToStaticSite(resourceGroupName: string, name: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Detaches a static site.
     * @summary Detaches a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    detachStaticSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @param callback The callback
     */
    detachStaticSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @param options The optional parameters
     * @param callback The callback
     */
    detachStaticSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Gets the functions of a static site.
     * @summary Gets the functions of a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteFunctionsResponse>
     */
    listStaticSiteFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteFunctionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param callback The callback
     */
    listStaticSiteFunctions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteFunctions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * Description for Gets the application settings of a static site.
     * @summary Gets the application settings of a static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteFunctionAppSettingsResponse>
     */
    listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteFunctionAppSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param callback The callback
     */
    listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteFunctionAppSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Description for Lists the secrets for an existing static site.
     * @summary Lists the secrets for an existing static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteSecretsResponse>
     */
    listStaticSiteSecrets(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteSecretsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param callback The callback
     */
    listStaticSiteSecrets(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteSecrets(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Description for Resets the api key for an existing static site.
     * @summary Resets the api key for an existing static site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope
     * @param callback The callback
     */
    resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope
     * @param options The optional parameters
     * @param callback The callback
     */
    resetStaticSiteApiKey(resourceGroupName: string, name: string, resetPropertiesEnvelope: Models.StaticSiteResetPropertiesARMResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Description for Get all Static Sites for a subscription.
     * @summary Get all Static Sites for a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * Description for Gets all static sites in the specified resource group.
     * @summary Gets all static sites in the specified resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesGetStaticSitesByResourceGroupNextResponse>
     */
    getStaticSitesByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSitesByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    getStaticSitesByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStaticSitesByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCollection>): void;
    /**
     * Description for Gets the list of users of a static site.
     * @summary Gets the list of users of a static site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteUsersNextResponse>
     */
    listStaticSiteUsersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteUsersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listStaticSiteUsersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteUsersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteUserCollection>): void;
    /**
     * Description for Gets all static site builds for a particular static site.
     * @summary Gets all static site builds for a particular static site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesGetStaticSiteBuildsNextResponse>
     */
    getStaticSiteBuildsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesGetStaticSiteBuildsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    getStaticSiteBuildsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStaticSiteBuildsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteBuildCollection>): void;
    /**
     * Description for Gets the functions of a particular static site build.
     * @summary Gets the functions of a particular static site build.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteBuildFunctionsNextResponse>
     */
    listStaticSiteBuildFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteBuildFunctionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listStaticSiteBuildFunctionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteBuildFunctionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * Description for Gets all static site custom domains for a particular static site.
     * @summary Gets all static site custom domains for a particular static site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteCustomDomainsNextResponse>
     */
    listStaticSiteCustomDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteCustomDomainsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listStaticSiteCustomDomainsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteCustomDomainsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteCustomDomainOverviewCollection>): void;
    /**
     * Description for Gets the functions of a static site.
     * @summary Gets the functions of a static site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.StaticSitesListStaticSiteFunctionsNextResponse>
     */
    listStaticSiteFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StaticSitesListStaticSiteFunctionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listStaticSiteFunctionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listStaticSiteFunctionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StaticSiteFunctionOverviewCollection>): void;
}
//# sourceMappingURL=staticSites.d.ts.map