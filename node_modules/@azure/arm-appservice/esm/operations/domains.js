/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/domainsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Domains. */
var Domains = /** @class */ (function () {
    /**
     * Create a Domains.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    function Domains(client) {
        this.client = client;
    }
    Domains.prototype.checkAvailability = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, checkAvailabilityOperationSpec, callback);
    };
    Domains.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Domains.prototype.getControlCenterSsoRequest = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getControlCenterSsoRequestOperationSpec, callback);
    };
    Domains.prototype.listRecommendations = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, listRecommendationsOperationSpec, callback);
    };
    Domains.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Domains.prototype.get = function (resourceGroupName, domainName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Description for Creates or updates a domain.
     * @summary Creates or updates a domain.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @param domain Domain registration information.
     * @param [options] The optional parameters
     * @returns Promise<Models.DomainsCreateOrUpdateResponse>
     */
    Domains.prototype.createOrUpdate = function (resourceGroupName, domainName, domain, options) {
        return this.beginCreateOrUpdate(resourceGroupName, domainName, domain, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Domains.prototype.deleteMethod = function (resourceGroupName, domainName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Domains.prototype.update = function (resourceGroupName, domainName, domain, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            domain: domain,
            options: options
        }, updateOperationSpec, callback);
    };
    Domains.prototype.listOwnershipIdentifiers = function (resourceGroupName, domainName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            options: options
        }, listOwnershipIdentifiersOperationSpec, callback);
    };
    Domains.prototype.getOwnershipIdentifier = function (resourceGroupName, domainName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            name: name,
            options: options
        }, getOwnershipIdentifierOperationSpec, callback);
    };
    Domains.prototype.createOrUpdateOwnershipIdentifier = function (resourceGroupName, domainName, name, domainOwnershipIdentifier, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            name: name,
            domainOwnershipIdentifier: domainOwnershipIdentifier,
            options: options
        }, createOrUpdateOwnershipIdentifierOperationSpec, callback);
    };
    Domains.prototype.deleteOwnershipIdentifier = function (resourceGroupName, domainName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            name: name,
            options: options
        }, deleteOwnershipIdentifierOperationSpec, callback);
    };
    Domains.prototype.updateOwnershipIdentifier = function (resourceGroupName, domainName, name, domainOwnershipIdentifier, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            name: name,
            domainOwnershipIdentifier: domainOwnershipIdentifier,
            options: options
        }, updateOwnershipIdentifierOperationSpec, callback);
    };
    Domains.prototype.renew = function (resourceGroupName, domainName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            options: options
        }, renewOperationSpec, callback);
    };
    /**
     * Description for Creates or updates a domain.
     * @summary Creates or updates a domain.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @param domain Domain registration information.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Domains.prototype.beginCreateOrUpdate = function (resourceGroupName, domainName, domain, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            domainName: domainName,
            domain: domain,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    Domains.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    Domains.prototype.listRecommendationsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listRecommendationsNextOperationSpec, callback);
    };
    Domains.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    Domains.prototype.listOwnershipIdentifiersNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listOwnershipIdentifiersNextOperationSpec, callback);
    };
    return Domains;
}());
export { Domains };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var checkAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            name: [
                "options",
                "name"
            ]
        },
        mapper: __assign(__assign({}, Mappers.NameIdentifier), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DomainAvailabilityCheckResult
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getControlCenterSsoRequestOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainControlCenterSsoRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listRecommendationsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DomainRecommendationSearchParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NameIdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Domain
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.forceHardDeleteDomain,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domain",
        mapper: __assign(__assign({}, Mappers.DomainPatchResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Domain
        },
        202: {
            bodyMapper: Mappers.Domain
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listOwnershipIdentifiersOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainOwnershipIdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOwnershipIdentifierOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainOwnershipIdentifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOwnershipIdentifierOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domainOwnershipIdentifier",
        mapper: __assign(__assign({}, Mappers.DomainOwnershipIdentifier), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DomainOwnershipIdentifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteOwnershipIdentifierOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateOwnershipIdentifierOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domainOwnershipIdentifier",
        mapper: __assign(__assign({}, Mappers.DomainOwnershipIdentifier), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DomainOwnershipIdentifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var renewOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/renew",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName0,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.domainName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domain",
        mapper: __assign(__assign({}, Mappers.Domain), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Domain
        },
        202: {
            bodyMapper: Mappers.Domain
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listRecommendationsNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NameIdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listOwnershipIdentifiersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DomainOwnershipIdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=domains.js.map