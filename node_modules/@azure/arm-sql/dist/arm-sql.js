/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmSql = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var RecoverableDatabase = {
        serializedName: "RecoverableDatabase",
        type: {
            name: "Composite",
            className: "RecoverableDatabase",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { edition: {
                    readOnly: true,
                    serializedName: "properties.edition",
                    type: {
                        name: "String"
                    }
                }, serviceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.serviceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, lastAvailableBackupDate: {
                    readOnly: true,
                    serializedName: "properties.lastAvailableBackupDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var RestorableDroppedDatabase = {
        serializedName: "RestorableDroppedDatabase",
        type: {
            name: "Composite",
            className: "RestorableDroppedDatabase",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, edition: {
                    readOnly: true,
                    serializedName: "properties.edition",
                    type: {
                        name: "String"
                    }
                }, maxSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "String"
                    }
                }, serviceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.serviceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, deletionDate: {
                    readOnly: true,
                    serializedName: "properties.deletionDate",
                    type: {
                        name: "DateTime"
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var CheckNameAvailabilityRequest = {
        serializedName: "CheckNameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityRequest",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.Sql/servers',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResponse = {
        serializedName: "CheckNameAvailabilityResponse",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResponse",
            modelProperties: {
                available: {
                    readOnly: true,
                    serializedName: "available",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                }
            }
        }
    };
    var ServerConnectionPolicy = {
        serializedName: "ServerConnectionPolicy",
        type: {
            name: "Composite",
            className: "ServerConnectionPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, connectionType: {
                    required: true,
                    serializedName: "properties.connectionType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Proxy",
                            "Redirect"
                        ]
                    }
                } })
        }
    };
    var DatabaseSecurityAlertPolicy = {
        serializedName: "DatabaseSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "DatabaseSecurityAlertPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "New",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "String"
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "String"
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, useServerDefault: {
                    serializedName: "properties.useServerDefault",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var DataMaskingPolicy = {
        serializedName: "DataMaskingPolicy",
        type: {
            name: "Composite",
            className: "DataMaskingPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { dataMaskingState: {
                    required: true,
                    serializedName: "properties.dataMaskingState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, exemptPrincipals: {
                    serializedName: "properties.exemptPrincipals",
                    type: {
                        name: "String"
                    }
                }, applicationPrincipals: {
                    readOnly: true,
                    serializedName: "properties.applicationPrincipals",
                    type: {
                        name: "String"
                    }
                }, maskingLevel: {
                    readOnly: true,
                    serializedName: "properties.maskingLevel",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataMaskingRule = {
        serializedName: "DataMaskingRule",
        type: {
            name: "Composite",
            className: "DataMaskingRule",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { dataMaskingRuleId: {
                    readOnly: true,
                    serializedName: "properties.id",
                    type: {
                        name: "String"
                    }
                }, aliasName: {
                    serializedName: "properties.aliasName",
                    type: {
                        name: "String"
                    }
                }, ruleState: {
                    serializedName: "properties.ruleState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, schemaName: {
                    required: true,
                    serializedName: "properties.schemaName",
                    type: {
                        name: "String"
                    }
                }, tableName: {
                    required: true,
                    serializedName: "properties.tableName",
                    type: {
                        name: "String"
                    }
                }, columnName: {
                    required: true,
                    serializedName: "properties.columnName",
                    type: {
                        name: "String"
                    }
                }, maskingFunction: {
                    required: true,
                    serializedName: "properties.maskingFunction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "CCN",
                            "Email",
                            "Number",
                            "SSN",
                            "Text"
                        ]
                    }
                }, numberFrom: {
                    serializedName: "properties.numberFrom",
                    type: {
                        name: "String"
                    }
                }, numberTo: {
                    serializedName: "properties.numberTo",
                    type: {
                        name: "String"
                    }
                }, prefixSize: {
                    serializedName: "properties.prefixSize",
                    type: {
                        name: "String"
                    }
                }, suffixSize: {
                    serializedName: "properties.suffixSize",
                    type: {
                        name: "String"
                    }
                }, replacementString: {
                    serializedName: "properties.replacementString",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FirewallRule = {
        serializedName: "FirewallRule",
        type: {
            name: "Composite",
            className: "FirewallRule",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                }, endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GeoBackupPolicy = {
        serializedName: "GeoBackupPolicy",
        type: {
            name: "Composite",
            className: "GeoBackupPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, storageType: {
                    readOnly: true,
                    serializedName: "properties.storageType",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImportExtensionRequest = {
        serializedName: "ImportExtensionRequest",
        type: {
            name: "Composite",
            className: "ImportExtensionRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                storageKeyType: {
                    required: true,
                    serializedName: "properties.storageKeyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StorageAccessKey",
                            "SharedAccessKey"
                        ]
                    }
                },
                storageKey: {
                    required: true,
                    serializedName: "properties.storageKey",
                    type: {
                        name: "String"
                    }
                },
                storageUri: {
                    required: true,
                    serializedName: "properties.storageUri",
                    type: {
                        name: "String"
                    }
                },
                administratorLogin: {
                    required: true,
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    required: true,
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "properties.authenticationType",
                    defaultValue: 'SQL',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SQL",
                            "ADPassword"
                        ]
                    }
                },
                operationMode: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.operationMode",
                    defaultValue: 'Import',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImportExportResponse = {
        serializedName: "ImportExportResponse",
        type: {
            name: "Composite",
            className: "ImportExportResponse",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { requestType: {
                    readOnly: true,
                    serializedName: "properties.requestType",
                    type: {
                        name: "String"
                    }
                }, requestId: {
                    readOnly: true,
                    serializedName: "properties.requestId",
                    type: {
                        name: "Uuid"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "String"
                    }
                }, queuedTime: {
                    readOnly: true,
                    serializedName: "properties.queuedTime",
                    type: {
                        name: "String"
                    }
                }, blobUri: {
                    readOnly: true,
                    serializedName: "properties.blobUri",
                    type: {
                        name: "String"
                    }
                }, errorMessage: {
                    readOnly: true,
                    serializedName: "properties.errorMessage",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExportRequest = {
        serializedName: "ExportRequest",
        type: {
            name: "Composite",
            className: "ExportRequest",
            modelProperties: {
                storageKeyType: {
                    required: true,
                    serializedName: "storageKeyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StorageAccessKey",
                            "SharedAccessKey"
                        ]
                    }
                },
                storageKey: {
                    required: true,
                    serializedName: "storageKey",
                    type: {
                        name: "String"
                    }
                },
                storageUri: {
                    required: true,
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                },
                administratorLogin: {
                    required: true,
                    serializedName: "administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    required: true,
                    serializedName: "administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    defaultValue: 'SQL',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SQL",
                            "ADPassword"
                        ]
                    }
                }
            }
        }
    };
    var ImportRequest = {
        serializedName: "ImportRequest",
        type: {
            name: "Composite",
            className: "ImportRequest",
            modelProperties: __assign(__assign({}, ExportRequest.type.modelProperties), { databaseName: {
                    required: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, edition: {
                    required: true,
                    serializedName: "edition",
                    type: {
                        name: "String"
                    }
                }, serviceObjectiveName: {
                    required: true,
                    serializedName: "serviceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, maxSizeBytes: {
                    required: true,
                    serializedName: "maxSizeBytes",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MetricValue = {
        serializedName: "MetricValue",
        type: {
            name: "Composite",
            className: "MetricValue",
            modelProperties: {
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                average: {
                    readOnly: true,
                    serializedName: "average",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                total: {
                    readOnly: true,
                    serializedName: "total",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Metric = {
        serializedName: "Metric",
        type: {
            name: "Composite",
            className: "Metric",
            modelProperties: {
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                metricValues: {
                    readOnly: true,
                    serializedName: "metricValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAvailability = {
        serializedName: "MetricAvailability",
        type: {
            name: "Composite",
            className: "MetricAvailability",
            modelProperties: {
                retention: {
                    readOnly: true,
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                },
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDefinition = {
        serializedName: "MetricDefinition",
        type: {
            name: "Composite",
            className: "MetricDefinition",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                primaryAggregationType: {
                    readOnly: true,
                    serializedName: "primaryAggregationType",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    readOnly: true,
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                metricAvailabilities: {
                    readOnly: true,
                    serializedName: "metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailability"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecommendedElasticPoolMetric = {
        serializedName: "RecommendedElasticPoolMetric",
        type: {
            name: "Composite",
            className: "RecommendedElasticPoolMetric",
            modelProperties: {
                dateTime: {
                    serializedName: "dateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                dtu: {
                    serializedName: "dtu",
                    type: {
                        name: "Number"
                    }
                },
                sizeGB: {
                    serializedName: "sizeGB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecommendedElasticPool = {
        serializedName: "RecommendedElasticPool",
        type: {
            name: "Composite",
            className: "RecommendedElasticPool",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { databaseEdition: {
                    readOnly: true,
                    serializedName: "properties.databaseEdition",
                    type: {
                        name: "String"
                    }
                }, dtu: {
                    serializedName: "properties.dtu",
                    type: {
                        name: "Number"
                    }
                }, databaseDtuMin: {
                    serializedName: "properties.databaseDtuMin",
                    type: {
                        name: "Number"
                    }
                }, databaseDtuMax: {
                    serializedName: "properties.databaseDtuMax",
                    type: {
                        name: "Number"
                    }
                }, storageMB: {
                    serializedName: "properties.storageMB",
                    type: {
                        name: "Number"
                    }
                }, observationPeriodStart: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodStart",
                    type: {
                        name: "DateTime"
                    }
                }, observationPeriodEnd: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodEnd",
                    type: {
                        name: "DateTime"
                    }
                }, maxObservedDtu: {
                    readOnly: true,
                    serializedName: "properties.maxObservedDtu",
                    type: {
                        name: "Number"
                    }
                }, maxObservedStorageMB: {
                    readOnly: true,
                    serializedName: "properties.maxObservedStorageMB",
                    type: {
                        name: "Number"
                    }
                }, databases: {
                    readOnly: true,
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackedResource"
                            }
                        }
                    }
                }, metrics: {
                    readOnly: true,
                    serializedName: "properties.metrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecommendedElasticPoolMetric"
                            }
                        }
                    }
                } })
        }
    };
    var ReplicationLink = {
        serializedName: "ReplicationLink",
        type: {
            name: "Composite",
            className: "ReplicationLink",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, isTerminationAllowed: {
                    readOnly: true,
                    serializedName: "properties.isTerminationAllowed",
                    type: {
                        name: "Boolean"
                    }
                }, replicationMode: {
                    readOnly: true,
                    serializedName: "properties.replicationMode",
                    type: {
                        name: "String"
                    }
                }, partnerServer: {
                    readOnly: true,
                    serializedName: "properties.partnerServer",
                    type: {
                        name: "String"
                    }
                }, partnerDatabase: {
                    readOnly: true,
                    serializedName: "properties.partnerDatabase",
                    type: {
                        name: "String"
                    }
                }, partnerLocation: {
                    readOnly: true,
                    serializedName: "properties.partnerLocation",
                    type: {
                        name: "String"
                    }
                }, role: {
                    readOnly: true,
                    serializedName: "properties.role",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary",
                            "NonReadableSecondary",
                            "Source",
                            "Copy"
                        ]
                    }
                }, partnerRole: {
                    readOnly: true,
                    serializedName: "properties.partnerRole",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary",
                            "NonReadableSecondary",
                            "Source",
                            "Copy"
                        ]
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, replicationState: {
                    readOnly: true,
                    serializedName: "properties.replicationState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerAzureADAdministrator = {
        serializedName: "ServerAzureADAdministrator",
        type: {
            name: "Composite",
            className: "ServerAzureADAdministrator",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { administratorType: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.administratorType",
                    defaultValue: 'ActiveDirectory',
                    type: {
                        name: "String"
                    }
                }, login: {
                    required: true,
                    serializedName: "properties.login",
                    type: {
                        name: "String"
                    }
                }, sid: {
                    required: true,
                    serializedName: "properties.sid",
                    type: {
                        name: "Uuid"
                    }
                }, tenantId: {
                    required: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "Uuid"
                    }
                } })
        }
    };
    var ServerCommunicationLink = {
        serializedName: "ServerCommunicationLink",
        type: {
            name: "Composite",
            className: "ServerCommunicationLink",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, partnerServer: {
                    required: true,
                    serializedName: "properties.partnerServer",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceObjective = {
        serializedName: "ServiceObjective",
        type: {
            name: "Composite",
            className: "ServiceObjective",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { serviceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.serviceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, isDefault: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.isDefault",
                    type: {
                        name: "Boolean"
                    }
                }, isSystem: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.isSystem",
                    type: {
                        name: "Boolean"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ElasticPoolActivity = {
        serializedName: "ElasticPoolActivity",
        type: {
            name: "Composite",
            className: "ElasticPoolActivity",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorMessage: {
                    readOnly: true,
                    serializedName: "properties.errorMessage",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.operationId",
                    type: {
                        name: "Uuid"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuMax: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuMax",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuMin: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuMin",
                    type: {
                        name: "Number"
                    }
                }, requestedDtu: {
                    readOnly: true,
                    serializedName: "properties.requestedDtu",
                    type: {
                        name: "Number"
                    }
                }, requestedElasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.requestedElasticPoolName",
                    type: {
                        name: "String"
                    }
                }, requestedStorageLimitInGB: {
                    readOnly: true,
                    serializedName: "properties.requestedStorageLimitInGB",
                    type: {
                        name: "Number"
                    }
                }, elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, requestedStorageLimitInMB: {
                    readOnly: true,
                    serializedName: "properties.requestedStorageLimitInMB",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuGuarantee: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuGuarantee",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuCap: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuCap",
                    type: {
                        name: "Number"
                    }
                }, requestedDtuGuarantee: {
                    readOnly: true,
                    serializedName: "properties.requestedDtuGuarantee",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ElasticPoolDatabaseActivity = {
        serializedName: "ElasticPoolDatabaseActivity",
        type: {
            name: "Composite",
            className: "ElasticPoolDatabaseActivity",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorMessage: {
                    readOnly: true,
                    serializedName: "properties.errorMessage",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.operationId",
                    type: {
                        name: "Uuid"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, requestedElasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.requestedElasticPoolName",
                    type: {
                        name: "String"
                    }
                }, currentElasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.currentElasticPoolName",
                    type: {
                        name: "String"
                    }
                }, currentServiceObjective: {
                    readOnly: true,
                    serializedName: "properties.currentServiceObjective",
                    type: {
                        name: "String"
                    }
                }, requestedServiceObjective: {
                    readOnly: true,
                    serializedName: "properties.requestedServiceObjective",
                    type: {
                        name: "String"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationImpact = {
        serializedName: "OperationImpact",
        type: {
            name: "Composite",
            className: "OperationImpact",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                changeValueAbsolute: {
                    readOnly: true,
                    serializedName: "changeValueAbsolute",
                    type: {
                        name: "Number"
                    }
                },
                changeValueRelative: {
                    readOnly: true,
                    serializedName: "changeValueRelative",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecommendedIndex = {
        serializedName: "RecommendedIndex",
        type: {
            name: "Composite",
            className: "RecommendedIndex",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { action: {
                    readOnly: true,
                    serializedName: "properties.action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Create",
                            "Drop",
                            "Rebuild"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Pending",
                            "Executing",
                            "Verifying",
                            "Pending Revert",
                            "Reverting",
                            "Reverted",
                            "Ignored",
                            "Expired",
                            "Blocked",
                            "Success"
                        ]
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, indexType: {
                    readOnly: true,
                    serializedName: "properties.indexType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CLUSTERED",
                            "NONCLUSTERED",
                            "COLUMNSTORE",
                            "CLUSTERED COLUMNSTORE"
                        ]
                    }
                }, schema: {
                    readOnly: true,
                    serializedName: "properties.schema",
                    type: {
                        name: "String"
                    }
                }, table: {
                    readOnly: true,
                    serializedName: "properties.table",
                    type: {
                        name: "String"
                    }
                }, columns: {
                    readOnly: true,
                    serializedName: "properties.columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, includedColumns: {
                    readOnly: true,
                    serializedName: "properties.includedColumns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, indexScript: {
                    readOnly: true,
                    serializedName: "properties.indexScript",
                    type: {
                        name: "String"
                    }
                }, estimatedImpact: {
                    readOnly: true,
                    serializedName: "properties.estimatedImpact",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationImpact"
                            }
                        }
                    }
                }, reportedImpact: {
                    readOnly: true,
                    serializedName: "properties.reportedImpact",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationImpact"
                            }
                        }
                    }
                } })
        }
    };
    var TransparentDataEncryption = {
        serializedName: "TransparentDataEncryption",
        type: {
            name: "Composite",
            className: "TransparentDataEncryption",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var SloUsageMetric = {
        serializedName: "SloUsageMetric",
        type: {
            name: "Composite",
            className: "SloUsageMetric",
            modelProperties: {
                serviceLevelObjective: {
                    readOnly: true,
                    serializedName: "serviceLevelObjective",
                    type: {
                        name: "String"
                    }
                },
                serviceLevelObjectiveId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "serviceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                },
                inRangeTimeRatio: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "inRangeTimeRatio",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ServiceTierAdvisor = {
        serializedName: "ServiceTierAdvisor",
        type: {
            name: "Composite",
            className: "ServiceTierAdvisor",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { observationPeriodStart: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodStart",
                    type: {
                        name: "DateTime"
                    }
                }, observationPeriodEnd: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodEnd",
                    type: {
                        name: "DateTime"
                    }
                }, activeTimeRatio: {
                    readOnly: true,
                    serializedName: "properties.activeTimeRatio",
                    type: {
                        name: "Number"
                    }
                }, minDtu: {
                    readOnly: true,
                    serializedName: "properties.minDtu",
                    type: {
                        name: "Number"
                    }
                }, avgDtu: {
                    readOnly: true,
                    serializedName: "properties.avgDtu",
                    type: {
                        name: "Number"
                    }
                }, maxDtu: {
                    readOnly: true,
                    serializedName: "properties.maxDtu",
                    type: {
                        name: "Number"
                    }
                }, maxSizeInGB: {
                    readOnly: true,
                    serializedName: "properties.maxSizeInGB",
                    type: {
                        name: "Number"
                    }
                }, serviceLevelObjectiveUsageMetrics: {
                    readOnly: true,
                    serializedName: "properties.serviceLevelObjectiveUsageMetrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SloUsageMetric"
                            }
                        }
                    }
                }, currentServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.currentServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, currentServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.currentServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, usageBasedRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.usageBasedRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, usageBasedRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.usageBasedRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, databaseSizeBasedRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, databaseSizeBasedRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, disasterPlanBasedRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, disasterPlanBasedRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, overallRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.overallRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, overallRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.overallRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, confidence: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.confidence",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var TransparentDataEncryptionActivity = {
        serializedName: "TransparentDataEncryptionActivity",
        type: {
            name: "Composite",
            className: "TransparentDataEncryptionActivity",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ServerUsage = {
        serializedName: "ServerUsage",
        type: {
            name: "Composite",
            className: "ServerUsage",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    readOnly: true,
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                nextResetTime: {
                    readOnly: true,
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var DatabaseUsage = {
        serializedName: "DatabaseUsage",
        type: {
            name: "Composite",
            className: "DatabaseUsage",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    readOnly: true,
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                nextResetTime: {
                    readOnly: true,
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AutomaticTuningOptions = {
        serializedName: "AutomaticTuningOptions",
        type: {
            name: "Composite",
            className: "AutomaticTuningOptions",
            modelProperties: {
                desiredState: {
                    serializedName: "desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On",
                            "Default"
                        ]
                    }
                },
                actualState: {
                    readOnly: true,
                    serializedName: "actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On"
                        ]
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "Number"
                    }
                },
                reasonDesc: {
                    readOnly: true,
                    serializedName: "reasonDesc",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Disabled",
                            "AutoConfigured",
                            "InheritedFromServer",
                            "QueryStoreOff",
                            "QueryStoreReadOnly",
                            "NotSupported"
                        ]
                    }
                }
            }
        }
    };
    var DatabaseAutomaticTuning = {
        serializedName: "DatabaseAutomaticTuning",
        type: {
            name: "Composite",
            className: "DatabaseAutomaticTuning",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { desiredState: {
                    serializedName: "properties.desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Inherit",
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, actualState: {
                    readOnly: true,
                    serializedName: "properties.actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Inherit",
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, options: {
                    serializedName: "properties.options",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AutomaticTuningOptions"
                            }
                        }
                    }
                } })
        }
    };
    var EncryptionProtector = {
        serializedName: "EncryptionProtector",
        type: {
            name: "Composite",
            className: "EncryptionProtector",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, subregion: {
                    readOnly: true,
                    serializedName: "properties.subregion",
                    type: {
                        name: "String"
                    }
                }, serverKeyName: {
                    serializedName: "properties.serverKeyName",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    readOnly: true,
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FailoverGroupReadWriteEndpoint = {
        serializedName: "FailoverGroupReadWriteEndpoint",
        type: {
            name: "Composite",
            className: "FailoverGroupReadWriteEndpoint",
            modelProperties: {
                failoverPolicy: {
                    required: true,
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                },
                failoverWithDataLossGracePeriodMinutes: {
                    serializedName: "failoverWithDataLossGracePeriodMinutes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FailoverGroupReadOnlyEndpoint = {
        serializedName: "FailoverGroupReadOnlyEndpoint",
        type: {
            name: "Composite",
            className: "FailoverGroupReadOnlyEndpoint",
            modelProperties: {
                failoverPolicy: {
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PartnerInfo = {
        serializedName: "PartnerInfo",
        type: {
            name: "Composite",
            className: "PartnerInfo",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                replicationRole: {
                    readOnly: true,
                    serializedName: "replicationRole",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverGroup = {
        serializedName: "FailoverGroup",
        type: {
            name: "Composite",
            className: "FailoverGroup",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, readWriteEndpoint: {
                    required: true,
                    serializedName: "properties.readWriteEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadWriteEndpoint"
                    }
                }, readOnlyEndpoint: {
                    serializedName: "properties.readOnlyEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadOnlyEndpoint"
                    }
                }, replicationRole: {
                    readOnly: true,
                    serializedName: "properties.replicationRole",
                    type: {
                        name: "String"
                    }
                }, replicationState: {
                    readOnly: true,
                    serializedName: "properties.replicationState",
                    type: {
                        name: "String"
                    }
                }, partnerServers: {
                    required: true,
                    serializedName: "properties.partnerServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartnerInfo"
                            }
                        }
                    }
                }, databases: {
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var FailoverGroupUpdate = {
        serializedName: "FailoverGroupUpdate",
        type: {
            name: "Composite",
            className: "FailoverGroupUpdate",
            modelProperties: {
                readWriteEndpoint: {
                    serializedName: "properties.readWriteEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadWriteEndpoint"
                    }
                },
                readOnlyEndpoint: {
                    serializedName: "properties.readOnlyEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadOnlyEndpoint"
                    }
                },
                databases: {
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerKey = {
        serializedName: "ServerKey",
        type: {
            name: "Composite",
            className: "ServerKey",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, subregion: {
                    readOnly: true,
                    serializedName: "properties.subregion",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ResourceIdentity = {
        serializedName: "ResourceIdentity",
        type: {
            name: "Composite",
            className: "ResourceIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var Server = {
        serializedName: "Server",
        type: {
            name: "Composite",
            className: "Server",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ResourceIdentity"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                }, administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerUpdate = {
        serializedName: "ServerUpdate",
        type: {
            name: "Composite",
            className: "ServerUpdate",
            modelProperties: {
                administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SyncAgent = {
        serializedName: "SyncAgent",
        type: {
            name: "Composite",
            className: "SyncAgent",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { syncAgentName: {
                    readOnly: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, syncDatabaseId: {
                    serializedName: "properties.syncDatabaseId",
                    type: {
                        name: "String"
                    }
                }, lastAliveTime: {
                    readOnly: true,
                    serializedName: "properties.lastAliveTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, isUpToDate: {
                    readOnly: true,
                    serializedName: "properties.isUpToDate",
                    type: {
                        name: "Boolean"
                    }
                }, expiryTime: {
                    readOnly: true,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SyncAgentKeyProperties = {
        serializedName: "SyncAgentKeyProperties",
        type: {
            name: "Composite",
            className: "SyncAgentKeyProperties",
            modelProperties: {
                syncAgentKey: {
                    readOnly: true,
                    serializedName: "syncAgentKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncAgentLinkedDatabase = {
        serializedName: "SyncAgentLinkedDatabase",
        type: {
            name: "Composite",
            className: "SyncAgentLinkedDatabase",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { databaseType: {
                    readOnly: true,
                    serializedName: "properties.databaseType",
                    type: {
                        name: "String"
                    }
                }, databaseId: {
                    readOnly: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    readOnly: true,
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SyncDatabaseIdProperties = {
        serializedName: "SyncDatabaseIdProperties",
        type: {
            name: "Composite",
            className: "SyncDatabaseIdProperties",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaTableColumn = {
        serializedName: "SyncFullSchemaTableColumn",
        type: {
            name: "Composite",
            className: "SyncFullSchemaTableColumn",
            modelProperties: {
                dataSize: {
                    readOnly: true,
                    serializedName: "dataSize",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    readOnly: true,
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                },
                errorId: {
                    readOnly: true,
                    serializedName: "errorId",
                    type: {
                        name: "String"
                    }
                },
                hasError: {
                    readOnly: true,
                    serializedName: "hasError",
                    type: {
                        name: "Boolean"
                    }
                },
                isPrimaryKey: {
                    readOnly: true,
                    serializedName: "isPrimaryKey",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                quotedName: {
                    readOnly: true,
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaTable = {
        serializedName: "SyncFullSchemaTable",
        type: {
            name: "Composite",
            className: "SyncFullSchemaTable",
            modelProperties: {
                columns: {
                    readOnly: true,
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncFullSchemaTableColumn"
                            }
                        }
                    }
                },
                errorId: {
                    readOnly: true,
                    serializedName: "errorId",
                    type: {
                        name: "String"
                    }
                },
                hasError: {
                    readOnly: true,
                    serializedName: "hasError",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                quotedName: {
                    readOnly: true,
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaProperties = {
        serializedName: "SyncFullSchemaProperties",
        type: {
            name: "Composite",
            className: "SyncFullSchemaProperties",
            modelProperties: {
                tables: {
                    readOnly: true,
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncFullSchemaTable"
                            }
                        }
                    }
                },
                lastUpdateTime: {
                    readOnly: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var SyncGroupLogProperties = {
        serializedName: "SyncGroupLogProperties",
        type: {
            name: "Composite",
            className: "SyncGroupLogProperties",
            modelProperties: {
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    readOnly: true,
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                },
                tracingId: {
                    readOnly: true,
                    serializedName: "tracingId",
                    type: {
                        name: "Uuid"
                    }
                },
                operationStatus: {
                    readOnly: true,
                    serializedName: "operationStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupSchemaTableColumn = {
        serializedName: "SyncGroupSchemaTableColumn",
        type: {
            name: "Composite",
            className: "SyncGroupSchemaTableColumn",
            modelProperties: {
                quotedName: {
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                },
                dataSize: {
                    serializedName: "dataSize",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupSchemaTable = {
        serializedName: "SyncGroupSchemaTable",
        type: {
            name: "Composite",
            className: "SyncGroupSchemaTable",
            modelProperties: {
                columns: {
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroupSchemaTableColumn"
                            }
                        }
                    }
                },
                quotedName: {
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupSchema = {
        serializedName: "SyncGroupSchema",
        type: {
            name: "Composite",
            className: "SyncGroupSchema",
            modelProperties: {
                tables: {
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroupSchemaTable"
                            }
                        }
                    }
                },
                masterSyncMemberName: {
                    serializedName: "masterSyncMemberName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroup = {
        serializedName: "SyncGroup",
        type: {
            name: "Composite",
            className: "SyncGroup",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { interval: {
                    serializedName: "properties.interval",
                    type: {
                        name: "Number"
                    }
                }, lastSyncTime: {
                    readOnly: true,
                    serializedName: "properties.lastSyncTime",
                    type: {
                        name: "DateTime"
                    }
                }, conflictResolutionPolicy: {
                    serializedName: "properties.conflictResolutionPolicy",
                    type: {
                        name: "String"
                    }
                }, syncDatabaseId: {
                    serializedName: "properties.syncDatabaseId",
                    type: {
                        name: "String"
                    }
                }, hubDatabaseUserName: {
                    serializedName: "properties.hubDatabaseUserName",
                    type: {
                        name: "String"
                    }
                }, hubDatabasePassword: {
                    serializedName: "properties.hubDatabasePassword",
                    type: {
                        name: "String"
                    }
                }, syncState: {
                    readOnly: true,
                    serializedName: "properties.syncState",
                    type: {
                        name: "String"
                    }
                }, schema: {
                    serializedName: "properties.schema",
                    type: {
                        name: "Composite",
                        className: "SyncGroupSchema"
                    }
                } })
        }
    };
    var SyncMember = {
        serializedName: "SyncMember",
        type: {
            name: "Composite",
            className: "SyncMember",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { databaseType: {
                    serializedName: "properties.databaseType",
                    type: {
                        name: "String"
                    }
                }, syncAgentId: {
                    serializedName: "properties.syncAgentId",
                    type: {
                        name: "String"
                    }
                }, sqlServerDatabaseId: {
                    serializedName: "properties.sqlServerDatabaseId",
                    type: {
                        name: "Uuid"
                    }
                }, serverName: {
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, syncDirection: {
                    serializedName: "properties.syncDirection",
                    type: {
                        name: "String"
                    }
                }, syncState: {
                    readOnly: true,
                    serializedName: "properties.syncState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SubscriptionUsage = {
        serializedName: "SubscriptionUsage",
        type: {
            name: "Composite",
            className: "SubscriptionUsage",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, currentValue: {
                    readOnly: true,
                    serializedName: "properties.currentValue",
                    type: {
                        name: "Number"
                    }
                }, limit: {
                    readOnly: true,
                    serializedName: "properties.limit",
                    type: {
                        name: "Number"
                    }
                }, unit: {
                    readOnly: true,
                    serializedName: "properties.unit",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualCluster = {
        serializedName: "VirtualCluster",
        type: {
            name: "Composite",
            className: "VirtualCluster",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { subnetId: {
                    readOnly: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }, family: {
                    serializedName: "properties.family",
                    type: {
                        name: "String"
                    }
                }, childResources: {
                    readOnly: true,
                    serializedName: "properties.childResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualClusterUpdate = {
        serializedName: "VirtualClusterUpdate",
        type: {
            name: "Composite",
            className: "VirtualClusterUpdate",
            modelProperties: {
                subnetId: {
                    readOnly: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "properties.family",
                    type: {
                        name: "String"
                    }
                },
                childResources: {
                    readOnly: true,
                    serializedName: "properties.childResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { virtualNetworkSubnetId: {
                    required: true,
                    serializedName: "properties.virtualNetworkSubnetId",
                    type: {
                        name: "String"
                    }
                }, ignoreMissingVnetServiceEndpoint: {
                    serializedName: "properties.ignoreMissingVnetServiceEndpoint",
                    type: {
                        name: "Boolean"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExtendedDatabaseBlobAuditingPolicy = {
        serializedName: "ExtendedDatabaseBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "ExtendedDatabaseBlobAuditingPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { predicateExpression: {
                    serializedName: "properties.predicateExpression",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                }, isAzureMonitorTargetEnabled: {
                    serializedName: "properties.isAzureMonitorTargetEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ExtendedServerBlobAuditingPolicy = {
        serializedName: "ExtendedServerBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "ExtendedServerBlobAuditingPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { predicateExpression: {
                    serializedName: "properties.predicateExpression",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                }, isAzureMonitorTargetEnabled: {
                    serializedName: "properties.isAzureMonitorTargetEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ServerBlobAuditingPolicy = {
        serializedName: "ServerBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "ServerBlobAuditingPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                }, isAzureMonitorTargetEnabled: {
                    serializedName: "properties.isAzureMonitorTargetEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DatabaseBlobAuditingPolicy = {
        serializedName: "DatabaseBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "DatabaseBlobAuditingPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                }, isAzureMonitorTargetEnabled: {
                    serializedName: "properties.isAzureMonitorTargetEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DatabaseVulnerabilityAssessmentRuleBaselineItem = {
        serializedName: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
            modelProperties: {
                result: {
                    required: true,
                    serializedName: "result",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseVulnerabilityAssessmentRuleBaseline = {
        serializedName: "DatabaseVulnerabilityAssessmentRuleBaseline",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentRuleBaseline",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { baselineResults: {
                    required: true,
                    serializedName: "properties.baselineResults",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseVulnerabilityAssessmentRuleBaselineItem"
                            }
                        }
                    }
                } })
        }
    };
    var VulnerabilityAssessmentRecurringScansProperties = {
        serializedName: "VulnerabilityAssessmentRecurringScansProperties",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentRecurringScansProperties",
            modelProperties: {
                isEnabled: {
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                emailSubscriptionAdmins: {
                    serializedName: "emailSubscriptionAdmins",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                emails: {
                    serializedName: "emails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseVulnerabilityAssessment = {
        serializedName: "DatabaseVulnerabilityAssessment",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessment",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { storageContainerPath: {
                    serializedName: "properties.storageContainerPath",
                    type: {
                        name: "String"
                    }
                }, storageContainerSasKey: {
                    serializedName: "properties.storageContainerSasKey",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, recurringScans: {
                    serializedName: "properties.recurringScans",
                    type: {
                        name: "Composite",
                        className: "VulnerabilityAssessmentRecurringScansProperties"
                    }
                } })
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobAgent = {
        serializedName: "JobAgent",
        type: {
            name: "Composite",
            className: "JobAgent",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, databaseId: {
                    required: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobAgentUpdate = {
        serializedName: "JobAgentUpdate",
        type: {
            name: "Composite",
            className: "JobAgentUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobCredential = {
        serializedName: "JobCredential",
        type: {
            name: "Composite",
            className: "JobCredential",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { username: {
                    required: true,
                    serializedName: "properties.username",
                    type: {
                        name: "String"
                    }
                }, password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobExecutionTarget = {
        serializedName: "JobExecutionTarget",
        type: {
            name: "Composite",
            className: "JobExecutionTarget",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    readOnly: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobExecution = {
        serializedName: "JobExecution",
        type: {
            name: "Composite",
            className: "JobExecution",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { jobVersion: {
                    readOnly: true,
                    serializedName: "properties.jobVersion",
                    type: {
                        name: "Number"
                    }
                }, stepName: {
                    readOnly: true,
                    serializedName: "properties.stepName",
                    type: {
                        name: "String"
                    }
                }, stepId: {
                    readOnly: true,
                    serializedName: "properties.stepId",
                    type: {
                        name: "Number"
                    }
                }, jobExecutionId: {
                    readOnly: true,
                    serializedName: "properties.jobExecutionId",
                    type: {
                        name: "Uuid"
                    }
                }, lifecycle: {
                    readOnly: true,
                    serializedName: "properties.lifecycle",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createTime: {
                    readOnly: true,
                    serializedName: "properties.createTime",
                    type: {
                        name: "DateTime"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, currentAttempts: {
                    serializedName: "properties.currentAttempts",
                    type: {
                        name: "Number"
                    }
                }, currentAttemptStartTime: {
                    readOnly: true,
                    serializedName: "properties.currentAttemptStartTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastMessage: {
                    readOnly: true,
                    serializedName: "properties.lastMessage",
                    type: {
                        name: "String"
                    }
                }, target: {
                    readOnly: true,
                    serializedName: "properties.target",
                    type: {
                        name: "Composite",
                        className: "JobExecutionTarget"
                    }
                } })
        }
    };
    var JobSchedule = {
        serializedName: "JobSchedule",
        type: {
            name: "Composite",
            className: "JobSchedule",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    defaultValue: new Date('0001-01-01T00:00:00Z'),
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    defaultValue: new Date('9999-12-31T11:59:59Z'),
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    serializedName: "type",
                    defaultValue: 'Once',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Once",
                            "Recurring"
                        ]
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    defaultValue: '',
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "Number"
                    }
                }, schedule: {
                    serializedName: "properties.schedule",
                    type: {
                        name: "Composite",
                        className: "JobSchedule"
                    }
                } })
        }
    };
    var JobStepAction = {
        serializedName: "JobStepAction",
        type: {
            name: "Composite",
            className: "JobStepAction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    defaultValue: 'TSql',
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    defaultValue: 'Inline',
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStepOutput = {
        serializedName: "JobStepOutput",
        type: {
            name: "Composite",
            className: "JobStepOutput",
            modelProperties: {
                type: {
                    serializedName: "type",
                    defaultValue: 'SqlDatabase',
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "Uuid"
                    }
                },
                resourceGroupName: {
                    serializedName: "resourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    required: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    required: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    serializedName: "schemaName",
                    defaultValue: 'dbo',
                    type: {
                        name: "String"
                    }
                },
                tableName: {
                    required: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                },
                credential: {
                    required: true,
                    serializedName: "credential",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStepExecutionOptions = {
        serializedName: "JobStepExecutionOptions",
        type: {
            name: "Composite",
            className: "JobStepExecutionOptions",
            modelProperties: {
                timeoutSeconds: {
                    serializedName: "timeoutSeconds",
                    defaultValue: 43200,
                    type: {
                        name: "Number"
                    }
                },
                retryAttempts: {
                    serializedName: "retryAttempts",
                    defaultValue: 10,
                    type: {
                        name: "Number"
                    }
                },
                initialRetryIntervalSeconds: {
                    serializedName: "initialRetryIntervalSeconds",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                maximumRetryIntervalSeconds: {
                    serializedName: "maximumRetryIntervalSeconds",
                    defaultValue: 120,
                    type: {
                        name: "Number"
                    }
                },
                retryIntervalBackoffMultiplier: {
                    serializedName: "retryIntervalBackoffMultiplier",
                    defaultValue: 2,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobStep = {
        serializedName: "JobStep",
        type: {
            name: "Composite",
            className: "JobStep",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { stepId: {
                    serializedName: "properties.stepId",
                    type: {
                        name: "Number"
                    }
                }, targetGroup: {
                    required: true,
                    serializedName: "properties.targetGroup",
                    type: {
                        name: "String"
                    }
                }, credential: {
                    required: true,
                    serializedName: "properties.credential",
                    type: {
                        name: "String"
                    }
                }, action: {
                    required: true,
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        className: "JobStepAction"
                    }
                }, output: {
                    serializedName: "properties.output",
                    type: {
                        name: "Composite",
                        className: "JobStepOutput"
                    }
                }, executionOptions: {
                    serializedName: "properties.executionOptions",
                    type: {
                        name: "Composite",
                        className: "JobStepExecutionOptions"
                    }
                } })
        }
    };
    var JobTarget = {
        serializedName: "JobTarget",
        type: {
            name: "Composite",
            className: "JobTarget",
            modelProperties: {
                membershipType: {
                    serializedName: "membershipType",
                    defaultValue: 'Include',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Include",
                            "Exclude"
                        ]
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                elasticPoolName: {
                    serializedName: "elasticPoolName",
                    type: {
                        name: "String"
                    }
                },
                shardMapName: {
                    serializedName: "shardMapName",
                    type: {
                        name: "String"
                    }
                },
                refreshCredential: {
                    serializedName: "refreshCredential",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobTargetGroup = {
        serializedName: "JobTargetGroup",
        type: {
            name: "Composite",
            className: "JobTargetGroup",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { members: {
                    required: true,
                    serializedName: "properties.members",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobTarget"
                            }
                        }
                    }
                } })
        }
    };
    var JobVersion = {
        serializedName: "JobVersion",
        type: {
            name: "Composite",
            className: "JobVersion",
            modelProperties: __assign({}, ProxyResource.type.modelProperties)
        }
    };
    var LongTermRetentionBackup = {
        serializedName: "LongTermRetentionBackup",
        type: {
            name: "Composite",
            className: "LongTermRetentionBackup",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, serverCreateTime: {
                    readOnly: true,
                    serializedName: "properties.serverCreateTime",
                    type: {
                        name: "DateTime"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, databaseDeletionTime: {
                    readOnly: true,
                    serializedName: "properties.databaseDeletionTime",
                    type: {
                        name: "DateTime"
                    }
                }, backupTime: {
                    readOnly: true,
                    serializedName: "properties.backupTime",
                    type: {
                        name: "DateTime"
                    }
                }, backupExpirationTime: {
                    readOnly: true,
                    serializedName: "properties.backupExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var BackupLongTermRetentionPolicy = {
        serializedName: "BackupLongTermRetentionPolicy",
        type: {
            name: "Composite",
            className: "BackupLongTermRetentionPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { weeklyRetention: {
                    serializedName: "properties.weeklyRetention",
                    type: {
                        name: "String"
                    }
                }, monthlyRetention: {
                    serializedName: "properties.monthlyRetention",
                    type: {
                        name: "String"
                    }
                }, yearlyRetention: {
                    serializedName: "properties.yearlyRetention",
                    type: {
                        name: "String"
                    }
                }, weekOfYear: {
                    serializedName: "properties.weekOfYear",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ManagedBackupShortTermRetentionPolicy = {
        serializedName: "ManagedBackupShortTermRetentionPolicy",
        type: {
            name: "Composite",
            className: "ManagedBackupShortTermRetentionPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var AutomaticTuningServerOptions = {
        serializedName: "AutomaticTuningServerOptions",
        type: {
            name: "Composite",
            className: "AutomaticTuningServerOptions",
            modelProperties: {
                desiredState: {
                    serializedName: "desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On",
                            "Default"
                        ]
                    }
                },
                actualState: {
                    readOnly: true,
                    serializedName: "actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On"
                        ]
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "Number"
                    }
                },
                reasonDesc: {
                    readOnly: true,
                    serializedName: "reasonDesc",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Disabled",
                            "AutoConfigured"
                        ]
                    }
                }
            }
        }
    };
    var ServerAutomaticTuning = {
        serializedName: "ServerAutomaticTuning",
        type: {
            name: "Composite",
            className: "ServerAutomaticTuning",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { desiredState: {
                    serializedName: "properties.desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, actualState: {
                    readOnly: true,
                    serializedName: "properties.actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, options: {
                    serializedName: "properties.options",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AutomaticTuningServerOptions"
                            }
                        }
                    }
                } })
        }
    };
    var ServerDnsAlias = {
        serializedName: "ServerDnsAlias",
        type: {
            name: "Composite",
            className: "ServerDnsAlias",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { azureDnsRecord: {
                    readOnly: true,
                    serializedName: "properties.azureDnsRecord",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerDnsAliasAcquisition = {
        serializedName: "ServerDnsAliasAcquisition",
        type: {
            name: "Composite",
            className: "ServerDnsAliasAcquisition",
            modelProperties: {
                oldServerDnsAliasId: {
                    serializedName: "oldServerDnsAliasId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerSecurityAlertPolicy = {
        serializedName: "ServerSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "ServerSecurityAlertPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "New",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Boolean"
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var RestorableDroppedManagedDatabase = {
        serializedName: "RestorableDroppedManagedDatabase",
        type: {
            name: "Composite",
            className: "RestorableDroppedManagedDatabase",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, deletionDate: {
                    readOnly: true,
                    serializedName: "properties.deletionDate",
                    type: {
                        name: "DateTime"
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var RestorePoint = {
        serializedName: "RestorePoint",
        type: {
            name: "Composite",
            className: "RestorePoint",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, restorePointType: {
                    readOnly: true,
                    serializedName: "properties.restorePointType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CONTINUOUS",
                            "DISCRETE"
                        ]
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                }, restorePointCreationDate: {
                    readOnly: true,
                    serializedName: "properties.restorePointCreationDate",
                    type: {
                        name: "DateTime"
                    }
                }, restorePointLabel: {
                    readOnly: true,
                    serializedName: "properties.restorePointLabel",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CreateDatabaseRestorePointDefinition = {
        serializedName: "CreateDatabaseRestorePointDefinition",
        type: {
            name: "Composite",
            className: "CreateDatabaseRestorePointDefinition",
            modelProperties: {
                restorePointLabel: {
                    required: true,
                    serializedName: "restorePointLabel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedDatabaseSecurityAlertPolicy = {
        serializedName: "ManagedDatabaseSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "ManagedDatabaseSecurityAlertPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "New",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Boolean"
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ManagedServerSecurityAlertPolicy = {
        serializedName: "ManagedServerSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "ManagedServerSecurityAlertPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "New",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Boolean"
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var SensitivityLabel = {
        serializedName: "SensitivityLabel",
        type: {
            name: "Composite",
            className: "SensitivityLabel",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { labelName: {
                    serializedName: "properties.labelName",
                    type: {
                        name: "String"
                    }
                }, labelId: {
                    serializedName: "properties.labelId",
                    type: {
                        name: "String"
                    }
                }, informationType: {
                    serializedName: "properties.informationType",
                    type: {
                        name: "String"
                    }
                }, informationTypeId: {
                    serializedName: "properties.informationTypeId",
                    type: {
                        name: "String"
                    }
                }, isDisabled: {
                    readOnly: true,
                    serializedName: "properties.isDisabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ManagedInstanceAdministrator = {
        serializedName: "ManagedInstanceAdministrator",
        type: {
            name: "Composite",
            className: "ManagedInstanceAdministrator",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { administratorType: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.administratorType",
                    defaultValue: 'ActiveDirectory',
                    type: {
                        name: "String"
                    }
                }, login: {
                    required: true,
                    serializedName: "properties.login",
                    type: {
                        name: "String"
                    }
                }, sid: {
                    required: true,
                    serializedName: "properties.sid",
                    type: {
                        name: "Uuid"
                    }
                }, tenantId: {
                    serializedName: "properties.tenantId",
                    type: {
                        name: "Uuid"
                    }
                } })
        }
    };
    var DatabaseOperation = {
        serializedName: "DatabaseOperation",
        type: {
            name: "Composite",
            className: "DatabaseOperation",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationFriendlyName: {
                    readOnly: true,
                    serializedName: "properties.operationFriendlyName",
                    type: {
                        name: "String"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorDescription: {
                    readOnly: true,
                    serializedName: "properties.errorDescription",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, isUserError: {
                    readOnly: true,
                    serializedName: "properties.isUserError",
                    type: {
                        name: "Boolean"
                    }
                }, estimatedCompletionTime: {
                    readOnly: true,
                    serializedName: "properties.estimatedCompletionTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isCancellable: {
                    readOnly: true,
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ElasticPoolOperation = {
        serializedName: "ElasticPoolOperation",
        type: {
            name: "Composite",
            className: "ElasticPoolOperation",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationFriendlyName: {
                    readOnly: true,
                    serializedName: "properties.operationFriendlyName",
                    type: {
                        name: "String"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorDescription: {
                    readOnly: true,
                    serializedName: "properties.errorDescription",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, isUserError: {
                    readOnly: true,
                    serializedName: "properties.isUserError",
                    type: {
                        name: "Boolean"
                    }
                }, estimatedCompletionTime: {
                    readOnly: true,
                    serializedName: "properties.estimatedCompletionTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isCancellable: {
                    readOnly: true,
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MaxSizeCapability = {
        serializedName: "MaxSizeCapability",
        type: {
            name: "Composite",
            className: "MaxSizeCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSizeCapability = {
        serializedName: "LogSizeCapability",
        type: {
            name: "Composite",
            className: "LogSizeCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MaxSizeRangeCapability = {
        serializedName: "MaxSizeRangeCapability",
        type: {
            name: "Composite",
            className: "MaxSizeRangeCapability",
            modelProperties: {
                minValue: {
                    readOnly: true,
                    serializedName: "minValue",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                maxValue: {
                    readOnly: true,
                    serializedName: "maxValue",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                scaleSize: {
                    readOnly: true,
                    serializedName: "scaleSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                logSize: {
                    readOnly: true,
                    serializedName: "logSize",
                    type: {
                        name: "Composite",
                        className: "LogSizeCapability"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PerformanceLevelCapability = {
        serializedName: "PerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "PerformanceLevelCapability",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LicenseTypeCapability = {
        serializedName: "LicenseTypeCapability",
        type: {
            name: "Composite",
            className: "LicenseTypeCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceObjectiveCapability = {
        serializedName: "ServiceObjectiveCapability",
        type: {
            name: "Composite",
            className: "ServiceObjectiveCapability",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedMaxSizes: {
                    readOnly: true,
                    serializedName: "supportedMaxSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                performanceLevel: {
                    readOnly: true,
                    serializedName: "performanceLevel",
                    type: {
                        name: "Composite",
                        className: "PerformanceLevelCapability"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                supportedLicenseTypes: {
                    readOnly: true,
                    serializedName: "supportedLicenseTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LicenseTypeCapability"
                            }
                        }
                    }
                },
                includedMaxSize: {
                    readOnly: true,
                    serializedName: "includedMaxSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EditionCapability = {
        serializedName: "EditionCapability",
        type: {
            name: "Composite",
            className: "EditionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedServiceLevelObjectives: {
                    readOnly: true,
                    serializedName: "supportedServiceLevelObjectives",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceObjectiveCapability"
                            }
                        }
                    }
                },
                zoneRedundant: {
                    readOnly: true,
                    serializedName: "zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerDatabaseMinPerformanceLevelCapability = {
        serializedName: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerDatabaseMaxPerformanceLevelCapability = {
        serializedName: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                supportedPerDatabaseMinPerformanceLevels: {
                    readOnly: true,
                    serializedName: "supportedPerDatabaseMinPerformanceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerformanceLevelCapability = {
        serializedName: "ElasticPoolPerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolPerformanceLevelCapability",
            modelProperties: {
                performanceLevel: {
                    readOnly: true,
                    serializedName: "performanceLevel",
                    type: {
                        name: "Composite",
                        className: "PerformanceLevelCapability"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                supportedLicenseTypes: {
                    readOnly: true,
                    serializedName: "supportedLicenseTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LicenseTypeCapability"
                            }
                        }
                    }
                },
                maxDatabaseCount: {
                    readOnly: true,
                    serializedName: "maxDatabaseCount",
                    type: {
                        name: "Number"
                    }
                },
                includedMaxSize: {
                    readOnly: true,
                    serializedName: "includedMaxSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                supportedMaxSizes: {
                    readOnly: true,
                    serializedName: "supportedMaxSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                supportedPerDatabaseMaxSizes: {
                    readOnly: true,
                    serializedName: "supportedPerDatabaseMaxSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                supportedPerDatabaseMaxPerformanceLevels: {
                    readOnly: true,
                    serializedName: "supportedPerDatabaseMaxPerformanceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolEditionCapability = {
        serializedName: "ElasticPoolEditionCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolEditionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedElasticPoolPerformanceLevels: {
                    readOnly: true,
                    serializedName: "supportedElasticPoolPerformanceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolPerformanceLevelCapability"
                            }
                        }
                    }
                },
                zoneRedundant: {
                    readOnly: true,
                    serializedName: "zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerVersionCapability = {
        serializedName: "ServerVersionCapability",
        type: {
            name: "Composite",
            className: "ServerVersionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedEditions: {
                    readOnly: true,
                    serializedName: "supportedEditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EditionCapability"
                            }
                        }
                    }
                },
                supportedElasticPoolEditions: {
                    readOnly: true,
                    serializedName: "supportedElasticPoolEditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolEditionCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceVcoresCapability = {
        serializedName: "ManagedInstanceVcoresCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceVcoresCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceFamilyCapability = {
        serializedName: "ManagedInstanceFamilyCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceFamilyCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                supportedLicenseTypes: {
                    readOnly: true,
                    serializedName: "supportedLicenseTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LicenseTypeCapability"
                            }
                        }
                    }
                },
                supportedVcoresValues: {
                    readOnly: true,
                    serializedName: "supportedVcoresValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceVcoresCapability"
                            }
                        }
                    }
                },
                includedMaxSize: {
                    readOnly: true,
                    serializedName: "includedMaxSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                supportedStorageSizes: {
                    readOnly: true,
                    serializedName: "supportedStorageSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceEditionCapability = {
        serializedName: "ManagedInstanceEditionCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceEditionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedFamilies: {
                    readOnly: true,
                    serializedName: "supportedFamilies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceFamilyCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceVersionCapability = {
        serializedName: "ManagedInstanceVersionCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceVersionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedEditions: {
                    readOnly: true,
                    serializedName: "supportedEditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceEditionCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocationCapabilities = {
        serializedName: "LocationCapabilities",
        type: {
            name: "Composite",
            className: "LocationCapabilities",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedServerVersions: {
                    readOnly: true,
                    serializedName: "supportedServerVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerVersionCapability"
                            }
                        }
                    }
                },
                supportedManagedInstanceVersions: {
                    readOnly: true,
                    serializedName: "supportedManagedInstanceVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceVersionCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Database = {
        serializedName: "Database",
        type: {
            name: "Composite",
            className: "Database",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, managedBy: {
                    readOnly: true,
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                }, collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                }, maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, sampleName: {
                    serializedName: "properties.sampleName",
                    type: {
                        name: "String"
                    }
                }, elasticPoolId: {
                    serializedName: "properties.elasticPoolId",
                    type: {
                        name: "String"
                    }
                }, sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, databaseId: {
                    readOnly: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "Uuid"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, currentServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.currentServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, requestedServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.requestedServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                }, failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                }, restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                }, sourceDatabaseDeletionDate: {
                    serializedName: "properties.sourceDatabaseDeletionDate",
                    type: {
                        name: "DateTime"
                    }
                }, recoveryServicesRecoveryPointId: {
                    serializedName: "properties.recoveryServicesRecoveryPointId",
                    type: {
                        name: "String"
                    }
                }, longTermRetentionBackupResourceId: {
                    serializedName: "properties.longTermRetentionBackupResourceId",
                    type: {
                        name: "String"
                    }
                }, recoverableDatabaseId: {
                    serializedName: "properties.recoverableDatabaseId",
                    type: {
                        name: "String"
                    }
                }, restorableDroppedDatabaseId: {
                    serializedName: "properties.restorableDroppedDatabaseId",
                    type: {
                        name: "String"
                    }
                }, catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                }, zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, maxLogSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.maxLogSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                }, readScale: {
                    serializedName: "properties.readScale",
                    type: {
                        name: "String"
                    }
                }, readReplicaCount: {
                    serializedName: "properties.readReplicaCount",
                    type: {
                        name: "Number"
                    }
                }, currentSku: {
                    readOnly: true,
                    serializedName: "properties.currentSku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, autoPauseDelay: {
                    serializedName: "properties.autoPauseDelay",
                    type: {
                        name: "Number"
                    }
                }, minCapacity: {
                    serializedName: "properties.minCapacity",
                    type: {
                        name: "Number"
                    }
                }, pausedDate: {
                    readOnly: true,
                    serializedName: "properties.pausedDate",
                    type: {
                        name: "DateTime"
                    }
                }, resumedDate: {
                    readOnly: true,
                    serializedName: "properties.resumedDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var DatabaseUpdate = {
        serializedName: "DatabaseUpdate",
        type: {
            name: "Composite",
            className: "DatabaseUpdate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                },
                collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                },
                maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                sampleName: {
                    serializedName: "properties.sampleName",
                    type: {
                        name: "String"
                    }
                },
                elasticPoolId: {
                    serializedName: "properties.elasticPoolId",
                    type: {
                        name: "String"
                    }
                },
                sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                databaseId: {
                    readOnly: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "Uuid"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                currentServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.currentServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                },
                requestedServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.requestedServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                },
                defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                },
                failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                },
                restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                },
                sourceDatabaseDeletionDate: {
                    serializedName: "properties.sourceDatabaseDeletionDate",
                    type: {
                        name: "DateTime"
                    }
                },
                recoveryServicesRecoveryPointId: {
                    serializedName: "properties.recoveryServicesRecoveryPointId",
                    type: {
                        name: "String"
                    }
                },
                longTermRetentionBackupResourceId: {
                    serializedName: "properties.longTermRetentionBackupResourceId",
                    type: {
                        name: "String"
                    }
                },
                recoverableDatabaseId: {
                    serializedName: "properties.recoverableDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                restorableDroppedDatabaseId: {
                    serializedName: "properties.restorableDroppedDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                },
                zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                },
                maxLogSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.maxLogSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                },
                readScale: {
                    serializedName: "properties.readScale",
                    type: {
                        name: "String"
                    }
                },
                readReplicaCount: {
                    serializedName: "properties.readReplicaCount",
                    type: {
                        name: "Number"
                    }
                },
                currentSku: {
                    readOnly: true,
                    serializedName: "properties.currentSku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                autoPauseDelay: {
                    serializedName: "properties.autoPauseDelay",
                    type: {
                        name: "Number"
                    }
                },
                minCapacity: {
                    serializedName: "properties.minCapacity",
                    type: {
                        name: "Number"
                    }
                },
                pausedDate: {
                    readOnly: true,
                    serializedName: "properties.pausedDate",
                    type: {
                        name: "DateTime"
                    }
                },
                resumedDate: {
                    readOnly: true,
                    serializedName: "properties.resumedDate",
                    type: {
                        name: "DateTime"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceMoveDefinition = {
        serializedName: "ResourceMoveDefinition",
        type: {
            name: "Composite",
            className: "ResourceMoveDefinition",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerDatabaseSettings = {
        serializedName: "ElasticPoolPerDatabaseSettings",
        type: {
            name: "Composite",
            className: "ElasticPoolPerDatabaseSettings",
            modelProperties: {
                minCapacity: {
                    serializedName: "minCapacity",
                    type: {
                        name: "Number"
                    }
                },
                maxCapacity: {
                    serializedName: "maxCapacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ElasticPool = {
        serializedName: "ElasticPool",
        type: {
            name: "Composite",
            className: "ElasticPool",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, perDatabaseSettings: {
                    serializedName: "properties.perDatabaseSettings",
                    type: {
                        name: "Composite",
                        className: "ElasticPoolPerDatabaseSettings"
                    }
                }, zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ElasticPoolUpdate = {
        serializedName: "ElasticPoolUpdate",
        type: {
            name: "Composite",
            className: "ElasticPoolUpdate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                perDatabaseSettings: {
                    serializedName: "properties.perDatabaseSettings",
                    type: {
                        name: "Composite",
                        className: "ElasticPoolPerDatabaseSettings"
                    }
                },
                zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VulnerabilityAssessmentScanError = {
        serializedName: "VulnerabilityAssessmentScanError",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentScanError",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VulnerabilityAssessmentScanRecord = {
        serializedName: "VulnerabilityAssessmentScanRecord",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentScanRecord",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { scanId: {
                    readOnly: true,
                    serializedName: "properties.scanId",
                    type: {
                        name: "String"
                    }
                }, triggerType: {
                    readOnly: true,
                    serializedName: "properties.triggerType",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, errors: {
                    readOnly: true,
                    serializedName: "properties.errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VulnerabilityAssessmentScanError"
                            }
                        }
                    }
                }, storageContainerPath: {
                    readOnly: true,
                    serializedName: "properties.storageContainerPath",
                    type: {
                        name: "String"
                    }
                }, numberOfFailedSecurityChecks: {
                    readOnly: true,
                    serializedName: "properties.numberOfFailedSecurityChecks",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var DatabaseVulnerabilityAssessmentScansExport = {
        serializedName: "DatabaseVulnerabilityAssessmentScansExport",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentScansExport",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { exportedReportLocation: {
                    readOnly: true,
                    serializedName: "properties.exportedReportLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InstanceFailoverGroupReadWriteEndpoint = {
        serializedName: "InstanceFailoverGroupReadWriteEndpoint",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroupReadWriteEndpoint",
            modelProperties: {
                failoverPolicy: {
                    required: true,
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                },
                failoverWithDataLossGracePeriodMinutes: {
                    serializedName: "failoverWithDataLossGracePeriodMinutes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var InstanceFailoverGroupReadOnlyEndpoint = {
        serializedName: "InstanceFailoverGroupReadOnlyEndpoint",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroupReadOnlyEndpoint",
            modelProperties: {
                failoverPolicy: {
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PartnerRegionInfo = {
        serializedName: "PartnerRegionInfo",
        type: {
            name: "Composite",
            className: "PartnerRegionInfo",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                replicationRole: {
                    readOnly: true,
                    serializedName: "replicationRole",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstancePairInfo = {
        serializedName: "ManagedInstancePairInfo",
        type: {
            name: "Composite",
            className: "ManagedInstancePairInfo",
            modelProperties: {
                primaryManagedInstanceId: {
                    serializedName: "primaryManagedInstanceId",
                    type: {
                        name: "String"
                    }
                },
                partnerManagedInstanceId: {
                    serializedName: "partnerManagedInstanceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstanceFailoverGroup = {
        serializedName: "InstanceFailoverGroup",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroup",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { readWriteEndpoint: {
                    required: true,
                    serializedName: "properties.readWriteEndpoint",
                    type: {
                        name: "Composite",
                        className: "InstanceFailoverGroupReadWriteEndpoint"
                    }
                }, readOnlyEndpoint: {
                    serializedName: "properties.readOnlyEndpoint",
                    type: {
                        name: "Composite",
                        className: "InstanceFailoverGroupReadOnlyEndpoint"
                    }
                }, replicationRole: {
                    readOnly: true,
                    serializedName: "properties.replicationRole",
                    type: {
                        name: "String"
                    }
                }, replicationState: {
                    readOnly: true,
                    serializedName: "properties.replicationState",
                    type: {
                        name: "String"
                    }
                }, partnerRegions: {
                    required: true,
                    serializedName: "properties.partnerRegions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartnerRegionInfo"
                            }
                        }
                    }
                }, managedInstancePairs: {
                    required: true,
                    serializedName: "properties.managedInstancePairs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstancePairInfo"
                            }
                        }
                    }
                } })
        }
    };
    var BackupShortTermRetentionPolicy = {
        serializedName: "BackupShortTermRetentionPolicy",
        type: {
            name: "Composite",
            className: "BackupShortTermRetentionPolicy",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var TdeCertificate = {
        serializedName: "TdeCertificate",
        type: {
            name: "Composite",
            className: "TdeCertificate",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { privateBlob: {
                    required: true,
                    serializedName: "properties.privateBlob",
                    type: {
                        name: "String"
                    }
                }, certPassword: {
                    serializedName: "properties.certPassword",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedInstanceKey = {
        serializedName: "ManagedInstanceKey",
        type: {
            name: "Composite",
            className: "ManagedInstanceKey",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ManagedInstanceEncryptionProtector = {
        serializedName: "ManagedInstanceEncryptionProtector",
        type: {
            name: "Composite",
            className: "ManagedInstanceEncryptionProtector",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, serverKeyName: {
                    serializedName: "properties.serverKeyName",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    readOnly: true,
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoverableManagedDatabase = {
        serializedName: "RecoverableManagedDatabase",
        type: {
            name: "Composite",
            className: "RecoverableManagedDatabase",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { lastAvailableBackupDate: {
                    readOnly: true,
                    serializedName: "properties.lastAvailableBackupDate",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedInstanceVulnerabilityAssessment = {
        serializedName: "ManagedInstanceVulnerabilityAssessment",
        type: {
            name: "Composite",
            className: "ManagedInstanceVulnerabilityAssessment",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { storageContainerPath: {
                    required: true,
                    serializedName: "properties.storageContainerPath",
                    type: {
                        name: "String"
                    }
                }, storageContainerSasKey: {
                    serializedName: "properties.storageContainerSasKey",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, recurringScans: {
                    serializedName: "properties.recurringScans",
                    type: {
                        name: "Composite",
                        className: "VulnerabilityAssessmentRecurringScansProperties"
                    }
                } })
        }
    };
    var ServerVulnerabilityAssessment = {
        serializedName: "ServerVulnerabilityAssessment",
        type: {
            name: "Composite",
            className: "ServerVulnerabilityAssessment",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { storageContainerPath: {
                    required: true,
                    serializedName: "properties.storageContainerPath",
                    type: {
                        name: "String"
                    }
                }, storageContainerSasKey: {
                    serializedName: "properties.storageContainerSasKey",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, recurringScans: {
                    serializedName: "properties.recurringScans",
                    type: {
                        name: "Composite",
                        className: "VulnerabilityAssessmentRecurringScansProperties"
                    }
                } })
        }
    };
    var InstancePool = {
        serializedName: "InstancePool",
        type: {
            name: "Composite",
            className: "InstancePool",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, subnetId: {
                    required: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }, vCores: {
                    required: true,
                    serializedName: "properties.vCores",
                    type: {
                        name: "Number"
                    }
                }, licenseType: {
                    required: true,
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InstancePoolUpdate = {
        serializedName: "InstancePoolUpdate",
        type: {
            name: "Composite",
            className: "InstancePoolUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Name = {
        serializedName: "Name",
        type: {
            name: "Composite",
            className: "Name",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "Name"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                requestedLimit: {
                    readOnly: true,
                    serializedName: "requestedLimit",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagedInstance = {
        serializedName: "ManagedInstance",
        type: {
            name: "Composite",
            className: "ManagedInstance",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ResourceIdentity"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, managedInstanceCreateMode: {
                    serializedName: "properties.managedInstanceCreateMode",
                    type: {
                        name: "String"
                    }
                }, fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                }, administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                }, administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                }, subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, vCores: {
                    serializedName: "properties.vCores",
                    type: {
                        name: "Number"
                    }
                }, storageSizeInGB: {
                    serializedName: "properties.storageSizeInGB",
                    type: {
                        name: "Number"
                    }
                }, collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                }, dnsZone: {
                    readOnly: true,
                    serializedName: "properties.dnsZone",
                    type: {
                        name: "String"
                    }
                }, dnsZonePartner: {
                    serializedName: "properties.dnsZonePartner",
                    type: {
                        name: "String"
                    }
                }, publicDataEndpointEnabled: {
                    serializedName: "properties.publicDataEndpointEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, sourceManagedInstanceId: {
                    serializedName: "properties.sourceManagedInstanceId",
                    type: {
                        name: "String"
                    }
                }, restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                }, proxyOverride: {
                    serializedName: "properties.proxyOverride",
                    type: {
                        name: "String"
                    }
                }, timezoneId: {
                    serializedName: "properties.timezoneId",
                    type: {
                        name: "String"
                    }
                }, instancePoolId: {
                    serializedName: "properties.instancePoolId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedInstanceUpdate = {
        serializedName: "ManagedInstanceUpdate",
        type: {
            name: "Composite",
            className: "ManagedInstanceUpdate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                managedInstanceCreateMode: {
                    serializedName: "properties.managedInstanceCreateMode",
                    type: {
                        name: "String"
                    }
                },
                fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                },
                administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                },
                vCores: {
                    serializedName: "properties.vCores",
                    type: {
                        name: "Number"
                    }
                },
                storageSizeInGB: {
                    serializedName: "properties.storageSizeInGB",
                    type: {
                        name: "Number"
                    }
                },
                collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                },
                dnsZone: {
                    readOnly: true,
                    serializedName: "properties.dnsZone",
                    type: {
                        name: "String"
                    }
                },
                dnsZonePartner: {
                    serializedName: "properties.dnsZonePartner",
                    type: {
                        name: "String"
                    }
                },
                publicDataEndpointEnabled: {
                    serializedName: "properties.publicDataEndpointEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceManagedInstanceId: {
                    serializedName: "properties.sourceManagedInstanceId",
                    type: {
                        name: "String"
                    }
                },
                restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                },
                proxyOverride: {
                    serializedName: "properties.proxyOverride",
                    type: {
                        name: "String"
                    }
                },
                timezoneId: {
                    serializedName: "properties.timezoneId",
                    type: {
                        name: "String"
                    }
                },
                instancePoolId: {
                    serializedName: "properties.instancePoolId",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedDatabaseRestoreDetailsResult = {
        serializedName: "ManagedDatabaseRestoreDetailsResult",
        type: {
            name: "Composite",
            className: "ManagedDatabaseRestoreDetailsResult",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, currentRestoringFileName: {
                    readOnly: true,
                    serializedName: "properties.currentRestoringFileName",
                    type: {
                        name: "String"
                    }
                }, lastRestoredFileName: {
                    readOnly: true,
                    serializedName: "properties.lastRestoredFileName",
                    type: {
                        name: "String"
                    }
                }, lastRestoredFileTime: {
                    readOnly: true,
                    serializedName: "properties.lastRestoredFileTime",
                    type: {
                        name: "DateTime"
                    }
                }, percentCompleted: {
                    readOnly: true,
                    serializedName: "properties.percentCompleted",
                    type: {
                        name: "Number"
                    }
                }, unrestorableFiles: {
                    readOnly: true,
                    serializedName: "properties.unrestorableFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, numberOfFilesDetected: {
                    readOnly: true,
                    serializedName: "properties.numberOfFilesDetected",
                    type: {
                        name: "Number"
                    }
                }, lastUploadedFileName: {
                    readOnly: true,
                    serializedName: "properties.lastUploadedFileName",
                    type: {
                        name: "String"
                    }
                }, lastUploadedFileTime: {
                    readOnly: true,
                    serializedName: "properties.lastUploadedFileTime",
                    type: {
                        name: "DateTime"
                    }
                }, blockReason: {
                    readOnly: true,
                    serializedName: "properties.blockReason",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedDatabase = {
        serializedName: "ManagedDatabase",
        type: {
            name: "Composite",
            className: "ManagedDatabase",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, earliestRestorePoint: {
                    readOnly: true,
                    serializedName: "properties.earliestRestorePoint",
                    type: {
                        name: "DateTime"
                    }
                }, restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                }, defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                }, catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                }, createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                }, storageContainerUri: {
                    serializedName: "properties.storageContainerUri",
                    type: {
                        name: "String"
                    }
                }, sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                }, restorableDroppedDatabaseId: {
                    serializedName: "properties.restorableDroppedDatabaseId",
                    type: {
                        name: "String"
                    }
                }, storageContainerSasToken: {
                    serializedName: "properties.storageContainerSasToken",
                    type: {
                        name: "String"
                    }
                }, failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                }, recoverableDatabaseId: {
                    serializedName: "properties.recoverableDatabaseId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedDatabaseUpdate = {
        serializedName: "ManagedDatabaseUpdate",
        type: {
            name: "Composite",
            className: "ManagedDatabaseUpdate",
            modelProperties: {
                collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                earliestRestorePoint: {
                    readOnly: true,
                    serializedName: "properties.earliestRestorePoint",
                    type: {
                        name: "DateTime"
                    }
                },
                restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                },
                defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                },
                catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                },
                createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                },
                storageContainerUri: {
                    serializedName: "properties.storageContainerUri",
                    type: {
                        name: "String"
                    }
                },
                sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                restorableDroppedDatabaseId: {
                    serializedName: "properties.restorableDroppedDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                storageContainerSasToken: {
                    serializedName: "properties.storageContainerSasToken",
                    type: {
                        name: "String"
                    }
                },
                failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                },
                recoverableDatabaseId: {
                    serializedName: "properties.recoverableDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CompleteDatabaseRestoreDefinition = {
        serializedName: "CompleteDatabaseRestoreDefinition",
        type: {
            name: "Composite",
            className: "CompleteDatabaseRestoreDefinition",
            modelProperties: {
                lastBackupName: {
                    required: true,
                    serializedName: "lastBackupName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointProperty = {
        serializedName: "PrivateEndpointProperty",
        type: {
            name: "Composite",
            className: "PrivateEndpointProperty",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateLinkServiceConnectionStateProperty = {
        serializedName: "PrivateLinkServiceConnectionStateProperty",
        type: {
            name: "Composite",
            className: "PrivateLinkServiceConnectionStateProperty",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    required: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                actionsRequired: {
                    readOnly: true,
                    serializedName: "actionsRequired",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnection = {
        serializedName: "PrivateEndpointConnection",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnection",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { privateEndpoint: {
                    serializedName: "properties.privateEndpoint",
                    type: {
                        name: "Composite",
                        className: "PrivateEndpointProperty"
                    }
                }, privateLinkServiceConnectionState: {
                    serializedName: "properties.privateLinkServiceConnectionState",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkServiceConnectionStateProperty"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PrivateLinkResourceProperties = {
        serializedName: "PrivateLinkResourceProperties",
        type: {
            name: "Composite",
            className: "PrivateLinkResourceProperties",
            modelProperties: {
                groupId: {
                    readOnly: true,
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                },
                requiredMembers: {
                    readOnly: true,
                    serializedName: "requiredMembers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrivateLinkResource = {
        serializedName: "PrivateLinkResource",
        type: {
            name: "Composite",
            className: "PrivateLinkResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkResourceProperties"
                    }
                } })
        }
    };
    var RecoverableDatabaseListResult = {
        serializedName: "RecoverableDatabaseListResult",
        type: {
            name: "Composite",
            className: "RecoverableDatabaseListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoverableDatabase"
                            }
                        }
                    }
                }
            }
        }
    };
    var RestorableDroppedDatabaseListResult = {
        serializedName: "RestorableDroppedDatabaseListResult",
        type: {
            name: "Composite",
            className: "RestorableDroppedDatabaseListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorableDroppedDatabase"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerListResult = {
        serializedName: "ServerListResult",
        type: {
            name: "Composite",
            className: "ServerListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Server"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataMaskingRuleListResult = {
        serializedName: "DataMaskingRuleListResult",
        type: {
            name: "Composite",
            className: "DataMaskingRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataMaskingRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var FirewallRuleListResult = {
        serializedName: "FirewallRuleListResult",
        type: {
            name: "Composite",
            className: "FirewallRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var GeoBackupPolicyListResult = {
        serializedName: "GeoBackupPolicyListResult",
        type: {
            name: "Composite",
            className: "GeoBackupPolicyListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GeoBackupPolicy"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricListResult = {
        serializedName: "MetricListResult",
        type: {
            name: "Composite",
            className: "MetricListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metric"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDefinitionListResult = {
        serializedName: "MetricDefinitionListResult",
        type: {
            name: "Composite",
            className: "MetricDefinitionListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseListResult = {
        serializedName: "DatabaseListResult",
        type: {
            name: "Composite",
            className: "DatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Database"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolListResult = {
        serializedName: "ElasticPoolListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPool"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecommendedElasticPoolListResult = {
        serializedName: "RecommendedElasticPoolListResult",
        type: {
            name: "Composite",
            className: "RecommendedElasticPoolListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecommendedElasticPool"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecommendedElasticPoolListMetricsResult = {
        serializedName: "RecommendedElasticPoolListMetricsResult",
        type: {
            name: "Composite",
            className: "RecommendedElasticPoolListMetricsResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecommendedElasticPoolMetric"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReplicationLinkListResult = {
        serializedName: "ReplicationLinkListResult",
        type: {
            name: "Composite",
            className: "ReplicationLinkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReplicationLink"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerAdministratorListResult = {
        serializedName: "ServerAdministratorListResult",
        type: {
            name: "Composite",
            className: "ServerAdministratorListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerAzureADAdministrator"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerCommunicationLinkListResult = {
        serializedName: "ServerCommunicationLinkListResult",
        type: {
            name: "Composite",
            className: "ServerCommunicationLinkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerCommunicationLink"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceObjectiveListResult = {
        serializedName: "ServiceObjectiveListResult",
        type: {
            name: "Composite",
            className: "ServiceObjectiveListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceObjective"
                            }
                        }
                    }
                }
            }
        }
    };
    var ElasticPoolActivityListResult = {
        serializedName: "ElasticPoolActivityListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolActivityListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolActivity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ElasticPoolDatabaseActivityListResult = {
        serializedName: "ElasticPoolDatabaseActivityListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolDatabaseActivityListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolDatabaseActivity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceTierAdvisorListResult = {
        serializedName: "ServiceTierAdvisorListResult",
        type: {
            name: "Composite",
            className: "ServiceTierAdvisorListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceTierAdvisor"
                            }
                        }
                    }
                }
            }
        }
    };
    var TransparentDataEncryptionActivityListResult = {
        serializedName: "TransparentDataEncryptionActivityListResult",
        type: {
            name: "Composite",
            className: "TransparentDataEncryptionActivityListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TransparentDataEncryptionActivity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerUsageListResult = {
        serializedName: "ServerUsageListResult",
        type: {
            name: "Composite",
            className: "ServerUsageListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseUsageListResult = {
        serializedName: "DatabaseUsageListResult",
        type: {
            name: "Composite",
            className: "DatabaseUsageListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var EncryptionProtectorListResult = {
        serializedName: "EncryptionProtectorListResult",
        type: {
            name: "Composite",
            className: "EncryptionProtectorListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EncryptionProtector"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverGroupListResult = {
        serializedName: "FailoverGroupListResult",
        type: {
            name: "Composite",
            className: "FailoverGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerKeyListResult = {
        serializedName: "ServerKeyListResult",
        type: {
            name: "Composite",
            className: "ServerKeyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerKey"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncAgentListResult = {
        serializedName: "SyncAgentListResult",
        type: {
            name: "Composite",
            className: "SyncAgentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncAgent"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncAgentLinkedDatabaseListResult = {
        serializedName: "SyncAgentLinkedDatabaseListResult",
        type: {
            name: "Composite",
            className: "SyncAgentLinkedDatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncAgentLinkedDatabase"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncDatabaseIdListResult = {
        serializedName: "SyncDatabaseIdListResult",
        type: {
            name: "Composite",
            className: "SyncDatabaseIdListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncDatabaseIdProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaPropertiesListResult = {
        serializedName: "SyncFullSchemaPropertiesListResult",
        type: {
            name: "Composite",
            className: "SyncFullSchemaPropertiesListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncFullSchemaProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupLogListResult = {
        serializedName: "SyncGroupLogListResult",
        type: {
            name: "Composite",
            className: "SyncGroupLogListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroupLogProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupListResult = {
        serializedName: "SyncGroupListResult",
        type: {
            name: "Composite",
            className: "SyncGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncMemberListResult = {
        serializedName: "SyncMemberListResult",
        type: {
            name: "Composite",
            className: "SyncMemberListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncMember"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionUsageListResult = {
        serializedName: "SubscriptionUsageListResult",
        type: {
            name: "Composite",
            className: "SubscriptionUsageListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubscriptionUsage"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualClusterListResult = {
        serializedName: "VirtualClusterListResult",
        type: {
            name: "Composite",
            className: "VirtualClusterListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualCluster"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRuleListResult = {
        serializedName: "VirtualNetworkRuleListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerBlobAuditingPolicyListResult = {
        serializedName: "ServerBlobAuditingPolicyListResult",
        type: {
            name: "Composite",
            className: "ServerBlobAuditingPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerBlobAuditingPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseBlobAuditingPolicyListResult = {
        serializedName: "DatabaseBlobAuditingPolicyListResult",
        type: {
            name: "Composite",
            className: "DatabaseBlobAuditingPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseBlobAuditingPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseVulnerabilityAssessmentListResult = {
        serializedName: "DatabaseVulnerabilityAssessmentListResult",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseVulnerabilityAssessment"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobAgentListResult = {
        serializedName: "JobAgentListResult",
        type: {
            name: "Composite",
            className: "JobAgentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobAgent"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobCredentialListResult = {
        serializedName: "JobCredentialListResult",
        type: {
            name: "Composite",
            className: "JobCredentialListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobCredential"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobExecutionListResult = {
        serializedName: "JobExecutionListResult",
        type: {
            name: "Composite",
            className: "JobExecutionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobExecution"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobListResult = {
        serializedName: "JobListResult",
        type: {
            name: "Composite",
            className: "JobListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStepListResult = {
        serializedName: "JobStepListResult",
        type: {
            name: "Composite",
            className: "JobStepListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobStep"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobTargetGroupListResult = {
        serializedName: "JobTargetGroupListResult",
        type: {
            name: "Composite",
            className: "JobTargetGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobTargetGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobVersionListResult = {
        serializedName: "JobVersionListResult",
        type: {
            name: "Composite",
            className: "JobVersionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LongTermRetentionBackupListResult = {
        serializedName: "LongTermRetentionBackupListResult",
        type: {
            name: "Composite",
            className: "LongTermRetentionBackupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LongTermRetentionBackup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedBackupShortTermRetentionPolicyListResult = {
        serializedName: "ManagedBackupShortTermRetentionPolicyListResult",
        type: {
            name: "Composite",
            className: "ManagedBackupShortTermRetentionPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedBackupShortTermRetentionPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerDnsAliasListResult = {
        serializedName: "ServerDnsAliasListResult",
        type: {
            name: "Composite",
            className: "ServerDnsAliasListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerDnsAlias"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogicalServerSecurityAlertPolicyListResult = {
        serializedName: "LogicalServerSecurityAlertPolicyListResult",
        type: {
            name: "Composite",
            className: "LogicalServerSecurityAlertPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerSecurityAlertPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorableDroppedManagedDatabaseListResult = {
        serializedName: "RestorableDroppedManagedDatabaseListResult",
        type: {
            name: "Composite",
            className: "RestorableDroppedManagedDatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorableDroppedManagedDatabase"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorePointListResult = {
        serializedName: "RestorePointListResult",
        type: {
            name: "Composite",
            className: "RestorePointListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorePoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedDatabaseSecurityAlertPolicyListResult = {
        serializedName: "ManagedDatabaseSecurityAlertPolicyListResult",
        type: {
            name: "Composite",
            className: "ManagedDatabaseSecurityAlertPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedDatabaseSecurityAlertPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedServerSecurityAlertPolicyListResult = {
        serializedName: "ManagedServerSecurityAlertPolicyListResult",
        type: {
            name: "Composite",
            className: "ManagedServerSecurityAlertPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedServerSecurityAlertPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SensitivityLabelListResult = {
        serializedName: "SensitivityLabelListResult",
        type: {
            name: "Composite",
            className: "SensitivityLabelListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SensitivityLabel"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceAdministratorListResult = {
        serializedName: "ManagedInstanceAdministratorListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceAdministratorListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceAdministrator"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseOperationListResult = {
        serializedName: "DatabaseOperationListResult",
        type: {
            name: "Composite",
            className: "DatabaseOperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolOperationListResult = {
        serializedName: "ElasticPoolOperationListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolOperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VulnerabilityAssessmentScanRecordListResult = {
        serializedName: "VulnerabilityAssessmentScanRecordListResult",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentScanRecordListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VulnerabilityAssessmentScanRecord"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstanceFailoverGroupListResult = {
        serializedName: "InstanceFailoverGroupListResult",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceFailoverGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackupShortTermRetentionPolicyListResult = {
        serializedName: "BackupShortTermRetentionPolicyListResult",
        type: {
            name: "Composite",
            className: "BackupShortTermRetentionPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupShortTermRetentionPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceKeyListResult = {
        serializedName: "ManagedInstanceKeyListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceKeyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceKey"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceEncryptionProtectorListResult = {
        serializedName: "ManagedInstanceEncryptionProtectorListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceEncryptionProtectorListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceEncryptionProtector"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoverableManagedDatabaseListResult = {
        serializedName: "RecoverableManagedDatabaseListResult",
        type: {
            name: "Composite",
            className: "RecoverableManagedDatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoverableManagedDatabase"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceVulnerabilityAssessmentListResult = {
        serializedName: "ManagedInstanceVulnerabilityAssessmentListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceVulnerabilityAssessmentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceVulnerabilityAssessment"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerVulnerabilityAssessmentListResult = {
        serializedName: "ServerVulnerabilityAssessmentListResult",
        type: {
            name: "Composite",
            className: "ServerVulnerabilityAssessmentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerVulnerabilityAssessment"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstancePoolListResult = {
        serializedName: "InstancePoolListResult",
        type: {
            name: "Composite",
            className: "InstancePoolListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstancePool"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageListResult = {
        serializedName: "UsageListResult",
        type: {
            name: "Composite",
            className: "UsageListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceListResult = {
        serializedName: "ManagedInstanceListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstance"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedDatabaseListResult = {
        serializedName: "ManagedDatabaseListResult",
        type: {
            name: "Composite",
            className: "ManagedDatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedDatabase"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnectionListResult = {
        serializedName: "PrivateEndpointConnectionListResult",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnectionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateEndpointConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateLinkResourceListResult = {
        serializedName: "PrivateLinkResourceListResult",
        type: {
            name: "Composite",
            className: "PrivateLinkResourceListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateLinkResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ProxyResource: ProxyResource,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
        CheckNameAvailabilityResponse: CheckNameAvailabilityResponse,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExtensionRequest: ImportExtensionRequest,
        ImportExportResponse: ImportExportResponse,
        ExportRequest: ExportRequest,
        ImportRequest: ImportRequest,
        MetricValue: MetricValue,
        MetricName: MetricName,
        Metric: Metric,
        MetricAvailability: MetricAvailability,
        MetricDefinition: MetricDefinition,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedElasticPool: RecommendedElasticPool,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        OperationImpact: OperationImpact,
        RecommendedIndex: RecommendedIndex,
        TransparentDataEncryption: TransparentDataEncryption,
        SloUsageMetric: SloUsageMetric,
        ServiceTierAdvisor: ServiceTierAdvisor,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        ServerUsage: ServerUsage,
        DatabaseUsage: DatabaseUsage,
        AutomaticTuningOptions: AutomaticTuningOptions,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        EncryptionProtector: EncryptionProtector,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        FailoverGroup: FailoverGroup,
        FailoverGroupUpdate: FailoverGroupUpdate,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ServerKey: ServerKey,
        ResourceIdentity: ResourceIdentity,
        Server: Server,
        ServerUpdate: ServerUpdate,
        SyncAgent: SyncAgent,
        SyncAgentKeyProperties: SyncAgentKeyProperties,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncDatabaseIdProperties: SyncDatabaseIdProperties,
        SyncFullSchemaTableColumn: SyncFullSchemaTableColumn,
        SyncFullSchemaTable: SyncFullSchemaTable,
        SyncFullSchemaProperties: SyncFullSchemaProperties,
        SyncGroupLogProperties: SyncGroupLogProperties,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroup: SyncGroup,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualCluster: VirtualCluster,
        VirtualClusterUpdate: VirtualClusterUpdate,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        Sku: Sku,
        JobAgent: JobAgent,
        JobAgentUpdate: JobAgentUpdate,
        JobCredential: JobCredential,
        JobExecutionTarget: JobExecutionTarget,
        JobExecution: JobExecution,
        JobSchedule: JobSchedule,
        Job: Job,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStep: JobStep,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerDnsAlias: ServerDnsAlias,
        ServerDnsAliasAcquisition: ServerDnsAliasAcquisition,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        CreateDatabaseRestorePointDefinition: CreateDatabaseRestorePointDefinition,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        SensitivityLabel: SensitivityLabel,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        MaxSizeCapability: MaxSizeCapability,
        LogSizeCapability: LogSizeCapability,
        MaxSizeRangeCapability: MaxSizeRangeCapability,
        PerformanceLevelCapability: PerformanceLevelCapability,
        LicenseTypeCapability: LicenseTypeCapability,
        ServiceObjectiveCapability: ServiceObjectiveCapability,
        EditionCapability: EditionCapability,
        ElasticPoolPerDatabaseMinPerformanceLevelCapability: ElasticPoolPerDatabaseMinPerformanceLevelCapability,
        ElasticPoolPerDatabaseMaxPerformanceLevelCapability: ElasticPoolPerDatabaseMaxPerformanceLevelCapability,
        ElasticPoolPerformanceLevelCapability: ElasticPoolPerformanceLevelCapability,
        ElasticPoolEditionCapability: ElasticPoolEditionCapability,
        ServerVersionCapability: ServerVersionCapability,
        ManagedInstanceVcoresCapability: ManagedInstanceVcoresCapability,
        ManagedInstanceFamilyCapability: ManagedInstanceFamilyCapability,
        ManagedInstanceEditionCapability: ManagedInstanceEditionCapability,
        ManagedInstanceVersionCapability: ManagedInstanceVersionCapability,
        LocationCapabilities: LocationCapabilities,
        Database: Database,
        DatabaseUpdate: DatabaseUpdate,
        ResourceMoveDefinition: ResourceMoveDefinition,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        ElasticPool: ElasticPool,
        ElasticPoolUpdate: ElasticPoolUpdate,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        InstanceFailoverGroup: InstanceFailoverGroup,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        InstancePool: InstancePool,
        InstancePoolUpdate: InstancePoolUpdate,
        Name: Name,
        Usage: Usage,
        ManagedInstance: ManagedInstance,
        ManagedInstanceUpdate: ManagedInstanceUpdate,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseUpdate: ManagedDatabaseUpdate,
        CompleteDatabaseRestoreDefinition: CompleteDatabaseRestoreDefinition,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkResource: PrivateLinkResource,
        RecoverableDatabaseListResult: RecoverableDatabaseListResult,
        RestorableDroppedDatabaseListResult: RestorableDroppedDatabaseListResult,
        ServerListResult: ServerListResult,
        DataMaskingRuleListResult: DataMaskingRuleListResult,
        FirewallRuleListResult: FirewallRuleListResult,
        GeoBackupPolicyListResult: GeoBackupPolicyListResult,
        MetricListResult: MetricListResult,
        MetricDefinitionListResult: MetricDefinitionListResult,
        DatabaseListResult: DatabaseListResult,
        ElasticPoolListResult: ElasticPoolListResult,
        RecommendedElasticPoolListResult: RecommendedElasticPoolListResult,
        RecommendedElasticPoolListMetricsResult: RecommendedElasticPoolListMetricsResult,
        ReplicationLinkListResult: ReplicationLinkListResult,
        ServerAdministratorListResult: ServerAdministratorListResult,
        ServerCommunicationLinkListResult: ServerCommunicationLinkListResult,
        ServiceObjectiveListResult: ServiceObjectiveListResult,
        ElasticPoolActivityListResult: ElasticPoolActivityListResult,
        ElasticPoolDatabaseActivityListResult: ElasticPoolDatabaseActivityListResult,
        ServiceTierAdvisorListResult: ServiceTierAdvisorListResult,
        TransparentDataEncryptionActivityListResult: TransparentDataEncryptionActivityListResult,
        ServerUsageListResult: ServerUsageListResult,
        DatabaseUsageListResult: DatabaseUsageListResult,
        EncryptionProtectorListResult: EncryptionProtectorListResult,
        FailoverGroupListResult: FailoverGroupListResult,
        OperationListResult: OperationListResult,
        ServerKeyListResult: ServerKeyListResult,
        SyncAgentListResult: SyncAgentListResult,
        SyncAgentLinkedDatabaseListResult: SyncAgentLinkedDatabaseListResult,
        SyncDatabaseIdListResult: SyncDatabaseIdListResult,
        SyncFullSchemaPropertiesListResult: SyncFullSchemaPropertiesListResult,
        SyncGroupLogListResult: SyncGroupLogListResult,
        SyncGroupListResult: SyncGroupListResult,
        SyncMemberListResult: SyncMemberListResult,
        SubscriptionUsageListResult: SubscriptionUsageListResult,
        VirtualClusterListResult: VirtualClusterListResult,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        ServerBlobAuditingPolicyListResult: ServerBlobAuditingPolicyListResult,
        DatabaseBlobAuditingPolicyListResult: DatabaseBlobAuditingPolicyListResult,
        DatabaseVulnerabilityAssessmentListResult: DatabaseVulnerabilityAssessmentListResult,
        JobAgentListResult: JobAgentListResult,
        JobCredentialListResult: JobCredentialListResult,
        JobExecutionListResult: JobExecutionListResult,
        JobListResult: JobListResult,
        JobStepListResult: JobStepListResult,
        JobTargetGroupListResult: JobTargetGroupListResult,
        JobVersionListResult: JobVersionListResult,
        LongTermRetentionBackupListResult: LongTermRetentionBackupListResult,
        ManagedBackupShortTermRetentionPolicyListResult: ManagedBackupShortTermRetentionPolicyListResult,
        ServerDnsAliasListResult: ServerDnsAliasListResult,
        LogicalServerSecurityAlertPolicyListResult: LogicalServerSecurityAlertPolicyListResult,
        RestorableDroppedManagedDatabaseListResult: RestorableDroppedManagedDatabaseListResult,
        RestorePointListResult: RestorePointListResult,
        ManagedDatabaseSecurityAlertPolicyListResult: ManagedDatabaseSecurityAlertPolicyListResult,
        ManagedServerSecurityAlertPolicyListResult: ManagedServerSecurityAlertPolicyListResult,
        SensitivityLabelListResult: SensitivityLabelListResult,
        ManagedInstanceAdministratorListResult: ManagedInstanceAdministratorListResult,
        DatabaseOperationListResult: DatabaseOperationListResult,
        ElasticPoolOperationListResult: ElasticPoolOperationListResult,
        VulnerabilityAssessmentScanRecordListResult: VulnerabilityAssessmentScanRecordListResult,
        InstanceFailoverGroupListResult: InstanceFailoverGroupListResult,
        BackupShortTermRetentionPolicyListResult: BackupShortTermRetentionPolicyListResult,
        ManagedInstanceKeyListResult: ManagedInstanceKeyListResult,
        ManagedInstanceEncryptionProtectorListResult: ManagedInstanceEncryptionProtectorListResult,
        RecoverableManagedDatabaseListResult: RecoverableManagedDatabaseListResult,
        ManagedInstanceVulnerabilityAssessmentListResult: ManagedInstanceVulnerabilityAssessmentListResult,
        ServerVulnerabilityAssessmentListResult: ServerVulnerabilityAssessmentListResult,
        InstancePoolListResult: InstancePoolListResult,
        UsageListResult: UsageListResult,
        ManagedInstanceListResult: ManagedInstanceListResult,
        ManagedDatabaseListResult: ManagedDatabaseListResult,
        PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
        PrivateLinkResourceListResult: PrivateLinkResourceListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableDatabaseListResult: RecoverableDatabaseListResult,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var administratorName0 = {
        parameterPath: "administratorName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "administratorName",
            defaultValue: 'activeDirectory',
            type: {
                name: "String"
            }
        }
    };
    var administratorName1 = {
        parameterPath: "administratorName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "administratorName",
            defaultValue: 'ActiveDirectory',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2014-04-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-05-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-10-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-06-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion4 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-03-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var backupName = {
        parameterPath: "backupName",
        mapper: {
            required: true,
            serializedName: "backupName",
            type: {
                name: "String"
            }
        }
    };
    var baselineName = {
        parameterPath: "baselineName",
        mapper: {
            required: true,
            serializedName: "baselineName",
            type: {
                name: "Enum",
                allowedValues: [
                    "master",
                    "default"
                ]
            }
        }
    };
    var blobAuditingPolicyName = {
        parameterPath: "blobAuditingPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "blobAuditingPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var columnName = {
        parameterPath: "columnName",
        mapper: {
            required: true,
            serializedName: "columnName",
            type: {
                name: "String"
            }
        }
    };
    var communicationLinkName = {
        parameterPath: "communicationLinkName",
        mapper: {
            required: true,
            serializedName: "communicationLinkName",
            type: {
                name: "String"
            }
        }
    };
    var connectionPolicyName = {
        parameterPath: "connectionPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "connectionPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var continuationToken = {
        parameterPath: [
            "options",
            "continuationToken"
        ],
        mapper: {
            serializedName: "continuationToken",
            type: {
                name: "String"
            }
        }
    };
    var createTimeMax = {
        parameterPath: [
            "options",
            "createTimeMax"
        ],
        mapper: {
            serializedName: "createTimeMax",
            type: {
                name: "DateTime"
            }
        }
    };
    var createTimeMin = {
        parameterPath: [
            "options",
            "createTimeMin"
        ],
        mapper: {
            serializedName: "createTimeMin",
            type: {
                name: "DateTime"
            }
        }
    };
    var credentialName = {
        parameterPath: "credentialName",
        mapper: {
            required: true,
            serializedName: "credentialName",
            type: {
                name: "String"
            }
        }
    };
    var databaseName = {
        parameterPath: "databaseName",
        mapper: {
            required: true,
            serializedName: "databaseName",
            type: {
                name: "String"
            }
        }
    };
    var databaseState = {
        parameterPath: [
            "options",
            "databaseState"
        ],
        mapper: {
            serializedName: "databaseState",
            type: {
                name: "String"
            }
        }
    };
    var dataMaskingPolicyName = {
        parameterPath: "dataMaskingPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "dataMaskingPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var dataMaskingRuleName = {
        parameterPath: "dataMaskingRuleName",
        mapper: {
            required: true,
            serializedName: "dataMaskingRuleName",
            type: {
                name: "String"
            }
        }
    };
    var dnsAliasName = {
        parameterPath: "dnsAliasName",
        mapper: {
            required: true,
            serializedName: "dnsAliasName",
            type: {
                name: "String"
            }
        }
    };
    var elasticPoolName = {
        parameterPath: "elasticPoolName",
        mapper: {
            required: true,
            serializedName: "elasticPoolName",
            type: {
                name: "String"
            }
        }
    };
    var encryptionProtectorName = {
        parameterPath: "encryptionProtectorName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "encryptionProtectorName",
            defaultValue: 'current',
            type: {
                name: "String"
            }
        }
    };
    var endTime = {
        parameterPath: "endTime",
        mapper: {
            required: true,
            serializedName: "endTime",
            type: {
                name: "String"
            }
        }
    };
    var endTimeMax = {
        parameterPath: [
            "options",
            "endTimeMax"
        ],
        mapper: {
            serializedName: "endTimeMax",
            type: {
                name: "DateTime"
            }
        }
    };
    var endTimeMin = {
        parameterPath: [
            "options",
            "endTimeMin"
        ],
        mapper: {
            serializedName: "endTimeMin",
            type: {
                name: "DateTime"
            }
        }
    };
    var expandChildren = {
        parameterPath: [
            "options",
            "expandChildren"
        ],
        mapper: {
            serializedName: "expandChildren",
            type: {
                name: "Boolean"
            }
        }
    };
    var extensionName = {
        parameterPath: "extensionName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "extensionName",
            defaultValue: 'import',
            type: {
                name: "String"
            }
        }
    };
    var failoverGroupName = {
        parameterPath: "failoverGroupName",
        mapper: {
            required: true,
            serializedName: "failoverGroupName",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var firewallRuleName = {
        parameterPath: "firewallRuleName",
        mapper: {
            required: true,
            serializedName: "firewallRuleName",
            type: {
                name: "String"
            }
        }
    };
    var geoBackupPolicyName = {
        parameterPath: "geoBackupPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "geoBackupPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var groupName = {
        parameterPath: "groupName",
        mapper: {
            required: true,
            serializedName: "groupName",
            type: {
                name: "String"
            }
        }
    };
    var include = {
        parameterPath: [
            "options",
            "include"
        ],
        mapper: {
            serializedName: "include",
            type: {
                name: "String"
            }
        }
    };
    var includeDisabledRecommendations = {
        parameterPath: [
            "options",
            "includeDisabledRecommendations"
        ],
        mapper: {
            serializedName: "includeDisabledRecommendations",
            type: {
                name: "Boolean"
            }
        }
    };
    var instancePoolName = {
        parameterPath: "instancePoolName",
        mapper: {
            required: true,
            serializedName: "instancePoolName",
            type: {
                name: "String"
            }
        }
    };
    var isActive = {
        parameterPath: [
            "options",
            "isActive"
        ],
        mapper: {
            serializedName: "isActive",
            type: {
                name: "Boolean"
            }
        }
    };
    var jobAgentName = {
        parameterPath: "jobAgentName",
        mapper: {
            required: true,
            serializedName: "jobAgentName",
            type: {
                name: "String"
            }
        }
    };
    var jobExecutionId = {
        parameterPath: "jobExecutionId",
        mapper: {
            required: true,
            serializedName: "jobExecutionId",
            type: {
                name: "Uuid"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var jobVersion = {
        parameterPath: "jobVersion",
        mapper: {
            required: true,
            serializedName: "jobVersion",
            type: {
                name: "Number"
            }
        }
    };
    var keyName = {
        parameterPath: "keyName",
        mapper: {
            required: true,
            serializedName: "keyName",
            type: {
                name: "String"
            }
        }
    };
    var linkId = {
        parameterPath: "linkId",
        mapper: {
            required: true,
            serializedName: "linkId",
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var longTermRetentionDatabaseName = {
        parameterPath: "longTermRetentionDatabaseName",
        mapper: {
            required: true,
            serializedName: "longTermRetentionDatabaseName",
            type: {
                name: "String"
            }
        }
    };
    var longTermRetentionServerName = {
        parameterPath: "longTermRetentionServerName",
        mapper: {
            required: true,
            serializedName: "longTermRetentionServerName",
            type: {
                name: "String"
            }
        }
    };
    var managedInstanceName = {
        parameterPath: "managedInstanceName",
        mapper: {
            required: true,
            serializedName: "managedInstanceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var onlyLatestPerDatabase = {
        parameterPath: [
            "options",
            "onlyLatestPerDatabase"
        ],
        mapper: {
            serializedName: "onlyLatestPerDatabase",
            type: {
                name: "Boolean"
            }
        }
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "Uuid"
            }
        }
    };
    var policyName = {
        parameterPath: "policyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "policyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var privateEndpointConnectionName = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
            required: true,
            serializedName: "privateEndpointConnectionName",
            type: {
                name: "String"
            }
        }
    };
    var recommendedElasticPoolName = {
        parameterPath: "recommendedElasticPoolName",
        mapper: {
            required: true,
            serializedName: "recommendedElasticPoolName",
            type: {
                name: "String"
            }
        }
    };
    var recoverableDatabaseName = {
        parameterPath: "recoverableDatabaseName",
        mapper: {
            required: true,
            serializedName: "recoverableDatabaseName",
            type: {
                name: "String"
            }
        }
    };
    var replicaType = {
        parameterPath: [
            "options",
            "replicaType"
        ],
        mapper: {
            serializedName: "replicaType",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var restorableDroppedDatabaseId = {
        parameterPath: "restorableDroppedDatabaseId",
        mapper: {
            required: true,
            serializedName: "restorableDroppedDatabaseId",
            type: {
                name: "String"
            }
        }
    };
    var restorableDroppededDatabaseId = {
        parameterPath: "restorableDroppededDatabaseId",
        mapper: {
            required: true,
            serializedName: "restorableDroppededDatabaseId",
            type: {
                name: "String"
            }
        }
    };
    var restoreDetailsName = {
        parameterPath: "restoreDetailsName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "restoreDetailsName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var restorePointName = {
        parameterPath: "restorePointName",
        mapper: {
            required: true,
            serializedName: "restorePointName",
            type: {
                name: "String"
            }
        }
    };
    var ruleId = {
        parameterPath: "ruleId",
        mapper: {
            required: true,
            serializedName: "ruleId",
            type: {
                name: "String"
            }
        }
    };
    var scanId = {
        parameterPath: "scanId",
        mapper: {
            required: true,
            serializedName: "scanId",
            type: {
                name: "String"
            }
        }
    };
    var schemaName = {
        parameterPath: "schemaName",
        mapper: {
            required: true,
            serializedName: "schemaName",
            type: {
                name: "String"
            }
        }
    };
    var securityAlertPolicyName0 = {
        parameterPath: "securityAlertPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "securityAlertPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var securityAlertPolicyName1 = {
        parameterPath: "securityAlertPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "securityAlertPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var sensitivityLabelSource0 = {
        parameterPath: "sensitivityLabelSource",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "sensitivityLabelSource",
            defaultValue: 'recommended',
            type: {
                name: "String"
            }
        }
    };
    var sensitivityLabelSource1 = {
        parameterPath: "sensitivityLabelSource",
        mapper: {
            required: true,
            serializedName: "sensitivityLabelSource",
            type: {
                name: "Enum",
                allowedValues: [
                    "current",
                    "recommended"
                ]
            }
        }
    };
    var sensitivityLabelSource2 = {
        parameterPath: "sensitivityLabelSource",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "sensitivityLabelSource",
            defaultValue: 'current',
            type: {
                name: "String"
            }
        }
    };
    var serverName = {
        parameterPath: "serverName",
        mapper: {
            required: true,
            serializedName: "serverName",
            type: {
                name: "String"
            }
        }
    };
    var serviceObjectiveName = {
        parameterPath: "serviceObjectiveName",
        mapper: {
            required: true,
            serializedName: "serviceObjectiveName",
            type: {
                name: "String"
            }
        }
    };
    var serviceTierAdvisorName = {
        parameterPath: "serviceTierAdvisorName",
        mapper: {
            required: true,
            serializedName: "serviceTierAdvisorName",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var skipToken = {
        parameterPath: [
            "options",
            "skipToken"
        ],
        mapper: {
            serializedName: "$skipToken",
            type: {
                name: "String"
            }
        }
    };
    var startTime = {
        parameterPath: "startTime",
        mapper: {
            required: true,
            serializedName: "startTime",
            type: {
                name: "String"
            }
        }
    };
    var stepName = {
        parameterPath: "stepName",
        mapper: {
            required: true,
            serializedName: "stepName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var syncAgentName = {
        parameterPath: "syncAgentName",
        mapper: {
            required: true,
            serializedName: "syncAgentName",
            type: {
                name: "String"
            }
        }
    };
    var syncGroupName = {
        parameterPath: "syncGroupName",
        mapper: {
            required: true,
            serializedName: "syncGroupName",
            type: {
                name: "String"
            }
        }
    };
    var syncMemberName = {
        parameterPath: "syncMemberName",
        mapper: {
            required: true,
            serializedName: "syncMemberName",
            type: {
                name: "String"
            }
        }
    };
    var tableName = {
        parameterPath: "tableName",
        mapper: {
            required: true,
            serializedName: "tableName",
            type: {
                name: "String"
            }
        }
    };
    var targetGroupName = {
        parameterPath: "targetGroupName",
        mapper: {
            required: true,
            serializedName: "targetGroupName",
            type: {
                name: "String"
            }
        }
    };
    var targetId = {
        parameterPath: "targetId",
        mapper: {
            required: true,
            serializedName: "targetId",
            type: {
                name: "Uuid"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var transparentDataEncryptionName = {
        parameterPath: "transparentDataEncryptionName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "transparentDataEncryptionName",
            defaultValue: 'current',
            type: {
                name: "String"
            }
        }
    };
    var type = {
        parameterPath: "type",
        mapper: {
            required: true,
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };
    var usageName = {
        parameterPath: "usageName",
        mapper: {
            required: true,
            serializedName: "usageName",
            type: {
                name: "String"
            }
        }
    };
    var virtualClusterName = {
        parameterPath: "virtualClusterName",
        mapper: {
            required: true,
            serializedName: "virtualClusterName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkRuleName = {
        parameterPath: "virtualNetworkRuleName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkRuleName",
            type: {
                name: "String"
            }
        }
    };
    var vulnerabilityAssessmentName = {
        parameterPath: "vulnerabilityAssessmentName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "vulnerabilityAssessmentName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecoverableDatabases. */
    var RecoverableDatabases = /** @class */ (function () {
        /**
         * Create a RecoverableDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RecoverableDatabases(client) {
            this.client = client;
        }
        RecoverableDatabases.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec, callback);
        };
        RecoverableDatabases.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec, callback);
        };
        return RecoverableDatabases;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases/{databaseName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByServerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedDatabaseListResult: RestorableDroppedDatabaseListResult,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorableDroppedDatabases. */
    var RestorableDroppedDatabases = /** @class */ (function () {
        /**
         * Create a RestorableDroppedDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RestorableDroppedDatabases(client) {
            this.client = client;
        }
        RestorableDroppedDatabases.prototype.get = function (resourceGroupName, serverName, restorableDroppededDatabaseId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                restorableDroppededDatabaseId: restorableDroppededDatabaseId,
                options: options
            }, getOperationSpec$1, callback);
        };
        RestorableDroppedDatabases.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$1, callback);
        };
        return RestorableDroppedDatabases;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases/{restorableDroppededDatabaseId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            restorableDroppededDatabaseId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByServerOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
        CheckNameAvailabilityResponse: CheckNameAvailabilityResponse,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerListResult: ServerListResult,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerUpdate: ServerUpdate,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Servers. */
    var Servers = /** @class */ (function () {
        /**
         * Create a Servers.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Servers(client) {
            this.client = client;
        }
        Servers.prototype.checkNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Servers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Servers.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Servers.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersCreateOrUpdateResponse>
         */
        Servers.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Servers.prototype.deleteMethod = function (resourceGroupName, serverName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersUpdateResponse>
         */
        Servers.prototype.update = function (resourceGroupName, serverName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginDeleteMethod = function (resourceGroupName, serverName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        Servers.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        Servers.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Servers;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CheckNameAvailabilityRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Server
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Server), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Server
            },
            201: {
                bodyMapper: Server
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Server
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerConnectionPolicies. */
    var ServerConnectionPolicies = /** @class */ (function () {
        /**
         * Create a ServerConnectionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerConnectionPolicies(client) {
            this.client = client;
        }
        ServerConnectionPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ServerConnectionPolicies.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$3, callback);
        };
        return ServerConnectionPolicies;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/{connectionPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            connectionPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerConnectionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerConnectionPolicy
            },
            201: {
                bodyMapper: ServerConnectionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/{connectionPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            connectionPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerConnectionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseThreatDetectionPolicies. */
    var DatabaseThreatDetectionPolicies = /** @class */ (function () {
        /**
         * Create a DatabaseThreatDetectionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseThreatDetectionPolicies(client) {
            this.client = client;
        }
        DatabaseThreatDetectionPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$4, callback);
        };
        DatabaseThreatDetectionPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        return DatabaseThreatDetectionPolicies;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            securityAlertPolicyName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            securityAlertPolicyName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseSecurityAlertPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseSecurityAlertPolicy
            },
            201: {
                bodyMapper: DatabaseSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DataMaskingPolicies. */
    var DataMaskingPolicies = /** @class */ (function () {
        /**
         * Create a DataMaskingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DataMaskingPolicies(client) {
            this.client = client;
        }
        DataMaskingPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        DataMaskingPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$5, callback);
        };
        return DataMaskingPolicies;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DataMaskingPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataMaskingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMaskingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        DataMaskingRuleListResult: DataMaskingRuleListResult,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DataMaskingRules. */
    var DataMaskingRules = /** @class */ (function () {
        /**
         * Create a DataMaskingRules.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DataMaskingRules(client) {
            this.client = client;
        }
        DataMaskingRules.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, dataMaskingRuleName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                dataMaskingRuleName: dataMaskingRuleName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        DataMaskingRules.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec, callback);
        };
        return DataMaskingRules;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName,
            dataMaskingRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DataMaskingRule), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataMaskingRule
            },
            201: {
                bodyMapper: DataMaskingRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByDatabaseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMaskingRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        FirewallRuleListResult: FirewallRuleListResult,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FirewallRules. */
    var FirewallRules = /** @class */ (function () {
        /**
         * Create a FirewallRules.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function FirewallRules(client) {
            this.client = client;
        }
        FirewallRules.prototype.createOrUpdate = function (resourceGroupName, serverName, firewallRuleName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                firewallRuleName: firewallRuleName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        FirewallRules.prototype.deleteMethod = function (resourceGroupName, serverName, firewallRuleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                firewallRuleName: firewallRuleName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        FirewallRules.prototype.get = function (resourceGroupName, serverName, firewallRuleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                firewallRuleName: firewallRuleName,
                options: options
            }, getOperationSpec$6, callback);
        };
        FirewallRules.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$2, callback);
        };
        return FirewallRules;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, FirewallRule), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            201: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listByServerOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        GeoBackupPolicyListResult: GeoBackupPolicyListResult,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GeoBackupPolicies. */
    var GeoBackupPolicies = /** @class */ (function () {
        /**
         * Create a GeoBackupPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function GeoBackupPolicies(client) {
            this.client = client;
        }
        GeoBackupPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        GeoBackupPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$7, callback);
        };
        GeoBackupPolicies.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$1, callback);
        };
        return GeoBackupPolicies;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            geoBackupPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GeoBackupPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GeoBackupPolicy
            },
            201: {
                bodyMapper: GeoBackupPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            geoBackupPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GeoBackupPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByDatabaseOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GeoBackupPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseListResult: DatabaseListResult,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseUpdate: DatabaseUpdate,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExportRequest: ExportRequest,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        ImportExtensionRequest: ImportExtensionRequest,
        ImportRequest: ImportRequest,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        Metric: Metric,
        MetricAvailability: MetricAvailability,
        MetricDefinition: MetricDefinition,
        MetricDefinitionListResult: MetricDefinitionListResult,
        MetricListResult: MetricListResult,
        MetricName: MetricName,
        MetricValue: MetricValue,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        ResourceMoveDefinition: ResourceMoveDefinition,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Databases. */
    var Databases = /** @class */ (function () {
        /**
         * Create a Databases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Databases(client) {
            this.client = client;
        }
        /**
         * Imports a bacpac into a new database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesImportMethodResponse>
         */
        Databases.prototype.importMethod = function (resourceGroupName, serverName, parameters, options) {
            return this.beginImportMethod(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates an import operation that imports a bacpac into an existing database. The existing
         * database must be empty.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to import into
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesCreateImportOperationResponse>
         */
        Databases.prototype.createImportOperation = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginCreateImportOperation(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Exports a database to a bacpac.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be exported.
         * @param parameters The required parameters for exporting a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesExportMethodResponse>
         */
        Databases.prototype.exportMethod = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginExportMethod(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.listMetrics = function (resourceGroupName, serverName, databaseName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                filter: filter,
                options: options
            }, listMetricsOperationSpec, callback);
        };
        Databases.prototype.listMetricDefinitions = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listMetricDefinitionsOperationSpec, callback);
        };
        Databases.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$3, callback);
        };
        Databases.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesCreateOrUpdateResponse>
         */
        Databases.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Databases.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, databaseName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesUpdateResponse>
         */
        Databases.prototype.update = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.listByElasticPool = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, listByElasticPoolOperationSpec, callback);
        };
        /**
         * Pauses a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be paused.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesPauseResponse>
         */
        Databases.prototype.pause = function (resourceGroupName, serverName, databaseName, options) {
            return this.beginPause(resourceGroupName, serverName, databaseName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Resumes a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be resumed.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesResumeResponse>
         */
        Databases.prototype.resume = function (resourceGroupName, serverName, databaseName, options) {
            return this.beginResume(resourceGroupName, serverName, databaseName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Upgrades a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be upgraded.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Databases.prototype.upgradeDataWarehouse = function (resourceGroupName, serverName, databaseName, options) {
            return this.beginUpgradeDataWarehouse(resourceGroupName, serverName, databaseName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.rename = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, renameOperationSpec, callback);
        };
        /**
         * Failovers a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to failover.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Databases.prototype.failover = function (resourceGroupName, serverName, databaseName, options) {
            return this.beginFailover(resourceGroupName, serverName, databaseName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Imports a bacpac into a new database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginImportMethod = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginImportMethodOperationSpec, options);
        };
        /**
         * Creates an import operation that imports a bacpac into an existing database. The existing
         * database must be empty.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to import into
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginCreateImportOperation = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateImportOperationOperationSpec, options);
        };
        /**
         * Exports a database to a bacpac.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be exported.
         * @param parameters The required parameters for exporting a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginExportMethod = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginExportMethodOperationSpec, options);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginDeleteMethod = function (resourceGroupName, serverName, databaseName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * Pauses a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be paused.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginPause = function (resourceGroupName, serverName, databaseName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, beginPauseOperationSpec, options);
        };
        /**
         * Resumes a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be resumed.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginResume = function (resourceGroupName, serverName, databaseName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, beginResumeOperationSpec, options);
        };
        /**
         * Upgrades a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be upgraded.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginUpgradeDataWarehouse = function (resourceGroupName, serverName, databaseName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, beginUpgradeDataWarehouseOperationSpec, options);
        };
        /**
         * Failovers a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to failover.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginFailover = function (resourceGroupName, serverName, databaseName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, beginFailoverOperationSpec, options);
        };
        Databases.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec, callback);
        };
        Databases.prototype.listByElasticPoolNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByElasticPoolNextOperationSpec, callback);
        };
        return Databases;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listMetricsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByServerOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByElasticPoolOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var renameOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ResourceMoveDefinition), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginImportMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ImportRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImportExportResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateImportOperationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            extensionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ImportExtensionRequest), { required: true })
        },
        responses: {
            201: {
                bodyMapper: ImportExportResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginExportMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ExportRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImportExportResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Database), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Database
            },
            201: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginPauseOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginResumeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpgradeDataWarehouseOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginFailoverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/failover",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            replicaType,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByServerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByElasticPoolNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolListResult: ElasticPoolListResult,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        ElasticPoolUpdate: ElasticPoolUpdate,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        Metric: Metric,
        MetricAvailability: MetricAvailability,
        MetricDefinition: MetricDefinition,
        MetricDefinitionListResult: MetricDefinitionListResult,
        MetricListResult: MetricListResult,
        MetricName: MetricName,
        MetricValue: MetricValue,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPools. */
    var ElasticPools = /** @class */ (function () {
        /**
         * Create a ElasticPools.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPools(client) {
            this.client = client;
        }
        ElasticPools.prototype.listMetrics = function (resourceGroupName, serverName, elasticPoolName, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$1, callback);
        };
        ElasticPools.prototype.listMetricDefinitions = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, listMetricDefinitionsOperationSpec$1, callback);
        };
        ElasticPools.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$4, callback);
        };
        ElasticPools.prototype.get = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, getOperationSpec$9, callback);
        };
        /**
         * Creates or updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ElasticPoolsCreateOrUpdateResponse>
         */
        ElasticPools.prototype.createOrUpdate = function (resourceGroupName, serverName, elasticPoolName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, elasticPoolName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ElasticPools.prototype.deleteMethod = function (resourceGroupName, serverName, elasticPoolName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, elasticPoolName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool update parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ElasticPoolsUpdateResponse>
         */
        ElasticPools.prototype.update = function (resourceGroupName, serverName, elasticPoolName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, elasticPoolName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Failovers an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool to failover.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ElasticPools.prototype.failover = function (resourceGroupName, serverName, elasticPoolName, options) {
            return this.beginFailover(resourceGroupName, serverName, elasticPoolName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, elasticPoolName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginDeleteMethod = function (resourceGroupName, serverName, elasticPoolName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool update parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginUpdate = function (resourceGroupName, serverName, elasticPoolName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        /**
         * Failovers an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool to failover.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginFailover = function (resourceGroupName, serverName, elasticPoolName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, beginFailoverOperationSpec$1, options);
        };
        ElasticPools.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$1, callback);
        };
        return ElasticPools;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listMetricsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listMetricDefinitionsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByServerOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            skip,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ElasticPool), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ElasticPool
            },
            201: {
                bodyMapper: ElasticPool
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ElasticPoolUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ElasticPool
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginFailoverOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/failover",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByServerNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolListMetricsResult: RecommendedElasticPoolListMetricsResult,
        RecommendedElasticPoolListResult: RecommendedElasticPoolListResult,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecommendedElasticPools. */
    var RecommendedElasticPools = /** @class */ (function () {
        /**
         * Create a RecommendedElasticPools.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RecommendedElasticPools(client) {
            this.client = client;
        }
        RecommendedElasticPools.prototype.get = function (resourceGroupName, serverName, recommendedElasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                recommendedElasticPoolName: recommendedElasticPoolName,
                options: options
            }, getOperationSpec$a, callback);
        };
        RecommendedElasticPools.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$5, callback);
        };
        RecommendedElasticPools.prototype.listMetrics = function (resourceGroupName, serverName, recommendedElasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                recommendedElasticPoolName: recommendedElasticPoolName,
                options: options
            }, listMetricsOperationSpec$2, callback);
        };
        return RecommendedElasticPools;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            recommendedElasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendedElasticPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listByServerOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendedElasticPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listMetricsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            recommendedElasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendedElasticPoolListMetricsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        ReplicationLinkListResult: ReplicationLinkListResult,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationLinks. */
    var ReplicationLinks = /** @class */ (function () {
        /**
         * Create a ReplicationLinks.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ReplicationLinks(client) {
            this.client = client;
        }
        ReplicationLinks.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, linkId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                linkId: linkId,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ReplicationLinks.prototype.get = function (resourceGroupName, serverName, databaseName, linkId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                linkId: linkId,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationLinks.prototype.failover = function (resourceGroupName, serverName, databaseName, linkId, options) {
            return this.beginFailover(resourceGroupName, serverName, databaseName, linkId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database. This operation might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationLinks.prototype.failoverAllowDataLoss = function (resourceGroupName, serverName, databaseName, linkId, options) {
            return this.beginFailoverAllowDataLoss(resourceGroupName, serverName, databaseName, linkId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationLinks.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$2, callback);
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationLinks.prototype.beginFailover = function (resourceGroupName, serverName, databaseName, linkId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                linkId: linkId,
                options: options
            }, beginFailoverOperationSpec$2, options);
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database. This operation might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationLinks.prototype.beginFailoverAllowDataLoss = function (resourceGroupName, serverName, databaseName, linkId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                linkId: linkId,
                options: options
            }, beginFailoverAllowDataLossOperationSpec, options);
        };
        return ReplicationLinks;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationLink
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByDatabaseOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationLinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginFailoverOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/failover",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginFailoverAllowDataLossOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/forceFailoverAllowDataLoss",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAdministratorListResult: ServerAdministratorListResult,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerAzureADAdministrators. */
    var ServerAzureADAdministrators = /** @class */ (function () {
        /**
         * Create a ServerAzureADAdministrators.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerAzureADAdministrators(client) {
            this.client = client;
        }
        /**
         * Creates a new Server Active Directory Administrator or updates an existing server Active
         * Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param properties The required parameters for creating or updating an Active Directory
         * Administrator.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerAzureADAdministratorsCreateOrUpdateResponse>
         */
        ServerAzureADAdministrators.prototype.createOrUpdate = function (resourceGroupName, serverName, properties, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, properties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing server Active Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerAzureADAdministratorsDeleteMethodResponse>
         */
        ServerAzureADAdministrators.prototype.deleteMethod = function (resourceGroupName, serverName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerAzureADAdministrators.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$c, callback);
        };
        ServerAzureADAdministrators.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$6, callback);
        };
        /**
         * Creates a new Server Active Directory Administrator or updates an existing server Active
         * Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param properties The required parameters for creating or updating an Active Directory
         * Administrator.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerAzureADAdministrators.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, properties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                properties: properties,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes an existing server Active Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerAzureADAdministrators.prototype.beginDeleteMethod = function (resourceGroupName, serverName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        return ServerAzureADAdministrators;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            administratorName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAzureADAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByServerOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAdministratorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            administratorName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "properties",
            mapper: __assign(__assign({}, ServerAzureADAdministrator), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerAzureADAdministrator
            },
            201: {
                bodyMapper: ServerAzureADAdministrator
            },
            202: {
                bodyMapper: ServerAzureADAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            administratorName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAzureADAdministrator
            },
            202: {
                bodyMapper: ServerAzureADAdministrator
            },
            204: {
                bodyMapper: ServerAzureADAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerCommunicationLinkListResult: ServerCommunicationLinkListResult,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerCommunicationLinks. */
    var ServerCommunicationLinks = /** @class */ (function () {
        /**
         * Create a ServerCommunicationLinks.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerCommunicationLinks(client) {
            this.client = client;
        }
        ServerCommunicationLinks.prototype.deleteMethod = function (resourceGroupName, serverName, communicationLinkName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                communicationLinkName: communicationLinkName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ServerCommunicationLinks.prototype.get = function (resourceGroupName, serverName, communicationLinkName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                communicationLinkName: communicationLinkName,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * Creates a server communication link.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param communicationLinkName The name of the server communication link.
         * @param parameters The required parameters for creating a server communication link.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerCommunicationLinksCreateOrUpdateResponse>
         */
        ServerCommunicationLinks.prototype.createOrUpdate = function (resourceGroupName, serverName, communicationLinkName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, communicationLinkName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerCommunicationLinks.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$7, callback);
        };
        /**
         * Creates a server communication link.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param communicationLinkName The name of the server communication link.
         * @param parameters The required parameters for creating a server communication link.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerCommunicationLinks.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, communicationLinkName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                communicationLinkName: communicationLinkName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        return ServerCommunicationLinks;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            communicationLinkName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            communicationLinkName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerCommunicationLink
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByServerOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerCommunicationLinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            communicationLinkName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerCommunicationLink), { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServerCommunicationLink
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceObjectiveListResult: ServiceObjectiveListResult,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceObjectives. */
    var ServiceObjectives = /** @class */ (function () {
        /**
         * Create a ServiceObjectives.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServiceObjectives(client) {
            this.client = client;
        }
        ServiceObjectives.prototype.get = function (resourceGroupName, serverName, serviceObjectiveName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                serviceObjectiveName: serviceObjectiveName,
                options: options
            }, getOperationSpec$e, callback);
        };
        ServiceObjectives.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$8, callback);
        };
        return ServiceObjectives;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives/{serviceObjectiveName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            serviceObjectiveName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceObjective
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listByServerOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceObjectiveListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolActivityListResult: ElasticPoolActivityListResult,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPoolActivities. */
    var ElasticPoolActivities = /** @class */ (function () {
        /**
         * Create a ElasticPoolActivities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPoolActivities(client) {
            this.client = client;
        }
        ElasticPoolActivities.prototype.listByElasticPool = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, listByElasticPoolOperationSpec$1, callback);
        };
        return ElasticPoolActivities;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listByElasticPoolOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolActivity",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolActivityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolDatabaseActivityListResult: ElasticPoolDatabaseActivityListResult,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPoolDatabaseActivities. */
    var ElasticPoolDatabaseActivities = /** @class */ (function () {
        /**
         * Create a ElasticPoolDatabaseActivities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPoolDatabaseActivities(client) {
            this.client = client;
        }
        ElasticPoolDatabaseActivities.prototype.listByElasticPool = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, listByElasticPoolOperationSpec$2, callback);
        };
        return ElasticPoolDatabaseActivities;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listByElasticPoolOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolDatabaseActivity",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolDatabaseActivityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        ServiceTierAdvisorListResult: ServiceTierAdvisorListResult,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceTierAdvisors. */
    var ServiceTierAdvisors = /** @class */ (function () {
        /**
         * Create a ServiceTierAdvisors.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServiceTierAdvisors(client) {
            this.client = client;
        }
        ServiceTierAdvisors.prototype.get = function (resourceGroupName, serverName, databaseName, serviceTierAdvisorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                serviceTierAdvisorName: serviceTierAdvisorName,
                options: options
            }, getOperationSpec$f, callback);
        };
        ServiceTierAdvisors.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$3, callback);
        };
        return ServiceTierAdvisors;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors/{serviceTierAdvisorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            serviceTierAdvisorName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceTierAdvisor
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listByDatabaseOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceTierAdvisorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TransparentDataEncryptions. */
    var TransparentDataEncryptions = /** @class */ (function () {
        /**
         * Create a TransparentDataEncryptions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function TransparentDataEncryptions(client) {
            this.client = client;
        }
        TransparentDataEncryptions.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        TransparentDataEncryptions.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$g, callback);
        };
        return TransparentDataEncryptions;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            transparentDataEncryptionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TransparentDataEncryption), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TransparentDataEncryption
            },
            201: {
                bodyMapper: TransparentDataEncryption
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            transparentDataEncryptionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TransparentDataEncryption
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        TransparentDataEncryptionActivityListResult: TransparentDataEncryptionActivityListResult,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TransparentDataEncryptionActivities. */
    var TransparentDataEncryptionActivities = /** @class */ (function () {
        /**
         * Create a TransparentDataEncryptionActivities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function TransparentDataEncryptionActivities(client) {
            this.client = client;
        }
        TransparentDataEncryptionActivities.prototype.listByConfiguration = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByConfigurationOperationSpec, callback);
        };
        return TransparentDataEncryptionActivities;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var listByConfigurationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}/operationResults",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            transparentDataEncryptionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TransparentDataEncryptionActivityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ServerUsage: ServerUsage,
        ServerUsageListResult: ServerUsageListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerUsages. */
    var ServerUsages = /** @class */ (function () {
        /**
         * Create a ServerUsages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerUsages(client) {
            this.client = client;
        }
        ServerUsages.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$9, callback);
        };
        return ServerUsages;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var listByServerOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        DatabaseUsage: DatabaseUsage,
        DatabaseUsageListResult: DatabaseUsageListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseUsages. */
    var DatabaseUsages = /** @class */ (function () {
        /**
         * Create a DatabaseUsages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseUsages(client) {
            this.client = client;
        }
        DatabaseUsages.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$4, callback);
        };
        return DatabaseUsages;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$m);
    var listByDatabaseOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$n = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseAutomaticTuningOperations. */
    var DatabaseAutomaticTuningOperations = /** @class */ (function () {
        /**
         * Create a DatabaseAutomaticTuningOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseAutomaticTuningOperations(client) {
            this.client = client;
        }
        DatabaseAutomaticTuningOperations.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$h, callback);
        };
        DatabaseAutomaticTuningOperations.prototype.update = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        return DatabaseAutomaticTuningOperations;
    }());
    // Operation Specifications
    var serializer$n = new msRest.Serializer(Mappers$n);
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseAutomaticTuning), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$o = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        EncryptionProtectorListResult: EncryptionProtectorListResult,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EncryptionProtectors. */
    var EncryptionProtectors = /** @class */ (function () {
        /**
         * Create a EncryptionProtectors.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function EncryptionProtectors(client) {
            this.client = client;
        }
        /**
         * Revalidates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        EncryptionProtectors.prototype.revalidate = function (resourceGroupName, serverName, options) {
            return this.beginRevalidate(resourceGroupName, serverName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        EncryptionProtectors.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$a, callback);
        };
        EncryptionProtectors.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$i, callback);
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.EncryptionProtectorsCreateOrUpdateResponse>
         */
        EncryptionProtectors.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revalidates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EncryptionProtectors.prototype.beginRevalidate = function (resourceGroupName, serverName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, beginRevalidateOperationSpec, options);
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EncryptionProtectors.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        EncryptionProtectors.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$2, callback);
        };
        return EncryptionProtectors;
    }());
    // Operation Specifications
    var serializer$o = new msRest.Serializer(Mappers$o);
    var listByServerOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionProtector
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var beginRevalidateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}/revalidate",
        urlParameters: [
            resourceGroupName,
            serverName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, EncryptionProtector), { required: true })
        },
        responses: {
            200: {
                bodyMapper: EncryptionProtector
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var listByServerNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$p = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupListResult: FailoverGroupListResult,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupUpdate: FailoverGroupUpdate,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FailoverGroups. */
    var FailoverGroups = /** @class */ (function () {
        /**
         * Create a FailoverGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function FailoverGroups(client) {
            this.client = client;
        }
        FailoverGroups.prototype.get = function (resourceGroupName, serverName, failoverGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                failoverGroupName: failoverGroupName,
                options: options
            }, getOperationSpec$j, callback);
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsCreateOrUpdateResponse>
         */
        FailoverGroups.prototype.createOrUpdate = function (resourceGroupName, serverName, failoverGroupName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, failoverGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FailoverGroups.prototype.deleteMethod = function (resourceGroupName, serverName, failoverGroupName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, failoverGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsUpdateResponse>
         */
        FailoverGroups.prototype.update = function (resourceGroupName, serverName, failoverGroupName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, failoverGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FailoverGroups.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$b, callback);
        };
        /**
         * Fails over from the current primary server to this server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsFailoverResponse>
         */
        FailoverGroups.prototype.failover = function (resourceGroupName, serverName, failoverGroupName, options) {
            return this.beginFailover(resourceGroupName, serverName, failoverGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Fails over from the current primary server to this server. This operation might result in data
         * loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsForceFailoverAllowDataLossResponse>
         */
        FailoverGroups.prototype.forceFailoverAllowDataLoss = function (resourceGroupName, serverName, failoverGroupName, options) {
            return this.beginForceFailoverAllowDataLoss(resourceGroupName, serverName, failoverGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, failoverGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                failoverGroupName: failoverGroupName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginDeleteMethod = function (resourceGroupName, serverName, failoverGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                failoverGroupName: failoverGroupName,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        /**
         * Updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginUpdate = function (resourceGroupName, serverName, failoverGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                failoverGroupName: failoverGroupName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        /**
         * Fails over from the current primary server to this server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginFailover = function (resourceGroupName, serverName, failoverGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                failoverGroupName: failoverGroupName,
                options: options
            }, beginFailoverOperationSpec$3, options);
        };
        /**
         * Fails over from the current primary server to this server. This operation might result in data
         * loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginForceFailoverAllowDataLoss = function (resourceGroupName, serverName, failoverGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                failoverGroupName: failoverGroupName,
                options: options
            }, beginForceFailoverAllowDataLossOperationSpec, options);
        };
        FailoverGroups.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$3, callback);
        };
        return FailoverGroups;
    }());
    // Operation Specifications
    var serializer$p = new msRest.Serializer(Mappers$p);
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listByServerOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, FailoverGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            201: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, FailoverGroupUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginFailoverOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/failover",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginForceFailoverAllowDataLossOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listByServerNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$q = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$q = new msRest.Serializer(Mappers$q);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Sql/operations",
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$r = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerKeyListResult: ServerKeyListResult,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerKeys. */
    var ServerKeys = /** @class */ (function () {
        /**
         * Create a ServerKeys.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerKeys(client) {
            this.client = client;
        }
        ServerKeys.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$c, callback);
        };
        ServerKeys.prototype.get = function (resourceGroupName, serverName, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                keyName: keyName,
                options: options
            }, getOperationSpec$k, callback);
        };
        /**
         * Creates or updates a server key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be operated on (updated or created). The key name
         * is required to be in the format of 'vault_key_version'. For example, if the keyId is
         * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901, then
         * the server key name should be formatted as:
         * YourVaultName_YourKeyName_01234567890123456789012345678901
         * @param parameters The requested server key resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerKeysCreateOrUpdateResponse>
         */
        ServerKeys.prototype.createOrUpdate = function (resourceGroupName, serverName, keyName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, keyName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the server key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServerKeys.prototype.deleteMethod = function (resourceGroupName, serverName, keyName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, keyName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a server key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be operated on (updated or created). The key name
         * is required to be in the format of 'vault_key_version'. For example, if the keyId is
         * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901, then
         * the server key name should be formatted as:
         * YourVaultName_YourKeyName_01234567890123456789012345678901
         * @param parameters The requested server key resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerKeys.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, keyName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                keyName: keyName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * Deletes the server key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerKeys.prototype.beginDeleteMethod = function (resourceGroupName, serverName, keyName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                keyName: keyName,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        ServerKeys.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$4, callback);
        };
        return ServerKeys;
    }());
    // Operation Specifications
    var serializer$r = new msRest.Serializer(Mappers$r);
    var listByServerOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var getOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerKey), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerKey
            },
            201: {
                bodyMapper: ServerKey
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listByServerNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$s = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentKeyProperties: SyncAgentKeyProperties,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncAgentLinkedDatabaseListResult: SyncAgentLinkedDatabaseListResult,
        SyncAgentListResult: SyncAgentListResult,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncAgents. */
    var SyncAgents = /** @class */ (function () {
        /**
         * Create a SyncAgents.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SyncAgents(client) {
            this.client = client;
        }
        SyncAgents.prototype.get = function (resourceGroupName, serverName, syncAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                syncAgentName: syncAgentName,
                options: options
            }, getOperationSpec$l, callback);
        };
        /**
         * Creates or updates a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param parameters The requested sync agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncAgentsCreateOrUpdateResponse>
         */
        SyncAgents.prototype.createOrUpdate = function (resourceGroupName, serverName, syncAgentName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, syncAgentName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncAgents.prototype.deleteMethod = function (resourceGroupName, serverName, syncAgentName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, syncAgentName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncAgents.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$d, callback);
        };
        SyncAgents.prototype.generateKey = function (resourceGroupName, serverName, syncAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                syncAgentName: syncAgentName,
                options: options
            }, generateKeyOperationSpec, callback);
        };
        SyncAgents.prototype.listLinkedDatabases = function (resourceGroupName, serverName, syncAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                syncAgentName: syncAgentName,
                options: options
            }, listLinkedDatabasesOperationSpec, callback);
        };
        /**
         * Creates or updates a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param parameters The requested sync agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncAgents.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, syncAgentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                syncAgentName: syncAgentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * Deletes a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncAgents.prototype.beginDeleteMethod = function (resourceGroupName, serverName, syncAgentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                syncAgentName: syncAgentName,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        SyncAgents.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$5, callback);
        };
        SyncAgents.prototype.listLinkedDatabasesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listLinkedDatabasesNextOperationSpec, callback);
        };
        return SyncAgents;
    }());
    // Operation Specifications
    var serializer$s = new msRest.Serializer(Mappers$s);
    var getOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listByServerOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var generateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}/generateKey",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentKeyProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listLinkedDatabasesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}/linkedDatabases",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentLinkedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SyncAgent), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncAgent
            },
            201: {
                bodyMapper: SyncAgent
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listByServerNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listLinkedDatabasesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentLinkedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$t = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncDatabaseIdListResult: SyncDatabaseIdListResult,
        SyncDatabaseIdProperties: SyncDatabaseIdProperties,
        SyncFullSchemaProperties: SyncFullSchemaProperties,
        SyncFullSchemaPropertiesListResult: SyncFullSchemaPropertiesListResult,
        SyncFullSchemaTable: SyncFullSchemaTable,
        SyncFullSchemaTableColumn: SyncFullSchemaTableColumn,
        SyncGroup: SyncGroup,
        SyncGroupListResult: SyncGroupListResult,
        SyncGroupLogListResult: SyncGroupLogListResult,
        SyncGroupLogProperties: SyncGroupLogProperties,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncGroups. */
    var SyncGroups = /** @class */ (function () {
        /**
         * Create a SyncGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SyncGroups(client) {
            this.client = client;
        }
        SyncGroups.prototype.listSyncDatabaseIds = function (locationName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                options: options
            }, listSyncDatabaseIdsOperationSpec, callback);
        };
        /**
         * Refreshes a hub database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncGroups.prototype.refreshHubSchema = function (resourceGroupName, serverName, databaseName, syncGroupName, options) {
            return this.beginRefreshHubSchema(resourceGroupName, serverName, databaseName, syncGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncGroups.prototype.listHubSchemas = function (resourceGroupName, serverName, databaseName, syncGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, listHubSchemasOperationSpec, callback);
        };
        SyncGroups.prototype.listLogs = function (resourceGroupName, serverName, databaseName, syncGroupName, startTime, endTime, type, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                startTime: startTime,
                endTime: endTime,
                type: type,
                options: options
            }, listLogsOperationSpec, callback);
        };
        SyncGroups.prototype.cancelSync = function (resourceGroupName, serverName, databaseName, syncGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, cancelSyncOperationSpec, callback);
        };
        SyncGroups.prototype.triggerSync = function (resourceGroupName, serverName, databaseName, syncGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, triggerSyncOperationSpec, callback);
        };
        SyncGroups.prototype.get = function (resourceGroupName, serverName, databaseName, syncGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, getOperationSpec$m, callback);
        };
        /**
         * Creates or updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncGroupsCreateOrUpdateResponse>
         */
        SyncGroups.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncGroups.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, syncGroupName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, databaseName, syncGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncGroupsUpdateResponse>
         */
        SyncGroups.prototype.update = function (resourceGroupName, serverName, databaseName, syncGroupName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, databaseName, syncGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncGroups.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$5, callback);
        };
        /**
         * Refreshes a hub database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginRefreshHubSchema = function (resourceGroupName, serverName, databaseName, syncGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, beginRefreshHubSchemaOperationSpec, options);
        };
        /**
         * Creates or updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$9, options);
        };
        /**
         * Deletes a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginDeleteMethod = function (resourceGroupName, serverName, databaseName, syncGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        /**
         * Updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        SyncGroups.prototype.listSyncDatabaseIdsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSyncDatabaseIdsNextOperationSpec, callback);
        };
        SyncGroups.prototype.listHubSchemasNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listHubSchemasNextOperationSpec, callback);
        };
        SyncGroups.prototype.listLogsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listLogsNextOperationSpec, callback);
        };
        SyncGroups.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec, callback);
        };
        return SyncGroups;
    }());
    // Operation Specifications
    var serializer$t = new msRest.Serializer(Mappers$t);
    var listSyncDatabaseIdsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncDatabaseIdListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listHubSchemasOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/hubSchemas",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listLogsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/logs",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            type,
            continuationToken,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupLogListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var cancelSyncOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/cancelSync",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var triggerSyncOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/triggerSync",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var getOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listByDatabaseOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginRefreshHubSchemaOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/refreshHubSchema",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginCreateOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SyncGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncGroup
            },
            201: {
                bodyMapper: SyncGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SyncGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listSyncDatabaseIdsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncDatabaseIdListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listHubSchemasNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listLogsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupLogListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listByDatabaseNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$u = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncFullSchemaProperties: SyncFullSchemaProperties,
        SyncFullSchemaPropertiesListResult: SyncFullSchemaPropertiesListResult,
        SyncFullSchemaTable: SyncFullSchemaTable,
        SyncFullSchemaTableColumn: SyncFullSchemaTableColumn,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SyncMemberListResult: SyncMemberListResult,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncMembers. */
    var SyncMembers = /** @class */ (function () {
        /**
         * Create a SyncMembers.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SyncMembers(client) {
            this.client = client;
        }
        SyncMembers.prototype.get = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                syncMemberName: syncMemberName,
                options: options
            }, getOperationSpec$n, callback);
        };
        /**
         * Creates or updates a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncMembersCreateOrUpdateResponse>
         */
        SyncMembers.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncMembers.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncMembersUpdateResponse>
         */
        SyncMembers.prototype.update = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncMembers.prototype.listBySyncGroup = function (resourceGroupName, serverName, databaseName, syncGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                options: options
            }, listBySyncGroupOperationSpec, callback);
        };
        SyncMembers.prototype.listMemberSchemas = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                syncMemberName: syncMemberName,
                options: options
            }, listMemberSchemasOperationSpec, callback);
        };
        /**
         * Refreshes a sync member database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncMembers.prototype.refreshMemberSchema = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
            return this.beginRefreshMemberSchema(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                syncMemberName: syncMemberName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$a, options);
        };
        /**
         * Deletes a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginDeleteMethod = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                syncMemberName: syncMemberName,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        /**
         * Updates an existing sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                syncMemberName: syncMemberName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$5, options);
        };
        /**
         * Refreshes a sync member database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginRefreshMemberSchema = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                syncGroupName: syncGroupName,
                syncMemberName: syncMemberName,
                options: options
            }, beginRefreshMemberSchemaOperationSpec, options);
        };
        SyncMembers.prototype.listBySyncGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySyncGroupNextOperationSpec, callback);
        };
        SyncMembers.prototype.listMemberSchemasNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listMemberSchemasNextOperationSpec, callback);
        };
        return SyncMembers;
    }());
    // Operation Specifications
    var serializer$u = new msRest.Serializer(Mappers$u);
    var getOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncMember
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listBySyncGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncMemberListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listMemberSchemasOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/schemas",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginCreateOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SyncMember), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncMember
            },
            201: {
                bodyMapper: SyncMember
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginUpdateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SyncMember), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncMember
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginRefreshMemberSchemaOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/refreshSchema",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listBySyncGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncMemberListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listMemberSchemasNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$v = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SubscriptionUsageListResult: SubscriptionUsageListResult,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SubscriptionUsages. */
    var SubscriptionUsages = /** @class */ (function () {
        /**
         * Create a SubscriptionUsages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SubscriptionUsages(client) {
            this.client = client;
        }
        SubscriptionUsages.prototype.listByLocation = function (locationName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        SubscriptionUsages.prototype.get = function (locationName, usageName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                usageName: usageName,
                options: options
            }, getOperationSpec$o, callback);
        };
        SubscriptionUsages.prototype.listByLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByLocationNextOperationSpec, callback);
        };
        return SubscriptionUsages;
    }());
    // Operation Specifications
    var serializer$v = new msRest.Serializer(Mappers$v);
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var getOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}",
        urlParameters: [
            locationName,
            usageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionUsage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listByLocationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$w = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualClusterListResult: VirtualClusterListResult,
        VirtualClusterUpdate: VirtualClusterUpdate,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualClusters. */
    var VirtualClusters = /** @class */ (function () {
        /**
         * Create a VirtualClusters.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function VirtualClusters(client) {
            this.client = client;
        }
        VirtualClusters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        VirtualClusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        VirtualClusters.prototype.get = function (resourceGroupName, virtualClusterName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                virtualClusterName: virtualClusterName,
                options: options
            }, getOperationSpec$p, callback);
        };
        /**
         * Deletes a virtual cluster.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param virtualClusterName The name of the virtual cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualClusters.prototype.deleteMethod = function (resourceGroupName, virtualClusterName, options) {
            return this.beginDeleteMethod(resourceGroupName, virtualClusterName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a virtual cluster.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param virtualClusterName The name of the virtual cluster.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualClustersUpdateResponse>
         */
        VirtualClusters.prototype.update = function (resourceGroupName, virtualClusterName, parameters, options) {
            return this.beginUpdate(resourceGroupName, virtualClusterName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a virtual cluster.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param virtualClusterName The name of the virtual cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualClusters.prototype.beginDeleteMethod = function (resourceGroupName, virtualClusterName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                virtualClusterName: virtualClusterName,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        /**
         * Updates a virtual cluster.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param virtualClusterName The name of the virtual cluster.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualClusters.prototype.beginUpdate = function (resourceGroupName, virtualClusterName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                virtualClusterName: virtualClusterName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$6, options);
        };
        VirtualClusters.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        VirtualClusters.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return VirtualClusters;
    }());
    // Operation Specifications
    var serializer$w = new msRest.Serializer(Mappers$w);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/virtualClusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var getOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}",
        urlParameters: [
            resourceGroupName,
            virtualClusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}",
        urlParameters: [
            resourceGroupName,
            virtualClusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var beginUpdateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}",
        urlParameters: [
            resourceGroupName,
            virtualClusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualClusterUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualCluster
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$x = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkRules. */
    var VirtualNetworkRules = /** @class */ (function () {
        /**
         * Create a VirtualNetworkRules.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkRules(client) {
            this.client = client;
        }
        VirtualNetworkRules.prototype.get = function (resourceGroupName, serverName, virtualNetworkRuleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                virtualNetworkRuleName: virtualNetworkRuleName,
                options: options
            }, getOperationSpec$q, callback);
        };
        /**
         * Creates or updates an existing virtual network rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param parameters The requested virtual Network Rule Resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkRulesCreateOrUpdateResponse>
         */
        VirtualNetworkRules.prototype.createOrUpdate = function (resourceGroupName, serverName, virtualNetworkRuleName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, virtualNetworkRuleName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the virtual network rule with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkRules.prototype.deleteMethod = function (resourceGroupName, serverName, virtualNetworkRuleName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, virtualNetworkRuleName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkRules.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$e, callback);
        };
        /**
         * Creates or updates an existing virtual network rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param parameters The requested virtual Network Rule Resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkRules.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, virtualNetworkRuleName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                virtualNetworkRuleName: virtualNetworkRuleName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$b, options);
        };
        /**
         * Deletes the virtual network rule with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkRules.prototype.beginDeleteMethod = function (resourceGroupName, serverName, virtualNetworkRuleName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                virtualNetworkRuleName: virtualNetworkRuleName,
                options: options
            }, beginDeleteMethodOperationSpec$a, options);
        };
        VirtualNetworkRules.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$6, callback);
        };
        return VirtualNetworkRules;
    }());
    // Operation Specifications
    var serializer$x = new msRest.Serializer(Mappers$x);
    var getOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var listByServerOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginCreateOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualNetworkRule), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            201: {
                bodyMapper: VirtualNetworkRule
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginDeleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var listByServerNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$y = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExtendedDatabaseBlobAuditingPolicies. */
    var ExtendedDatabaseBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a ExtendedDatabaseBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ExtendedDatabaseBlobAuditingPolicies(client) {
            this.client = client;
        }
        ExtendedDatabaseBlobAuditingPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$r, callback);
        };
        ExtendedDatabaseBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        return ExtendedDatabaseBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$y = new msRest.Serializer(Mappers$y);
    var getOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtendedDatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ExtendedDatabaseBlobAuditingPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExtendedDatabaseBlobAuditingPolicy
            },
            201: {
                bodyMapper: ExtendedDatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$z = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExtendedServerBlobAuditingPolicies. */
    var ExtendedServerBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a ExtendedServerBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ExtendedServerBlobAuditingPolicies(client) {
            this.client = client;
        }
        ExtendedServerBlobAuditingPolicies.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$s, callback);
        };
        /**
         * Creates or updates an extended server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of extended blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<Models.ExtendedServerBlobAuditingPoliciesCreateOrUpdateResponse>
         */
        ExtendedServerBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an extended server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of extended blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExtendedServerBlobAuditingPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$c, options);
        };
        return ExtendedServerBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$z = new msRest.Serializer(Mappers$z);
    var getOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtendedServerBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var beginCreateOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ExtendedServerBlobAuditingPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExtendedServerBlobAuditingPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$A = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerBlobAuditingPolicyListResult: ServerBlobAuditingPolicyListResult,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerBlobAuditingPolicies. */
    var ServerBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a ServerBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerBlobAuditingPolicies(client) {
            this.client = client;
        }
        ServerBlobAuditingPolicies.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$t, callback);
        };
        /**
         * Creates or updates a server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerBlobAuditingPoliciesCreateOrUpdateResponse>
         */
        ServerBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerBlobAuditingPolicies.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$f, callback);
        };
        /**
         * Creates or updates a server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerBlobAuditingPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$d, options);
        };
        ServerBlobAuditingPolicies.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$7, callback);
        };
        return ServerBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$A = new msRest.Serializer(Mappers$A);
    var getOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var listByServerOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerBlobAuditingPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var beginCreateOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerBlobAuditingPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerBlobAuditingPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var listByServerNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerBlobAuditingPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$B = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseBlobAuditingPolicyListResult: DatabaseBlobAuditingPolicyListResult,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseBlobAuditingPolicies. */
    var DatabaseBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a DatabaseBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseBlobAuditingPolicies(client) {
            this.client = client;
        }
        DatabaseBlobAuditingPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$u, callback);
        };
        DatabaseBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$8, callback);
        };
        DatabaseBlobAuditingPolicies.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$6, callback);
        };
        DatabaseBlobAuditingPolicies.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$1, callback);
        };
        return DatabaseBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$B = new msRest.Serializer(Mappers$B);
    var getOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var createOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseBlobAuditingPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseBlobAuditingPolicy
            },
            201: {
                bodyMapper: DatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listByDatabaseOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseBlobAuditingPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listByDatabaseNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseBlobAuditingPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$C = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseVulnerabilityAssessmentRuleBaselines. */
    var DatabaseVulnerabilityAssessmentRuleBaselines = /** @class */ (function () {
        /**
         * Create a DatabaseVulnerabilityAssessmentRuleBaselines.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseVulnerabilityAssessmentRuleBaselines(client) {
            this.client = client;
        }
        DatabaseVulnerabilityAssessmentRuleBaselines.prototype.get = function (resourceGroupName, serverName, databaseName, ruleId, baselineName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                ruleId: ruleId,
                baselineName: baselineName,
                options: options
            }, getOperationSpec$v, callback);
        };
        DatabaseVulnerabilityAssessmentRuleBaselines.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, ruleId, baselineName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                ruleId: ruleId,
                baselineName: baselineName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$9, callback);
        };
        DatabaseVulnerabilityAssessmentRuleBaselines.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, ruleId, baselineName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                ruleId: ruleId,
                baselineName: baselineName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        return DatabaseVulnerabilityAssessmentRuleBaselines;
    }());
    // Operation Specifications
    var serializer$C = new msRest.Serializer(Mappers$C);
    var getOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var createOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseVulnerabilityAssessmentRuleBaseline), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$D = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentListResult: DatabaseVulnerabilityAssessmentListResult,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseVulnerabilityAssessments. */
    var DatabaseVulnerabilityAssessments = /** @class */ (function () {
        /**
         * Create a DatabaseVulnerabilityAssessments.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseVulnerabilityAssessments(client) {
            this.client = client;
        }
        DatabaseVulnerabilityAssessments.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$w, callback);
        };
        DatabaseVulnerabilityAssessments.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$a, callback);
        };
        DatabaseVulnerabilityAssessments.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        DatabaseVulnerabilityAssessments.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$7, callback);
        };
        DatabaseVulnerabilityAssessments.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$2, callback);
        };
        return DatabaseVulnerabilityAssessments;
    }());
    // Operation Specifications
    var serializer$D = new msRest.Serializer(Mappers$D);
    var getOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var createOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseVulnerabilityAssessment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listByDatabaseOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listByDatabaseNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$E = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobAgentListResult: JobAgentListResult,
        JobAgentUpdate: JobAgentUpdate,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobAgents. */
    var JobAgents = /** @class */ (function () {
        /**
         * Create a JobAgents.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobAgents(client) {
            this.client = client;
        }
        JobAgents.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$g, callback);
        };
        JobAgents.prototype.get = function (resourceGroupName, serverName, jobAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                options: options
            }, getOperationSpec$x, callback);
        };
        /**
         * Creates or updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be created or updated.
         * @param parameters The requested job agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobAgentsCreateOrUpdateResponse>
         */
        JobAgents.prototype.createOrUpdate = function (resourceGroupName, serverName, jobAgentName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, jobAgentName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        JobAgents.prototype.deleteMethod = function (resourceGroupName, serverName, jobAgentName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, jobAgentName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be updated.
         * @param parameters The update to the job agent.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobAgentsUpdateResponse>
         */
        JobAgents.prototype.update = function (resourceGroupName, serverName, jobAgentName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, jobAgentName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be created or updated.
         * @param parameters The requested job agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobAgents.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, jobAgentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$e, options);
        };
        /**
         * Deletes a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobAgents.prototype.beginDeleteMethod = function (resourceGroupName, serverName, jobAgentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                options: options
            }, beginDeleteMethodOperationSpec$b, options);
        };
        /**
         * Updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be updated.
         * @param parameters The update to the job agent.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobAgents.prototype.beginUpdate = function (resourceGroupName, serverName, jobAgentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$7, options);
        };
        JobAgents.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$8, callback);
        };
        return JobAgents;
    }());
    // Operation Specifications
    var serializer$E = new msRest.Serializer(Mappers$E);
    var listByServerOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var getOperationSpec$x = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobAgent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginCreateOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, JobAgent), { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobAgent
            },
            201: {
                bodyMapper: JobAgent
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginDeleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginUpdateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, JobAgentUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobAgent
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var listByServerNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$F = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobCredentialListResult: JobCredentialListResult,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobCredentials. */
    var JobCredentials = /** @class */ (function () {
        /**
         * Create a JobCredentials.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobCredentials(client) {
            this.client = client;
        }
        JobCredentials.prototype.listByAgent = function (resourceGroupName, serverName, jobAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                options: options
            }, listByAgentOperationSpec, callback);
        };
        JobCredentials.prototype.get = function (resourceGroupName, serverName, jobAgentName, credentialName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                credentialName: credentialName,
                options: options
            }, getOperationSpec$y, callback);
        };
        JobCredentials.prototype.createOrUpdate = function (resourceGroupName, serverName, jobAgentName, credentialName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                credentialName: credentialName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$b, callback);
        };
        JobCredentials.prototype.deleteMethod = function (resourceGroupName, serverName, jobAgentName, credentialName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                credentialName: credentialName,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        JobCredentials.prototype.listByAgentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAgentNextOperationSpec, callback);
        };
        return JobCredentials;
    }());
    // Operation Specifications
    var serializer$F = new msRest.Serializer(Mappers$F);
    var listByAgentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCredentialListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var getOperationSpec$y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCredential
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var createOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, JobCredential), { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobCredential
            },
            201: {
                bodyMapper: JobCredential
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listByAgentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCredentialListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$G = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionListResult: JobExecutionListResult,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobExecutions. */
    var JobExecutions = /** @class */ (function () {
        /**
         * Create a JobExecutions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobExecutions(client) {
            this.client = client;
        }
        JobExecutions.prototype.listByAgent = function (resourceGroupName, serverName, jobAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                options: options
            }, listByAgentOperationSpec$1, callback);
        };
        JobExecutions.prototype.cancel = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                options: options
            }, cancelOperationSpec, callback);
        };
        /**
         * Starts an elastic job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobExecutionsCreateResponse>
         */
        JobExecutions.prototype.create = function (resourceGroupName, serverName, jobAgentName, jobName, options) {
            return this.beginCreate(resourceGroupName, serverName, jobAgentName, jobName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        JobExecutions.prototype.listByJob = function (resourceGroupName, serverName, jobAgentName, jobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                options: options
            }, listByJobOperationSpec, callback);
        };
        JobExecutions.prototype.get = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                options: options
            }, getOperationSpec$z, callback);
        };
        /**
         * Creates or updates a job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param jobExecutionId The job execution id to create the job execution under.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobExecutionsCreateOrUpdateResponse>
         */
        JobExecutions.prototype.createOrUpdate = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts an elastic job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobExecutions.prototype.beginCreate = function (resourceGroupName, serverName, jobAgentName, jobName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Creates or updates a job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param jobExecutionId The job execution id to create the job execution under.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobExecutions.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                options: options
            }, beginCreateOrUpdateOperationSpec$f, options);
        };
        JobExecutions.prototype.listByAgentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAgentNextOperationSpec$1, callback);
        };
        JobExecutions.prototype.listByJobNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByJobNextOperationSpec, callback);
        };
        return JobExecutions;
    }());
    // Operation Specifications
    var serializer$G = new msRest.Serializer(Mappers$G);
    var listByAgentOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/executions",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/cancel",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listByJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var getOperationSpec$z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var beginCreateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/start",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var beginCreateOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            201: {
                bodyMapper: JobExecution
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listByAgentNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listByJobNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$H = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobListResult: JobListResult,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.listByAgent = function (resourceGroupName, serverName, jobAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                options: options
            }, listByAgentOperationSpec$2, callback);
        };
        Jobs.prototype.get = function (resourceGroupName, serverName, jobAgentName, jobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                options: options
            }, getOperationSpec$A, callback);
        };
        Jobs.prototype.createOrUpdate = function (resourceGroupName, serverName, jobAgentName, jobName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$c, callback);
        };
        Jobs.prototype.deleteMethod = function (resourceGroupName, serverName, jobAgentName, jobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        Jobs.prototype.listByAgentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAgentNextOperationSpec$2, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$H = new msRest.Serializer(Mappers$H);
    var listByAgentOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var getOperationSpec$A = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var createOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Job), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Job
            },
            201: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listByAgentNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$I = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionListResult: JobExecutionListResult,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobStepExecutions. */
    var JobStepExecutions = /** @class */ (function () {
        /**
         * Create a JobStepExecutions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobStepExecutions(client) {
            this.client = client;
        }
        JobStepExecutions.prototype.listByJobExecution = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                options: options
            }, listByJobExecutionOperationSpec, callback);
        };
        JobStepExecutions.prototype.get = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                stepName: stepName,
                options: options
            }, getOperationSpec$B, callback);
        };
        JobStepExecutions.prototype.listByJobExecutionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByJobExecutionNextOperationSpec, callback);
        };
        return JobStepExecutions;
    }());
    // Operation Specifications
    var serializer$I = new msRest.Serializer(Mappers$I);
    var listByJobExecutionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var getOperationSpec$B = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listByJobExecutionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$J = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepListResult: JobStepListResult,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobSteps. */
    var JobSteps = /** @class */ (function () {
        /**
         * Create a JobSteps.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobSteps(client) {
            this.client = client;
        }
        JobSteps.prototype.listByVersion = function (resourceGroupName, serverName, jobAgentName, jobName, jobVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobVersion: jobVersion,
                options: options
            }, listByVersionOperationSpec, callback);
        };
        JobSteps.prototype.getByVersion = function (resourceGroupName, serverName, jobAgentName, jobName, jobVersion, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobVersion: jobVersion,
                stepName: stepName,
                options: options
            }, getByVersionOperationSpec, callback);
        };
        JobSteps.prototype.listByJob = function (resourceGroupName, serverName, jobAgentName, jobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                options: options
            }, listByJobOperationSpec$1, callback);
        };
        JobSteps.prototype.get = function (resourceGroupName, serverName, jobAgentName, jobName, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                stepName: stepName,
                options: options
            }, getOperationSpec$C, callback);
        };
        JobSteps.prototype.createOrUpdate = function (resourceGroupName, serverName, jobAgentName, jobName, stepName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                stepName: stepName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$d, callback);
        };
        JobSteps.prototype.deleteMethod = function (resourceGroupName, serverName, jobAgentName, jobName, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                stepName: stepName,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        JobSteps.prototype.listByVersionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByVersionNextOperationSpec, callback);
        };
        JobSteps.prototype.listByJobNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByJobNextOperationSpec$1, callback);
        };
        return JobSteps;
    }());
    // Operation Specifications
    var serializer$J = new msRest.Serializer(Mappers$J);
    var listByVersionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobVersion,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var getByVersionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobVersion,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStep
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByJobOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var getOperationSpec$C = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStep
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var createOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, JobStep), { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobStep
            },
            201: {
                bodyMapper: JobStep
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByVersionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByJobNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$K = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionListResult: JobExecutionListResult,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobTargetExecutions. */
    var JobTargetExecutions = /** @class */ (function () {
        /**
         * Create a JobTargetExecutions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobTargetExecutions(client) {
            this.client = client;
        }
        JobTargetExecutions.prototype.listByJobExecution = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                options: options
            }, listByJobExecutionOperationSpec$1, callback);
        };
        JobTargetExecutions.prototype.listByStep = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                stepName: stepName,
                options: options
            }, listByStepOperationSpec, callback);
        };
        JobTargetExecutions.prototype.get = function (resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, targetId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobExecutionId: jobExecutionId,
                stepName: stepName,
                targetId: targetId,
                options: options
            }, getOperationSpec$D, callback);
        };
        JobTargetExecutions.prototype.listByJobExecutionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByJobExecutionNextOperationSpec$1, callback);
        };
        JobTargetExecutions.prototype.listByStepNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByStepNextOperationSpec, callback);
        };
        return JobTargetExecutions;
    }());
    // Operation Specifications
    var serializer$K = new msRest.Serializer(Mappers$K);
    var listByJobExecutionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/targets",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listByStepOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var getOperationSpec$D = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets/{targetId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            stepName,
            targetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listByJobExecutionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listByStepNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$L = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobTargetGroupListResult: JobTargetGroupListResult,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobTargetGroups. */
    var JobTargetGroups = /** @class */ (function () {
        /**
         * Create a JobTargetGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobTargetGroups(client) {
            this.client = client;
        }
        JobTargetGroups.prototype.listByAgent = function (resourceGroupName, serverName, jobAgentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                options: options
            }, listByAgentOperationSpec$3, callback);
        };
        JobTargetGroups.prototype.get = function (resourceGroupName, serverName, jobAgentName, targetGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                targetGroupName: targetGroupName,
                options: options
            }, getOperationSpec$E, callback);
        };
        JobTargetGroups.prototype.createOrUpdate = function (resourceGroupName, serverName, jobAgentName, targetGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                targetGroupName: targetGroupName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$e, callback);
        };
        JobTargetGroups.prototype.deleteMethod = function (resourceGroupName, serverName, jobAgentName, targetGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                targetGroupName: targetGroupName,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        JobTargetGroups.prototype.listByAgentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAgentNextOperationSpec$3, callback);
        };
        return JobTargetGroups;
    }());
    // Operation Specifications
    var serializer$L = new msRest.Serializer(Mappers$L);
    var listByAgentOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobTargetGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var getOperationSpec$E = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            targetGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobTargetGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var createOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            targetGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, JobTargetGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobTargetGroup
            },
            201: {
                bodyMapper: JobTargetGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            targetGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listByAgentNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobTargetGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$M = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        JobVersionListResult: JobVersionListResult,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobVersions. */
    var JobVersions = /** @class */ (function () {
        /**
         * Create a JobVersions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobVersions(client) {
            this.client = client;
        }
        JobVersions.prototype.listByJob = function (resourceGroupName, serverName, jobAgentName, jobName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                options: options
            }, listByJobOperationSpec$2, callback);
        };
        JobVersions.prototype.get = function (resourceGroupName, serverName, jobAgentName, jobName, jobVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                jobAgentName: jobAgentName,
                jobName: jobName,
                jobVersion: jobVersion,
                options: options
            }, getOperationSpec$F, callback);
        };
        JobVersions.prototype.listByJobNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByJobNextOperationSpec$2, callback);
        };
        return JobVersions;
    }());
    // Operation Specifications
    var serializer$M = new msRest.Serializer(Mappers$M);
    var listByJobOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var getOperationSpec$F = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobVersion,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var listByJobNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$N = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        LongTermRetentionBackupListResult: LongTermRetentionBackupListResult,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LongTermRetentionBackups. */
    var LongTermRetentionBackups = /** @class */ (function () {
        /**
         * Create a LongTermRetentionBackups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function LongTermRetentionBackups(client) {
            this.client = client;
        }
        LongTermRetentionBackups.prototype.getByResourceGroup = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName,
                backupName: backupName,
                options: options
            }, getByResourceGroupOperationSpec, callback);
        };
        /**
         * Deletes a long term retention backup.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The location of the database
         * @param longTermRetentionServerName The name of the server
         * @param longTermRetentionDatabaseName The name of the database
         * @param backupName The backup name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LongTermRetentionBackups.prototype.deleteByResourceGroup = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
            return this.beginDeleteByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LongTermRetentionBackups.prototype.listByResourceGroupDatabase = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName,
                options: options
            }, listByResourceGroupDatabaseOperationSpec, callback);
        };
        LongTermRetentionBackups.prototype.listByResourceGroupLocation = function (resourceGroupName, locationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                options: options
            }, listByResourceGroupLocationOperationSpec, callback);
        };
        LongTermRetentionBackups.prototype.listByResourceGroupServer = function (resourceGroupName, locationName, longTermRetentionServerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                options: options
            }, listByResourceGroupServerOperationSpec, callback);
        };
        LongTermRetentionBackups.prototype.get = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName,
                backupName: backupName,
                options: options
            }, getOperationSpec$G, callback);
        };
        /**
         * Deletes a long term retention backup.
         * @param locationName The location of the database
         * @param longTermRetentionServerName The name of the server
         * @param longTermRetentionDatabaseName The name of the database
         * @param backupName The backup name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LongTermRetentionBackups.prototype.deleteMethod = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
            return this.beginDeleteMethod(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LongTermRetentionBackups.prototype.listByDatabase = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName,
                options: options
            }, listByDatabaseOperationSpec$8, callback);
        };
        LongTermRetentionBackups.prototype.listByLocation = function (locationName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                options: options
            }, listByLocationOperationSpec$1, callback);
        };
        LongTermRetentionBackups.prototype.listByServer = function (locationName, longTermRetentionServerName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                options: options
            }, listByServerOperationSpec$h, callback);
        };
        /**
         * Deletes a long term retention backup.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The location of the database
         * @param longTermRetentionServerName The name of the server
         * @param longTermRetentionDatabaseName The name of the database
         * @param backupName The backup name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LongTermRetentionBackups.prototype.beginDeleteByResourceGroup = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName,
                backupName: backupName,
                options: options
            }, beginDeleteByResourceGroupOperationSpec, options);
        };
        /**
         * Deletes a long term retention backup.
         * @param locationName The location of the database
         * @param longTermRetentionServerName The name of the server
         * @param longTermRetentionDatabaseName The name of the database
         * @param backupName The backup name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LongTermRetentionBackups.prototype.beginDeleteMethod = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
            return this.client.sendLRORequest({
                locationName: locationName,
                longTermRetentionServerName: longTermRetentionServerName,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName,
                backupName: backupName,
                options: options
            }, beginDeleteMethodOperationSpec$c, options);
        };
        LongTermRetentionBackups.prototype.listByResourceGroupDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupDatabaseNextOperationSpec, callback);
        };
        LongTermRetentionBackups.prototype.listByResourceGroupLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupLocationNextOperationSpec, callback);
        };
        LongTermRetentionBackups.prototype.listByResourceGroupServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupServerNextOperationSpec, callback);
        };
        LongTermRetentionBackups.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$3, callback);
        };
        LongTermRetentionBackups.prototype.listByLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByLocationNextOperationSpec$1, callback);
        };
        LongTermRetentionBackups.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$9, callback);
        };
        return LongTermRetentionBackups;
    }());
    // Operation Specifications
    var serializer$N = new msRest.Serializer(Mappers$N);
    var getByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByResourceGroupDatabaseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
        urlParameters: [
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByResourceGroupLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
        urlParameters: [
            resourceGroupName,
            locationName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByResourceGroupServerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
        urlParameters: [
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var getOperationSpec$G = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByDatabaseOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByLocationOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByServerOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var beginDeleteByResourceGroupOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var beginDeleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByResourceGroupDatabaseNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByResourceGroupLocationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByResourceGroupServerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByDatabaseNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByLocationNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByServerNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$O = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupLongTermRetentionPolicies. */
    var BackupLongTermRetentionPolicies = /** @class */ (function () {
        /**
         * Create a BackupLongTermRetentionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function BackupLongTermRetentionPolicies(client) {
            this.client = client;
        }
        BackupLongTermRetentionPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$H, callback);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupLongTermRetentionPoliciesCreateOrUpdateResponse>
         */
        BackupLongTermRetentionPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        BackupLongTermRetentionPolicies.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$9, callback);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupLongTermRetentionPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$g, options);
        };
        return BackupLongTermRetentionPolicies;
    }());
    // Operation Specifications
    var serializer$O = new msRest.Serializer(Mappers$O);
    var getOperationSpec$H = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupLongTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var listByDatabaseOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupLongTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var beginCreateOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BackupLongTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupLongTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$P = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedBackupShortTermRetentionPolicyListResult: ManagedBackupShortTermRetentionPolicyListResult,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedBackupShortTermRetentionPolicies. */
    var ManagedBackupShortTermRetentionPolicies = /** @class */ (function () {
        /**
         * Create a ManagedBackupShortTermRetentionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedBackupShortTermRetentionPolicies(client) {
            this.client = client;
        }
        ManagedBackupShortTermRetentionPolicies.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$I, callback);
        };
        /**
         * Updates a managed database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedBackupShortTermRetentionPoliciesCreateOrUpdateResponse>
         */
        ManagedBackupShortTermRetentionPolicies.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a managed database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedBackupShortTermRetentionPoliciesUpdateResponse>
         */
        ManagedBackupShortTermRetentionPolicies.prototype.update = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.beginUpdate(resourceGroupName, managedInstanceName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedBackupShortTermRetentionPolicies.prototype.listByDatabase = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$a, callback);
        };
        /**
         * Updates a managed database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedBackupShortTermRetentionPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$h, options);
        };
        /**
         * Updates a managed database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedBackupShortTermRetentionPolicies.prototype.beginUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$8, options);
        };
        ManagedBackupShortTermRetentionPolicies.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$4, callback);
        };
        return ManagedBackupShortTermRetentionPolicies;
    }());
    // Operation Specifications
    var serializer$P = new msRest.Serializer(Mappers$P);
    var getOperationSpec$I = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listByDatabaseOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginCreateOrUpdateOperationSpec$h = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedBackupShortTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginUpdateOperationSpec$8 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedBackupShortTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listByDatabaseNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$Q = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedBackupShortTermRetentionPolicyListResult: ManagedBackupShortTermRetentionPolicyListResult,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies. */
    var ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies = /** @class */ (function () {
        /**
         * Create a ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies(client) {
            this.client = client;
        }
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.get = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                restorableDroppedDatabaseId: restorableDroppedDatabaseId,
                options: options
            }, getOperationSpec$J, callback);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param restorableDroppedDatabaseId
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns
         * Promise<Models.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesCreateOrUpdateResponse>
         */
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param restorableDroppedDatabaseId
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns
         * Promise<Models.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesUpdateResponse>
         */
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.update = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, parameters, options) {
            return this.beginUpdate(resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.listByRestorableDroppedDatabase = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                restorableDroppedDatabaseId: restorableDroppedDatabaseId,
                options: options
            }, listByRestorableDroppedDatabaseOperationSpec, callback);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param restorableDroppedDatabaseId
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                restorableDroppedDatabaseId: restorableDroppedDatabaseId,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$i, options);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param restorableDroppedDatabaseId
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.beginUpdate = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                restorableDroppedDatabaseId: restorableDroppedDatabaseId,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$9, options);
        };
        ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies.prototype.listByRestorableDroppedDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByRestorableDroppedDatabaseNextOperationSpec, callback);
        };
        return ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
    }());
    // Operation Specifications
    var serializer$Q = new msRest.Serializer(Mappers$Q);
    var getOperationSpec$J = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            restorableDroppedDatabaseId,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByRestorableDroppedDatabaseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}/backupShortTermRetentionPolicies",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            restorableDroppedDatabaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginCreateOrUpdateOperationSpec$i = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            restorableDroppedDatabaseId,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedBackupShortTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginUpdateOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            restorableDroppedDatabaseId,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedBackupShortTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listByRestorableDroppedDatabaseNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedBackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$R = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerAutomaticTuningOperations. */
    var ServerAutomaticTuningOperations = /** @class */ (function () {
        /**
         * Create a ServerAutomaticTuningOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerAutomaticTuningOperations(client) {
            this.client = client;
        }
        ServerAutomaticTuningOperations.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$K, callback);
        };
        ServerAutomaticTuningOperations.prototype.update = function (resourceGroupName, serverName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return ServerAutomaticTuningOperations;
    }());
    // Operation Specifications
    var serializer$R = new msRest.Serializer(Mappers$R);
    var getOperationSpec$K = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerAutomaticTuning), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$S = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerDnsAliasAcquisition: ServerDnsAliasAcquisition,
        ServerDnsAliasListResult: ServerDnsAliasListResult,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerDnsAliases. */
    var ServerDnsAliases = /** @class */ (function () {
        /**
         * Create a ServerDnsAliases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerDnsAliases(client) {
            this.client = client;
        }
        ServerDnsAliases.prototype.get = function (resourceGroupName, serverName, dnsAliasName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                dnsAliasName: dnsAliasName,
                options: options
            }, getOperationSpec$L, callback);
        };
        /**
         * Creates a server dns alias.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerDnsAliasesCreateOrUpdateResponse>
         */
        ServerDnsAliases.prototype.createOrUpdate = function (resourceGroupName, serverName, dnsAliasName, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, dnsAliasName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the server DNS alias with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServerDnsAliases.prototype.deleteMethod = function (resourceGroupName, serverName, dnsAliasName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, dnsAliasName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerDnsAliases.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$i, callback);
        };
        /**
         * Acquires server DNS alias from another server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server dns alias.
         * @param parameters
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServerDnsAliases.prototype.acquire = function (resourceGroupName, serverName, dnsAliasName, parameters, options) {
            return this.beginAcquire(resourceGroupName, serverName, dnsAliasName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a server dns alias.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerDnsAliases.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, dnsAliasName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                dnsAliasName: dnsAliasName,
                options: options
            }, beginCreateOrUpdateOperationSpec$j, options);
        };
        /**
         * Deletes the server DNS alias with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerDnsAliases.prototype.beginDeleteMethod = function (resourceGroupName, serverName, dnsAliasName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                dnsAliasName: dnsAliasName,
                options: options
            }, beginDeleteMethodOperationSpec$d, options);
        };
        /**
         * Acquires server DNS alias from another server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server dns alias.
         * @param parameters
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerDnsAliases.prototype.beginAcquire = function (resourceGroupName, serverName, dnsAliasName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                dnsAliasName: dnsAliasName,
                parameters: parameters,
                options: options
            }, beginAcquireOperationSpec, options);
        };
        ServerDnsAliases.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$a, callback);
        };
        return ServerDnsAliases;
    }());
    // Operation Specifications
    var serializer$S = new msRest.Serializer(Mappers$S);
    var getOperationSpec$L = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAlias
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };
    var listByServerOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAliasListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };
    var beginCreateOrUpdateOperationSpec$j = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAlias
            },
            201: {
                bodyMapper: ServerDnsAlias
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };
    var beginDeleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };
    var beginAcquireOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}/acquire",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerDnsAliasAcquisition), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };
    var listByServerNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAliasListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$T = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LogicalServerSecurityAlertPolicyListResult: LogicalServerSecurityAlertPolicyListResult,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerSecurityAlertPolicies. */
    var ServerSecurityAlertPolicies = /** @class */ (function () {
        /**
         * Create a ServerSecurityAlertPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerSecurityAlertPolicies(client) {
            this.client = client;
        }
        ServerSecurityAlertPolicies.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$M, callback);
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerSecurityAlertPoliciesCreateOrUpdateResponse>
         */
        ServerSecurityAlertPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerSecurityAlertPolicies.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$j, callback);
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerSecurityAlertPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$k, options);
        };
        ServerSecurityAlertPolicies.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$b, callback);
        };
        return ServerSecurityAlertPolicies;
    }());
    // Operation Specifications
    var serializer$T = new msRest.Serializer(Mappers$T);
    var getOperationSpec$M = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            securityAlertPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };
    var listByServerOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogicalServerSecurityAlertPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };
    var beginCreateOrUpdateOperationSpec$k = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            securityAlertPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerSecurityAlertPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerSecurityAlertPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };
    var listByServerNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogicalServerSecurityAlertPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$U = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorableDroppedManagedDatabaseListResult: RestorableDroppedManagedDatabaseListResult,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorableDroppedManagedDatabases. */
    var RestorableDroppedManagedDatabases = /** @class */ (function () {
        /**
         * Create a RestorableDroppedManagedDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RestorableDroppedManagedDatabases(client) {
            this.client = client;
        }
        RestorableDroppedManagedDatabases.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec, callback);
        };
        RestorableDroppedManagedDatabases.prototype.get = function (resourceGroupName, managedInstanceName, restorableDroppedDatabaseId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                restorableDroppedDatabaseId: restorableDroppedDatabaseId,
                options: options
            }, getOperationSpec$N, callback);
        };
        RestorableDroppedManagedDatabases.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec, callback);
        };
        return RestorableDroppedManagedDatabases;
    }());
    // Operation Specifications
    var serializer$U = new msRest.Serializer(Mappers$U);
    var listByInstanceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$U
    };
    var getOperationSpec$N = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            restorableDroppedDatabaseId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedManagedDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$U
    };
    var listByInstanceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$U
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$V = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CreateDatabaseRestorePointDefinition: CreateDatabaseRestorePointDefinition,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        RestorePointListResult: RestorePointListResult,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorePoints. */
    var RestorePoints = /** @class */ (function () {
        /**
         * Create a RestorePoints.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RestorePoints(client) {
            this.client = client;
        }
        RestorePoints.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$b, callback);
        };
        /**
         * Creates a restore point for a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The definition for creating the restore point of this database.
         * @param [options] The optional parameters
         * @returns Promise<Models.RestorePointsCreateResponse>
         */
        RestorePoints.prototype.create = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginCreate(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RestorePoints.prototype.get = function (resourceGroupName, serverName, databaseName, restorePointName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                restorePointName: restorePointName,
                options: options
            }, getOperationSpec$O, callback);
        };
        RestorePoints.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, restorePointName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                restorePointName: restorePointName,
                options: options
            }, deleteMethodOperationSpec$9, callback);
        };
        /**
         * Creates a restore point for a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The definition for creating the restore point of this database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RestorePoints.prototype.beginCreate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        return RestorePoints;
    }());
    // Operation Specifications
    var serializer$V = new msRest.Serializer(Mappers$V);
    var listByDatabaseOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };
    var getOperationSpec$O = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            restorePointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };
    var deleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            restorePointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CreateDatabaseRestorePointDefinition), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RestorePoint
            },
            201: {
                bodyMapper: RestorePoint
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$W = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedDatabaseSecurityAlertPolicyListResult: ManagedDatabaseSecurityAlertPolicyListResult,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseSecurityAlertPolicies. */
    var ManagedDatabaseSecurityAlertPolicies = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseSecurityAlertPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseSecurityAlertPolicies(client) {
            this.client = client;
        }
        ManagedDatabaseSecurityAlertPolicies.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$P, callback);
        };
        ManagedDatabaseSecurityAlertPolicies.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$f, callback);
        };
        ManagedDatabaseSecurityAlertPolicies.prototype.listByDatabase = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$c, callback);
        };
        ManagedDatabaseSecurityAlertPolicies.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$5, callback);
        };
        return ManagedDatabaseSecurityAlertPolicies;
    }());
    // Operation Specifications
    var serializer$W = new msRest.Serializer(Mappers$W);
    var getOperationSpec$P = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            securityAlertPolicyName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$W
    };
    var createOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            securityAlertPolicyName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedDatabaseSecurityAlertPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedDatabaseSecurityAlertPolicy
            },
            201: {
                bodyMapper: ManagedDatabaseSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$W
    };
    var listByDatabaseOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseSecurityAlertPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$W
    };
    var listByDatabaseNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseSecurityAlertPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$W
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$X = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        ManagedServerSecurityAlertPolicyListResult: ManagedServerSecurityAlertPolicyListResult,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedServerSecurityAlertPolicies. */
    var ManagedServerSecurityAlertPolicies = /** @class */ (function () {
        /**
         * Create a ManagedServerSecurityAlertPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedServerSecurityAlertPolicies(client) {
            this.client = client;
        }
        ManagedServerSecurityAlertPolicies.prototype.get = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, getOperationSpec$Q, callback);
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The managed server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedServerSecurityAlertPoliciesCreateOrUpdateResponse>
         */
        ManagedServerSecurityAlertPolicies.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedServerSecurityAlertPolicies.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$1, callback);
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The managed server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedServerSecurityAlertPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$l, options);
        };
        ManagedServerSecurityAlertPolicies.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$1, callback);
        };
        return ManagedServerSecurityAlertPolicies;
    }());
    // Operation Specifications
    var serializer$X = new msRest.Serializer(Mappers$X);
    var getOperationSpec$Q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            securityAlertPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedServerSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var listByInstanceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/securityAlertPolicies",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedServerSecurityAlertPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var beginCreateOrUpdateOperationSpec$l = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            securityAlertPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedServerSecurityAlertPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedServerSecurityAlertPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var listByInstanceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedServerSecurityAlertPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$Y = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        SensitivityLabelListResult: SensitivityLabelListResult,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SensitivityLabels. */
    var SensitivityLabels = /** @class */ (function () {
        /**
         * Create a SensitivityLabels.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SensitivityLabels(client) {
            this.client = client;
        }
        SensitivityLabels.prototype.listCurrentByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listCurrentByDatabaseOperationSpec, callback);
        };
        SensitivityLabels.prototype.listRecommendedByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listRecommendedByDatabaseOperationSpec, callback);
        };
        SensitivityLabels.prototype.enableRecommendation = function (resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                options: options
            }, enableRecommendationOperationSpec, callback);
        };
        SensitivityLabels.prototype.disableRecommendation = function (resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                options: options
            }, disableRecommendationOperationSpec, callback);
        };
        SensitivityLabels.prototype.get = function (resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, sensitivityLabelSource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                sensitivityLabelSource: sensitivityLabelSource,
                options: options
            }, getOperationSpec$R, callback);
        };
        SensitivityLabels.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$g, callback);
        };
        SensitivityLabels.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                options: options
            }, deleteMethodOperationSpec$a, callback);
        };
        SensitivityLabels.prototype.listCurrentByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listCurrentByDatabaseNextOperationSpec, callback);
        };
        SensitivityLabels.prototype.listRecommendedByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listRecommendedByDatabaseNextOperationSpec, callback);
        };
        return SensitivityLabels;
    }());
    // Operation Specifications
    var serializer$Y = new msRest.Serializer(Mappers$Y);
    var listCurrentByDatabaseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/currentSensitivityLabels",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var listRecommendedByDatabaseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/recommendedSensitivityLabels",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            includeDisabledRecommendations,
            skipToken,
            filter1,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var enableRecommendationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/enable",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var disableRecommendationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/disable",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var getOperationSpec$R = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var createOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource2,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SensitivityLabel), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SensitivityLabel
            },
            201: {
                bodyMapper: SensitivityLabel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var deleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource2,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var listCurrentByDatabaseNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var listRecommendedByDatabaseNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$Z = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceAdministratorListResult: ManagedInstanceAdministratorListResult,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceAdministrators. */
    var ManagedInstanceAdministrators = /** @class */ (function () {
        /**
         * Create a ManagedInstanceAdministrators.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceAdministrators(client) {
            this.client = client;
        }
        ManagedInstanceAdministrators.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$2, callback);
        };
        ManagedInstanceAdministrators.prototype.get = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, getOperationSpec$S, callback);
        };
        /**
         * Creates or updates a managed instance administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested administrator parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstanceAdministratorsCreateOrUpdateResponse>
         */
        ManagedInstanceAdministrators.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a managed instance administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstanceAdministrators.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, options) {
            return this.beginDeleteMethod(resourceGroupName, managedInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a managed instance administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested administrator parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceAdministrators.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$m, options);
        };
        /**
         * Deletes a managed instance administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceAdministrators.prototype.beginDeleteMethod = function (resourceGroupName, managedInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, beginDeleteMethodOperationSpec$e, options);
        };
        ManagedInstanceAdministrators.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$2, callback);
        };
        return ManagedInstanceAdministrators;
    }());
    // Operation Specifications
    var serializer$Z = new msRest.Serializer(Mappers$Z);
    var listByInstanceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceAdministratorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var getOperationSpec$S = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            administratorName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var beginCreateOrUpdateOperationSpec$m = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            administratorName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedInstanceAdministrator), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstanceAdministrator
            },
            201: {
                bodyMapper: ManagedInstanceAdministrator
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var beginDeleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            administratorName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var listByInstanceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceAdministratorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$_ = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseOperationListResult: DatabaseOperationListResult,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseOperations. */
    var DatabaseOperations = /** @class */ (function () {
        /**
         * Create a DatabaseOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseOperations(client) {
            this.client = client;
        }
        DatabaseOperations.prototype.cancel = function (resourceGroupName, serverName, databaseName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                operationId: operationId,
                options: options
            }, cancelOperationSpec$1, callback);
        };
        DatabaseOperations.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$d, callback);
        };
        DatabaseOperations.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$6, callback);
        };
        return DatabaseOperations;
    }());
    // Operation Specifications
    var serializer$_ = new msRest.Serializer(Mappers$_);
    var cancelOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations/{operationId}/cancel",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };
    var listByDatabaseOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };
    var listByDatabaseNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$$ = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolOperationListResult: ElasticPoolOperationListResult,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPoolOperations. */
    var ElasticPoolOperations = /** @class */ (function () {
        /**
         * Create a ElasticPoolOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPoolOperations(client) {
            this.client = client;
        }
        ElasticPoolOperations.prototype.cancel = function (resourceGroupName, serverName, elasticPoolName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                operationId: operationId,
                options: options
            }, cancelOperationSpec$2, callback);
        };
        ElasticPoolOperations.prototype.listByElasticPool = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                elasticPoolName: elasticPoolName,
                options: options
            }, listByElasticPoolOperationSpec$3, callback);
        };
        ElasticPoolOperations.prototype.listByElasticPoolNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByElasticPoolNextOperationSpec$1, callback);
        };
        return ElasticPoolOperations;
    }());
    // Operation Specifications
    var serializer$$ = new msRest.Serializer(Mappers$$);
    var cancelOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations/{operationId}/cancel",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$$
    };
    var listByElasticPoolOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$$
    };
    var listByElasticPoolNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$$
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$10 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        EditionCapability: EditionCapability,
        ElasticPoolEditionCapability: ElasticPoolEditionCapability,
        ElasticPoolPerDatabaseMaxPerformanceLevelCapability: ElasticPoolPerDatabaseMaxPerformanceLevelCapability,
        ElasticPoolPerDatabaseMinPerformanceLevelCapability: ElasticPoolPerDatabaseMinPerformanceLevelCapability,
        ElasticPoolPerformanceLevelCapability: ElasticPoolPerformanceLevelCapability,
        LicenseTypeCapability: LicenseTypeCapability,
        LocationCapabilities: LocationCapabilities,
        LogSizeCapability: LogSizeCapability,
        ManagedInstanceEditionCapability: ManagedInstanceEditionCapability,
        ManagedInstanceFamilyCapability: ManagedInstanceFamilyCapability,
        ManagedInstanceVcoresCapability: ManagedInstanceVcoresCapability,
        ManagedInstanceVersionCapability: ManagedInstanceVersionCapability,
        MaxSizeCapability: MaxSizeCapability,
        MaxSizeRangeCapability: MaxSizeRangeCapability,
        PerformanceLevelCapability: PerformanceLevelCapability,
        ServerVersionCapability: ServerVersionCapability,
        ServiceObjectiveCapability: ServiceObjectiveCapability,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Capabilities. */
    var Capabilities = /** @class */ (function () {
        /**
         * Create a Capabilities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Capabilities(client) {
            this.client = client;
        }
        Capabilities.prototype.listByLocation = function (locationName, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName,
                options: options
            }, listByLocationOperationSpec$2, callback);
        };
        return Capabilities;
    }());
    // Operation Specifications
    var serializer$10 = new msRest.Serializer(Mappers$10);
    var listByLocationOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            include,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LocationCapabilities
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$11 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanRecordListResult: VulnerabilityAssessmentScanRecordListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseVulnerabilityAssessmentScans. */
    var DatabaseVulnerabilityAssessmentScans = /** @class */ (function () {
        /**
         * Create a DatabaseVulnerabilityAssessmentScans.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseVulnerabilityAssessmentScans(client) {
            this.client = client;
        }
        DatabaseVulnerabilityAssessmentScans.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$e, callback);
        };
        DatabaseVulnerabilityAssessmentScans.prototype.get = function (resourceGroupName, serverName, databaseName, scanId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                scanId: scanId,
                options: options
            }, getOperationSpec$T, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseVulnerabilityAssessmentScans.prototype.initiateScan = function (resourceGroupName, serverName, databaseName, scanId, options) {
            return this.beginInitiateScan(resourceGroupName, serverName, databaseName, scanId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DatabaseVulnerabilityAssessmentScans.prototype.exportMethod = function (resourceGroupName, serverName, databaseName, scanId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                scanId: scanId,
                options: options
            }, exportMethodOperationSpec, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseVulnerabilityAssessmentScans.prototype.beginInitiateScan = function (resourceGroupName, serverName, databaseName, scanId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                scanId: scanId,
                options: options
            }, beginInitiateScanOperationSpec, options);
        };
        DatabaseVulnerabilityAssessmentScans.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$7, callback);
        };
        return DatabaseVulnerabilityAssessmentScans;
    }());
    // Operation Specifications
    var serializer$11 = new msRest.Serializer(Mappers$11);
    var listByDatabaseOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var getOperationSpec$T = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecord
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var exportMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var beginInitiateScanOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var listByDatabaseNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$12 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseVulnerabilityAssessmentRuleBaselines. */
    var ManagedDatabaseVulnerabilityAssessmentRuleBaselines = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseVulnerabilityAssessmentRuleBaselines.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseVulnerabilityAssessmentRuleBaselines(client) {
            this.client = client;
        }
        ManagedDatabaseVulnerabilityAssessmentRuleBaselines.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                ruleId: ruleId,
                baselineName: baselineName,
                options: options
            }, getOperationSpec$U, callback);
        };
        ManagedDatabaseVulnerabilityAssessmentRuleBaselines.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                ruleId: ruleId,
                baselineName: baselineName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$h, callback);
        };
        ManagedDatabaseVulnerabilityAssessmentRuleBaselines.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                ruleId: ruleId,
                baselineName: baselineName,
                options: options
            }, deleteMethodOperationSpec$b, callback);
        };
        return ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
    }());
    // Operation Specifications
    var serializer$12 = new msRest.Serializer(Mappers$12);
    var getOperationSpec$U = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$12
    };
    var createOrUpdateOperationSpec$h = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseVulnerabilityAssessmentRuleBaseline), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$12
    };
    var deleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$12
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$13 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanRecordListResult: VulnerabilityAssessmentScanRecordListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseVulnerabilityAssessmentScans. */
    var ManagedDatabaseVulnerabilityAssessmentScans = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseVulnerabilityAssessmentScans.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseVulnerabilityAssessmentScans(client) {
            this.client = client;
        }
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.listByDatabase = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$f, callback);
        };
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, scanId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                scanId: scanId,
                options: options
            }, getOperationSpec$V, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.initiateScan = function (resourceGroupName, managedInstanceName, databaseName, scanId, options) {
            return this.beginInitiateScan(resourceGroupName, managedInstanceName, databaseName, scanId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.exportMethod = function (resourceGroupName, managedInstanceName, databaseName, scanId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                scanId: scanId,
                options: options
            }, exportMethodOperationSpec$1, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.beginInitiateScan = function (resourceGroupName, managedInstanceName, databaseName, scanId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                scanId: scanId,
                options: options
            }, beginInitiateScanOperationSpec$1, options);
        };
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$8, callback);
        };
        return ManagedDatabaseVulnerabilityAssessmentScans;
    }());
    // Operation Specifications
    var serializer$13 = new msRest.Serializer(Mappers$13);
    var listByDatabaseOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$13
    };
    var getOperationSpec$V = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecord
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$13
    };
    var exportMethodOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$13
    };
    var beginInitiateScanOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$13
    };
    var listByDatabaseNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$13
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$14 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentListResult: DatabaseVulnerabilityAssessmentListResult,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseVulnerabilityAssessments. */
    var ManagedDatabaseVulnerabilityAssessments = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseVulnerabilityAssessments.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseVulnerabilityAssessments(client) {
            this.client = client;
        }
        ManagedDatabaseVulnerabilityAssessments.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$W, callback);
        };
        ManagedDatabaseVulnerabilityAssessments.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$i, callback);
        };
        ManagedDatabaseVulnerabilityAssessments.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, deleteMethodOperationSpec$c, callback);
        };
        ManagedDatabaseVulnerabilityAssessments.prototype.listByDatabase = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$g, callback);
        };
        ManagedDatabaseVulnerabilityAssessments.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$9, callback);
        };
        return ManagedDatabaseVulnerabilityAssessments;
    }());
    // Operation Specifications
    var serializer$14 = new msRest.Serializer(Mappers$14);
    var getOperationSpec$W = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var createOrUpdateOperationSpec$i = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DatabaseVulnerabilityAssessment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var deleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var listByDatabaseOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var listByDatabaseNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$15 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupListResult: InstanceFailoverGroupListResult,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a InstanceFailoverGroups. */
    var InstanceFailoverGroups = /** @class */ (function () {
        /**
         * Create a InstanceFailoverGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function InstanceFailoverGroups(client) {
            this.client = client;
        }
        InstanceFailoverGroups.prototype.get = function (resourceGroupName, locationName, failoverGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                failoverGroupName: failoverGroupName,
                options: options
            }, getOperationSpec$X, callback);
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstanceFailoverGroupsCreateOrUpdateResponse>
         */
        InstanceFailoverGroups.prototype.createOrUpdate = function (resourceGroupName, locationName, failoverGroupName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, locationName, failoverGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        InstanceFailoverGroups.prototype.deleteMethod = function (resourceGroupName, locationName, failoverGroupName, options) {
            return this.beginDeleteMethod(resourceGroupName, locationName, failoverGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        InstanceFailoverGroups.prototype.listByLocation = function (resourceGroupName, locationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                options: options
            }, listByLocationOperationSpec$3, callback);
        };
        /**
         * Fails over from the current primary managed instance to this managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstanceFailoverGroupsFailoverResponse>
         */
        InstanceFailoverGroups.prototype.failover = function (resourceGroupName, locationName, failoverGroupName, options) {
            return this.beginFailover(resourceGroupName, locationName, failoverGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Fails over from the current primary managed instance to this managed instance. This operation
         * might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstanceFailoverGroupsForceFailoverAllowDataLossResponse>
         */
        InstanceFailoverGroups.prototype.forceFailoverAllowDataLoss = function (resourceGroupName, locationName, failoverGroupName, options) {
            return this.beginForceFailoverAllowDataLoss(resourceGroupName, locationName, failoverGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, locationName, failoverGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                failoverGroupName: failoverGroupName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$n, options);
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginDeleteMethod = function (resourceGroupName, locationName, failoverGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                failoverGroupName: failoverGroupName,
                options: options
            }, beginDeleteMethodOperationSpec$f, options);
        };
        /**
         * Fails over from the current primary managed instance to this managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginFailover = function (resourceGroupName, locationName, failoverGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                failoverGroupName: failoverGroupName,
                options: options
            }, beginFailoverOperationSpec$4, options);
        };
        /**
         * Fails over from the current primary managed instance to this managed instance. This operation
         * might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginForceFailoverAllowDataLoss = function (resourceGroupName, locationName, failoverGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                locationName: locationName,
                failoverGroupName: failoverGroupName,
                options: options
            }, beginForceFailoverAllowDataLossOperationSpec$1, options);
        };
        InstanceFailoverGroups.prototype.listByLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByLocationNextOperationSpec$2, callback);
        };
        return InstanceFailoverGroups;
    }());
    // Operation Specifications
    var serializer$15 = new msRest.Serializer(Mappers$15);
    var getOperationSpec$X = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var listByLocationOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups",
        urlParameters: [
            resourceGroupName,
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var beginCreateOrUpdateOperationSpec$n = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, InstanceFailoverGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            201: {
                bodyMapper: InstanceFailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var beginDeleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var beginFailoverOperationSpec$4 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/failover",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var beginForceFailoverAllowDataLossOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var listByLocationNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$16 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BackupShortTermRetentionPolicyListResult: BackupShortTermRetentionPolicyListResult,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupShortTermRetentionPolicies. */
    var BackupShortTermRetentionPolicies = /** @class */ (function () {
        /**
         * Create a BackupShortTermRetentionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function BackupShortTermRetentionPolicies(client) {
            this.client = client;
        }
        BackupShortTermRetentionPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$Y, callback);
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupShortTermRetentionPoliciesCreateOrUpdateResponse>
         */
        BackupShortTermRetentionPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupShortTermRetentionPoliciesUpdateResponse>
         */
        BackupShortTermRetentionPolicies.prototype.update = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.beginUpdate(resourceGroupName, serverName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        BackupShortTermRetentionPolicies.prototype.listByDatabase = function (resourceGroupName, serverName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                options: options
            }, listByDatabaseOperationSpec$h, callback);
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupShortTermRetentionPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$o, options);
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupShortTermRetentionPolicies.prototype.beginUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$a, options);
        };
        BackupShortTermRetentionPolicies.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByDatabaseNextOperationSpec$a, callback);
        };
        return BackupShortTermRetentionPolicies;
    }());
    // Operation Specifications
    var serializer$16 = new msRest.Serializer(Mappers$16);
    var getOperationSpec$Y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$16
    };
    var listByDatabaseOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$16
    };
    var beginCreateOrUpdateOperationSpec$o = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BackupShortTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$16
    };
    var beginUpdateOperationSpec$a = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BackupShortTermRetentionPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$16
    };
    var listByDatabaseNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$16
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$17 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TdeCertificates. */
    var TdeCertificates = /** @class */ (function () {
        /**
         * Create a TdeCertificates.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function TdeCertificates(client) {
            this.client = client;
        }
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        TdeCertificates.prototype.create = function (resourceGroupName, serverName, parameters, options) {
            return this.beginCreate(resourceGroupName, serverName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        TdeCertificates.prototype.beginCreate = function (resourceGroupName, serverName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        return TdeCertificates;
    }());
    // Operation Specifications
    var serializer$17 = new msRest.Serializer(Mappers$17);
    var beginCreateOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/tdeCertificates",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TdeCertificate), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$17
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$18 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceTdeCertificates. */
    var ManagedInstanceTdeCertificates = /** @class */ (function () {
        /**
         * Create a ManagedInstanceTdeCertificates.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceTdeCertificates(client) {
            this.client = client;
        }
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstanceTdeCertificates.prototype.create = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.beginCreate(resourceGroupName, managedInstanceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceTdeCertificates.prototype.beginCreate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$3, options);
        };
        return ManagedInstanceTdeCertificates;
    }());
    // Operation Specifications
    var serializer$18 = new msRest.Serializer(Mappers$18);
    var beginCreateOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/tdeCertificates",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TdeCertificate), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$18
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$19 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceKeyListResult: ManagedInstanceKeyListResult,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceKeys. */
    var ManagedInstanceKeys = /** @class */ (function () {
        /**
         * Create a ManagedInstanceKeys.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceKeys(client) {
            this.client = client;
        }
        ManagedInstanceKeys.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$3, callback);
        };
        ManagedInstanceKeys.prototype.get = function (resourceGroupName, managedInstanceName, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                keyName: keyName,
                options: options
            }, getOperationSpec$Z, callback);
        };
        /**
         * Creates or updates a managed instance key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be operated on (updated or created).
         * @param parameters The requested managed instance key resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstanceKeysCreateOrUpdateResponse>
         */
        ManagedInstanceKeys.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, keyName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, keyName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the managed instance key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstanceKeys.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, keyName, options) {
            return this.beginDeleteMethod(resourceGroupName, managedInstanceName, keyName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a managed instance key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be operated on (updated or created).
         * @param parameters The requested managed instance key resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceKeys.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, keyName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                keyName: keyName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$p, options);
        };
        /**
         * Deletes the managed instance key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceKeys.prototype.beginDeleteMethod = function (resourceGroupName, managedInstanceName, keyName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                keyName: keyName,
                options: options
            }, beginDeleteMethodOperationSpec$g, options);
        };
        ManagedInstanceKeys.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$3, callback);
        };
        return ManagedInstanceKeys;
    }());
    // Operation Specifications
    var serializer$19 = new msRest.Serializer(Mappers$19);
    var listByInstanceOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$19
    };
    var getOperationSpec$Z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$19
    };
    var beginCreateOrUpdateOperationSpec$p = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedInstanceKey), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstanceKey
            },
            201: {
                bodyMapper: ManagedInstanceKey
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$19
    };
    var beginDeleteMethodOperationSpec$g = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$19
    };
    var listByInstanceNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$19
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceEncryptionProtectorListResult: ManagedInstanceEncryptionProtectorListResult,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceEncryptionProtectors. */
    var ManagedInstanceEncryptionProtectors = /** @class */ (function () {
        /**
         * Create a ManagedInstanceEncryptionProtectors.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceEncryptionProtectors(client) {
            this.client = client;
        }
        /**
         * Revalidates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstanceEncryptionProtectors.prototype.revalidate = function (resourceGroupName, managedInstanceName, options) {
            return this.beginRevalidate(resourceGroupName, managedInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedInstanceEncryptionProtectors.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$4, callback);
        };
        ManagedInstanceEncryptionProtectors.prototype.get = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, getOperationSpec$_, callback);
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstanceEncryptionProtectorsCreateOrUpdateResponse>
         */
        ManagedInstanceEncryptionProtectors.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revalidates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceEncryptionProtectors.prototype.beginRevalidate = function (resourceGroupName, managedInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, beginRevalidateOperationSpec$1, options);
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceEncryptionProtectors.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$q, options);
        };
        ManagedInstanceEncryptionProtectors.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$4, callback);
        };
        return ManagedInstanceEncryptionProtectors;
    }());
    // Operation Specifications
    var serializer$1a = new msRest.Serializer(Mappers$1a);
    var listByInstanceOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1a
    };
    var getOperationSpec$_ = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtector
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1a
    };
    var beginRevalidateOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}/revalidate",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1a
    };
    var beginCreateOrUpdateOperationSpec$q = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedInstanceEncryptionProtector), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtector
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1a
    };
    var listByInstanceNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        RecoverableManagedDatabaseListResult: RecoverableManagedDatabaseListResult,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecoverableManagedDatabases. */
    var RecoverableManagedDatabases = /** @class */ (function () {
        /**
         * Create a RecoverableManagedDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RecoverableManagedDatabases(client) {
            this.client = client;
        }
        RecoverableManagedDatabases.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$5, callback);
        };
        RecoverableManagedDatabases.prototype.get = function (resourceGroupName, managedInstanceName, recoverableDatabaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                recoverableDatabaseName: recoverableDatabaseName,
                options: options
            }, getOperationSpec$$, callback);
        };
        RecoverableManagedDatabases.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$5, callback);
        };
        return RecoverableManagedDatabases;
    }());
    // Operation Specifications
    var serializer$1b = new msRest.Serializer(Mappers$1b);
    var listByInstanceOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/recoverableDatabases",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1b
    };
    var getOperationSpec$$ = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/recoverableDatabases/{recoverableDatabaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            recoverableDatabaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableManagedDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1b
    };
    var listByInstanceNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedInstanceVulnerabilityAssessmentListResult: ManagedInstanceVulnerabilityAssessmentListResult,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceVulnerabilityAssessments. */
    var ManagedInstanceVulnerabilityAssessments = /** @class */ (function () {
        /**
         * Create a ManagedInstanceVulnerabilityAssessments.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceVulnerabilityAssessments(client) {
            this.client = client;
        }
        ManagedInstanceVulnerabilityAssessments.prototype.get = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, getOperationSpec$10, callback);
        };
        ManagedInstanceVulnerabilityAssessments.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$j, callback);
        };
        ManagedInstanceVulnerabilityAssessments.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, deleteMethodOperationSpec$d, callback);
        };
        ManagedInstanceVulnerabilityAssessments.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$6, callback);
        };
        ManagedInstanceVulnerabilityAssessments.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$6, callback);
        };
        return ManagedInstanceVulnerabilityAssessments;
    }());
    // Operation Specifications
    var serializer$1c = new msRest.Serializer(Mappers$1c);
    var getOperationSpec$10 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1c
    };
    var createOrUpdateOperationSpec$j = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedInstanceVulnerabilityAssessment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstanceVulnerabilityAssessment
            },
            201: {
                bodyMapper: ManagedInstanceVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1c
    };
    var deleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1c
    };
    var listByInstanceOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1c
    };
    var listByInstanceNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServerVulnerabilityAssessmentListResult: ServerVulnerabilityAssessmentListResult,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerVulnerabilityAssessments. */
    var ServerVulnerabilityAssessments = /** @class */ (function () {
        /**
         * Create a ServerVulnerabilityAssessments.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerVulnerabilityAssessments(client) {
            this.client = client;
        }
        ServerVulnerabilityAssessments.prototype.get = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, getOperationSpec$11, callback);
        };
        ServerVulnerabilityAssessments.prototype.createOrUpdate = function (resourceGroupName, serverName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$k, callback);
        };
        ServerVulnerabilityAssessments.prototype.deleteMethod = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, deleteMethodOperationSpec$e, callback);
        };
        ServerVulnerabilityAssessments.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$k, callback);
        };
        ServerVulnerabilityAssessments.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$c, callback);
        };
        return ServerVulnerabilityAssessments;
    }());
    // Operation Specifications
    var serializer$1d = new msRest.Serializer(Mappers$1d);
    var getOperationSpec$11 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1d
    };
    var createOrUpdateOperationSpec$k = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServerVulnerabilityAssessment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerVulnerabilityAssessment
            },
            201: {
                bodyMapper: ServerVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1d
    };
    var deleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1d
    };
    var listByServerOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1d
    };
    var listByServerNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerVulnerabilityAssessmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        SensitivityLabelListResult: SensitivityLabelListResult,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseSensitivityLabels. */
    var ManagedDatabaseSensitivityLabels = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseSensitivityLabels.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseSensitivityLabels(client) {
            this.client = client;
        }
        ManagedDatabaseSensitivityLabels.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, sensitivityLabelSource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                sensitivityLabelSource: sensitivityLabelSource,
                options: options
            }, getOperationSpec$12, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$l, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                options: options
            }, deleteMethodOperationSpec$f, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.disableRecommendation = function (resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                options: options
            }, disableRecommendationOperationSpec$1, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.enableRecommendation = function (resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                schemaName: schemaName,
                tableName: tableName,
                columnName: columnName,
                options: options
            }, enableRecommendationOperationSpec$1, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.listCurrentByDatabase = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, listCurrentByDatabaseOperationSpec$1, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.listRecommendedByDatabase = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, listRecommendedByDatabaseOperationSpec$1, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.listCurrentByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listCurrentByDatabaseNextOperationSpec$1, callback);
        };
        ManagedDatabaseSensitivityLabels.prototype.listRecommendedByDatabaseNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listRecommendedByDatabaseNextOperationSpec$1, callback);
        };
        return ManagedDatabaseSensitivityLabels;
    }());
    // Operation Specifications
    var serializer$1e = new msRest.Serializer(Mappers$1e);
    var getOperationSpec$12 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var createOrUpdateOperationSpec$l = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource2,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SensitivityLabel), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SensitivityLabel
            },
            201: {
                bodyMapper: SensitivityLabel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var deleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource2,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var disableRecommendationOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/disable",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var enableRecommendationOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/enable",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var listCurrentByDatabaseOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/currentSensitivityLabels",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var listRecommendedByDatabaseOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/recommendedSensitivityLabels",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            includeDisabledRecommendations,
            skipToken,
            filter1,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var listCurrentByDatabaseNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };
    var listRecommendedByDatabaseNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SensitivityLabelListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        InstancePoolListResult: InstancePoolListResult,
        InstancePoolUpdate: InstancePoolUpdate,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a InstancePools. */
    var InstancePools = /** @class */ (function () {
        /**
         * Create a InstancePools.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function InstancePools(client) {
            this.client = client;
        }
        InstancePools.prototype.get = function (resourceGroupName, instancePoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                instancePoolName: instancePoolName,
                options: options
            }, getOperationSpec$13, callback);
        };
        /**
         * Creates or updates an instance pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param instancePoolName The name of the instance pool to be created or updated.
         * @param parameters The requested instance pool resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstancePoolsCreateOrUpdateResponse>
         */
        InstancePools.prototype.createOrUpdate = function (resourceGroupName, instancePoolName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, instancePoolName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an instance pool
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param instancePoolName The name of the instance pool to be deleted
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        InstancePools.prototype.deleteMethod = function (resourceGroupName, instancePoolName, options) {
            return this.beginDeleteMethod(resourceGroupName, instancePoolName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an instance pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param instancePoolName The name of the instance pool to be updated.
         * @param parameters The requested instance pool resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstancePoolsUpdateResponse>
         */
        InstancePools.prototype.update = function (resourceGroupName, instancePoolName, parameters, options) {
            return this.beginUpdate(resourceGroupName, instancePoolName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        InstancePools.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        InstancePools.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        /**
         * Creates or updates an instance pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param instancePoolName The name of the instance pool to be created or updated.
         * @param parameters The requested instance pool resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstancePools.prototype.beginCreateOrUpdate = function (resourceGroupName, instancePoolName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                instancePoolName: instancePoolName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$r, options);
        };
        /**
         * Deletes an instance pool
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param instancePoolName The name of the instance pool to be deleted
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstancePools.prototype.beginDeleteMethod = function (resourceGroupName, instancePoolName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                instancePoolName: instancePoolName,
                options: options
            }, beginDeleteMethodOperationSpec$h, options);
        };
        /**
         * Updates an instance pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param instancePoolName The name of the instance pool to be updated.
         * @param parameters The requested instance pool resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstancePools.prototype.beginUpdate = function (resourceGroupName, instancePoolName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                instancePoolName: instancePoolName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$b, options);
        };
        InstancePools.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        InstancePools.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return InstancePools;
    }());
    // Operation Specifications
    var serializer$1f = new msRest.Serializer(Mappers$1f);
    var getOperationSpec$13 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}",
        urlParameters: [
            resourceGroupName,
            instancePoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstancePool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstancePoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/instancePools",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstancePoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var beginCreateOrUpdateOperationSpec$r = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}",
        urlParameters: [
            resourceGroupName,
            instancePoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, InstancePool), { required: true })
        },
        responses: {
            200: {
                bodyMapper: InstancePool
            },
            201: {
                bodyMapper: InstancePool
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var beginDeleteMethodOperationSpec$h = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}",
        urlParameters: [
            resourceGroupName,
            instancePoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var beginUpdateOperationSpec$b = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}",
        urlParameters: [
            resourceGroupName,
            instancePoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, InstancePoolUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: InstancePool
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstancePoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstancePoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Name: Name,
        Usage: Usage,
        UsageListResult: UsageListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.listByInstancePool = function (resourceGroupName, instancePoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                instancePoolName: instancePoolName,
                options: options
            }, listByInstancePoolOperationSpec, callback);
        };
        Usages.prototype.listByInstancePoolNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstancePoolNextOperationSpec, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$1g = new msRest.Serializer(Mappers$1g);
    var listByInstancePoolOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/usages",
        urlParameters: [
            resourceGroupName,
            instancePoolName,
            subscriptionId
        ],
        queryParameters: [
            expandChildren,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1g
    };
    var listByInstancePoolNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceListResult: ManagedInstanceListResult,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceUpdate: ManagedInstanceUpdate,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstances. */
    var ManagedInstances = /** @class */ (function () {
        /**
         * Create a ManagedInstances.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstances(client) {
            this.client = client;
        }
        ManagedInstances.prototype.listByInstancePool = function (resourceGroupName, instancePoolName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                instancePoolName: instancePoolName,
                options: options
            }, listByInstancePoolOperationSpec$1, callback);
        };
        ManagedInstances.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        ManagedInstances.prototype.get = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, getOperationSpec$14, callback);
        };
        /**
         * Creates or updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstancesCreateOrUpdateResponse>
         */
        ManagedInstances.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstances.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, options) {
            return this.beginDeleteMethod(resourceGroupName, managedInstanceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstancesUpdateResponse>
         */
        ManagedInstances.prototype.update = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.beginUpdate(resourceGroupName, managedInstanceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedInstances.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        /**
         * Creates or updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstances.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$s, options);
        };
        /**
         * Deletes a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstances.prototype.beginDeleteMethod = function (resourceGroupName, managedInstanceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, beginDeleteMethodOperationSpec$i, options);
        };
        /**
         * Updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstances.prototype.beginUpdate = function (resourceGroupName, managedInstanceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$c, options);
        };
        ManagedInstances.prototype.listByInstancePoolNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstancePoolNextOperationSpec$1, callback);
        };
        ManagedInstances.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        ManagedInstances.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return ManagedInstances;
    }());
    // Operation Specifications
    var serializer$1h = new msRest.Serializer(Mappers$1h);
    var listByInstancePoolOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/managedInstances",
        urlParameters: [
            resourceGroupName,
            instancePoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var getOperationSpec$14 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstance
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var beginCreateOrUpdateOperationSpec$s = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedInstance), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstance
            },
            201: {
                bodyMapper: ManagedInstance
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var beginDeleteMethodOperationSpec$i = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var beginUpdateOperationSpec$c = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedInstanceUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstance
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var listByInstancePoolNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseRestoreDetails. */
    var ManagedDatabaseRestoreDetails = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseRestoreDetails.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseRestoreDetails(client) {
            this.client = client;
        }
        ManagedDatabaseRestoreDetails.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$15, callback);
        };
        return ManagedDatabaseRestoreDetails;
    }());
    // Operation Specifications
    var serializer$1i = new msRest.Serializer(Mappers$1i);
    var getOperationSpec$15 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/restoreDetails/{restoreDetailsName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            restoreDetailsName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseRestoreDetailsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CompleteDatabaseRestoreDefinition: CompleteDatabaseRestoreDefinition,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseListResult: ManagedDatabaseListResult,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedDatabaseUpdate: ManagedDatabaseUpdate,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabases. */
    var ManagedDatabases = /** @class */ (function () {
        /**
         * Create a ManagedDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabases(client) {
            this.client = client;
        }
        ManagedDatabases.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                options: options
            }, listByInstanceOperationSpec$7, callback);
        };
        ManagedDatabases.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, getOperationSpec$16, callback);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedDatabasesCreateOrUpdateResponse>
         */
        ManagedDatabases.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a managed database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedDatabases.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, databaseName, options) {
            return this.beginDeleteMethod(resourceGroupName, managedInstanceName, databaseName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedDatabasesUpdateResponse>
         */
        ManagedDatabases.prototype.update = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.beginUpdate(resourceGroupName, managedInstanceName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Completes the restore operation on a managed database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The definition for completing the restore of this managed database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedDatabases.prototype.completeRestore = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.beginCompleteRestore(resourceGroupName, managedInstanceName, databaseName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$t, options);
        };
        /**
         * Deletes a managed database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginDeleteMethod = function (resourceGroupName, managedInstanceName, databaseName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                options: options
            }, beginDeleteMethodOperationSpec$j, options);
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$d, options);
        };
        /**
         * Completes the restore operation on a managed database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The definition for completing the restore of this managed database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginCompleteRestore = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedInstanceName: managedInstanceName,
                databaseName: databaseName,
                parameters: parameters,
                options: options
            }, beginCompleteRestoreOperationSpec, options);
        };
        ManagedDatabases.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByInstanceNextOperationSpec$7, callback);
        };
        return ManagedDatabases;
    }());
    // Operation Specifications
    var serializer$1j = new msRest.Serializer(Mappers$1j);
    var listByInstanceOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };
    var getOperationSpec$16 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };
    var beginCreateOrUpdateOperationSpec$t = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedDatabase), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedDatabase
            },
            201: {
                bodyMapper: ManagedDatabase
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };
    var beginDeleteMethodOperationSpec$j = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };
    var beginUpdateOperationSpec$d = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ManagedDatabaseUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedDatabase
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };
    var beginCompleteRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/completeRestore",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CompleteDatabaseRestoreDefinition), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };
    var listByInstanceNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1k = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PrivateEndpointConnections. */
    var PrivateEndpointConnections = /** @class */ (function () {
        /**
         * Create a PrivateEndpointConnections.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function PrivateEndpointConnections(client) {
            this.client = client;
        }
        PrivateEndpointConnections.prototype.get = function (resourceGroupName, serverName, privateEndpointConnectionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, getOperationSpec$17, callback);
        };
        /**
         * Approve or reject a private endpoint connection with a given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param privateEndpointConnectionName
         * @param parameters
         * @param [options] The optional parameters
         * @returns Promise<Models.PrivateEndpointConnectionsCreateOrUpdateResponse>
         */
        PrivateEndpointConnections.prototype.createOrUpdate = function (resourceGroupName, serverName, privateEndpointConnectionName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serverName, privateEndpointConnectionName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a private endpoint connection with a given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param privateEndpointConnectionName
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        PrivateEndpointConnections.prototype.deleteMethod = function (resourceGroupName, serverName, privateEndpointConnectionName, options) {
            return this.beginDeleteMethod(resourceGroupName, serverName, privateEndpointConnectionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PrivateEndpointConnections.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$l, callback);
        };
        /**
         * Approve or reject a private endpoint connection with a given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param privateEndpointConnectionName
         * @param parameters
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PrivateEndpointConnections.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, privateEndpointConnectionName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$u, options);
        };
        /**
         * Deletes a private endpoint connection with a given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param privateEndpointConnectionName
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PrivateEndpointConnections.prototype.beginDeleteMethod = function (resourceGroupName, serverName, privateEndpointConnectionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, beginDeleteMethodOperationSpec$k, options);
        };
        PrivateEndpointConnections.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$d, callback);
        };
        return PrivateEndpointConnections;
    }());
    // Operation Specifications
    var serializer$1k = new msRest.Serializer(Mappers$1k);
    var getOperationSpec$17 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            privateEndpointConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1k
    };
    var listByServerOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1k
    };
    var beginCreateOrUpdateOperationSpec$u = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            privateEndpointConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, PrivateEndpointConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1k
    };
    var beginDeleteMethodOperationSpec$k = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            privateEndpointConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1k
    };
    var listByServerNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1l = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AutomaticTuningOptions: AutomaticTuningOptions,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Database: Database,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseOperation: DatabaseOperation,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        ElasticPool: ElasticPool,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        EncryptionProtector: EncryptionProtector,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstancePool: InstancePool,
        Job: Job,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStepOutput: JobStepOutput,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedBackupShortTermRetentionPolicy: ManagedBackupShortTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseRestoreDetailsResult: ManagedDatabaseRestoreDetailsResult,
        ManagedDatabaseSecurityAlertPolicy: ManagedDatabaseSecurityAlertPolicy,
        ManagedInstance: ManagedInstance,
        ManagedInstanceAdministrator: ManagedInstanceAdministrator,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        ManagedInstanceVulnerabilityAssessment: ManagedInstanceVulnerabilityAssessment,
        ManagedServerSecurityAlertPolicy: ManagedServerSecurityAlertPolicy,
        OperationImpact: OperationImpact,
        PartnerInfo: PartnerInfo,
        PartnerRegionInfo: PartnerRegionInfo,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointProperty: PrivateEndpointProperty,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceListResult: PrivateLinkResourceListResult,
        PrivateLinkResourceProperties: PrivateLinkResourceProperties,
        PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
        ProxyResource: ProxyResource,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedIndex: RecommendedIndex,
        RecoverableDatabase: RecoverableDatabase,
        RecoverableManagedDatabase: RecoverableManagedDatabase,
        ReplicationLink: ReplicationLink,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        RestorableDroppedManagedDatabase: RestorableDroppedManagedDatabase,
        RestorePoint: RestorePoint,
        SensitivityLabel: SensitivityLabel,
        Server: Server,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ServerCommunicationLink: ServerCommunicationLink,
        ServerConnectionPolicy: ServerConnectionPolicy,
        ServerDnsAlias: ServerDnsAlias,
        ServerKey: ServerKey,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerVulnerabilityAssessment: ServerVulnerabilityAssessment,
        ServiceObjective: ServiceObjective,
        ServiceTierAdvisor: ServiceTierAdvisor,
        Sku: Sku,
        SloUsageMetric: SloUsageMetric,
        SubscriptionUsage: SubscriptionUsage,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        TdeCertificate: TdeCertificate,
        TrackedResource: TrackedResource,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        VirtualCluster: VirtualCluster,
        VirtualNetworkRule: VirtualNetworkRule,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PrivateLinkResources. */
    var PrivateLinkResources = /** @class */ (function () {
        /**
         * Create a PrivateLinkResources.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function PrivateLinkResources(client) {
            this.client = client;
        }
        PrivateLinkResources.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                options: options
            }, listByServerOperationSpec$m, callback);
        };
        PrivateLinkResources.prototype.get = function (resourceGroupName, serverName, groupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serverName: serverName,
                groupName: groupName,
                options: options
            }, getOperationSpec$18, callback);
        };
        PrivateLinkResources.prototype.listByServerNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByServerNextOperationSpec$e, callback);
        };
        return PrivateLinkResources;
    }());
    // Operation Specifications
    var serializer$1l = new msRest.Serializer(Mappers$1l);
    var listByServerOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateLinkResources",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateLinkResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1l
    };
    var getOperationSpec$18 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateLinkResources/{groupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            groupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateLinkResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1l
    };
    var listByServerNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateLinkResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-sql";
    var packageVersion = "7.1.2";
    var SqlManagementClientContext = /** @class */ (function (_super) {
        __extends(SqlManagementClientContext, _super);
        /**
         * Initializes a new instance of the SqlManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function SqlManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        /**
         * NOTE: This is an override added manually to workaround bug Azure/ms-rest-js/issues/395
         * When this library is regenerated, this override needs to be brought back
         * This override adds the header "Accept: application/json" to every request
         */
        SqlManagementClientContext.prototype.sendRequest = function (options) {
            if (!options.headers) {
                options.headers = { accept: "application/json" };
            }
            else {
                if (options.headers.set) {
                    options.headers.set("accept", "application/json");
                }
                else {
                    options.headers["accept"] = "application/json";
                }
            }
            return _super.prototype.sendRequest.call(this, options);
        };
        return SqlManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SqlManagementClient = /** @class */ (function (_super) {
        __extends(SqlManagementClient, _super);
        /**
         * Initializes a new instance of the SqlManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function SqlManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.recoverableDatabases = new RecoverableDatabases(_this);
            _this.restorableDroppedDatabases = new RestorableDroppedDatabases(_this);
            _this.servers = new Servers(_this);
            _this.serverConnectionPolicies = new ServerConnectionPolicies(_this);
            _this.databaseThreatDetectionPolicies = new DatabaseThreatDetectionPolicies(_this);
            _this.dataMaskingPolicies = new DataMaskingPolicies(_this);
            _this.dataMaskingRules = new DataMaskingRules(_this);
            _this.firewallRules = new FirewallRules(_this);
            _this.geoBackupPolicies = new GeoBackupPolicies(_this);
            _this.databases = new Databases(_this);
            _this.elasticPools = new ElasticPools(_this);
            _this.recommendedElasticPools = new RecommendedElasticPools(_this);
            _this.replicationLinks = new ReplicationLinks(_this);
            _this.serverAzureADAdministrators = new ServerAzureADAdministrators(_this);
            _this.serverCommunicationLinks = new ServerCommunicationLinks(_this);
            _this.serviceObjectives = new ServiceObjectives(_this);
            _this.elasticPoolActivities = new ElasticPoolActivities(_this);
            _this.elasticPoolDatabaseActivities = new ElasticPoolDatabaseActivities(_this);
            _this.serviceTierAdvisors = new ServiceTierAdvisors(_this);
            _this.transparentDataEncryptions = new TransparentDataEncryptions(_this);
            _this.transparentDataEncryptionActivities = new TransparentDataEncryptionActivities(_this);
            _this.serverUsages = new ServerUsages(_this);
            _this.databaseUsages = new DatabaseUsages(_this);
            _this.databaseAutomaticTuning = new DatabaseAutomaticTuningOperations(_this);
            _this.encryptionProtectors = new EncryptionProtectors(_this);
            _this.failoverGroups = new FailoverGroups(_this);
            _this.operations = new Operations(_this);
            _this.serverKeys = new ServerKeys(_this);
            _this.syncAgents = new SyncAgents(_this);
            _this.syncGroups = new SyncGroups(_this);
            _this.syncMembers = new SyncMembers(_this);
            _this.subscriptionUsages = new SubscriptionUsages(_this);
            _this.virtualClusters = new VirtualClusters(_this);
            _this.virtualNetworkRules = new VirtualNetworkRules(_this);
            _this.extendedDatabaseBlobAuditingPolicies = new ExtendedDatabaseBlobAuditingPolicies(_this);
            _this.extendedServerBlobAuditingPolicies = new ExtendedServerBlobAuditingPolicies(_this);
            _this.serverBlobAuditingPolicies = new ServerBlobAuditingPolicies(_this);
            _this.databaseBlobAuditingPolicies = new DatabaseBlobAuditingPolicies(_this);
            _this.databaseVulnerabilityAssessmentRuleBaselines = new DatabaseVulnerabilityAssessmentRuleBaselines(_this);
            _this.databaseVulnerabilityAssessments = new DatabaseVulnerabilityAssessments(_this);
            _this.jobAgents = new JobAgents(_this);
            _this.jobCredentials = new JobCredentials(_this);
            _this.jobExecutions = new JobExecutions(_this);
            _this.jobs = new Jobs(_this);
            _this.jobStepExecutions = new JobStepExecutions(_this);
            _this.jobSteps = new JobSteps(_this);
            _this.jobTargetExecutions = new JobTargetExecutions(_this);
            _this.jobTargetGroups = new JobTargetGroups(_this);
            _this.jobVersions = new JobVersions(_this);
            _this.longTermRetentionBackups = new LongTermRetentionBackups(_this);
            _this.backupLongTermRetentionPolicies = new BackupLongTermRetentionPolicies(_this);
            _this.managedBackupShortTermRetentionPolicies = new ManagedBackupShortTermRetentionPolicies(_this);
            _this.managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies = new ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies(_this);
            _this.serverAutomaticTuning = new ServerAutomaticTuningOperations(_this);
            _this.serverDnsAliases = new ServerDnsAliases(_this);
            _this.serverSecurityAlertPolicies = new ServerSecurityAlertPolicies(_this);
            _this.restorableDroppedManagedDatabases = new RestorableDroppedManagedDatabases(_this);
            _this.restorePoints = new RestorePoints(_this);
            _this.managedDatabaseSecurityAlertPolicies = new ManagedDatabaseSecurityAlertPolicies(_this);
            _this.managedServerSecurityAlertPolicies = new ManagedServerSecurityAlertPolicies(_this);
            _this.sensitivityLabels = new SensitivityLabels(_this);
            _this.managedInstanceAdministrators = new ManagedInstanceAdministrators(_this);
            _this.databaseOperations = new DatabaseOperations(_this);
            _this.elasticPoolOperations = new ElasticPoolOperations(_this);
            _this.capabilities = new Capabilities(_this);
            _this.databaseVulnerabilityAssessmentScans = new DatabaseVulnerabilityAssessmentScans(_this);
            _this.managedDatabaseVulnerabilityAssessmentRuleBaselines = new ManagedDatabaseVulnerabilityAssessmentRuleBaselines(_this);
            _this.managedDatabaseVulnerabilityAssessmentScans = new ManagedDatabaseVulnerabilityAssessmentScans(_this);
            _this.managedDatabaseVulnerabilityAssessments = new ManagedDatabaseVulnerabilityAssessments(_this);
            _this.instanceFailoverGroups = new InstanceFailoverGroups(_this);
            _this.backupShortTermRetentionPolicies = new BackupShortTermRetentionPolicies(_this);
            _this.tdeCertificates = new TdeCertificates(_this);
            _this.managedInstanceTdeCertificates = new ManagedInstanceTdeCertificates(_this);
            _this.managedInstanceKeys = new ManagedInstanceKeys(_this);
            _this.managedInstanceEncryptionProtectors = new ManagedInstanceEncryptionProtectors(_this);
            _this.recoverableManagedDatabases = new RecoverableManagedDatabases(_this);
            _this.managedInstanceVulnerabilityAssessments = new ManagedInstanceVulnerabilityAssessments(_this);
            _this.serverVulnerabilityAssessments = new ServerVulnerabilityAssessments(_this);
            _this.managedDatabaseSensitivityLabels = new ManagedDatabaseSensitivityLabels(_this);
            _this.instancePools = new InstancePools(_this);
            _this.usages = new Usages(_this);
            _this.managedInstances = new ManagedInstances(_this);
            _this.managedDatabaseRestoreDetails = new ManagedDatabaseRestoreDetails(_this);
            _this.managedDatabases = new ManagedDatabases(_this);
            _this.privateEndpointConnections = new PrivateEndpointConnections(_this);
            _this.privateLinkResources = new PrivateLinkResources(_this);
            return _this;
        }
        return SqlManagementClient;
    }(SqlManagementClientContext));

    exports.BackupLongTermRetentionPolicies = BackupLongTermRetentionPolicies;
    exports.BackupShortTermRetentionPolicies = BackupShortTermRetentionPolicies;
    exports.Capabilities = Capabilities;
    exports.DataMaskingPolicies = DataMaskingPolicies;
    exports.DataMaskingRules = DataMaskingRules;
    exports.DatabaseAutomaticTuningOperations = DatabaseAutomaticTuningOperations;
    exports.DatabaseBlobAuditingPolicies = DatabaseBlobAuditingPolicies;
    exports.DatabaseOperations = DatabaseOperations;
    exports.DatabaseThreatDetectionPolicies = DatabaseThreatDetectionPolicies;
    exports.DatabaseUsages = DatabaseUsages;
    exports.DatabaseVulnerabilityAssessmentRuleBaselines = DatabaseVulnerabilityAssessmentRuleBaselines;
    exports.DatabaseVulnerabilityAssessmentScans = DatabaseVulnerabilityAssessmentScans;
    exports.DatabaseVulnerabilityAssessments = DatabaseVulnerabilityAssessments;
    exports.Databases = Databases;
    exports.ElasticPoolActivities = ElasticPoolActivities;
    exports.ElasticPoolDatabaseActivities = ElasticPoolDatabaseActivities;
    exports.ElasticPoolOperations = ElasticPoolOperations;
    exports.ElasticPools = ElasticPools;
    exports.EncryptionProtectors = EncryptionProtectors;
    exports.ExtendedDatabaseBlobAuditingPolicies = ExtendedDatabaseBlobAuditingPolicies;
    exports.ExtendedServerBlobAuditingPolicies = ExtendedServerBlobAuditingPolicies;
    exports.FailoverGroups = FailoverGroups;
    exports.FirewallRules = FirewallRules;
    exports.GeoBackupPolicies = GeoBackupPolicies;
    exports.InstanceFailoverGroups = InstanceFailoverGroups;
    exports.InstancePools = InstancePools;
    exports.JobAgents = JobAgents;
    exports.JobCredentials = JobCredentials;
    exports.JobExecutions = JobExecutions;
    exports.JobStepExecutions = JobStepExecutions;
    exports.JobSteps = JobSteps;
    exports.JobTargetExecutions = JobTargetExecutions;
    exports.JobTargetGroups = JobTargetGroups;
    exports.JobVersions = JobVersions;
    exports.Jobs = Jobs;
    exports.LongTermRetentionBackups = LongTermRetentionBackups;
    exports.ManagedBackupShortTermRetentionPolicies = ManagedBackupShortTermRetentionPolicies;
    exports.ManagedDatabaseRestoreDetails = ManagedDatabaseRestoreDetails;
    exports.ManagedDatabaseSecurityAlertPolicies = ManagedDatabaseSecurityAlertPolicies;
    exports.ManagedDatabaseSensitivityLabels = ManagedDatabaseSensitivityLabels;
    exports.ManagedDatabaseVulnerabilityAssessmentRuleBaselines = ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
    exports.ManagedDatabaseVulnerabilityAssessmentScans = ManagedDatabaseVulnerabilityAssessmentScans;
    exports.ManagedDatabaseVulnerabilityAssessments = ManagedDatabaseVulnerabilityAssessments;
    exports.ManagedDatabases = ManagedDatabases;
    exports.ManagedInstanceAdministrators = ManagedInstanceAdministrators;
    exports.ManagedInstanceEncryptionProtectors = ManagedInstanceEncryptionProtectors;
    exports.ManagedInstanceKeys = ManagedInstanceKeys;
    exports.ManagedInstanceTdeCertificates = ManagedInstanceTdeCertificates;
    exports.ManagedInstanceVulnerabilityAssessments = ManagedInstanceVulnerabilityAssessments;
    exports.ManagedInstances = ManagedInstances;
    exports.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies = ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
    exports.ManagedServerSecurityAlertPolicies = ManagedServerSecurityAlertPolicies;
    exports.Operations = Operations;
    exports.PrivateEndpointConnections = PrivateEndpointConnections;
    exports.PrivateLinkResources = PrivateLinkResources;
    exports.RecommendedElasticPools = RecommendedElasticPools;
    exports.RecoverableDatabases = RecoverableDatabases;
    exports.RecoverableManagedDatabases = RecoverableManagedDatabases;
    exports.ReplicationLinks = ReplicationLinks;
    exports.RestorableDroppedDatabases = RestorableDroppedDatabases;
    exports.RestorableDroppedManagedDatabases = RestorableDroppedManagedDatabases;
    exports.RestorePoints = RestorePoints;
    exports.SensitivityLabels = SensitivityLabels;
    exports.ServerAutomaticTuningOperations = ServerAutomaticTuningOperations;
    exports.ServerAzureADAdministrators = ServerAzureADAdministrators;
    exports.ServerBlobAuditingPolicies = ServerBlobAuditingPolicies;
    exports.ServerCommunicationLinks = ServerCommunicationLinks;
    exports.ServerConnectionPolicies = ServerConnectionPolicies;
    exports.ServerDnsAliases = ServerDnsAliases;
    exports.ServerKeys = ServerKeys;
    exports.ServerSecurityAlertPolicies = ServerSecurityAlertPolicies;
    exports.ServerUsages = ServerUsages;
    exports.ServerVulnerabilityAssessments = ServerVulnerabilityAssessments;
    exports.Servers = Servers;
    exports.ServiceObjectives = ServiceObjectives;
    exports.ServiceTierAdvisors = ServiceTierAdvisors;
    exports.SqlManagementClient = SqlManagementClient;
    exports.SqlManagementClientContext = SqlManagementClientContext;
    exports.SqlManagementMappers = mappers;
    exports.SqlManagementModels = index;
    exports.SubscriptionUsages = SubscriptionUsages;
    exports.SyncAgents = SyncAgents;
    exports.SyncGroups = SyncGroups;
    exports.SyncMembers = SyncMembers;
    exports.TdeCertificates = TdeCertificates;
    exports.TransparentDataEncryptionActivities = TransparentDataEncryptionActivities;
    exports.TransparentDataEncryptions = TransparentDataEncryptions;
    exports.Usages = Usages;
    exports.VirtualClusters = VirtualClusters;
    exports.VirtualNetworkRules = VirtualNetworkRules;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-sql.js.map
