import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { SqlManagementClientContext } from "../sqlManagementClientContext";
/** Class representing a SubscriptionUsages. */
export declare class SubscriptionUsages {
    private readonly client;
    /**
     * Create a SubscriptionUsages.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    constructor(client: SqlManagementClientContext);
    /**
     * Gets all subscription usage metrics in a given location.
     * @param locationName The name of the region where the resource is located.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionUsagesListByLocationResponse>
     */
    listByLocation(locationName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionUsagesListByLocationResponse>;
    /**
     * @param locationName The name of the region where the resource is located.
     * @param callback The callback
     */
    listByLocation(locationName: string, callback: msRest.ServiceCallback<Models.SubscriptionUsageListResult>): void;
    /**
     * @param locationName The name of the region where the resource is located.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByLocation(locationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionUsageListResult>): void;
    /**
     * Gets a subscription usage metric.
     * @param locationName The name of the region where the resource is located.
     * @param usageName Name of usage metric to return.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionUsagesGetResponse>
     */
    get(locationName: string, usageName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionUsagesGetResponse>;
    /**
     * @param locationName The name of the region where the resource is located.
     * @param usageName Name of usage metric to return.
     * @param callback The callback
     */
    get(locationName: string, usageName: string, callback: msRest.ServiceCallback<Models.SubscriptionUsage>): void;
    /**
     * @param locationName The name of the region where the resource is located.
     * @param usageName Name of usage metric to return.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(locationName: string, usageName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionUsage>): void;
    /**
     * Gets all subscription usage metrics in a given location.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionUsagesListByLocationNextResponse>
     */
    listByLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionUsagesListByLocationNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionUsageListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByLocationNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionUsageListResult>): void;
}
//# sourceMappingURL=subscriptionUsages.d.ts.map