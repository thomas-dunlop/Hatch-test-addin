import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { SqlManagementClientContext } from "../sqlManagementClientContext";
/** Class representing a ServerConnectionPolicies. */
export declare class ServerConnectionPolicies {
    private readonly client;
    /**
     * Create a ServerConnectionPolicies.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    constructor(client: SqlManagementClientContext);
    /**
     * Creates or updates the server's connection policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a secure connection policy.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServerConnectionPoliciesCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: Models.ServerConnectionPolicy, options?: msRest.RequestOptionsBase): Promise<Models.ServerConnectionPoliciesCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a secure connection policy.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: Models.ServerConnectionPolicy, callback: msRest.ServiceCallback<Models.ServerConnectionPolicy>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a secure connection policy.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: Models.ServerConnectionPolicy, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerConnectionPolicy>): void;
    /**
     * Gets the server's secure connection policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServerConnectionPoliciesGetResponse>
     */
    get(resourceGroupName: string, serverName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerConnectionPoliciesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param callback The callback
     */
    get(resourceGroupName: string, serverName: string, callback: msRest.ServiceCallback<Models.ServerConnectionPolicy>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serverName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerConnectionPolicy>): void;
}
//# sourceMappingURL=serverConnectionPolicies.d.ts.map