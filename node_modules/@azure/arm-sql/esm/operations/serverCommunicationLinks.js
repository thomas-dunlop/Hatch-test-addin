/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/serverCommunicationLinksMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ServerCommunicationLinks. */
var ServerCommunicationLinks = /** @class */ (function () {
    /**
     * Create a ServerCommunicationLinks.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function ServerCommunicationLinks(client) {
        this.client = client;
    }
    ServerCommunicationLinks.prototype.deleteMethod = function (resourceGroupName, serverName, communicationLinkName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            communicationLinkName: communicationLinkName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    ServerCommunicationLinks.prototype.get = function (resourceGroupName, serverName, communicationLinkName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            communicationLinkName: communicationLinkName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates a server communication link.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param communicationLinkName The name of the server communication link.
     * @param parameters The required parameters for creating a server communication link.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServerCommunicationLinksCreateOrUpdateResponse>
     */
    ServerCommunicationLinks.prototype.createOrUpdate = function (resourceGroupName, serverName, communicationLinkName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serverName, communicationLinkName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ServerCommunicationLinks.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            options: options
        }, listByServerOperationSpec, callback);
    };
    /**
     * Creates a server communication link.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param communicationLinkName The name of the server communication link.
     * @param parameters The required parameters for creating a server communication link.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ServerCommunicationLinks.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, communicationLinkName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            communicationLinkName: communicationLinkName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    return ServerCommunicationLinks;
}());
export { ServerCommunicationLinks };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.communicationLinkName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.communicationLinkName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServerCommunicationLink
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByServerOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServerCommunicationLinkListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.communicationLinkName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ServerCommunicationLink), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ServerCommunicationLink
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=serverCommunicationLinks.js.map