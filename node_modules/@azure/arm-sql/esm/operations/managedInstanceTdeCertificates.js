/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/managedInstanceTdeCertificatesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ManagedInstanceTdeCertificates. */
var ManagedInstanceTdeCertificates = /** @class */ (function () {
    /**
     * Create a ManagedInstanceTdeCertificates.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function ManagedInstanceTdeCertificates(client) {
        this.client = client;
    }
    /**
     * Creates a TDE certificate for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param parameters The requested TDE certificate to be created or updated.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    ManagedInstanceTdeCertificates.prototype.create = function (resourceGroupName, managedInstanceName, parameters, options) {
        return this.beginCreate(resourceGroupName, managedInstanceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates a TDE certificate for a given server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param parameters The requested TDE certificate to be created or updated.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ManagedInstanceTdeCertificates.prototype.beginCreate = function (resourceGroupName, managedInstanceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    return ManagedInstanceTdeCertificates;
}());
export { ManagedInstanceTdeCertificates };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var beginCreateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/tdeCertificates",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.TdeCertificate), { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=managedInstanceTdeCertificates.js.map