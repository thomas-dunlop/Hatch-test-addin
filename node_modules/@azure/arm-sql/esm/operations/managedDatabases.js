/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/managedDatabasesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ManagedDatabases. */
var ManagedDatabases = /** @class */ (function () {
    /**
     * Create a ManagedDatabases.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function ManagedDatabases(client) {
        this.client = client;
    }
    ManagedDatabases.prototype.listByInstance = function (resourceGroupName, managedInstanceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            options: options
        }, listByInstanceOperationSpec, callback);
    };
    ManagedDatabases.prototype.get = function (resourceGroupName, managedInstanceName, databaseName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            databaseName: databaseName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagedDatabasesCreateOrUpdateResponse>
     */
    ManagedDatabases.prototype.createOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    ManagedDatabases.prototype.deleteMethod = function (resourceGroupName, managedInstanceName, databaseName, options) {
        return this.beginDeleteMethod(resourceGroupName, managedInstanceName, databaseName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<Models.ManagedDatabasesUpdateResponse>
     */
    ManagedDatabases.prototype.update = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
        return this.beginUpdate(resourceGroupName, managedInstanceName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Completes the restore operation on a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param parameters The definition for completing the restore of this managed database.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    ManagedDatabases.prototype.completeRestore = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
        return this.beginCompleteRestore(resourceGroupName, managedInstanceName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ManagedDatabases.prototype.beginCreateOrUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ManagedDatabases.prototype.beginDeleteMethod = function (resourceGroupName, managedInstanceName, databaseName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            databaseName: databaseName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ManagedDatabases.prototype.beginUpdate = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Completes the restore operation on a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param managedInstanceName The name of the managed instance.
     * @param databaseName The name of the database.
     * @param parameters The definition for completing the restore of this managed database.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ManagedDatabases.prototype.beginCompleteRestore = function (resourceGroupName, managedInstanceName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedInstanceName: managedInstanceName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginCompleteRestoreOperationSpec, options);
    };
    ManagedDatabases.prototype.listByInstanceNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByInstanceNextOperationSpec, callback);
    };
    return ManagedDatabases;
}());
export { ManagedDatabases };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByInstanceOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ManagedDatabaseListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ManagedDatabase
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ManagedDatabase), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ManagedDatabase
        },
        201: {
            bodyMapper: Mappers.ManagedDatabase
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ManagedDatabaseUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ManagedDatabase
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCompleteRestoreOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/completeRestore",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.managedInstanceName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.CompleteDatabaseRestoreDefinition), { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByInstanceNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ManagedDatabaseListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=managedDatabases.js.map