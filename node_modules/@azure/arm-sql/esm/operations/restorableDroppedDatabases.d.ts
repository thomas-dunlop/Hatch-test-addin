import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { SqlManagementClientContext } from "../sqlManagementClientContext";
/** Class representing a RestorableDroppedDatabases. */
export declare class RestorableDroppedDatabases {
    private readonly client;
    /**
     * Create a RestorableDroppedDatabases.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    constructor(client: SqlManagementClientContext);
    /**
     * Gets a deleted database that can be restored
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param restorableDroppededDatabaseId The id of the deleted database in the form of
     * databaseName,deletionTimeInFileTimeFormat
     * @param [options] The optional parameters
     * @returns Promise<Models.RestorableDroppedDatabasesGetResponse>
     */
    get(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, options?: msRest.RequestOptionsBase): Promise<Models.RestorableDroppedDatabasesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param restorableDroppededDatabaseId The id of the deleted database in the form of
     * databaseName,deletionTimeInFileTimeFormat
     * @param callback The callback
     */
    get(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, callback: msRest.ServiceCallback<Models.RestorableDroppedDatabase>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param restorableDroppededDatabaseId The id of the deleted database in the form of
     * databaseName,deletionTimeInFileTimeFormat
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestorableDroppedDatabase>): void;
    /**
     * Gets a list of deleted databases that can be restored
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param [options] The optional parameters
     * @returns Promise<Models.RestorableDroppedDatabasesListByServerResponse>
     */
    listByServer(resourceGroupName: string, serverName: string, options?: msRest.RequestOptionsBase): Promise<Models.RestorableDroppedDatabasesListByServerResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param callback The callback
     */
    listByServer(resourceGroupName: string, serverName: string, callback: msRest.ServiceCallback<Models.RestorableDroppedDatabaseListResult>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServer(resourceGroupName: string, serverName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestorableDroppedDatabaseListResult>): void;
}
//# sourceMappingURL=restorableDroppedDatabases.d.ts.map