/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/syncMembersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a SyncMembers. */
var SyncMembers = /** @class */ (function () {
    /**
     * Create a SyncMembers.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function SyncMembers(client) {
        this.client = client;
    }
    SyncMembers.prototype.get = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            syncMemberName: syncMemberName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates or updates a sync member.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param parameters The requested sync member resource state.
     * @param [options] The optional parameters
     * @returns Promise<Models.SyncMembersCreateOrUpdateResponse>
     */
    SyncMembers.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a sync member.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    SyncMembers.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
        return this.beginDeleteMethod(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates an existing sync member.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param parameters The requested sync member resource state.
     * @param [options] The optional parameters
     * @returns Promise<Models.SyncMembersUpdateResponse>
     */
    SyncMembers.prototype.update = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
        return this.beginUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    SyncMembers.prototype.listBySyncGroup = function (resourceGroupName, serverName, databaseName, syncGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            options: options
        }, listBySyncGroupOperationSpec, callback);
    };
    SyncMembers.prototype.listMemberSchemas = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            syncMemberName: syncMemberName,
            options: options
        }, listMemberSchemasOperationSpec, callback);
    };
    /**
     * Refreshes a sync member database schema.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    SyncMembers.prototype.refreshMemberSchema = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
        return this.beginRefreshMemberSchema(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates or updates a sync member.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param parameters The requested sync member resource state.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SyncMembers.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            syncMemberName: syncMemberName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes a sync member.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SyncMembers.prototype.beginDeleteMethod = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            syncMemberName: syncMemberName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Updates an existing sync member.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param parameters The requested sync member resource state.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SyncMembers.prototype.beginUpdate = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            syncMemberName: syncMemberName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Refreshes a sync member database schema.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database on which the sync group is hosted.
     * @param syncGroupName The name of the sync group on which the sync member is hosted.
     * @param syncMemberName The name of the sync member.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SyncMembers.prototype.beginRefreshMemberSchema = function (resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            syncGroupName: syncGroupName,
            syncMemberName: syncMemberName,
            options: options
        }, beginRefreshMemberSchemaOperationSpec, options);
    };
    SyncMembers.prototype.listBySyncGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySyncGroupNextOperationSpec, callback);
    };
    SyncMembers.prototype.listMemberSchemasNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMemberSchemasNextOperationSpec, callback);
    };
    return SyncMembers;
}());
export { SyncMembers };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.syncMemberName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SyncMember
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySyncGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SyncMemberListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listMemberSchemasOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/schemas",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.syncMemberName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SyncFullSchemaPropertiesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.syncMemberName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.SyncMember), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SyncMember
        },
        201: {
            bodyMapper: Mappers.SyncMember
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.syncMemberName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.syncMemberName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.SyncMember), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SyncMember
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRefreshMemberSchemaOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/refreshSchema",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.syncGroupName,
        Parameters.syncMemberName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySyncGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SyncMemberListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listMemberSchemasNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SyncFullSchemaPropertiesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=syncMembers.js.map