/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/extendedDatabaseBlobAuditingPoliciesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ExtendedDatabaseBlobAuditingPolicies. */
var ExtendedDatabaseBlobAuditingPolicies = /** @class */ (function () {
    /**
     * Create a ExtendedDatabaseBlobAuditingPolicies.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function ExtendedDatabaseBlobAuditingPolicies(client) {
        this.client = client;
    }
    ExtendedDatabaseBlobAuditingPolicies.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, getOperationSpec, callback);
    };
    ExtendedDatabaseBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    return ExtendedDatabaseBlobAuditingPolicies;
}());
export { ExtendedDatabaseBlobAuditingPolicies };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.blobAuditingPolicyName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ExtendedDatabaseBlobAuditingPolicy
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.blobAuditingPolicyName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ExtendedDatabaseBlobAuditingPolicy), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ExtendedDatabaseBlobAuditingPolicy
        },
        201: {
            bodyMapper: Mappers.ExtendedDatabaseBlobAuditingPolicy
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=extendedDatabaseBlobAuditingPolicies.js.map