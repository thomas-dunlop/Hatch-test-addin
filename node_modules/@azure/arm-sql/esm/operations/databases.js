/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/databasesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Databases. */
var Databases = /** @class */ (function () {
    /**
     * Create a Databases.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function Databases(client) {
        this.client = client;
    }
    /**
     * Imports a bacpac into a new database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesImportMethodResponse>
     */
    Databases.prototype.importMethod = function (resourceGroupName, serverName, parameters, options) {
        return this.beginImportMethod(resourceGroupName, serverName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates an import operation that imports a bacpac into an existing database. The existing
     * database must be empty.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to import into
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesCreateImportOperationResponse>
     */
    Databases.prototype.createImportOperation = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.beginCreateImportOperation(resourceGroupName, serverName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Exports a database to a bacpac.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be exported.
     * @param parameters The required parameters for exporting a database.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesExportMethodResponse>
     */
    Databases.prototype.exportMethod = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.beginExportMethod(resourceGroupName, serverName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Databases.prototype.listMetrics = function (resourceGroupName, serverName, databaseName, filter, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            filter: filter,
            options: options
        }, listMetricsOperationSpec, callback);
    };
    Databases.prototype.listMetricDefinitions = function (resourceGroupName, serverName, databaseName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, listMetricDefinitionsOperationSpec, callback);
    };
    Databases.prototype.listByServer = function (resourceGroupName, serverName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            options: options
        }, listByServerOperationSpec, callback);
    };
    Databases.prototype.get = function (resourceGroupName, serverName, databaseName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesCreateOrUpdateResponse>
     */
    Databases.prototype.createOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serverName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes the database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Databases.prototype.deleteMethod = function (resourceGroupName, serverName, databaseName, options) {
        return this.beginDeleteMethod(resourceGroupName, serverName, databaseName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesUpdateResponse>
     */
    Databases.prototype.update = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.beginUpdate(resourceGroupName, serverName, databaseName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Databases.prototype.listByElasticPool = function (resourceGroupName, serverName, elasticPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            elasticPoolName: elasticPoolName,
            options: options
        }, listByElasticPoolOperationSpec, callback);
    };
    /**
     * Pauses a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be paused.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesPauseResponse>
     */
    Databases.prototype.pause = function (resourceGroupName, serverName, databaseName, options) {
        return this.beginPause(resourceGroupName, serverName, databaseName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Resumes a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be resumed.
     * @param [options] The optional parameters
     * @returns Promise<Models.DatabasesResumeResponse>
     */
    Databases.prototype.resume = function (resourceGroupName, serverName, databaseName, options) {
        return this.beginResume(resourceGroupName, serverName, databaseName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Upgrades a data warehouse.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be upgraded.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Databases.prototype.upgradeDataWarehouse = function (resourceGroupName, serverName, databaseName, options) {
        return this.beginUpgradeDataWarehouse(resourceGroupName, serverName, databaseName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Databases.prototype.rename = function (resourceGroupName, serverName, databaseName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, renameOperationSpec, callback);
    };
    /**
     * Failovers a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to failover.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Databases.prototype.failover = function (resourceGroupName, serverName, databaseName, options) {
        return this.beginFailover(resourceGroupName, serverName, databaseName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Imports a bacpac into a new database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginImportMethod = function (resourceGroupName, serverName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            parameters: parameters,
            options: options
        }, beginImportMethodOperationSpec, options);
    };
    /**
     * Creates an import operation that imports a bacpac into an existing database. The existing
     * database must be empty.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to import into
     * @param parameters The required parameters for importing a Bacpac into a database.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginCreateImportOperation = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginCreateImportOperationOperationSpec, options);
    };
    /**
     * Exports a database to a bacpac.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be exported.
     * @param parameters The required parameters for exporting a database.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginExportMethod = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginExportMethodOperationSpec, options);
    };
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginCreateOrUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes the database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginDeleteMethod = function (resourceGroupName, serverName, databaseName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Updates an existing database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The requested database resource state.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginUpdate = function (resourceGroupName, serverName, databaseName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Pauses a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be paused.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginPause = function (resourceGroupName, serverName, databaseName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, beginPauseOperationSpec, options);
    };
    /**
     * Resumes a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be resumed.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginResume = function (resourceGroupName, serverName, databaseName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, beginResumeOperationSpec, options);
    };
    /**
     * Upgrades a data warehouse.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to be upgraded.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginUpgradeDataWarehouse = function (resourceGroupName, serverName, databaseName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, beginUpgradeDataWarehouseOperationSpec, options);
    };
    /**
     * Failovers a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database to failover.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Databases.prototype.beginFailover = function (resourceGroupName, serverName, databaseName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serverName: serverName,
            databaseName: databaseName,
            options: options
        }, beginFailoverOperationSpec, options);
    };
    Databases.prototype.listByServerNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByServerNextOperationSpec, callback);
    };
    Databases.prototype.listByElasticPoolNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByElasticPoolNextOperationSpec, callback);
    };
    return Databases;
}());
export { Databases };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metrics",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName
    ],
    queryParameters: [
        Parameters.apiVersion0,
        Parameters.filter0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MetricListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metricDefinitions",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MetricDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByServerOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DatabaseListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Database
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByElasticPoolOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.elasticPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DatabaseListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var renameOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ResourceMoveDefinition), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginImportMethodOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ImportRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImportExportResponse
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateImportOperationOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.extensionName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ImportExtensionRequest), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ImportExportResponse
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginExportMethodOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ExportRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImportExportResponse
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Database), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Database
        },
        201: {
            bodyMapper: Mappers.Database
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DatabaseUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Database
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPauseOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Database
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginResumeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Database
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpgradeDataWarehouseOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginFailoverOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/failover",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.replicaType,
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByServerNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DatabaseListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByElasticPoolNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DatabaseListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=databases.js.map