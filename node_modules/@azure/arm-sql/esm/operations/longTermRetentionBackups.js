/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/longTermRetentionBackupsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a LongTermRetentionBackups. */
var LongTermRetentionBackups = /** @class */ (function () {
    /**
     * Create a LongTermRetentionBackups.
     * @param {SqlManagementClientContext} client Reference to the service client.
     */
    function LongTermRetentionBackups(client) {
        this.client = client;
    }
    LongTermRetentionBackups.prototype.getByResourceGroup = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            longTermRetentionDatabaseName: longTermRetentionDatabaseName,
            backupName: backupName,
            options: options
        }, getByResourceGroupOperationSpec, callback);
    };
    /**
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    LongTermRetentionBackups.prototype.deleteByResourceGroup = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return this.beginDeleteByResourceGroup(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    LongTermRetentionBackups.prototype.listByResourceGroupDatabase = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            longTermRetentionDatabaseName: longTermRetentionDatabaseName,
            options: options
        }, listByResourceGroupDatabaseOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByResourceGroupLocation = function (resourceGroupName, locationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            locationName: locationName,
            options: options
        }, listByResourceGroupLocationOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByResourceGroupServer = function (resourceGroupName, locationName, longTermRetentionServerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            options: options
        }, listByResourceGroupServerOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.get = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options, callback) {
        return this.client.sendOperationRequest({
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            longTermRetentionDatabaseName: longTermRetentionDatabaseName,
            backupName: backupName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deletes a long term retention backup.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    LongTermRetentionBackups.prototype.deleteMethod = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return this.beginDeleteMethod(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    LongTermRetentionBackups.prototype.listByDatabase = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, options, callback) {
        return this.client.sendOperationRequest({
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            longTermRetentionDatabaseName: longTermRetentionDatabaseName,
            options: options
        }, listByDatabaseOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByLocation = function (locationName, options, callback) {
        return this.client.sendOperationRequest({
            locationName: locationName,
            options: options
        }, listByLocationOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByServer = function (locationName, longTermRetentionServerName, options, callback) {
        return this.client.sendOperationRequest({
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            options: options
        }, listByServerOperationSpec, callback);
    };
    /**
     * Deletes a long term retention backup.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    LongTermRetentionBackups.prototype.beginDeleteByResourceGroup = function (resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            longTermRetentionDatabaseName: longTermRetentionDatabaseName,
            backupName: backupName,
            options: options
        }, beginDeleteByResourceGroupOperationSpec, options);
    };
    /**
     * Deletes a long term retention backup.
     * @param locationName The location of the database
     * @param longTermRetentionServerName The name of the server
     * @param longTermRetentionDatabaseName The name of the database
     * @param backupName The backup name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    LongTermRetentionBackups.prototype.beginDeleteMethod = function (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, options) {
        return this.client.sendLRORequest({
            locationName: locationName,
            longTermRetentionServerName: longTermRetentionServerName,
            longTermRetentionDatabaseName: longTermRetentionDatabaseName,
            backupName: backupName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    LongTermRetentionBackups.prototype.listByResourceGroupDatabaseNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupDatabaseNextOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByResourceGroupLocationNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupLocationNextOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByResourceGroupServerNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupServerNextOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByDatabaseNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByDatabaseNextOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByLocationNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByLocationNextOperationSpec, callback);
    };
    LongTermRetentionBackups.prototype.listByServerNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByServerNextOperationSpec, callback);
    };
    return LongTermRetentionBackups;
}());
export { LongTermRetentionBackups };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupDatabaseOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState,
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupLocationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState,
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupServerOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState,
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    urlParameters: [
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByDatabaseOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
    urlParameters: [
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState,
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByLocationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
    urlParameters: [
        Parameters.locationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState,
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByServerOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
    urlParameters: [
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.onlyLatestPerDatabase,
        Parameters.databaseState,
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteByResourceGroupOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
    urlParameters: [
        Parameters.locationName,
        Parameters.longTermRetentionServerName,
        Parameters.longTermRetentionDatabaseName,
        Parameters.backupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupDatabaseNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupLocationNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupServerNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByDatabaseNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByLocationNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByServerNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LongTermRetentionBackupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=longTermRetentionBackups.js.map