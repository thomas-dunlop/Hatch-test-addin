import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SqlManagementClientContext } from "./sqlManagementClientContext";
declare class SqlManagementClient extends SqlManagementClientContext {
    recoverableDatabases: operations.RecoverableDatabases;
    restorableDroppedDatabases: operations.RestorableDroppedDatabases;
    servers: operations.Servers;
    serverConnectionPolicies: operations.ServerConnectionPolicies;
    databaseThreatDetectionPolicies: operations.DatabaseThreatDetectionPolicies;
    dataMaskingPolicies: operations.DataMaskingPolicies;
    dataMaskingRules: operations.DataMaskingRules;
    firewallRules: operations.FirewallRules;
    geoBackupPolicies: operations.GeoBackupPolicies;
    databases: operations.Databases;
    elasticPools: operations.ElasticPools;
    recommendedElasticPools: operations.RecommendedElasticPools;
    replicationLinks: operations.ReplicationLinks;
    serverAzureADAdministrators: operations.ServerAzureADAdministrators;
    serverCommunicationLinks: operations.ServerCommunicationLinks;
    serviceObjectives: operations.ServiceObjectives;
    elasticPoolActivities: operations.ElasticPoolActivities;
    elasticPoolDatabaseActivities: operations.ElasticPoolDatabaseActivities;
    serviceTierAdvisors: operations.ServiceTierAdvisors;
    transparentDataEncryptions: operations.TransparentDataEncryptions;
    transparentDataEncryptionActivities: operations.TransparentDataEncryptionActivities;
    serverUsages: operations.ServerUsages;
    databaseUsages: operations.DatabaseUsages;
    databaseAutomaticTuning: operations.DatabaseAutomaticTuningOperations;
    encryptionProtectors: operations.EncryptionProtectors;
    failoverGroups: operations.FailoverGroups;
    operations: operations.Operations;
    serverKeys: operations.ServerKeys;
    syncAgents: operations.SyncAgents;
    syncGroups: operations.SyncGroups;
    syncMembers: operations.SyncMembers;
    subscriptionUsages: operations.SubscriptionUsages;
    virtualClusters: operations.VirtualClusters;
    virtualNetworkRules: operations.VirtualNetworkRules;
    extendedDatabaseBlobAuditingPolicies: operations.ExtendedDatabaseBlobAuditingPolicies;
    extendedServerBlobAuditingPolicies: operations.ExtendedServerBlobAuditingPolicies;
    serverBlobAuditingPolicies: operations.ServerBlobAuditingPolicies;
    databaseBlobAuditingPolicies: operations.DatabaseBlobAuditingPolicies;
    databaseVulnerabilityAssessmentRuleBaselines: operations.DatabaseVulnerabilityAssessmentRuleBaselines;
    databaseVulnerabilityAssessments: operations.DatabaseVulnerabilityAssessments;
    jobAgents: operations.JobAgents;
    jobCredentials: operations.JobCredentials;
    jobExecutions: operations.JobExecutions;
    jobs: operations.Jobs;
    jobStepExecutions: operations.JobStepExecutions;
    jobSteps: operations.JobSteps;
    jobTargetExecutions: operations.JobTargetExecutions;
    jobTargetGroups: operations.JobTargetGroups;
    jobVersions: operations.JobVersions;
    longTermRetentionBackups: operations.LongTermRetentionBackups;
    backupLongTermRetentionPolicies: operations.BackupLongTermRetentionPolicies;
    managedBackupShortTermRetentionPolicies: operations.ManagedBackupShortTermRetentionPolicies;
    managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies: operations.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
    serverAutomaticTuning: operations.ServerAutomaticTuningOperations;
    serverDnsAliases: operations.ServerDnsAliases;
    serverSecurityAlertPolicies: operations.ServerSecurityAlertPolicies;
    restorableDroppedManagedDatabases: operations.RestorableDroppedManagedDatabases;
    restorePoints: operations.RestorePoints;
    managedDatabaseSecurityAlertPolicies: operations.ManagedDatabaseSecurityAlertPolicies;
    managedServerSecurityAlertPolicies: operations.ManagedServerSecurityAlertPolicies;
    sensitivityLabels: operations.SensitivityLabels;
    managedInstanceAdministrators: operations.ManagedInstanceAdministrators;
    databaseOperations: operations.DatabaseOperations;
    elasticPoolOperations: operations.ElasticPoolOperations;
    capabilities: operations.Capabilities;
    databaseVulnerabilityAssessmentScans: operations.DatabaseVulnerabilityAssessmentScans;
    managedDatabaseVulnerabilityAssessmentRuleBaselines: operations.ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
    managedDatabaseVulnerabilityAssessmentScans: operations.ManagedDatabaseVulnerabilityAssessmentScans;
    managedDatabaseVulnerabilityAssessments: operations.ManagedDatabaseVulnerabilityAssessments;
    instanceFailoverGroups: operations.InstanceFailoverGroups;
    backupShortTermRetentionPolicies: operations.BackupShortTermRetentionPolicies;
    tdeCertificates: operations.TdeCertificates;
    managedInstanceTdeCertificates: operations.ManagedInstanceTdeCertificates;
    managedInstanceKeys: operations.ManagedInstanceKeys;
    managedInstanceEncryptionProtectors: operations.ManagedInstanceEncryptionProtectors;
    recoverableManagedDatabases: operations.RecoverableManagedDatabases;
    managedInstanceVulnerabilityAssessments: operations.ManagedInstanceVulnerabilityAssessments;
    serverVulnerabilityAssessments: operations.ServerVulnerabilityAssessments;
    managedDatabaseSensitivityLabels: operations.ManagedDatabaseSensitivityLabels;
    instancePools: operations.InstancePools;
    usages: operations.Usages;
    managedInstances: operations.ManagedInstances;
    managedDatabaseRestoreDetails: operations.ManagedDatabaseRestoreDetails;
    managedDatabases: operations.ManagedDatabases;
    privateEndpointConnections: operations.PrivateEndpointConnections;
    privateLinkResources: operations.PrivateLinkResources;
    /**
     * Initializes a new instance of the SqlManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure. Credentials
     * implementing the TokenCredential interface from the @azure/identity package are recommended. For
     * more information about these credentials, see
     * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
     * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
     * @azure/ms-rest-browserauth are also supported.
     * @param subscriptionId The subscription ID that identifies an Azure subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.SqlManagementClientOptions);
}
export { SqlManagementClient, SqlManagementClientContext, Models as SqlManagementModels, Mappers as SqlManagementMappers };
export * from "./operations";
//# sourceMappingURL=sqlManagementClient.d.ts.map