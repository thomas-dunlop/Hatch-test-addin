import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";
/** Class representing a TagsOperations. */
export declare class TagsOperations {
    private readonly client;
    /**
     * Create a TagsOperations.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    constructor(client: ResourceManagementClientContext);
    /**
     * This operation allows deleting a value from the list of predefined values for an existing
     * predefined tag name. The value being deleted must not be in use as a tag value for the given tag
     * name for any resource.
     * @summary Deletes a predefined tag value for a predefined tag name.
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteValue(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param callback The callback
     */
    deleteValue(tagName: string, tagValue: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This operation allows adding a value to the list of predefined values for an existing predefined
     * tag name. A tag value can have a maximum of 256 characters.
     * @summary Creates a predefined value for a predefined tag name.
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsCreateOrUpdateValueResponse>
     */
    createOrUpdateValue(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateValueResponse>;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param callback The callback
     */
    createOrUpdateValue(tagName: string, tagValue: string, callback: msRest.ServiceCallback<Models.TagValue>): void;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagValue>): void;
    /**
     * This operation allows adding a name to the list of predefined tag names for the given
     * subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names
     * cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure',
     * 'windows'.
     * @summary Creates a predefined tag name.
     * @param tagName The name of the tag to create.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsCreateOrUpdateResponse>
     */
    createOrUpdate(tagName: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateResponse>;
    /**
     * @param tagName The name of the tag to create.
     * @param callback The callback
     */
    createOrUpdate(tagName: string, callback: msRest.ServiceCallback<Models.TagDetails>): void;
    /**
     * @param tagName The name of the tag to create.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(tagName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagDetails>): void;
    /**
     * This operation allows deleting a name from the list of predefined tag names for the given
     * subscription. The name being deleted must not be in use as a tag name for any resource. All
     * predefined values for the given name must have already been deleted.
     * @summary Deletes a predefined tag name.
     * @param tagName The name of the tag.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(tagName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tagName The name of the tag.
     * @param callback The callback
     */
    deleteMethod(tagName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tagName The name of the tag.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(tagName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This operation performs a union of predefined tags, resource tags, resource group tags and
     * subscription tags, and returns a summary of usage for each tag name and value under the given
     * subscription. In case of a large number of tags, this operation may return a previously cached
     * result.
     * @summary Gets a summary of tag usage under the subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.TagsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.TagsListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsListResult>): void;
    /**
     * This operation allows adding or replacing the entire set of tags on the specified resource or
     * subscription. The specified entity can have a maximum of 50 tags.
     * @summary Creates or updates the entire set of tags on a resource or subscription.
     * @param scope The resource scope.
     * @param parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsCreateOrUpdateAtScopeResponse>
     */
    createOrUpdateAtScope(scope: string, parameters: Models.TagsResource, options?: msRest.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateAtScopeResponse>;
    /**
     * @param scope The resource scope.
     * @param parameters
     * @param callback The callback
     */
    createOrUpdateAtScope(scope: string, parameters: Models.TagsResource, callback: msRest.ServiceCallback<Models.TagsResource>): void;
    /**
     * @param scope The resource scope.
     * @param parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateAtScope(scope: string, parameters: Models.TagsResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsResource>): void;
    /**
     * This operation allows replacing, merging or selectively deleting tags on the specified resource
     * or subscription. The specified entity can have a maximum of 50 tags at the end of the operation.
     * The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option
     * allows adding tags with new names and updating the values of tags with existing names. The
     * 'delete' option allows selectively deleting tags based on given names or name/value pairs.
     * @summary Selectively updates the set of tags on a resource or subscription.
     * @param scope The resource scope.
     * @param parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsUpdateAtScopeResponse>
     */
    updateAtScope(scope: string, parameters: Models.TagsPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.TagsUpdateAtScopeResponse>;
    /**
     * @param scope The resource scope.
     * @param parameters
     * @param callback The callback
     */
    updateAtScope(scope: string, parameters: Models.TagsPatchResource, callback: msRest.ServiceCallback<Models.TagsResource>): void;
    /**
     * @param scope The resource scope.
     * @param parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    updateAtScope(scope: string, parameters: Models.TagsPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsResource>): void;
    /**
     * @summary Gets the entire set of tags on a resource or subscription.
     * @param scope The resource scope.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsGetAtScopeResponse>
     */
    getAtScope(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsGetAtScopeResponse>;
    /**
     * @param scope The resource scope.
     * @param callback The callback
     */
    getAtScope(scope: string, callback: msRest.ServiceCallback<Models.TagsResource>): void;
    /**
     * @param scope The resource scope.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAtScope(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsResource>): void;
    /**
     * @summary Deletes the entire set of tags on a resource or subscription.
     * @param scope The resource scope.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteAtScope(scope: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param scope The resource scope.
     * @param callback The callback
     */
    deleteAtScope(scope: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param scope The resource scope.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteAtScope(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This operation performs a union of predefined tags, resource tags, resource group tags and
     * subscription tags, and returns a summary of usage for each tag name and value under the given
     * subscription. In case of a large number of tags, this operation may return a previously cached
     * result.
     * @summary Gets a summary of tag usage under the subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TagsListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsListResult>): void;
}
//# sourceMappingURL=tagsOperations.d.ts.map