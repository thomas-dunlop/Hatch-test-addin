/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmResources = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var DeploymentExtendedFilter = {
        serializedName: "DeploymentExtendedFilter",
        type: {
            name: "Composite",
            className: "DeploymentExtendedFilter",
            modelProperties: {
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenericResourceFilter = {
        serializedName: "GenericResourceFilter",
        type: {
            name: "Composite",
            className: "GenericResourceFilter",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                tagname: {
                    serializedName: "tagname",
                    type: {
                        name: "String"
                    }
                },
                tagvalue: {
                    serializedName: "tagvalue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroupFilter = {
        serializedName: "ResourceGroupFilter",
        type: {
            name: "Composite",
            className: "ResourceGroupFilter",
            modelProperties: {
                tagName: {
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                tagValue: {
                    serializedName: "tagValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TemplateLink = {
        serializedName: "TemplateLink",
        type: {
            name: "Composite",
            className: "TemplateLink",
            modelProperties: {
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                relativePath: {
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                },
                contentVersion: {
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                },
                queryString: {
                    serializedName: "queryString",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ParametersLink = {
        serializedName: "ParametersLink",
        type: {
            name: "Composite",
            className: "ParametersLink",
            modelProperties: {
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                contentVersion: {
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DebugSetting = {
        serializedName: "DebugSetting",
        type: {
            name: "Composite",
            className: "DebugSetting",
            modelProperties: {
                detailLevel: {
                    serializedName: "detailLevel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OnErrorDeployment = {
        serializedName: "OnErrorDeployment",
        type: {
            name: "Composite",
            className: "OnErrorDeployment",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: ["LastSuccessful", "SpecificDeployment"]
                    }
                },
                deploymentName: {
                    serializedName: "deploymentName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressionEvaluationOptions = {
        serializedName: "ExpressionEvaluationOptions",
        type: {
            name: "Composite",
            className: "ExpressionEvaluationOptions",
            modelProperties: {
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentProperties = {
        serializedName: "DeploymentProperties",
        type: {
            name: "Composite",
            className: "DeploymentProperties",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                },
                templateLink: {
                    serializedName: "templateLink",
                    type: {
                        name: "Composite",
                        className: "TemplateLink"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                },
                parametersLink: {
                    serializedName: "parametersLink",
                    type: {
                        name: "Composite",
                        className: "ParametersLink"
                    }
                },
                mode: {
                    required: true,
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: ["Incremental", "Complete"]
                    }
                },
                debugSetting: {
                    serializedName: "debugSetting",
                    type: {
                        name: "Composite",
                        className: "DebugSetting"
                    }
                },
                onErrorDeployment: {
                    serializedName: "onErrorDeployment",
                    type: {
                        name: "Composite",
                        className: "OnErrorDeployment"
                    }
                },
                expressionEvaluationOptions: {
                    serializedName: "expressionEvaluationOptions",
                    type: {
                        name: "Composite",
                        className: "ExpressionEvaluationOptions"
                    }
                }
            }
        }
    };
    var Deployment = {
        serializedName: "Deployment",
        type: {
            name: "Composite",
            className: "Deployment",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentProperties"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ScopedDeployment = {
        serializedName: "ScopedDeployment",
        type: {
            name: "Composite",
            className: "ScopedDeployment",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentProperties"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeploymentExportResult = {
        serializedName: "DeploymentExportResult",
        type: {
            name: "Composite",
            className: "DeploymentExportResult",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var DeploymentWhatIfSettings = {
        serializedName: "DeploymentWhatIfSettings",
        type: {
            name: "Composite",
            className: "DeploymentWhatIfSettings",
            modelProperties: {
                resultFormat: {
                    serializedName: "resultFormat",
                    type: {
                        name: "Enum",
                        allowedValues: ["ResourceIdOnly", "FullResourcePayloads"]
                    }
                }
            }
        }
    };
    var DeploymentWhatIfProperties = {
        serializedName: "DeploymentWhatIfProperties",
        type: {
            name: "Composite",
            className: "DeploymentWhatIfProperties",
            modelProperties: __assign(__assign({}, DeploymentProperties.type.modelProperties), { whatIfSettings: {
                    serializedName: "whatIfSettings",
                    type: {
                        name: "Composite",
                        className: "DeploymentWhatIfSettings"
                    }
                } })
        }
    };
    var DeploymentWhatIf = {
        serializedName: "DeploymentWhatIf",
        type: {
            name: "Composite",
            className: "DeploymentWhatIf",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentWhatIfProperties"
                    }
                }
            }
        }
    };
    var ScopedDeploymentWhatIf = {
        serializedName: "ScopedDeploymentWhatIf",
        type: {
            name: "Composite",
            className: "ScopedDeploymentWhatIf",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentWhatIfProperties"
                    }
                }
            }
        }
    };
    var ErrorAdditionalInfo = {
        serializedName: "ErrorAdditionalInfo",
        type: {
            name: "Composite",
            className: "ErrorAdditionalInfo",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                info: {
                    readOnly: true,
                    serializedName: "info",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorResponse"
                            }
                        }
                    }
                },
                additionalInfo: {
                    readOnly: true,
                    serializedName: "additionalInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorAdditionalInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApiProfile = {
        serializedName: "ApiProfile",
        type: {
            name: "Composite",
            className: "ApiProfile",
            modelProperties: {
                profileVersion: {
                    readOnly: true,
                    serializedName: "profileVersion",
                    type: {
                        name: "String"
                    }
                },
                apiVersion: {
                    readOnly: true,
                    serializedName: "apiVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AliasPathMetadata = {
        serializedName: "AliasPathMetadata",
        type: {
            name: "Composite",
            className: "AliasPathMetadata",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                attributes: {
                    readOnly: true,
                    serializedName: "attributes",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AliasPattern = {
        serializedName: "AliasPattern",
        type: {
            name: "Composite",
            className: "AliasPattern",
            modelProperties: {
                phrase: {
                    serializedName: "phrase",
                    type: {
                        name: "String"
                    }
                },
                variable: {
                    serializedName: "variable",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: ["NotSpecified", "Extract"]
                    }
                }
            }
        }
    };
    var AliasPath = {
        serializedName: "AliasPath",
        type: {
            name: "Composite",
            className: "AliasPath",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                apiVersions: {
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "Composite",
                        className: "AliasPattern"
                    }
                },
                metadata: {
                    readOnly: true,
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "AliasPathMetadata"
                    }
                }
            }
        }
    };
    var Alias = {
        serializedName: "Alias",
        type: {
            name: "Composite",
            className: "Alias",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                paths: {
                    serializedName: "paths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AliasPath"
                            }
                        }
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: ["NotSpecified", "PlainText", "Mask"]
                    }
                },
                defaultPath: {
                    serializedName: "defaultPath",
                    type: {
                        name: "String"
                    }
                },
                defaultPattern: {
                    serializedName: "defaultPattern",
                    type: {
                        name: "Composite",
                        className: "AliasPattern"
                    }
                },
                defaultMetadata: {
                    readOnly: true,
                    serializedName: "defaultMetadata",
                    type: {
                        name: "Composite",
                        className: "AliasPathMetadata"
                    }
                }
            }
        }
    };
    var ProviderExtendedLocation = {
        serializedName: "ProviderExtendedLocation",
        type: {
            name: "Composite",
            className: "ProviderExtendedLocation",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                extendedLocations: {
                    serializedName: "extendedLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProviderResourceType = {
        serializedName: "ProviderResourceType",
        type: {
            name: "Composite",
            className: "ProviderResourceType",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locationMappings: {
                    serializedName: "locationMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderExtendedLocation"
                            }
                        }
                    }
                },
                aliases: {
                    serializedName: "aliases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Alias"
                            }
                        }
                    }
                },
                apiVersions: {
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                defaultApiVersion: {
                    readOnly: true,
                    serializedName: "defaultApiVersion",
                    type: {
                        name: "String"
                    }
                },
                apiProfiles: {
                    readOnly: true,
                    serializedName: "apiProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiProfile"
                            }
                        }
                    }
                },
                capabilities: {
                    serializedName: "capabilities",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Provider = {
        serializedName: "Provider",
        type: {
            name: "Composite",
            className: "Provider",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                },
                registrationState: {
                    readOnly: true,
                    serializedName: "registrationState",
                    type: {
                        name: "String"
                    }
                },
                registrationPolicy: {
                    readOnly: true,
                    serializedName: "registrationPolicy",
                    type: {
                        name: "String"
                    }
                },
                resourceTypes: {
                    readOnly: true,
                    serializedName: "resourceTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderResourceType"
                            }
                        }
                    }
                }
            }
        }
    };
    var BasicDependency = {
        serializedName: "BasicDependency",
        type: {
            name: "Composite",
            className: "BasicDependency",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dependency = {
        serializedName: "Dependency",
        type: {
            name: "Composite",
            className: "Dependency",
            modelProperties: {
                dependsOn: {
                    serializedName: "dependsOn",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BasicDependency"
                            }
                        }
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OnErrorDeploymentExtended = {
        serializedName: "OnErrorDeploymentExtended",
        type: {
            name: "Composite",
            className: "OnErrorDeploymentExtended",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: ["LastSuccessful", "SpecificDeployment"]
                    }
                },
                deploymentName: {
                    serializedName: "deploymentName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceReference = {
        serializedName: "ResourceReference",
        type: {
            name: "Composite",
            className: "ResourceReference",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentPropertiesExtended = {
        serializedName: "DeploymentPropertiesExtended",
        type: {
            name: "Composite",
            className: "DeploymentPropertiesExtended",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    readOnly: true,
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                duration: {
                    readOnly: true,
                    serializedName: "duration",
                    type: {
                        name: "String"
                    }
                },
                outputs: {
                    readOnly: true,
                    serializedName: "outputs",
                    type: {
                        name: "Object"
                    }
                },
                providers: {
                    readOnly: true,
                    serializedName: "providers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Provider"
                            }
                        }
                    }
                },
                dependencies: {
                    readOnly: true,
                    serializedName: "dependencies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dependency"
                            }
                        }
                    }
                },
                templateLink: {
                    readOnly: true,
                    serializedName: "templateLink",
                    type: {
                        name: "Composite",
                        className: "TemplateLink"
                    }
                },
                parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                },
                parametersLink: {
                    readOnly: true,
                    serializedName: "parametersLink",
                    type: {
                        name: "Composite",
                        className: "ParametersLink"
                    }
                },
                mode: {
                    readOnly: true,
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: ["Incremental", "Complete"]
                    }
                },
                debugSetting: {
                    readOnly: true,
                    serializedName: "debugSetting",
                    type: {
                        name: "Composite",
                        className: "DebugSetting"
                    }
                },
                onErrorDeployment: {
                    readOnly: true,
                    serializedName: "onErrorDeployment",
                    type: {
                        name: "Composite",
                        className: "OnErrorDeploymentExtended"
                    }
                },
                templateHash: {
                    readOnly: true,
                    serializedName: "templateHash",
                    type: {
                        name: "String"
                    }
                },
                outputResources: {
                    readOnly: true,
                    serializedName: "outputResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceReference"
                            }
                        }
                    }
                },
                validatedResources: {
                    readOnly: true,
                    serializedName: "validatedResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceReference"
                            }
                        }
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var DeploymentValidateResult = {
        serializedName: "DeploymentValidateResult",
        type: {
            name: "Composite",
            className: "DeploymentValidateResult",
            modelProperties: {
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentPropertiesExtended"
                    }
                }
            }
        }
    };
    var DeploymentExtended = {
        serializedName: "DeploymentExtended",
        type: {
            name: "Composite",
            className: "DeploymentExtended",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentPropertiesExtended"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProviderResourceTypeListResult = {
        serializedName: "ProviderResourceTypeListResult",
        type: {
            name: "Composite",
            className: "ProviderResourceTypeListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderResourceType"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Plan = {
        serializedName: "Plan",
        type: {
            name: "Composite",
            className: "Plan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                model: {
                    serializedName: "model",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IdentityUserAssignedIdentitiesValue = {
        serializedName: "Identity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "IdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: ["SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None"]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "IdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GenericResource = {
        serializedName: "GenericResource",
        type: {
            name: "Composite",
            className: "GenericResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }, kind: {
                    serializedName: "kind",
                    constraints: {
                        Pattern: /^[-\w\._,\(\)]+$/
                    },
                    type: {
                        name: "String"
                    }
                }, managedBy: {
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                } })
        }
    };
    var ExtendedLocation = {
        serializedName: "ExtendedLocation",
        type: {
            name: "Composite",
            className: "ExtendedLocation",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenericResourceExpanded = {
        serializedName: "GenericResourceExpanded",
        type: {
            name: "Composite",
            className: "GenericResourceExpanded",
            modelProperties: __assign(__assign({}, GenericResource.type.modelProperties), { createdTime: {
                    readOnly: true,
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ResourceGroupProperties = {
        serializedName: "ResourceGroupProperties",
        type: {
            name: "Composite",
            className: "ResourceGroupProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroup = {
        serializedName: "ResourceGroup",
        type: {
            name: "Composite",
            className: "ResourceGroup",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ResourceGroupProperties"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                managedBy: {
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceGroupPatchable = {
        serializedName: "ResourceGroupPatchable",
        type: {
            name: "Composite",
            className: "ResourceGroupPatchable",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ResourceGroupProperties"
                    }
                },
                managedBy: {
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourcesMoveInfo = {
        serializedName: "ResourcesMoveInfo",
        type: {
            name: "Composite",
            className: "ResourcesMoveInfo",
            modelProperties: {
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetResourceGroup: {
                    serializedName: "targetResourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExportTemplateRequest = {
        serializedName: "ExportTemplateRequest",
        type: {
            name: "Composite",
            className: "ExportTemplateRequest",
            modelProperties: {
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                options: {
                    serializedName: "options",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagCount = {
        serializedName: "TagCount",
        type: {
            name: "Composite",
            className: "TagCount",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TagValue = {
        serializedName: "TagValue",
        type: {
            name: "Composite",
            className: "TagValue",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                tagValue: {
                    serializedName: "tagValue",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Composite",
                        className: "TagCount"
                    }
                }
            }
        }
    };
    var TagDetails = {
        serializedName: "TagDetails",
        type: {
            name: "Composite",
            className: "TagDetails",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                tagName: {
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Composite",
                        className: "TagCount"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var TargetResource = {
        serializedName: "TargetResource",
        type: {
            name: "Composite",
            className: "TargetResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HttpMessage = {
        serializedName: "HttpMessage",
        type: {
            name: "Composite",
            className: "HttpMessage",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var StatusMessage = {
        serializedName: "StatusMessage",
        type: {
            name: "Composite",
            className: "StatusMessage",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var DeploymentOperationProperties = {
        serializedName: "DeploymentOperationProperties",
        type: {
            name: "Composite",
            className: "DeploymentOperationProperties",
            modelProperties: {
                provisioningOperation: {
                    readOnly: true,
                    serializedName: "provisioningOperation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "Create",
                            "Delete",
                            "Waiting",
                            "AzureAsyncOperationWaiting",
                            "ResourceCacheWaiting",
                            "Action",
                            "Read",
                            "EvaluateDeploymentOutput",
                            "DeploymentCleanup"
                        ]
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                duration: {
                    readOnly: true,
                    serializedName: "duration",
                    type: {
                        name: "String"
                    }
                },
                serviceRequestId: {
                    readOnly: true,
                    serializedName: "serviceRequestId",
                    type: {
                        name: "String"
                    }
                },
                statusCode: {
                    readOnly: true,
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "Composite",
                        className: "StatusMessage"
                    }
                },
                targetResource: {
                    readOnly: true,
                    serializedName: "targetResource",
                    type: {
                        name: "Composite",
                        className: "TargetResource"
                    }
                },
                request: {
                    readOnly: true,
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "HttpMessage"
                    }
                },
                response: {
                    readOnly: true,
                    serializedName: "response",
                    type: {
                        name: "Composite",
                        className: "HttpMessage"
                    }
                }
            }
        }
    };
    var DeploymentOperation = {
        serializedName: "DeploymentOperation",
        type: {
            name: "Composite",
            className: "DeploymentOperation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    readOnly: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentOperationProperties"
                    }
                }
            }
        }
    };
    var ResourceProviderOperationDisplayProperties = {
        serializedName: "ResourceProviderOperationDisplayProperties",
        type: {
            name: "Composite",
            className: "ResourceProviderOperationDisplayProperties",
            modelProperties: {
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroupExportResult = {
        serializedName: "ResourceGroupExportResult",
        type: {
            name: "Composite",
            className: "ResourceGroupExportResult",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var TemplateHashResult = {
        serializedName: "TemplateHashResult",
        type: {
            name: "Composite",
            className: "TemplateHashResult",
            modelProperties: {
                minifiedTemplate: {
                    serializedName: "minifiedTemplate",
                    type: {
                        name: "String"
                    }
                },
                templateHash: {
                    serializedName: "templateHash",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WhatIfPropertyChange = {
        serializedName: "WhatIfPropertyChange",
        type: {
            name: "Composite",
            className: "WhatIfPropertyChange",
            modelProperties: {
                path: {
                    required: true,
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                propertyChangeType: {
                    required: true,
                    serializedName: "propertyChangeType",
                    type: {
                        name: "Enum",
                        allowedValues: ["Create", "Delete", "Modify", "Array", "NoEffect"]
                    }
                },
                before: {
                    serializedName: "before",
                    type: {
                        name: "Object"
                    }
                },
                after: {
                    serializedName: "after",
                    type: {
                        name: "Object"
                    }
                },
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WhatIfPropertyChange"
                            }
                        }
                    }
                }
            }
        }
    };
    var WhatIfChange = {
        serializedName: "WhatIfChange",
        type: {
            name: "Composite",
            className: "WhatIfChange",
            modelProperties: {
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                changeType: {
                    required: true,
                    serializedName: "changeType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Create",
                            "Delete",
                            "Ignore",
                            "Deploy",
                            "NoChange",
                            "Modify",
                            "Unsupported"
                        ]
                    }
                },
                unsupportedReason: {
                    serializedName: "unsupportedReason",
                    type: {
                        name: "String"
                    }
                },
                before: {
                    serializedName: "before",
                    type: {
                        name: "Object"
                    }
                },
                after: {
                    serializedName: "after",
                    type: {
                        name: "Object"
                    }
                },
                delta: {
                    serializedName: "delta",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WhatIfPropertyChange"
                            }
                        }
                    }
                }
            }
        }
    };
    var WhatIfOperationResult = {
        serializedName: "WhatIfOperationResult",
        type: {
            name: "Composite",
            className: "WhatIfOperationResult",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                changes: {
                    serializedName: "properties.changes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WhatIfChange"
                            }
                        }
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var Tags = {
        serializedName: "Tags",
        type: {
            name: "Composite",
            className: "Tags",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TagsPatchResource = {
        serializedName: "TagsPatchResource",
        type: {
            name: "Composite",
            className: "TagsPatchResource",
            modelProperties: {
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "Tags"
                    }
                }
            }
        }
    };
    var TagsResource = {
        serializedName: "TagsResource",
        type: {
            name: "Composite",
            className: "TagsResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "Tags"
                    }
                }
            }
        }
    };
    var DeploymentsWhatIfAtTenantScopeHeaders = {
        serializedName: "deployments-whatifattenantscope-headers",
        type: {
            name: "Composite",
            className: "DeploymentsWhatIfAtTenantScopeHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentsWhatIfAtManagementGroupScopeHeaders = {
        serializedName: "deployments-whatifatmanagementgroupscope-headers",
        type: {
            name: "Composite",
            className: "DeploymentsWhatIfAtManagementGroupScopeHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentsWhatIfAtSubscriptionScopeHeaders = {
        serializedName: "deployments-whatifatsubscriptionscope-headers",
        type: {
            name: "Composite",
            className: "DeploymentsWhatIfAtSubscriptionScopeHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentsWhatIfHeaders = {
        serializedName: "deployments-whatif-headers",
        type: {
            name: "Composite",
            className: "DeploymentsWhatIfHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentListResult = {
        serializedName: "DeploymentListResult",
        type: {
            name: "Composite",
            className: "DeploymentListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeploymentExtended"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProviderListResult = {
        serializedName: "ProviderListResult",
        type: {
            name: "Composite",
            className: "ProviderListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Provider"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceListResult = {
        serializedName: "ResourceListResult",
        type: {
            name: "Composite",
            className: "ResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GenericResourceExpanded"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceGroupListResult = {
        serializedName: "ResourceGroupListResult",
        type: {
            name: "Composite",
            className: "ResourceGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagsListResult = {
        serializedName: "TagsListResult",
        type: {
            name: "Composite",
            className: "TagsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagDetails"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentOperationsListResult = {
        serializedName: "DeploymentOperationsListResult",
        type: {
            name: "Composite",
            className: "DeploymentOperationsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeploymentOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        DeploymentExtendedFilter: DeploymentExtendedFilter,
        GenericResourceFilter: GenericResourceFilter,
        ResourceGroupFilter: ResourceGroupFilter,
        TemplateLink: TemplateLink,
        ParametersLink: ParametersLink,
        DebugSetting: DebugSetting,
        OnErrorDeployment: OnErrorDeployment,
        ExpressionEvaluationOptions: ExpressionEvaluationOptions,
        DeploymentProperties: DeploymentProperties,
        Deployment: Deployment,
        ScopedDeployment: ScopedDeployment,
        DeploymentExportResult: DeploymentExportResult,
        DeploymentWhatIfSettings: DeploymentWhatIfSettings,
        DeploymentWhatIfProperties: DeploymentWhatIfProperties,
        DeploymentWhatIf: DeploymentWhatIf,
        ScopedDeploymentWhatIf: ScopedDeploymentWhatIf,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        ApiProfile: ApiProfile,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        AliasPath: AliasPath,
        Alias: Alias,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderResourceType: ProviderResourceType,
        Provider: Provider,
        BasicDependency: BasicDependency,
        Dependency: Dependency,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ResourceReference: ResourceReference,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        DeploymentValidateResult: DeploymentValidateResult,
        DeploymentExtended: DeploymentExtended,
        ProviderResourceTypeListResult: ProviderResourceTypeListResult,
        Plan: Plan,
        Sku: Sku,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        Identity: Identity,
        Resource: Resource,
        GenericResource: GenericResource,
        ExtendedLocation: ExtendedLocation,
        GenericResourceExpanded: GenericResourceExpanded,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceGroup: ResourceGroup,
        ResourceGroupPatchable: ResourceGroupPatchable,
        ResourcesMoveInfo: ResourcesMoveInfo,
        ExportTemplateRequest: ExportTemplateRequest,
        TagCount: TagCount,
        TagValue: TagValue,
        TagDetails: TagDetails,
        TargetResource: TargetResource,
        HttpMessage: HttpMessage,
        StatusMessage: StatusMessage,
        DeploymentOperationProperties: DeploymentOperationProperties,
        DeploymentOperation: DeploymentOperation,
        ResourceProviderOperationDisplayProperties: ResourceProviderOperationDisplayProperties,
        SubResource: SubResource,
        ResourceGroupExportResult: ResourceGroupExportResult,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        TemplateHashResult: TemplateHashResult,
        WhatIfPropertyChange: WhatIfPropertyChange,
        WhatIfChange: WhatIfChange,
        WhatIfOperationResult: WhatIfOperationResult,
        Tags: Tags,
        TagsPatchResource: TagsPatchResource,
        TagsResource: TagsResource,
        DeploymentsWhatIfAtTenantScopeHeaders: DeploymentsWhatIfAtTenantScopeHeaders,
        DeploymentsWhatIfAtManagementGroupScopeHeaders: DeploymentsWhatIfAtManagementGroupScopeHeaders,
        DeploymentsWhatIfAtSubscriptionScopeHeaders: DeploymentsWhatIfAtSubscriptionScopeHeaders,
        DeploymentsWhatIfHeaders: DeploymentsWhatIfHeaders,
        OperationListResult: OperationListResult,
        DeploymentListResult: DeploymentListResult,
        ProviderListResult: ProviderListResult,
        ResourceListResult: ResourceListResult,
        ResourceGroupListResult: ResourceGroupListResult,
        TagsListResult: TagsListResult,
        DeploymentOperationsListResult: DeploymentOperationsListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: "en-US",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var deploymentName = {
        parameterPath: "deploymentName",
        mapper: {
            required: true,
            serializedName: "deploymentName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: ["options", "expand"],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: ["options", "filter"],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var groupId = {
        parameterPath: "groupId",
        mapper: {
            required: true,
            serializedName: "groupId",
            constraints: {
                MaxLength: 90,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var parentResourcePath = {
        parameterPath: "parentResourcePath",
        mapper: {
            required: true,
            serializedName: "parentResourcePath",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceId = {
        parameterPath: "resourceId",
        mapper: {
            required: true,
            serializedName: "resourceId",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceProviderNamespace = {
        parameterPath: "resourceProviderNamespace",
        mapper: {
            required: true,
            serializedName: "resourceProviderNamespace",
            type: {
                name: "String"
            }
        }
    };
    var resourceType = {
        parameterPath: "resourceType",
        mapper: {
            required: true,
            serializedName: "resourceType",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var scope = {
        parameterPath: "scope",
        mapper: {
            required: true,
            serializedName: "scope",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var sourceResourceGroupName = {
        parameterPath: "sourceResourceGroupName",
        mapper: {
            required: true,
            serializedName: "sourceResourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tagName = {
        parameterPath: "tagName",
        mapper: {
            required: true,
            serializedName: "tagName",
            type: {
                name: "String"
            }
        }
    };
    var tagValue = {
        parameterPath: "tagValue",
        mapper: {
            required: true,
            serializedName: "tagValue",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: ["options", "top"],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Resources/operations",
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alias: Alias,
        AliasPath: AliasPath,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        ApiProfile: ApiProfile,
        BaseResource: BaseResource,
        BasicDependency: BasicDependency,
        CloudError: CloudError,
        DebugSetting: DebugSetting,
        Dependency: Dependency,
        Deployment: Deployment,
        DeploymentExportResult: DeploymentExportResult,
        DeploymentExtended: DeploymentExtended,
        DeploymentListResult: DeploymentListResult,
        DeploymentProperties: DeploymentProperties,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        DeploymentsWhatIfAtManagementGroupScopeHeaders: DeploymentsWhatIfAtManagementGroupScopeHeaders,
        DeploymentsWhatIfAtSubscriptionScopeHeaders: DeploymentsWhatIfAtSubscriptionScopeHeaders,
        DeploymentsWhatIfAtTenantScopeHeaders: DeploymentsWhatIfAtTenantScopeHeaders,
        DeploymentsWhatIfHeaders: DeploymentsWhatIfHeaders,
        DeploymentValidateResult: DeploymentValidateResult,
        DeploymentWhatIf: DeploymentWhatIf,
        DeploymentWhatIfProperties: DeploymentWhatIfProperties,
        DeploymentWhatIfSettings: DeploymentWhatIfSettings,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        ExpressionEvaluationOptions: ExpressionEvaluationOptions,
        ExtendedLocation: ExtendedLocation,
        GenericResource: GenericResource,
        GenericResourceExpanded: GenericResourceExpanded,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        OnErrorDeployment: OnErrorDeployment,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ParametersLink: ParametersLink,
        Plan: Plan,
        Provider: Provider,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderResourceType: ProviderResourceType,
        Resource: Resource,
        ResourceGroup: ResourceGroup,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceReference: ResourceReference,
        ScopedDeployment: ScopedDeployment,
        ScopedDeploymentWhatIf: ScopedDeploymentWhatIf,
        Sku: Sku,
        SubResource: SubResource,
        TagCount: TagCount,
        TagDetails: TagDetails,
        Tags: Tags,
        TagsResource: TagsResource,
        TagValue: TagValue,
        TemplateHashResult: TemplateHashResult,
        TemplateLink: TemplateLink,
        WhatIfChange: WhatIfChange,
        WhatIfOperationResult: WhatIfOperationResult,
        WhatIfPropertyChange: WhatIfPropertyChange
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Deployments. */
    var Deployments = /** @class */ (function () {
        /**
         * Create a Deployments.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Deployments(client) {
            this.client = client;
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteAtScope = function (scope, deploymentName, options) {
            return this.beginDeleteAtScope(scope, deploymentName, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Deployments.prototype.checkExistenceAtScope = function (scope, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                deploymentName: deploymentName,
                options: options
            }, checkExistenceAtScopeOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at a given scope.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
         */
        Deployments.prototype.createOrUpdateAtScope = function (scope, deploymentName, parameters, options) {
            return this.beginCreateOrUpdateAtScope(scope, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.getAtScope = function (scope, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                deploymentName: deploymentName,
                options: options
            }, getAtScopeOperationSpec, callback);
        };
        Deployments.prototype.cancelAtScope = function (scope, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                deploymentName: deploymentName,
                options: options
            }, cancelAtScopeOperationSpec, callback);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsValidateAtScopeResponse>
         */
        Deployments.prototype.validateAtScope = function (scope, deploymentName, parameters, options) {
            return this.beginValidateAtScope(scope, deploymentName, parameters, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Deployments.prototype.exportTemplateAtScope = function (scope, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                deploymentName: deploymentName,
                options: options
            }, exportTemplateAtScopeOperationSpec, callback);
        };
        Deployments.prototype.listAtScope = function (scope, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                options: options
            }, listAtScopeOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteAtTenantScope = function (deploymentName, options) {
            return this.beginDeleteAtTenantScope(deploymentName, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Deployments.prototype.checkExistenceAtTenantScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, checkExistenceAtTenantScopeOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at tenant scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
         */
        Deployments.prototype.createOrUpdateAtTenantScope = function (deploymentName, parameters, options) {
            return this.beginCreateOrUpdateAtTenantScope(deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.getAtTenantScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, getAtTenantScopeOperationSpec, callback);
        };
        Deployments.prototype.cancelAtTenantScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, cancelAtTenantScopeOperationSpec, callback);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsValidateAtTenantScopeResponse>
         */
        Deployments.prototype.validateAtTenantScope = function (deploymentName, parameters, options) {
            return this.beginValidateAtTenantScope(deploymentName, parameters, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the tenant
         * group.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsWhatIfAtTenantScopeResponse>
         */
        Deployments.prototype.whatIfAtTenantScope = function (deploymentName, parameters, options) {
            return this.beginWhatIfAtTenantScope(deploymentName, parameters, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Deployments.prototype.exportTemplateAtTenantScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, exportTemplateAtTenantScopeOperationSpec, callback);
        };
        Deployments.prototype.listAtTenantScope = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAtTenantScopeOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteAtManagementGroupScope = function (groupId, deploymentName, options) {
            return this.beginDeleteAtManagementGroupScope(groupId, deploymentName, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.checkExistenceAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                deploymentName: deploymentName,
                options: options
            }, checkExistenceAtManagementGroupScopeOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at management group scope.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
         */
        Deployments.prototype.createOrUpdateAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
            return this.beginCreateOrUpdateAtManagementGroupScope(groupId, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.getAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                deploymentName: deploymentName,
                options: options
            }, getAtManagementGroupScopeOperationSpec, callback);
        };
        Deployments.prototype.cancelAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                deploymentName: deploymentName,
                options: options
            }, cancelAtManagementGroupScopeOperationSpec, callback);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
         */
        Deployments.prototype.validateAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
            return this.beginValidateAtManagementGroupScope(groupId, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the management
         * group.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse>
         */
        Deployments.prototype.whatIfAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
            return this.beginWhatIfAtManagementGroupScope(groupId, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.exportTemplateAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                deploymentName: deploymentName,
                options: options
            }, exportTemplateAtManagementGroupScopeOperationSpec, callback);
        };
        Deployments.prototype.listAtManagementGroupScope = function (groupId, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                options: options
            }, listAtManagementGroupScopeOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteAtSubscriptionScope = function (deploymentName, options) {
            return this.beginDeleteAtSubscriptionScope(deploymentName, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Deployments.prototype.checkExistenceAtSubscriptionScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, checkExistenceAtSubscriptionScopeOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at subscription scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
         */
        Deployments.prototype.createOrUpdateAtSubscriptionScope = function (deploymentName, parameters, options) {
            return this.beginCreateOrUpdateAtSubscriptionScope(deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.getAtSubscriptionScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, getAtSubscriptionScopeOperationSpec, callback);
        };
        Deployments.prototype.cancelAtSubscriptionScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, cancelAtSubscriptionScopeOperationSpec, callback);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
         */
        Deployments.prototype.validateAtSubscriptionScope = function (deploymentName, parameters, options) {
            return this.beginValidateAtSubscriptionScope(deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the
         * subscription.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to What If.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
         */
        Deployments.prototype.whatIfAtSubscriptionScope = function (deploymentName, parameters, options) {
            return this.beginWhatIfAtSubscriptionScope(deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.exportTemplateAtSubscriptionScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, exportTemplateAtSubscriptionScopeOperationSpec, callback);
        };
        Deployments.prototype.listAtSubscriptionScope = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAtSubscriptionScopeOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. Deleting a template deployment does not
         * affect the state of the resource group. This is an asynchronous operation that returns a status
         * of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running,
         * a call to the URI in the Location header returns a status of 202. When the process finishes, the
         * URI in the Location header returns a status of 204 on success. If the asynchronous request
         * failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name
         * is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteMethod = function (resourceGroupName, deploymentName, options) {
            return this.beginDeleteMethod(resourceGroupName, deploymentName, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Deployments.prototype.checkExistence = function (resourceGroupName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                options: options
            }, checkExistenceOperationSpec, callback);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources to a resource group.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
         * case insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
         */
        Deployments.prototype.createOrUpdate = function (resourceGroupName, deploymentName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.get = function (resourceGroupName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                options: options
            }, getOperationSpec, callback);
        };
        Deployments.prototype.cancel = function (resourceGroupName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                options: options
            }, cancelOperationSpec, callback);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param resourceGroupName The name of the resource group the template will be deployed to. The
         * name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsValidateResponse>
         */
        Deployments.prototype.validate = function (resourceGroupName, deploymentName, parameters, options) {
            return this.beginValidate(resourceGroupName, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the resource
         * group.
         * @param resourceGroupName The name of the resource group the template will be deployed to. The
         * name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsWhatIfResponse>
         */
        Deployments.prototype.whatIf = function (resourceGroupName, deploymentName, parameters, options) {
            return this.beginWhatIf(resourceGroupName, deploymentName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.exportTemplate = function (resourceGroupName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                options: options
            }, exportTemplateOperationSpec, callback);
        };
        Deployments.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Deployments.prototype.calculateTemplateHash = function (template, options, callback) {
            return this.client.sendOperationRequest({
                template: template,
                options: options
            }, calculateTemplateHashOperationSpec, callback);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteAtScope = function (scope, deploymentName, options) {
            return this.client.sendLRORequest({
                scope: scope,
                deploymentName: deploymentName,
                options: options
            }, beginDeleteAtScopeOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at a given scope.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdateAtScope = function (scope, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                scope: scope,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateAtScopeOperationSpec, options);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginValidateAtScope = function (scope, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                scope: scope,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginValidateAtScopeOperationSpec, options);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteAtTenantScope = function (deploymentName, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                options: options
            }, beginDeleteAtTenantScopeOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at tenant scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdateAtTenantScope = function (deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateAtTenantScopeOperationSpec, options);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginValidateAtTenantScope = function (deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginValidateAtTenantScopeOperationSpec, options);
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the tenant
         * group.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginWhatIfAtTenantScope = function (deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginWhatIfAtTenantScopeOperationSpec, options);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteAtManagementGroupScope = function (groupId, deploymentName, options) {
            return this.client.sendLRORequest({
                groupId: groupId,
                deploymentName: deploymentName,
                options: options
            }, beginDeleteAtManagementGroupScopeOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at management group scope.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdateAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                groupId: groupId,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateAtManagementGroupScopeOperationSpec, options);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginValidateAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                groupId: groupId,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginValidateAtManagementGroupScopeOperationSpec, options);
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the management
         * group.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginWhatIfAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                groupId: groupId,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginWhatIfAtManagementGroupScopeOperationSpec, options);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. This is an asynchronous operation that
         * returns a status of 202 until the template deployment is successfully deleted. The Location
         * response header contains the URI that is used to obtain the status of the process. While the
         * process is running, a call to the URI in the Location header returns a status of 202. When the
         * process finishes, the URI in the Location header returns a status of 204 on success. If the
         * asynchronous request failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteAtSubscriptionScope = function (deploymentName, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                options: options
            }, beginDeleteAtSubscriptionScopeOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources at subscription scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdateAtSubscriptionScope = function (deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateAtSubscriptionScopeOperationSpec, options);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginValidateAtSubscriptionScope = function (deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginValidateAtSubscriptionScopeOperationSpec, options);
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the
         * subscription.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to What If.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginWhatIfAtSubscriptionScope = function (deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginWhatIfAtSubscriptionScopeOperationSpec, options);
        };
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template
         * deployment removes the associated deployment operations. Deleting a template deployment does not
         * affect the state of the resource group. This is an asynchronous operation that returns a status
         * of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running,
         * a call to the URI in the Location header returns a status of 202. When the process finishes, the
         * URI in the Location header returns a status of 204 on success. If the asynchronous request
         * failed, the URI in the Location header returns an error-level status code.
         * @summary Deletes a deployment from the deployment history.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name
         * is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteMethod = function (resourceGroupName, deploymentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @summary Deploys resources to a resource group.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
         * case insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdate = function (resourceGroupName, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param resourceGroupName The name of the resource group the template will be deployed to. The
         * name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginValidate = function (resourceGroupName, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginValidateOperationSpec, options);
        };
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the resource
         * group.
         * @param resourceGroupName The name of the resource group the template will be deployed to. The
         * name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginWhatIf = function (resourceGroupName, deploymentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                parameters: parameters,
                options: options
            }, beginWhatIfOperationSpec, options);
        };
        Deployments.prototype.listAtScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtScopeNextOperationSpec, callback);
        };
        Deployments.prototype.listAtTenantScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtTenantScopeNextOperationSpec, callback);
        };
        Deployments.prototype.listAtManagementGroupScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtManagementGroupScopeNextOperationSpec, callback);
        };
        Deployments.prototype.listAtSubscriptionScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtSubscriptionScopeNextOperationSpec, callback);
        };
        Deployments.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Deployments;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkExistenceAtScopeOperationSpec = {
        httpMethod: "HEAD",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getAtScopeOperationSpec = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelAtScopeOperationSpec = {
        httpMethod: "POST",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateAtScopeOperationSpec = {
        httpMethod: "POST",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtScopeOperationSpec = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Resources/deployments/",
        urlParameters: [scope],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var checkExistenceAtTenantScopeOperationSpec = {
        httpMethod: "HEAD",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getAtTenantScopeOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelAtTenantScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateAtTenantScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtTenantScopeOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Resources/deployments/",
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var checkExistenceAtManagementGroupScopeOperationSpec = {
        httpMethod: "HEAD",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getAtManagementGroupScopeOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelAtManagementGroupScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateAtManagementGroupScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtManagementGroupScopeOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
        urlParameters: [groupId],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var checkExistenceAtSubscriptionScopeOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getAtSubscriptionScopeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtSubscriptionScopeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
        urlParameters: [subscriptionId],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var checkExistenceOperationSpec = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var exportTemplateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentExportResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var calculateTemplateHashOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Resources/calculateTemplateHash",
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "template",
            mapper: {
                required: true,
                serializedName: "template",
                type: {
                    name: "Object"
                }
            }
        },
        responses: {
            200: {
                bodyMapper: TemplateHashResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteAtScopeOperationSpec = {
        httpMethod: "DELETE",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateAtScopeOperationSpec = {
        httpMethod: "PUT",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginValidateAtScopeOperationSpec = {
        httpMethod: "POST",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [scope, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            202: {},
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteAtTenantScopeOperationSpec = {
        httpMethod: "DELETE",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateAtTenantScopeOperationSpec = {
        httpMethod: "PUT",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ScopedDeployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginValidateAtTenantScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ScopedDeployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            202: {},
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginWhatIfAtTenantScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        urlParameters: [deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ScopedDeploymentWhatIf), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WhatIfOperationResult,
                headersMapper: DeploymentsWhatIfAtTenantScopeHeaders
            },
            202: {
                headersMapper: DeploymentsWhatIfAtTenantScopeHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: DeploymentsWhatIfAtTenantScopeHeaders
            }
        },
        serializer: serializer$1
    };
    var beginDeleteAtManagementGroupScopeOperationSpec = {
        httpMethod: "DELETE",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateAtManagementGroupScopeOperationSpec = {
        httpMethod: "PUT",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ScopedDeployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginValidateAtManagementGroupScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ScopedDeployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            202: {},
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginWhatIfAtManagementGroupScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        urlParameters: [groupId, deploymentName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ScopedDeploymentWhatIf), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WhatIfOperationResult,
                headersMapper: DeploymentsWhatIfAtManagementGroupScopeHeaders
            },
            202: {
                headersMapper: DeploymentsWhatIfAtManagementGroupScopeHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: DeploymentsWhatIfAtManagementGroupScopeHeaders
            }
        },
        serializer: serializer$1
    };
    var beginDeleteAtSubscriptionScopeOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateAtSubscriptionScopeOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginValidateAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            202: {},
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginWhatIfAtSubscriptionScopeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DeploymentWhatIf), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WhatIfOperationResult,
                headersMapper: DeploymentsWhatIfAtSubscriptionScopeHeaders
            },
            202: {
                headersMapper: DeploymentsWhatIfAtSubscriptionScopeHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: DeploymentsWhatIfAtSubscriptionScopeHeaders
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentExtended
            },
            201: {
                bodyMapper: DeploymentExtended
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginValidateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Deployment), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentValidateResult
            },
            202: {},
            400: {
                bodyMapper: DeploymentValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginWhatIfOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DeploymentWhatIf), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WhatIfOperationResult,
                headersMapper: DeploymentsWhatIfHeaders
            },
            202: {
                headersMapper: DeploymentsWhatIfHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: DeploymentsWhatIfHeaders
            }
        },
        serializer: serializer$1
    };
    var listAtScopeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtTenantScopeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtManagementGroupScopeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAtSubscriptionScopeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alias: Alias,
        AliasPath: AliasPath,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        ApiProfile: ApiProfile,
        CloudError: CloudError,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        Provider: Provider,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderListResult: ProviderListResult,
        ProviderResourceType: ProviderResourceType
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Providers. */
    var Providers = /** @class */ (function () {
        /**
         * Create a Providers.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Providers(client) {
            this.client = client;
        }
        Providers.prototype.unregister = function (resourceProviderNamespace, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace,
                options: options
            }, unregisterOperationSpec, callback);
        };
        Providers.prototype.registerAtManagementGroupScope = function (resourceProviderNamespace, groupId, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace,
                groupId: groupId,
                options: options
            }, registerAtManagementGroupScopeOperationSpec, callback);
        };
        Providers.prototype.register = function (resourceProviderNamespace, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace,
                options: options
            }, registerOperationSpec, callback);
        };
        Providers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Providers.prototype.listAtTenantScope = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAtTenantScopeOperationSpec$1, callback);
        };
        Providers.prototype.get = function (resourceProviderNamespace, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace,
                options: options
            }, getOperationSpec$1, callback);
        };
        Providers.prototype.getAtTenantScope = function (resourceProviderNamespace, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace,
                options: options
            }, getAtTenantScopeOperationSpec$1, callback);
        };
        Providers.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Providers.prototype.listAtTenantScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtTenantScopeNextOperationSpec$1, callback);
        };
        return Providers;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var unregisterOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister",
        urlParameters: [resourceProviderNamespace, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var registerAtManagementGroupScopeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register",
        urlParameters: [resourceProviderNamespace, groupId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var registerOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register",
        urlParameters: [resourceProviderNamespace, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers",
        urlParameters: [subscriptionId],
        queryParameters: [top, expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAtTenantScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers",
        queryParameters: [top, expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}",
        urlParameters: [resourceProviderNamespace, subscriptionId],
        queryParameters: [expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getAtTenantScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/{resourceProviderNamespace}",
        urlParameters: [resourceProviderNamespace],
        queryParameters: [expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: Provider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAtTenantScopeNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alias: Alias,
        AliasPath: AliasPath,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        ApiProfile: ApiProfile,
        CloudError: CloudError,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderResourceType: ProviderResourceType,
        ProviderResourceTypeListResult: ProviderResourceTypeListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProviderResourceTypes. */
    var ProviderResourceTypes = /** @class */ (function () {
        /**
         * Create a ProviderResourceTypes.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function ProviderResourceTypes(client) {
            this.client = client;
        }
        ProviderResourceTypes.prototype.list = function (resourceProviderNamespace, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace,
                options: options
            }, listOperationSpec$2, callback);
        };
        return ProviderResourceTypes;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/resourceTypes",
        urlParameters: [resourceProviderNamespace, subscriptionId],
        queryParameters: [expand, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ProviderResourceTypeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alias: Alias,
        AliasPath: AliasPath,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        ApiProfile: ApiProfile,
        BaseResource: BaseResource,
        BasicDependency: BasicDependency,
        CloudError: CloudError,
        DebugSetting: DebugSetting,
        Dependency: Dependency,
        DeploymentExtended: DeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        ExtendedLocation: ExtendedLocation,
        GenericResource: GenericResource,
        GenericResourceExpanded: GenericResourceExpanded,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ParametersLink: ParametersLink,
        Plan: Plan,
        Provider: Provider,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderResourceType: ProviderResourceType,
        Resource: Resource,
        ResourceGroup: ResourceGroup,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceListResult: ResourceListResult,
        ResourceReference: ResourceReference,
        ResourcesMoveInfo: ResourcesMoveInfo,
        Sku: Sku,
        SubResource: SubResource,
        TagCount: TagCount,
        TagDetails: TagDetails,
        Tags: Tags,
        TagsResource: TagsResource,
        TagValue: TagValue,
        TemplateLink: TemplateLink
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Resources. */
    var Resources = /** @class */ (function () {
        /**
         * Create a Resources.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function Resources(client) {
            this.client = client;
        }
        Resources.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        /**
         * The resources to move must be in the same source resource group. The target resource group may
         * be in a different subscription. When moving resources, both the source group and the target
         * group are locked for the duration of the operation. Write and delete operations are blocked on
         * the groups until the move completes.
         * @summary Moves resources from one resource group to another resource group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.moveResources = function (sourceResourceGroupName, parameters, options) {
            return this.beginMoveResources(sourceResourceGroupName, parameters, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources
         * to move must be in the same source resource group. The target resource group may be in a
         * different subscription. If validation succeeds, it returns HTTP response code 204 (no content).
         * If validation fails, it returns HTTP response code 409 (Conflict) with an error message.
         * Retrieve the URL in the Location header value to check the result of the long-running operation.
         * @summary Validates whether resources can be moved from one resource group to another resource
         * group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to
         * validate for move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.validateMoveResources = function (sourceResourceGroupName, parameters, options) {
            return this.beginValidateMoveResources(sourceResourceGroupName, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Resources.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        Resources.prototype.checkExistence = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceProviderNamespace: resourceProviderNamespace,
                parentResourcePath: parentResourcePath,
                resourceType: resourceType,
                resourceName: resourceName,
                apiVersion: apiVersion,
                options: options
            }, checkExistenceOperationSpec$1, callback);
        };
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete.
         * The name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.deleteMethod = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options) {
            return this.beginDeleteMethod(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesCreateOrUpdateResponse>
         */
        Resources.prototype.createOrUpdate = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesUpdateResponse>
         */
        Resources.prototype.update = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
            return this.beginUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Resources.prototype.get = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceProviderNamespace: resourceProviderNamespace,
                parentResourcePath: parentResourcePath,
                resourceType: resourceType,
                resourceName: resourceName,
                apiVersion: apiVersion,
                options: options
            }, getOperationSpec$2, callback);
        };
        Resources.prototype.checkExistenceById = function (resourceId, apiVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId,
                apiVersion: apiVersion,
                options: options
            }, checkExistenceByIdOperationSpec, callback);
        };
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Resources.prototype.deleteById = function (resourceId, apiVersion, options) {
            return this.beginDeleteById(resourceId, apiVersion, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesCreateOrUpdateByIdResponse>
         */
        Resources.prototype.createOrUpdateById = function (resourceId, apiVersion, parameters, options) {
            return this.beginCreateOrUpdateById(resourceId, apiVersion, parameters, options).then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourcesUpdateByIdResponse>
         */
        Resources.prototype.updateById = function (resourceId, apiVersion, parameters, options) {
            return this.beginUpdateById(resourceId, apiVersion, parameters, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        Resources.prototype.getById = function (resourceId, apiVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId,
                apiVersion: apiVersion,
                options: options
            }, getByIdOperationSpec, callback);
        };
        /**
         * The resources to move must be in the same source resource group. The target resource group may
         * be in a different subscription. When moving resources, both the source group and the target
         * group are locked for the duration of the operation. Write and delete operations are blocked on
         * the groups until the move completes.
         * @summary Moves resources from one resource group to another resource group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginMoveResources = function (sourceResourceGroupName, parameters, options) {
            return this.client.sendLRORequest({
                sourceResourceGroupName: sourceResourceGroupName,
                parameters: parameters,
                options: options
            }, beginMoveResourcesOperationSpec, options);
        };
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources
         * to move must be in the same source resource group. The target resource group may be in a
         * different subscription. If validation succeeds, it returns HTTP response code 204 (no content).
         * If validation fails, it returns HTTP response code 409 (Conflict) with an error message.
         * Retrieve the URL in the Location header value to check the result of the long-running operation.
         * @summary Validates whether resources can be moved from one resource group to another resource
         * group.
         * @param sourceResourceGroupName The name of the resource group containing the resources to
         * validate for move.
         * @param parameters Parameters for moving resources.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginValidateMoveResources = function (sourceResourceGroupName, parameters, options) {
            return this.client.sendLRORequest({
                sourceResourceGroupName: sourceResourceGroupName,
                parameters: parameters,
                options: options
            }, beginValidateMoveResourcesOperationSpec, options);
        };
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete.
         * The name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginDeleteMethod = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceProviderNamespace: resourceProviderNamespace,
                parentResourcePath: parentResourcePath,
                resourceType: resourceType,
                resourceName: resourceName,
                apiVersion: apiVersion,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceProviderNamespace: resourceProviderNamespace,
                parentResourcePath: parentResourcePath,
                resourceType: resourceType,
                resourceName: resourceName,
                apiVersion: apiVersion,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         * insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginUpdate = function (resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceProviderNamespace: resourceProviderNamespace,
                parentResourcePath: parentResourcePath,
                resourceType: resourceType,
                resourceName: resourceName,
                apiVersion: apiVersion,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginDeleteById = function (resourceId, apiVersion, options) {
            return this.client.sendLRORequest({
                resourceId: resourceId,
                apiVersion: apiVersion,
                options: options
            }, beginDeleteByIdOperationSpec, options);
        };
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginCreateOrUpdateById = function (resourceId, apiVersion, parameters, options) {
            return this.client.sendLRORequest({
                resourceId: resourceId,
                apiVersion: apiVersion,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateByIdOperationSpec, options);
        };
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and
         * resource type. Use the format,
         * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Resources.prototype.beginUpdateById = function (resourceId, apiVersion, parameters, options) {
            return this.client.sendLRORequest({
                resourceId: resourceId,
                apiVersion: apiVersion,
                parameters: parameters,
                options: options
            }, beginUpdateByIdOperationSpec, options);
        };
        Resources.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        Resources.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Resources;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [filter, expand, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resources",
        urlParameters: [subscriptionId],
        queryParameters: [filter, expand, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var checkExistenceOperationSpec$1 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var checkExistenceByIdOperationSpec = {
        httpMethod: "HEAD",
        path: "{resourceId}",
        urlParameters: [resourceId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getByIdOperationSpec = {
        httpMethod: "GET",
        path: "{resourceId}",
        urlParameters: [resourceId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginMoveResourcesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources",
        urlParameters: [sourceResourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ResourcesMoveInfo), { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginValidateMoveResourcesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources",
        urlParameters: [sourceResourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ResourcesMoveInfo), { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GenericResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            201: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GenericResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteByIdOperationSpec = {
        httpMethod: "DELETE",
        path: "{resourceId}",
        urlParameters: [resourceId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateByIdOperationSpec = {
        httpMethod: "PUT",
        path: "{resourceId}",
        urlParameters: [resourceId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GenericResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            201: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginUpdateByIdOperationSpec = {
        httpMethod: "PATCH",
        path: "{resourceId}",
        urlParameters: [resourceId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, GenericResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenericResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, expand, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, expand, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alias: Alias,
        AliasPath: AliasPath,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        ApiProfile: ApiProfile,
        BaseResource: BaseResource,
        BasicDependency: BasicDependency,
        CloudError: CloudError,
        DebugSetting: DebugSetting,
        Dependency: Dependency,
        DeploymentExtended: DeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        ExportTemplateRequest: ExportTemplateRequest,
        ExtendedLocation: ExtendedLocation,
        GenericResource: GenericResource,
        GenericResourceExpanded: GenericResourceExpanded,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ParametersLink: ParametersLink,
        Plan: Plan,
        Provider: Provider,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderResourceType: ProviderResourceType,
        Resource: Resource,
        ResourceGroup: ResourceGroup,
        ResourceGroupExportResult: ResourceGroupExportResult,
        ResourceGroupListResult: ResourceGroupListResult,
        ResourceGroupPatchable: ResourceGroupPatchable,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceReference: ResourceReference,
        Sku: Sku,
        SubResource: SubResource,
        TagCount: TagCount,
        TagDetails: TagDetails,
        Tags: Tags,
        TagsResource: TagsResource,
        TagValue: TagValue,
        TemplateLink: TemplateLink
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceGroups. */
    var ResourceGroups = /** @class */ (function () {
        /**
         * Create a ResourceGroups.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function ResourceGroups(client) {
            this.client = client;
        }
        ResourceGroups.prototype.checkExistence = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, checkExistenceOperationSpec$2, callback);
        };
        ResourceGroups.prototype.createOrUpdate = function (resourceGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource
         * group deletes all of its template deployments and currently stored operations.
         * @summary Deletes a resource group.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ResourceGroups.prototype.deleteMethod = function (resourceGroupName, options) {
            return this.beginDeleteMethod(resourceGroupName, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        ResourceGroups.prototype.get = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, getOperationSpec$3, callback);
        };
        ResourceGroups.prototype.update = function (resourceGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Captures the specified resource group as a template.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param parameters Parameters for exporting the template.
         * @param [options] The optional parameters
         * @returns Promise<Models.ResourceGroupsExportTemplateResponse>
         */
        ResourceGroups.prototype.exportTemplate = function (resourceGroupName, parameters, options) {
            return this.beginExportTemplate(resourceGroupName, parameters, options).then(function (lroPoller) {
                return lroPoller.pollUntilFinished();
            });
        };
        ResourceGroups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource
         * group deletes all of its template deployments and currently stored operations.
         * @summary Deletes a resource group.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ResourceGroups.prototype.beginDeleteMethod = function (resourceGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Captures the specified resource group as a template.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param parameters Parameters for exporting the template.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ResourceGroups.prototype.beginExportTemplate = function (resourceGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                parameters: parameters,
                options: options
            }, beginExportTemplateOperationSpec, options);
        };
        ResourceGroups.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return ResourceGroups;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var checkExistenceOperationSpec$2 = {
        httpMethod: "HEAD",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ResourceGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceGroup
            },
            201: {
                bodyMapper: ResourceGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ResourceGroupPatchable), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups",
        urlParameters: [subscriptionId],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        urlParameters: [resourceGroupName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginExportTemplateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
        urlParameters: [subscriptionId, resourceGroupName],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ExportTemplateRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceGroupExportResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [filter, top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: ResourceGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alias: Alias,
        AliasPath: AliasPath,
        AliasPathMetadata: AliasPathMetadata,
        AliasPattern: AliasPattern,
        ApiProfile: ApiProfile,
        BaseResource: BaseResource,
        BasicDependency: BasicDependency,
        CloudError: CloudError,
        DebugSetting: DebugSetting,
        Dependency: Dependency,
        DeploymentExtended: DeploymentExtended,
        DeploymentPropertiesExtended: DeploymentPropertiesExtended,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        ExtendedLocation: ExtendedLocation,
        GenericResource: GenericResource,
        GenericResourceExpanded: GenericResourceExpanded,
        Identity: Identity,
        IdentityUserAssignedIdentitiesValue: IdentityUserAssignedIdentitiesValue,
        OnErrorDeploymentExtended: OnErrorDeploymentExtended,
        ParametersLink: ParametersLink,
        Plan: Plan,
        Provider: Provider,
        ProviderExtendedLocation: ProviderExtendedLocation,
        ProviderResourceType: ProviderResourceType,
        Resource: Resource,
        ResourceGroup: ResourceGroup,
        ResourceGroupProperties: ResourceGroupProperties,
        ResourceReference: ResourceReference,
        Sku: Sku,
        SubResource: SubResource,
        TagCount: TagCount,
        TagDetails: TagDetails,
        Tags: Tags,
        TagsListResult: TagsListResult,
        TagsPatchResource: TagsPatchResource,
        TagsResource: TagsResource,
        TagValue: TagValue,
        TemplateLink: TemplateLink
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TagsOperations. */
    var TagsOperations = /** @class */ (function () {
        /**
         * Create a TagsOperations.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function TagsOperations(client) {
            this.client = client;
        }
        TagsOperations.prototype.deleteValue = function (tagName, tagValue, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName,
                tagValue: tagValue,
                options: options
            }, deleteValueOperationSpec, callback);
        };
        TagsOperations.prototype.createOrUpdateValue = function (tagName, tagValue, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName,
                tagValue: tagValue,
                options: options
            }, createOrUpdateValueOperationSpec, callback);
        };
        TagsOperations.prototype.createOrUpdate = function (tagName, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        TagsOperations.prototype.deleteMethod = function (tagName, options, callback) {
            return this.client.sendOperationRequest({
                tagName: tagName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        TagsOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        TagsOperations.prototype.createOrUpdateAtScope = function (scope, parameters, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                parameters: parameters,
                options: options
            }, createOrUpdateAtScopeOperationSpec, callback);
        };
        TagsOperations.prototype.updateAtScope = function (scope, parameters, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                parameters: parameters,
                options: options
            }, updateAtScopeOperationSpec, callback);
        };
        TagsOperations.prototype.getAtScope = function (scope, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                options: options
            }, getAtScopeOperationSpec$1, callback);
        };
        TagsOperations.prototype.deleteAtScope = function (scope, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                options: options
            }, deleteAtScopeOperationSpec, callback);
        };
        TagsOperations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return TagsOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var deleteValueOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        urlParameters: [tagName, tagValue, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateValueOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        urlParameters: [tagName, tagValue, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: TagValue
            },
            201: {
                bodyMapper: TagValue
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}",
        urlParameters: [tagName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: TagDetails
            },
            201: {
                bodyMapper: TagDetails
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/tagNames/{tagName}",
        urlParameters: [tagName, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/tagNames",
        urlParameters: [subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: TagsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateAtScopeOperationSpec = {
        httpMethod: "PUT",
        path: "{scope}/providers/Microsoft.Resources/tags/default",
        urlParameters: [scope],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TagsResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TagsResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var updateAtScopeOperationSpec = {
        httpMethod: "PATCH",
        path: "{scope}/providers/Microsoft.Resources/tags/default",
        urlParameters: [scope],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, TagsPatchResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TagsResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getAtScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Resources/tags/default",
        urlParameters: [scope],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: TagsResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var deleteAtScopeOperationSpec = {
        httpMethod: "DELETE",
        path: "{scope}/providers/Microsoft.Resources/tags/default",
        urlParameters: [scope],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: TagsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        DeploymentOperation: DeploymentOperation,
        DeploymentOperationProperties: DeploymentOperationProperties,
        DeploymentOperationsListResult: DeploymentOperationsListResult,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorResponse: ErrorResponse,
        HttpMessage: HttpMessage,
        StatusMessage: StatusMessage,
        TargetResource: TargetResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DeploymentOperations. */
    var DeploymentOperations = /** @class */ (function () {
        /**
         * Create a DeploymentOperations.
         * @param {ResourceManagementClientContext} client Reference to the service client.
         */
        function DeploymentOperations(client) {
            this.client = client;
        }
        DeploymentOperations.prototype.getAtScope = function (scope, deploymentName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                deploymentName: deploymentName,
                operationId: operationId,
                options: options
            }, getAtScopeOperationSpec$2, callback);
        };
        DeploymentOperations.prototype.listAtScope = function (scope, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope,
                deploymentName: deploymentName,
                options: options
            }, listAtScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.getAtTenantScope = function (deploymentName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                operationId: operationId,
                options: options
            }, getAtTenantScopeOperationSpec$2, callback);
        };
        DeploymentOperations.prototype.listAtTenantScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, listAtTenantScopeOperationSpec$2, callback);
        };
        DeploymentOperations.prototype.getAtManagementGroupScope = function (groupId, deploymentName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                deploymentName: deploymentName,
                operationId: operationId,
                options: options
            }, getAtManagementGroupScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId,
                deploymentName: deploymentName,
                options: options
            }, listAtManagementGroupScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.getAtSubscriptionScope = function (deploymentName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                operationId: operationId,
                options: options
            }, getAtSubscriptionScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listAtSubscriptionScope = function (deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                deploymentName: deploymentName,
                options: options
            }, listAtSubscriptionScopeOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.get = function (resourceGroupName, deploymentName, operationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                operationId: operationId,
                options: options
            }, getOperationSpec$4, callback);
        };
        DeploymentOperations.prototype.list = function (resourceGroupName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                deploymentName: deploymentName,
                options: options
            }, listOperationSpec$6, callback);
        };
        DeploymentOperations.prototype.listAtScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtScopeNextOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listAtTenantScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtTenantScopeNextOperationSpec$2, callback);
        };
        DeploymentOperations.prototype.listAtManagementGroupScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtManagementGroupScopeNextOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listAtSubscriptionScopeNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAtSubscriptionScopeNextOperationSpec$1, callback);
        };
        DeploymentOperations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return DeploymentOperations;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getAtScopeOperationSpec$2 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [scope, deploymentName, operationId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        urlParameters: [scope, deploymentName],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getAtTenantScopeOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [deploymentName, operationId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtTenantScopeOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        urlParameters: [deploymentName],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getAtManagementGroupScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [groupId, deploymentName, operationId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtManagementGroupScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        urlParameters: [groupId, deploymentName],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getAtSubscriptionScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [deploymentName, operationId, subscriptionId],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtSubscriptionScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        urlParameters: [deploymentName, subscriptionId],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            operationId,
            subscriptionId
        ],
        queryParameters: [apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations",
        urlParameters: [
            resourceGroupName,
            deploymentName,
            subscriptionId
        ],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtScopeNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtTenantScopeNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtManagementGroupScopeNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listAtSubscriptionScopeNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [nextPageLink],
        queryParameters: [top, apiVersion],
        headerParameters: [acceptLanguage],
        responses: {
            200: {
                bodyMapper: DeploymentOperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-resources";
    var packageVersion = "4.2.2";
    var ResourceManagementClientContext = /** @class */ (function (_super) {
        __extends(ResourceManagementClientContext, _super);
        /**
         * Initializes a new instance of the ResourceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function ResourceManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (subscriptionId == undefined) {
                throw new Error("'subscriptionId' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = "2021-01-01";
            _this.acceptLanguage = "en-US";
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null &&
                options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ResourceManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ResourceManagementClient = /** @class */ (function (_super) {
        __extends(ResourceManagementClient, _super);
        /**
         * Initializes a new instance of the ResourceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function ResourceManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.deployments = new Deployments(_this);
            _this.providers = new Providers(_this);
            _this.providerResourceTypes = new ProviderResourceTypes(_this);
            _this.resources = new Resources(_this);
            _this.resourceGroups = new ResourceGroups(_this);
            _this.tags = new TagsOperations(_this);
            _this.deploymentOperations = new DeploymentOperations(_this);
            return _this;
        }
        return ResourceManagementClient;
    }(ResourceManagementClientContext));

    exports.DeploymentOperations = DeploymentOperations;
    exports.Deployments = Deployments;
    exports.Operations = Operations;
    exports.ProviderResourceTypes = ProviderResourceTypes;
    exports.Providers = Providers;
    exports.ResourceGroups = ResourceGroups;
    exports.ResourceManagementClient = ResourceManagementClient;
    exports.ResourceManagementClientContext = ResourceManagementClientContext;
    exports.ResourceManagementMappers = mappers;
    exports.ResourceManagementModels = index;
    exports.Resources = Resources;
    exports.TagsOperations = TagsOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-resources.js.map
