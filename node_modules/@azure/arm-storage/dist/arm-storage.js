/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmStorage = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dimension = {
        serializedName: "Dimension",
        type: {
            name: "Composite",
            className: "Dimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricSpecification = {
        serializedName: "MetricSpecification",
        type: {
            name: "Composite",
            className: "MetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dimension"
                            }
                        }
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "Boolean"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                resourceIdDimensionNameOverride: {
                    serializedName: "resourceIdDimensionNameOverride",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var StorageAccountCheckNameAvailabilityParameters = {
        serializedName: "StorageAccountCheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "StorageAccountCheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.Storage/storageAccounts',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SKUCapability = {
        serializedName: "SKUCapability",
        type: {
            name: "Composite",
            className: "SKUCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Restriction = {
        serializedName: "Restriction",
        type: {
            name: "Composite",
            className: "Restriction",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                reasonCode: {
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuInformation = {
        serializedName: "SkuInformation",
        type: {
            name: "Composite",
            className: "SkuInformation",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Premium"
                        ]
                    }
                },
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SKUCapability"
                            }
                        }
                    }
                },
                restrictions: {
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Restriction"
                            }
                        }
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AccountNameInvalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomain = {
        serializedName: "CustomDomain",
        type: {
            name: "Composite",
            className: "CustomDomain",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                useSubDomainName: {
                    serializedName: "useSubDomainName",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EncryptionService = {
        serializedName: "EncryptionService",
        type: {
            name: "Composite",
            className: "EncryptionService",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                lastEnabledTime: {
                    readOnly: true,
                    serializedName: "lastEnabledTime",
                    type: {
                        name: "DateTime"
                    }
                },
                keyType: {
                    serializedName: "keyType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionServices = {
        serializedName: "EncryptionServices",
        type: {
            name: "Composite",
            className: "EncryptionServices",
            modelProperties: {
                blob: {
                    serializedName: "blob",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                },
                file: {
                    serializedName: "file",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                },
                table: {
                    serializedName: "table",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                },
                queue: {
                    serializedName: "queue",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                }
            }
        }
    };
    var KeyVaultProperties = {
        serializedName: "KeyVaultProperties",
        type: {
            name: "Composite",
            className: "KeyVaultProperties",
            modelProperties: {
                keyName: {
                    serializedName: "keyname",
                    type: {
                        name: "String"
                    }
                },
                keyVersion: {
                    serializedName: "keyversion",
                    type: {
                        name: "String"
                    }
                },
                keyVaultUri: {
                    serializedName: "keyvaulturi",
                    type: {
                        name: "String"
                    }
                },
                currentVersionedKeyIdentifier: {
                    readOnly: true,
                    serializedName: "currentVersionedKeyIdentifier",
                    type: {
                        name: "String"
                    }
                },
                lastKeyRotationTimestamp: {
                    readOnly: true,
                    serializedName: "lastKeyRotationTimestamp",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var EncryptionIdentity = {
        serializedName: "EncryptionIdentity",
        type: {
            name: "Composite",
            className: "EncryptionIdentity",
            modelProperties: {
                encryptionUserAssignedIdentity: {
                    serializedName: "userAssignedIdentity",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Encryption = {
        serializedName: "Encryption",
        type: {
            name: "Composite",
            className: "Encryption",
            modelProperties: {
                services: {
                    serializedName: "services",
                    type: {
                        name: "Composite",
                        className: "EncryptionServices"
                    }
                },
                keySource: {
                    required: true,
                    serializedName: "keySource",
                    defaultValue: 'Microsoft.Storage',
                    type: {
                        name: "String"
                    }
                },
                requireInfrastructureEncryption: {
                    serializedName: "requireInfrastructureEncryption",
                    type: {
                        name: "Boolean"
                    }
                },
                keyVaultProperties: {
                    serializedName: "keyvaultproperties",
                    type: {
                        name: "Composite",
                        className: "KeyVaultProperties"
                    }
                },
                encryptionIdentity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "EncryptionIdentity"
                    }
                }
            }
        }
    };
    var UserAssignedIdentity = {
        serializedName: "UserAssignedIdentity",
        type: {
            name: "Composite",
            className: "UserAssignedIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceAccessRule = {
        serializedName: "ResourceAccessRule",
        type: {
            name: "Composite",
            className: "ResourceAccessRule",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: {
                virtualNetworkResourceId: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    defaultValue: 'Allow',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow"
                        ]
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IPRule = {
        serializedName: "IPRule",
        type: {
            name: "Composite",
            className: "IPRule",
            modelProperties: {
                iPAddressOrRange: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    defaultValue: 'Allow',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow"
                        ]
                    }
                }
            }
        }
    };
    var NetworkRuleSet = {
        serializedName: "NetworkRuleSet",
        type: {
            name: "Composite",
            className: "NetworkRuleSet",
            modelProperties: {
                bypass: {
                    serializedName: "bypass",
                    defaultValue: 'AzureServices',
                    type: {
                        name: "String"
                    }
                },
                resourceAccessRules: {
                    serializedName: "resourceAccessRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceAccessRule"
                            }
                        }
                    }
                },
                virtualNetworkRules: {
                    serializedName: "virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                ipRules: {
                    serializedName: "ipRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPRule"
                            }
                        }
                    }
                },
                defaultAction: {
                    required: true,
                    serializedName: "defaultAction",
                    defaultValue: 'Allow',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow",
                            "Deny"
                        ]
                    }
                }
            }
        }
    };
    var ActiveDirectoryProperties = {
        serializedName: "ActiveDirectoryProperties",
        type: {
            name: "Composite",
            className: "ActiveDirectoryProperties",
            modelProperties: {
                domainName: {
                    required: true,
                    serializedName: "domainName",
                    type: {
                        name: "String"
                    }
                },
                netBiosDomainName: {
                    required: true,
                    serializedName: "netBiosDomainName",
                    type: {
                        name: "String"
                    }
                },
                forestName: {
                    required: true,
                    serializedName: "forestName",
                    type: {
                        name: "String"
                    }
                },
                domainGuid: {
                    required: true,
                    serializedName: "domainGuid",
                    type: {
                        name: "String"
                    }
                },
                domainSid: {
                    required: true,
                    serializedName: "domainSid",
                    type: {
                        name: "String"
                    }
                },
                azureStorageSid: {
                    required: true,
                    serializedName: "azureStorageSid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFilesIdentityBasedAuthentication = {
        serializedName: "AzureFilesIdentityBasedAuthentication",
        type: {
            name: "Composite",
            className: "AzureFilesIdentityBasedAuthentication",
            modelProperties: {
                directoryServiceOptions: {
                    required: true,
                    serializedName: "directoryServiceOptions",
                    type: {
                        name: "String"
                    }
                },
                activeDirectoryProperties: {
                    serializedName: "activeDirectoryProperties",
                    type: {
                        name: "Composite",
                        className: "ActiveDirectoryProperties"
                    }
                }
            }
        }
    };
    var RoutingPreference = {
        serializedName: "RoutingPreference",
        type: {
            name: "Composite",
            className: "RoutingPreference",
            modelProperties: {
                routingChoice: {
                    serializedName: "routingChoice",
                    type: {
                        name: "String"
                    }
                },
                publishMicrosoftEndpoints: {
                    serializedName: "publishMicrosoftEndpoints",
                    type: {
                        name: "Boolean"
                    }
                },
                publishInternetEndpoints: {
                    serializedName: "publishInternetEndpoints",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "UserAssignedIdentity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExtendedLocation = {
        serializedName: "ExtendedLocation",
        type: {
            name: "Composite",
            className: "ExtendedLocation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Premium"
                        ]
                    }
                }
            }
        }
    };
    var StorageAccountCreateParameters = {
        serializedName: "StorageAccountCreateParameters",
        type: {
            name: "Composite",
            className: "StorageAccountCreateParameters",
            modelProperties: {
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                },
                customDomain: {
                    serializedName: "properties.customDomain",
                    type: {
                        name: "Composite",
                        className: "CustomDomain"
                    }
                },
                encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                },
                networkRuleSet: {
                    serializedName: "properties.networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                },
                accessTier: {
                    serializedName: "properties.accessTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hot",
                            "Cool"
                        ]
                    }
                },
                azureFilesIdentityBasedAuthentication: {
                    serializedName: "properties.azureFilesIdentityBasedAuthentication",
                    type: {
                        name: "Composite",
                        className: "AzureFilesIdentityBasedAuthentication"
                    }
                },
                enableHttpsTrafficOnly: {
                    serializedName: "properties.supportsHttpsTrafficOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                isHnsEnabled: {
                    serializedName: "properties.isHnsEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                largeFileSharesState: {
                    serializedName: "properties.largeFileSharesState",
                    type: {
                        name: "String"
                    }
                },
                routingPreference: {
                    serializedName: "properties.routingPreference",
                    type: {
                        name: "Composite",
                        className: "RoutingPreference"
                    }
                },
                allowBlobPublicAccess: {
                    serializedName: "properties.allowBlobPublicAccess",
                    type: {
                        name: "Boolean"
                    }
                },
                minimumTlsVersion: {
                    serializedName: "properties.minimumTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                allowSharedKeyAccess: {
                    serializedName: "properties.allowSharedKeyAccess",
                    type: {
                        name: "Boolean"
                    }
                },
                enableNfsV3: {
                    serializedName: "properties.isNfsV3Enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var StorageAccountMicrosoftEndpoints = {
        serializedName: "StorageAccountMicrosoftEndpoints",
        type: {
            name: "Composite",
            className: "StorageAccountMicrosoftEndpoints",
            modelProperties: {
                blob: {
                    readOnly: true,
                    serializedName: "blob",
                    type: {
                        name: "String"
                    }
                },
                queue: {
                    readOnly: true,
                    serializedName: "queue",
                    type: {
                        name: "String"
                    }
                },
                table: {
                    readOnly: true,
                    serializedName: "table",
                    type: {
                        name: "String"
                    }
                },
                file: {
                    readOnly: true,
                    serializedName: "file",
                    type: {
                        name: "String"
                    }
                },
                web: {
                    readOnly: true,
                    serializedName: "web",
                    type: {
                        name: "String"
                    }
                },
                dfs: {
                    readOnly: true,
                    serializedName: "dfs",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountInternetEndpoints = {
        serializedName: "StorageAccountInternetEndpoints",
        type: {
            name: "Composite",
            className: "StorageAccountInternetEndpoints",
            modelProperties: {
                blob: {
                    readOnly: true,
                    serializedName: "blob",
                    type: {
                        name: "String"
                    }
                },
                file: {
                    readOnly: true,
                    serializedName: "file",
                    type: {
                        name: "String"
                    }
                },
                web: {
                    readOnly: true,
                    serializedName: "web",
                    type: {
                        name: "String"
                    }
                },
                dfs: {
                    readOnly: true,
                    serializedName: "dfs",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Endpoints = {
        serializedName: "Endpoints",
        type: {
            name: "Composite",
            className: "Endpoints",
            modelProperties: {
                blob: {
                    readOnly: true,
                    serializedName: "blob",
                    type: {
                        name: "String"
                    }
                },
                queue: {
                    readOnly: true,
                    serializedName: "queue",
                    type: {
                        name: "String"
                    }
                },
                table: {
                    readOnly: true,
                    serializedName: "table",
                    type: {
                        name: "String"
                    }
                },
                file: {
                    readOnly: true,
                    serializedName: "file",
                    type: {
                        name: "String"
                    }
                },
                web: {
                    readOnly: true,
                    serializedName: "web",
                    type: {
                        name: "String"
                    }
                },
                dfs: {
                    readOnly: true,
                    serializedName: "dfs",
                    type: {
                        name: "String"
                    }
                },
                microsoftEndpoints: {
                    serializedName: "microsoftEndpoints",
                    type: {
                        name: "Composite",
                        className: "StorageAccountMicrosoftEndpoints"
                    }
                },
                internetEndpoints: {
                    serializedName: "internetEndpoints",
                    type: {
                        name: "Composite",
                        className: "StorageAccountInternetEndpoints"
                    }
                }
            }
        }
    };
    var GeoReplicationStats = {
        serializedName: "GeoReplicationStats",
        type: {
            name: "Composite",
            className: "GeoReplicationStats",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                lastSyncTime: {
                    readOnly: true,
                    serializedName: "lastSyncTime",
                    type: {
                        name: "DateTime"
                    }
                },
                canFailover: {
                    readOnly: true,
                    serializedName: "canFailover",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var BlobRestoreRange = {
        serializedName: "BlobRestoreRange",
        type: {
            name: "Composite",
            className: "BlobRestoreRange",
            modelProperties: {
                startRange: {
                    required: true,
                    serializedName: "startRange",
                    type: {
                        name: "String"
                    }
                },
                endRange: {
                    required: true,
                    serializedName: "endRange",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobRestoreParameters = {
        serializedName: "BlobRestoreParameters",
        type: {
            name: "Composite",
            className: "BlobRestoreParameters",
            modelProperties: {
                timeToRestore: {
                    required: true,
                    serializedName: "timeToRestore",
                    type: {
                        name: "DateTime"
                    }
                },
                blobRanges: {
                    required: true,
                    serializedName: "blobRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BlobRestoreRange"
                            }
                        }
                    }
                }
            }
        }
    };
    var BlobRestoreStatus = {
        serializedName: "BlobRestoreStatus",
        type: {
            name: "Composite",
            className: "BlobRestoreStatus",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                failureReason: {
                    readOnly: true,
                    serializedName: "failureReason",
                    type: {
                        name: "String"
                    }
                },
                restoreId: {
                    readOnly: true,
                    serializedName: "restoreId",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Composite",
                        className: "BlobRestoreParameters"
                    }
                }
            }
        }
    };
    var PrivateEndpoint = {
        serializedName: "PrivateEndpoint",
        type: {
            name: "Composite",
            className: "PrivateEndpoint",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateLinkServiceConnectionState = {
        serializedName: "PrivateLinkServiceConnectionState",
        type: {
            name: "Composite",
            className: "PrivateLinkServiceConnectionState",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                actionRequired: {
                    serializedName: "actionRequired",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnection = {
        serializedName: "PrivateEndpointConnection",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnection",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { privateEndpoint: {
                    serializedName: "properties.privateEndpoint",
                    type: {
                        name: "Composite",
                        className: "PrivateEndpoint"
                    }
                }, privateLinkServiceConnectionState: {
                    required: true,
                    serializedName: "properties.privateLinkServiceConnectionState",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkServiceConnectionState"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var DeletedAccount = {
        serializedName: "DeletedAccount",
        type: {
            name: "Composite",
            className: "DeletedAccount",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { storageAccountResourceId: {
                    readOnly: true,
                    serializedName: "properties.storageAccountResourceId",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "properties.location",
                    type: {
                        name: "String"
                    }
                }, restoreReference: {
                    readOnly: true,
                    serializedName: "properties.restoreReference",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "String"
                    }
                }, deletionTime: {
                    readOnly: true,
                    serializedName: "properties.deletionTime",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StorageAccount = {
        serializedName: "StorageAccount",
        type: {
            name: "Composite",
            className: "StorageAccount",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "ResolvingDNS",
                            "Succeeded"
                        ]
                    }
                }, primaryEndpoints: {
                    readOnly: true,
                    serializedName: "properties.primaryEndpoints",
                    type: {
                        name: "Composite",
                        className: "Endpoints"
                    }
                }, primaryLocation: {
                    readOnly: true,
                    serializedName: "properties.primaryLocation",
                    type: {
                        name: "String"
                    }
                }, statusOfPrimary: {
                    readOnly: true,
                    serializedName: "properties.statusOfPrimary",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "available",
                            "unavailable"
                        ]
                    }
                }, lastGeoFailoverTime: {
                    readOnly: true,
                    serializedName: "properties.lastGeoFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                }, secondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.secondaryLocation",
                    type: {
                        name: "String"
                    }
                }, statusOfSecondary: {
                    readOnly: true,
                    serializedName: "properties.statusOfSecondary",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "available",
                            "unavailable"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, customDomain: {
                    readOnly: true,
                    serializedName: "properties.customDomain",
                    type: {
                        name: "Composite",
                        className: "CustomDomain"
                    }
                }, secondaryEndpoints: {
                    readOnly: true,
                    serializedName: "properties.secondaryEndpoints",
                    type: {
                        name: "Composite",
                        className: "Endpoints"
                    }
                }, encryption: {
                    readOnly: true,
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                }, accessTier: {
                    readOnly: true,
                    serializedName: "properties.accessTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hot",
                            "Cool"
                        ]
                    }
                }, azureFilesIdentityBasedAuthentication: {
                    serializedName: "properties.azureFilesIdentityBasedAuthentication",
                    type: {
                        name: "Composite",
                        className: "AzureFilesIdentityBasedAuthentication"
                    }
                }, enableHttpsTrafficOnly: {
                    serializedName: "properties.supportsHttpsTrafficOnly",
                    type: {
                        name: "Boolean"
                    }
                }, networkRuleSet: {
                    readOnly: true,
                    serializedName: "properties.networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                }, isHnsEnabled: {
                    serializedName: "properties.isHnsEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, geoReplicationStats: {
                    readOnly: true,
                    serializedName: "properties.geoReplicationStats",
                    type: {
                        name: "Composite",
                        className: "GeoReplicationStats"
                    }
                }, failoverInProgress: {
                    readOnly: true,
                    serializedName: "properties.failoverInProgress",
                    type: {
                        name: "Boolean"
                    }
                }, largeFileSharesState: {
                    serializedName: "properties.largeFileSharesState",
                    type: {
                        name: "String"
                    }
                }, privateEndpointConnections: {
                    readOnly: true,
                    serializedName: "properties.privateEndpointConnections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateEndpointConnection"
                            }
                        }
                    }
                }, routingPreference: {
                    serializedName: "properties.routingPreference",
                    type: {
                        name: "Composite",
                        className: "RoutingPreference"
                    }
                }, blobRestoreStatus: {
                    readOnly: true,
                    serializedName: "properties.blobRestoreStatus",
                    type: {
                        name: "Composite",
                        className: "BlobRestoreStatus"
                    }
                }, allowBlobPublicAccess: {
                    serializedName: "properties.allowBlobPublicAccess",
                    type: {
                        name: "Boolean"
                    }
                }, minimumTlsVersion: {
                    serializedName: "properties.minimumTlsVersion",
                    type: {
                        name: "String"
                    }
                }, allowSharedKeyAccess: {
                    serializedName: "properties.allowSharedKeyAccess",
                    type: {
                        name: "Boolean"
                    }
                }, enableNfsV3: {
                    serializedName: "properties.isNfsV3Enabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StorageAccountKey = {
        serializedName: "StorageAccountKey",
        type: {
            name: "Composite",
            className: "StorageAccountKey",
            modelProperties: {
                keyName: {
                    readOnly: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    readOnly: true,
                    serializedName: "permissions",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Read",
                            "Full"
                        ]
                    }
                }
            }
        }
    };
    var StorageAccountListKeysResult = {
        serializedName: "StorageAccountListKeysResult",
        type: {
            name: "Composite",
            className: "StorageAccountListKeysResult",
            modelProperties: {
                keys: {
                    readOnly: true,
                    serializedName: "keys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountRegenerateKeyParameters = {
        serializedName: "StorageAccountRegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "StorageAccountRegenerateKeyParameters",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountUpdateParameters = {
        serializedName: "StorageAccountUpdateParameters",
        type: {
            name: "Composite",
            className: "StorageAccountUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                },
                customDomain: {
                    serializedName: "properties.customDomain",
                    type: {
                        name: "Composite",
                        className: "CustomDomain"
                    }
                },
                encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                },
                accessTier: {
                    serializedName: "properties.accessTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hot",
                            "Cool"
                        ]
                    }
                },
                azureFilesIdentityBasedAuthentication: {
                    serializedName: "properties.azureFilesIdentityBasedAuthentication",
                    type: {
                        name: "Composite",
                        className: "AzureFilesIdentityBasedAuthentication"
                    }
                },
                enableHttpsTrafficOnly: {
                    serializedName: "properties.supportsHttpsTrafficOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                networkRuleSet: {
                    serializedName: "properties.networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                },
                largeFileSharesState: {
                    serializedName: "properties.largeFileSharesState",
                    type: {
                        name: "String"
                    }
                },
                routingPreference: {
                    serializedName: "properties.routingPreference",
                    type: {
                        name: "Composite",
                        className: "RoutingPreference"
                    }
                },
                allowBlobPublicAccess: {
                    serializedName: "properties.allowBlobPublicAccess",
                    type: {
                        name: "Boolean"
                    }
                },
                minimumTlsVersion: {
                    serializedName: "properties.minimumTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                allowSharedKeyAccess: {
                    serializedName: "properties.allowSharedKeyAccess",
                    type: {
                        name: "Boolean"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageName = {
        serializedName: "UsageName",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "Percent",
                            "CountsPerSecond",
                            "BytesPerSecond"
                        ]
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var AccountSasParameters = {
        serializedName: "AccountSasParameters",
        type: {
            name: "Composite",
            className: "AccountSasParameters",
            modelProperties: {
                services: {
                    required: true,
                    serializedName: "signedServices",
                    type: {
                        name: "String"
                    }
                },
                resourceTypes: {
                    required: true,
                    serializedName: "signedResourceTypes",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    required: true,
                    serializedName: "signedPermission",
                    type: {
                        name: "String"
                    }
                },
                iPAddressOrRange: {
                    serializedName: "signedIp",
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "signedProtocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "https,http",
                            "https"
                        ]
                    }
                },
                sharedAccessStartTime: {
                    serializedName: "signedStart",
                    type: {
                        name: "DateTime"
                    }
                },
                sharedAccessExpiryTime: {
                    required: true,
                    serializedName: "signedExpiry",
                    type: {
                        name: "DateTime"
                    }
                },
                keyToSign: {
                    serializedName: "keyToSign",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListAccountSasResponse = {
        serializedName: "ListAccountSasResponse",
        type: {
            name: "Composite",
            className: "ListAccountSasResponse",
            modelProperties: {
                accountSasToken: {
                    readOnly: true,
                    serializedName: "accountSasToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSasParameters = {
        serializedName: "ServiceSasParameters",
        type: {
            name: "Composite",
            className: "ServiceSasParameters",
            modelProperties: {
                canonicalizedResource: {
                    required: true,
                    serializedName: "canonicalizedResource",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "signedResource",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    serializedName: "signedPermission",
                    type: {
                        name: "String"
                    }
                },
                iPAddressOrRange: {
                    serializedName: "signedIp",
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "signedProtocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "https,http",
                            "https"
                        ]
                    }
                },
                sharedAccessStartTime: {
                    serializedName: "signedStart",
                    type: {
                        name: "DateTime"
                    }
                },
                sharedAccessExpiryTime: {
                    serializedName: "signedExpiry",
                    type: {
                        name: "DateTime"
                    }
                },
                identifier: {
                    serializedName: "signedIdentifier",
                    constraints: {
                        MaxLength: 64
                    },
                    type: {
                        name: "String"
                    }
                },
                partitionKeyStart: {
                    serializedName: "startPk",
                    type: {
                        name: "String"
                    }
                },
                partitionKeyEnd: {
                    serializedName: "endPk",
                    type: {
                        name: "String"
                    }
                },
                rowKeyStart: {
                    serializedName: "startRk",
                    type: {
                        name: "String"
                    }
                },
                rowKeyEnd: {
                    serializedName: "endRk",
                    type: {
                        name: "String"
                    }
                },
                keyToSign: {
                    serializedName: "keyToSign",
                    type: {
                        name: "String"
                    }
                },
                cacheControl: {
                    serializedName: "rscc",
                    type: {
                        name: "String"
                    }
                },
                contentDisposition: {
                    serializedName: "rscd",
                    type: {
                        name: "String"
                    }
                },
                contentEncoding: {
                    serializedName: "rsce",
                    type: {
                        name: "String"
                    }
                },
                contentLanguage: {
                    serializedName: "rscl",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "rsct",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListServiceSasResponse = {
        serializedName: "ListServiceSasResponse",
        type: {
            name: "Composite",
            className: "ListServiceSasResponse",
            modelProperties: {
                serviceSasToken: {
                    readOnly: true,
                    serializedName: "serviceSasToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DateAfterModification = {
        serializedName: "DateAfterModification",
        type: {
            name: "Composite",
            className: "DateAfterModification",
            modelProperties: {
                daysAfterModificationGreaterThan: {
                    serializedName: "daysAfterModificationGreaterThan",
                    constraints: {
                        InclusiveMinimum: 0,
                        MultipleOf: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                daysAfterLastAccessTimeGreaterThan: {
                    serializedName: "daysAfterLastAccessTimeGreaterThan",
                    constraints: {
                        InclusiveMinimum: 0,
                        MultipleOf: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagementPolicyBaseBlob = {
        serializedName: "ManagementPolicyBaseBlob",
        type: {
            name: "Composite",
            className: "ManagementPolicyBaseBlob",
            modelProperties: {
                tierToCool: {
                    serializedName: "tierToCool",
                    type: {
                        name: "Composite",
                        className: "DateAfterModification"
                    }
                },
                tierToArchive: {
                    serializedName: "tierToArchive",
                    type: {
                        name: "Composite",
                        className: "DateAfterModification"
                    }
                },
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Composite",
                        className: "DateAfterModification"
                    }
                },
                enableAutoTierToHotFromCool: {
                    serializedName: "enableAutoTierToHotFromCool",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DateAfterCreation = {
        serializedName: "DateAfterCreation",
        type: {
            name: "Composite",
            className: "DateAfterCreation",
            modelProperties: {
                daysAfterCreationGreaterThan: {
                    required: true,
                    serializedName: "daysAfterCreationGreaterThan",
                    constraints: {
                        InclusiveMinimum: 0,
                        MultipleOf: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagementPolicySnapShot = {
        serializedName: "ManagementPolicySnapShot",
        type: {
            name: "Composite",
            className: "ManagementPolicySnapShot",
            modelProperties: {
                tierToCool: {
                    serializedName: "tierToCool",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                },
                tierToArchive: {
                    serializedName: "tierToArchive",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                },
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                }
            }
        }
    };
    var ManagementPolicyVersion = {
        serializedName: "ManagementPolicyVersion",
        type: {
            name: "Composite",
            className: "ManagementPolicyVersion",
            modelProperties: {
                tierToCool: {
                    serializedName: "tierToCool",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                },
                tierToArchive: {
                    serializedName: "tierToArchive",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                },
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                }
            }
        }
    };
    var ManagementPolicyAction = {
        serializedName: "ManagementPolicyAction",
        type: {
            name: "Composite",
            className: "ManagementPolicyAction",
            modelProperties: {
                baseBlob: {
                    serializedName: "baseBlob",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyBaseBlob"
                    }
                },
                snapshot: {
                    serializedName: "snapshot",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicySnapShot"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyVersion"
                    }
                }
            }
        }
    };
    var TagFilter = {
        serializedName: "TagFilter",
        type: {
            name: "Composite",
            className: "TagFilter",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 128,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                op: {
                    required: true,
                    serializedName: "op",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagementPolicyFilter = {
        serializedName: "ManagementPolicyFilter",
        type: {
            name: "Composite",
            className: "ManagementPolicyFilter",
            modelProperties: {
                prefixMatch: {
                    serializedName: "prefixMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                blobTypes: {
                    required: true,
                    serializedName: "blobTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                blobIndexMatch: {
                    serializedName: "blobIndexMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagFilter"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementPolicyDefinition = {
        serializedName: "ManagementPolicyDefinition",
        type: {
            name: "Composite",
            className: "ManagementPolicyDefinition",
            modelProperties: {
                actions: {
                    required: true,
                    serializedName: "actions",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyAction"
                    }
                },
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyFilter"
                    }
                }
            }
        }
    };
    var ManagementPolicyRule = {
        serializedName: "ManagementPolicyRule",
        type: {
            name: "Composite",
            className: "ManagementPolicyRule",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Lifecycle',
                    type: {
                        name: "String"
                    }
                },
                definition: {
                    required: true,
                    serializedName: "definition",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyDefinition"
                    }
                }
            }
        }
    };
    var ManagementPolicySchema = {
        serializedName: "ManagementPolicySchema",
        type: {
            name: "Composite",
            className: "ManagementPolicySchema",
            modelProperties: {
                rules: {
                    required: true,
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementPolicyRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementPolicy = {
        serializedName: "ManagementPolicy",
        type: {
            name: "Composite",
            className: "ManagementPolicy",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, policy: {
                    required: true,
                    serializedName: "properties.policy",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicySchema"
                    }
                } })
        }
    };
    var EncryptionScopeKeyVaultProperties = {
        serializedName: "EncryptionScopeKeyVaultProperties",
        type: {
            name: "Composite",
            className: "EncryptionScopeKeyVaultProperties",
            modelProperties: {
                keyUri: {
                    serializedName: "keyUri",
                    type: {
                        name: "String"
                    }
                },
                currentVersionedKeyIdentifier: {
                    readOnly: true,
                    serializedName: "currentVersionedKeyIdentifier",
                    type: {
                        name: "String"
                    }
                },
                lastKeyRotationTimestamp: {
                    readOnly: true,
                    serializedName: "lastKeyRotationTimestamp",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var EncryptionScope = {
        serializedName: "EncryptionScope",
        type: {
            name: "Composite",
            className: "EncryptionScope",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { source: {
                    serializedName: "properties.source",
                    type: {
                        name: "String"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, keyVaultProperties: {
                    serializedName: "properties.keyVaultProperties",
                    type: {
                        name: "Composite",
                        className: "EncryptionScopeKeyVaultProperties"
                    }
                }, requireInfrastructureEncryption: {
                    serializedName: "properties.requireInfrastructureEncryption",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ObjectReplicationPolicyFilter = {
        serializedName: "ObjectReplicationPolicyFilter",
        type: {
            name: "Composite",
            className: "ObjectReplicationPolicyFilter",
            modelProperties: {
                prefixMatch: {
                    serializedName: "prefixMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                minCreationTime: {
                    serializedName: "minCreationTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ObjectReplicationPolicyRule = {
        serializedName: "ObjectReplicationPolicyRule",
        type: {
            name: "Composite",
            className: "ObjectReplicationPolicyRule",
            modelProperties: {
                ruleId: {
                    serializedName: "ruleId",
                    type: {
                        name: "String"
                    }
                },
                sourceContainer: {
                    required: true,
                    serializedName: "sourceContainer",
                    type: {
                        name: "String"
                    }
                },
                destinationContainer: {
                    required: true,
                    serializedName: "destinationContainer",
                    type: {
                        name: "String"
                    }
                },
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "ObjectReplicationPolicyFilter"
                    }
                }
            }
        }
    };
    var ObjectReplicationPolicy = {
        serializedName: "ObjectReplicationPolicy",
        type: {
            name: "Composite",
            className: "ObjectReplicationPolicy",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { policyId: {
                    readOnly: true,
                    serializedName: "properties.policyId",
                    type: {
                        name: "String"
                    }
                }, enabledTime: {
                    readOnly: true,
                    serializedName: "properties.enabledTime",
                    type: {
                        name: "DateTime"
                    }
                }, sourceAccount: {
                    required: true,
                    serializedName: "properties.sourceAccount",
                    type: {
                        name: "String"
                    }
                }, destinationAccount: {
                    required: true,
                    serializedName: "properties.destinationAccount",
                    type: {
                        name: "String"
                    }
                }, rules: {
                    serializedName: "properties.rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ObjectReplicationPolicyRule"
                            }
                        }
                    }
                } })
        }
    };
    var BlobInventoryPolicyFilter = {
        serializedName: "BlobInventoryPolicyFilter",
        type: {
            name: "Composite",
            className: "BlobInventoryPolicyFilter",
            modelProperties: {
                prefixMatch: {
                    serializedName: "prefixMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                blobTypes: {
                    required: true,
                    serializedName: "blobTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                includeBlobVersions: {
                    serializedName: "includeBlobVersions",
                    type: {
                        name: "Boolean"
                    }
                },
                includeSnapshots: {
                    serializedName: "includeSnapshots",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var BlobInventoryPolicyDefinition = {
        serializedName: "BlobInventoryPolicyDefinition",
        type: {
            name: "Composite",
            className: "BlobInventoryPolicyDefinition",
            modelProperties: {
                filters: {
                    required: true,
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "BlobInventoryPolicyFilter"
                    }
                }
            }
        }
    };
    var BlobInventoryPolicyRule = {
        serializedName: "BlobInventoryPolicyRule",
        type: {
            name: "Composite",
            className: "BlobInventoryPolicyRule",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                definition: {
                    required: true,
                    serializedName: "definition",
                    type: {
                        name: "Composite",
                        className: "BlobInventoryPolicyDefinition"
                    }
                }
            }
        }
    };
    var BlobInventoryPolicySchema = {
        serializedName: "BlobInventoryPolicySchema",
        type: {
            name: "Composite",
            className: "BlobInventoryPolicySchema",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Inventory',
                    type: {
                        name: "String"
                    }
                },
                rules: {
                    required: true,
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BlobInventoryPolicyRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var SystemData = {
        serializedName: "systemData",
        type: {
            name: "Composite",
            className: "SystemData",
            modelProperties: {
                createdBy: {
                    serializedName: "createdBy",
                    type: {
                        name: "String"
                    }
                },
                createdByType: {
                    serializedName: "createdByType",
                    type: {
                        name: "String"
                    }
                },
                createdAt: {
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedBy: {
                    serializedName: "lastModifiedBy",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedByType: {
                    serializedName: "lastModifiedByType",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedAt: {
                    serializedName: "lastModifiedAt",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var BlobInventoryPolicy = {
        serializedName: "BlobInventoryPolicy",
        type: {
            name: "Composite",
            className: "BlobInventoryPolicy",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, policy: {
                    required: true,
                    serializedName: "properties.policy",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "BlobInventoryPolicySchema"
                    }
                }, systemData: {
                    serializedName: "systemData",
                    type: {
                        name: "Composite",
                        className: "SystemData"
                    }
                } })
        }
    };
    var ErrorResponseBody = {
        serializedName: "ErrorResponseBody",
        type: {
            name: "Composite",
            className: "ErrorResponseBody",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponseBody"
                    }
                }
            }
        }
    };
    var AzureEntityResource = {
        serializedName: "AzureEntityResource",
        type: {
            name: "Composite",
            className: "AzureEntityResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PrivateLinkResource = {
        serializedName: "PrivateLinkResource",
        type: {
            name: "Composite",
            className: "PrivateLinkResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { groupId: {
                    readOnly: true,
                    serializedName: "properties.groupId",
                    type: {
                        name: "String"
                    }
                }, requiredMembers: {
                    readOnly: true,
                    serializedName: "properties.requiredMembers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, requiredZoneNames: {
                    serializedName: "properties.requiredZoneNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var PrivateLinkResourceListResult = {
        serializedName: "PrivateLinkResourceListResult",
        type: {
            name: "Composite",
            className: "PrivateLinkResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateLinkResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateHistoryProperty = {
        serializedName: "UpdateHistoryProperty",
        type: {
            name: "Composite",
            className: "UpdateHistoryProperty",
            modelProperties: {
                update: {
                    readOnly: true,
                    serializedName: "update",
                    type: {
                        name: "String"
                    }
                },
                immutabilityPeriodSinceCreationInDays: {
                    readOnly: true,
                    serializedName: "immutabilityPeriodSinceCreationInDays",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                objectIdentifier: {
                    readOnly: true,
                    serializedName: "objectIdentifier",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                upn: {
                    readOnly: true,
                    serializedName: "upn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImmutabilityPolicyProperties = {
        serializedName: "ImmutabilityPolicyProperties",
        type: {
            name: "Composite",
            className: "ImmutabilityPolicyProperties",
            modelProperties: {
                immutabilityPeriodSinceCreationInDays: {
                    serializedName: "properties.immutabilityPeriodSinceCreationInDays",
                    type: {
                        name: "Number"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                allowProtectedAppendWrites: {
                    serializedName: "properties.allowProtectedAppendWrites",
                    type: {
                        name: "Boolean"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                updateHistory: {
                    readOnly: true,
                    serializedName: "updateHistory",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateHistoryProperty"
                            }
                        }
                    }
                }
            }
        }
    };
    var TagProperty = {
        serializedName: "TagProperty",
        type: {
            name: "Composite",
            className: "TagProperty",
            modelProperties: {
                tag: {
                    readOnly: true,
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                objectIdentifier: {
                    readOnly: true,
                    serializedName: "objectIdentifier",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                upn: {
                    readOnly: true,
                    serializedName: "upn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LegalHoldProperties = {
        serializedName: "LegalHoldProperties",
        type: {
            name: "Composite",
            className: "LegalHoldProperties",
            modelProperties: {
                hasLegalHold: {
                    readOnly: true,
                    serializedName: "hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagProperty"
                            }
                        }
                    }
                }
            }
        }
    };
    var BlobContainer = {
        serializedName: "BlobContainer",
        type: {
            name: "Composite",
            className: "BlobContainer",
            modelProperties: __assign(__assign({}, AzureEntityResource.type.modelProperties), { version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, deleted: {
                    readOnly: true,
                    serializedName: "properties.deleted",
                    type: {
                        name: "Boolean"
                    }
                }, deletedTime: {
                    readOnly: true,
                    serializedName: "properties.deletedTime",
                    type: {
                        name: "DateTime"
                    }
                }, remainingRetentionDays: {
                    readOnly: true,
                    serializedName: "properties.remainingRetentionDays",
                    type: {
                        name: "Number"
                    }
                }, defaultEncryptionScope: {
                    serializedName: "properties.defaultEncryptionScope",
                    type: {
                        name: "String"
                    }
                }, denyEncryptionScopeOverride: {
                    serializedName: "properties.denyEncryptionScopeOverride",
                    type: {
                        name: "Boolean"
                    }
                }, publicAccess: {
                    serializedName: "properties.publicAccess",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Container",
                            "Blob",
                            "None"
                        ]
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, leaseStatus: {
                    readOnly: true,
                    serializedName: "properties.leaseStatus",
                    type: {
                        name: "String"
                    }
                }, leaseState: {
                    readOnly: true,
                    serializedName: "properties.leaseState",
                    type: {
                        name: "String"
                    }
                }, leaseDuration: {
                    readOnly: true,
                    serializedName: "properties.leaseDuration",
                    type: {
                        name: "String"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, immutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.immutabilityPolicy",
                    type: {
                        name: "Composite",
                        className: "ImmutabilityPolicyProperties"
                    }
                }, legalHold: {
                    readOnly: true,
                    serializedName: "properties.legalHold",
                    type: {
                        name: "Composite",
                        className: "LegalHoldProperties"
                    }
                }, hasLegalHold: {
                    readOnly: true,
                    serializedName: "properties.hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                }, hasImmutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.hasImmutabilityPolicy",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ImmutabilityPolicy = {
        serializedName: "ImmutabilityPolicy",
        type: {
            name: "Composite",
            className: "ImmutabilityPolicy",
            modelProperties: __assign(__assign({}, AzureEntityResource.type.modelProperties), { immutabilityPeriodSinceCreationInDays: {
                    serializedName: "properties.immutabilityPeriodSinceCreationInDays",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, allowProtectedAppendWrites: {
                    serializedName: "properties.allowProtectedAppendWrites",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var LegalHold = {
        serializedName: "LegalHold",
        type: {
            name: "Composite",
            className: "LegalHold",
            modelProperties: {
                hasLegalHold: {
                    readOnly: true,
                    serializedName: "hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    required: true,
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListContainerItem = {
        serializedName: "ListContainerItem",
        type: {
            name: "Composite",
            className: "ListContainerItem",
            modelProperties: __assign(__assign({}, AzureEntityResource.type.modelProperties), { version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, deleted: {
                    readOnly: true,
                    serializedName: "properties.deleted",
                    type: {
                        name: "Boolean"
                    }
                }, deletedTime: {
                    readOnly: true,
                    serializedName: "properties.deletedTime",
                    type: {
                        name: "DateTime"
                    }
                }, remainingRetentionDays: {
                    readOnly: true,
                    serializedName: "properties.remainingRetentionDays",
                    type: {
                        name: "Number"
                    }
                }, defaultEncryptionScope: {
                    serializedName: "properties.defaultEncryptionScope",
                    type: {
                        name: "String"
                    }
                }, denyEncryptionScopeOverride: {
                    serializedName: "properties.denyEncryptionScopeOverride",
                    type: {
                        name: "Boolean"
                    }
                }, publicAccess: {
                    serializedName: "properties.publicAccess",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Container",
                            "Blob",
                            "None"
                        ]
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, leaseStatus: {
                    readOnly: true,
                    serializedName: "properties.leaseStatus",
                    type: {
                        name: "String"
                    }
                }, leaseState: {
                    readOnly: true,
                    serializedName: "properties.leaseState",
                    type: {
                        name: "String"
                    }
                }, leaseDuration: {
                    readOnly: true,
                    serializedName: "properties.leaseDuration",
                    type: {
                        name: "String"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, immutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.immutabilityPolicy",
                    type: {
                        name: "Composite",
                        className: "ImmutabilityPolicyProperties"
                    }
                }, legalHold: {
                    readOnly: true,
                    serializedName: "properties.legalHold",
                    type: {
                        name: "Composite",
                        className: "LegalHoldProperties"
                    }
                }, hasLegalHold: {
                    readOnly: true,
                    serializedName: "properties.hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                }, hasImmutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.hasImmutabilityPolicy",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var CorsRule = {
        serializedName: "CorsRule",
        type: {
            name: "Composite",
            className: "CorsRule",
            modelProperties: {
                allowedOrigins: {
                    required: true,
                    serializedName: "allowedOrigins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                allowedMethods: {
                    required: true,
                    serializedName: "allowedMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                maxAgeInSeconds: {
                    required: true,
                    serializedName: "maxAgeInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                exposedHeaders: {
                    required: true,
                    serializedName: "exposedHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                allowedHeaders: {
                    required: true,
                    serializedName: "allowedHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CorsRules = {
        serializedName: "CorsRules",
        type: {
            name: "Composite",
            className: "CorsRules",
            modelProperties: {
                corsRules: {
                    serializedName: "corsRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CorsRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeleteRetentionPolicy = {
        serializedName: "DeleteRetentionPolicy",
        type: {
            name: "Composite",
            className: "DeleteRetentionPolicy",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                days: {
                    serializedName: "days",
                    constraints: {
                        InclusiveMaximum: 365,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ChangeFeed = {
        serializedName: "ChangeFeed",
        type: {
            name: "Composite",
            className: "ChangeFeed",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                retentionInDays: {
                    serializedName: "retentionInDays",
                    constraints: {
                        InclusiveMaximum: 146000,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RestorePolicyProperties = {
        serializedName: "RestorePolicyProperties",
        type: {
            name: "Composite",
            className: "RestorePolicyProperties",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                days: {
                    serializedName: "days",
                    constraints: {
                        InclusiveMaximum: 365,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                lastEnabledTime: {
                    readOnly: true,
                    serializedName: "lastEnabledTime",
                    type: {
                        name: "DateTime"
                    }
                },
                minRestoreTime: {
                    readOnly: true,
                    serializedName: "minRestoreTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var LastAccessTimeTrackingPolicy = {
        serializedName: "LastAccessTimeTrackingPolicy",
        type: {
            name: "Composite",
            className: "LastAccessTimeTrackingPolicy",
            modelProperties: {
                enable: {
                    required: true,
                    serializedName: "enable",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                trackingGranularityInDays: {
                    serializedName: "trackingGranularityInDays",
                    type: {
                        name: "Number"
                    }
                },
                blobType: {
                    serializedName: "blobType",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var BlobServiceProperties = {
        serializedName: "BlobServiceProperties",
        type: {
            name: "Composite",
            className: "BlobServiceProperties",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { cors: {
                    serializedName: "properties.cors",
                    type: {
                        name: "Composite",
                        className: "CorsRules"
                    }
                }, defaultServiceVersion: {
                    serializedName: "properties.defaultServiceVersion",
                    type: {
                        name: "String"
                    }
                }, deleteRetentionPolicy: {
                    serializedName: "properties.deleteRetentionPolicy",
                    type: {
                        name: "Composite",
                        className: "DeleteRetentionPolicy"
                    }
                }, isVersioningEnabled: {
                    serializedName: "properties.isVersioningEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, automaticSnapshotPolicyEnabled: {
                    serializedName: "properties.automaticSnapshotPolicyEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, changeFeed: {
                    serializedName: "properties.changeFeed",
                    type: {
                        name: "Composite",
                        className: "ChangeFeed"
                    }
                }, restorePolicy: {
                    serializedName: "properties.restorePolicy",
                    type: {
                        name: "Composite",
                        className: "RestorePolicyProperties"
                    }
                }, containerDeleteRetentionPolicy: {
                    serializedName: "properties.containerDeleteRetentionPolicy",
                    type: {
                        name: "Composite",
                        className: "DeleteRetentionPolicy"
                    }
                }, lastAccessTimeTrackingPolicy: {
                    serializedName: "properties.lastAccessTimeTrackingPolicy",
                    type: {
                        name: "Composite",
                        className: "LastAccessTimeTrackingPolicy"
                    }
                }, sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var LeaseContainerRequest = {
        serializedName: "LeaseContainerRequest",
        type: {
            name: "Composite",
            className: "LeaseContainerRequest",
            modelProperties: {
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                leaseId: {
                    serializedName: "leaseId",
                    type: {
                        name: "String"
                    }
                },
                breakPeriod: {
                    serializedName: "breakPeriod",
                    type: {
                        name: "Number"
                    }
                },
                leaseDuration: {
                    serializedName: "leaseDuration",
                    type: {
                        name: "Number"
                    }
                },
                proposedLeaseId: {
                    serializedName: "proposedLeaseId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LeaseContainerResponse = {
        serializedName: "LeaseContainerResponse",
        type: {
            name: "Composite",
            className: "LeaseContainerResponse",
            modelProperties: {
                leaseId: {
                    serializedName: "leaseId",
                    type: {
                        name: "String"
                    }
                },
                leaseTimeSeconds: {
                    serializedName: "leaseTimeSeconds",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Multichannel = {
        serializedName: "Multichannel",
        type: {
            name: "Composite",
            className: "Multichannel",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SmbSetting = {
        serializedName: "SmbSetting",
        type: {
            name: "Composite",
            className: "SmbSetting",
            modelProperties: {
                multichannel: {
                    serializedName: "multichannel",
                    type: {
                        name: "Composite",
                        className: "Multichannel"
                    }
                },
                versions: {
                    serializedName: "versions",
                    type: {
                        name: "String"
                    }
                },
                authenticationMethods: {
                    serializedName: "authenticationMethods",
                    type: {
                        name: "String"
                    }
                },
                kerberosTicketEncryption: {
                    serializedName: "kerberosTicketEncryption",
                    type: {
                        name: "String"
                    }
                },
                channelEncryption: {
                    serializedName: "channelEncryption",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtocolSettings = {
        serializedName: "ProtocolSettings",
        type: {
            name: "Composite",
            className: "ProtocolSettings",
            modelProperties: {
                smb: {
                    serializedName: "smb",
                    type: {
                        name: "Composite",
                        className: "SmbSetting"
                    }
                }
            }
        }
    };
    var FileServiceProperties = {
        serializedName: "FileServiceProperties",
        type: {
            name: "Composite",
            className: "FileServiceProperties",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { cors: {
                    serializedName: "properties.cors",
                    type: {
                        name: "Composite",
                        className: "CorsRules"
                    }
                }, shareDeleteRetentionPolicy: {
                    serializedName: "properties.shareDeleteRetentionPolicy",
                    type: {
                        name: "Composite",
                        className: "DeleteRetentionPolicy"
                    }
                }, protocolSettings: {
                    serializedName: "properties.protocolSettings",
                    type: {
                        name: "Composite",
                        className: "ProtocolSettings"
                    }
                }, sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var FileServiceItems = {
        serializedName: "FileServiceItems",
        type: {
            name: "Composite",
            className: "FileServiceItems",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileServiceProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var FileShare = {
        serializedName: "FileShare",
        type: {
            name: "Composite",
            className: "FileShare",
            modelProperties: __assign(__assign({}, AzureEntityResource.type.modelProperties), { lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, shareQuota: {
                    serializedName: "properties.shareQuota",
                    constraints: {
                        InclusiveMaximum: 102400,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, enabledProtocols: {
                    serializedName: "properties.enabledProtocols",
                    type: {
                        name: "String"
                    }
                }, rootSquash: {
                    serializedName: "properties.rootSquash",
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, deleted: {
                    readOnly: true,
                    serializedName: "properties.deleted",
                    type: {
                        name: "Boolean"
                    }
                }, deletedTime: {
                    readOnly: true,
                    serializedName: "properties.deletedTime",
                    type: {
                        name: "DateTime"
                    }
                }, remainingRetentionDays: {
                    readOnly: true,
                    serializedName: "properties.remainingRetentionDays",
                    type: {
                        name: "Number"
                    }
                }, accessTier: {
                    serializedName: "properties.accessTier",
                    type: {
                        name: "String"
                    }
                }, accessTierChangeTime: {
                    readOnly: true,
                    serializedName: "properties.accessTierChangeTime",
                    type: {
                        name: "DateTime"
                    }
                }, accessTierStatus: {
                    readOnly: true,
                    serializedName: "properties.accessTierStatus",
                    type: {
                        name: "String"
                    }
                }, shareUsageBytes: {
                    readOnly: true,
                    serializedName: "properties.shareUsageBytes",
                    type: {
                        name: "Number"
                    }
                }, snapshotTime: {
                    readOnly: true,
                    serializedName: "properties.snapshotTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var DeletedShare = {
        serializedName: "DeletedShare",
        type: {
            name: "Composite",
            className: "DeletedShare",
            modelProperties: {
                deletedShareName: {
                    required: true,
                    serializedName: "deletedShareName",
                    type: {
                        name: "String"
                    }
                },
                deletedShareVersion: {
                    required: true,
                    serializedName: "deletedShareVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileShareItem = {
        serializedName: "FileShareItem",
        type: {
            name: "Composite",
            className: "FileShareItem",
            modelProperties: __assign(__assign({}, AzureEntityResource.type.modelProperties), { lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, shareQuota: {
                    serializedName: "properties.shareQuota",
                    constraints: {
                        InclusiveMaximum: 102400,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, enabledProtocols: {
                    serializedName: "properties.enabledProtocols",
                    type: {
                        name: "String"
                    }
                }, rootSquash: {
                    serializedName: "properties.rootSquash",
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, deleted: {
                    readOnly: true,
                    serializedName: "properties.deleted",
                    type: {
                        name: "Boolean"
                    }
                }, deletedTime: {
                    readOnly: true,
                    serializedName: "properties.deletedTime",
                    type: {
                        name: "DateTime"
                    }
                }, remainingRetentionDays: {
                    readOnly: true,
                    serializedName: "properties.remainingRetentionDays",
                    type: {
                        name: "Number"
                    }
                }, accessTier: {
                    serializedName: "properties.accessTier",
                    type: {
                        name: "String"
                    }
                }, accessTierChangeTime: {
                    readOnly: true,
                    serializedName: "properties.accessTierChangeTime",
                    type: {
                        name: "DateTime"
                    }
                }, accessTierStatus: {
                    readOnly: true,
                    serializedName: "properties.accessTierStatus",
                    type: {
                        name: "String"
                    }
                }, shareUsageBytes: {
                    readOnly: true,
                    serializedName: "properties.shareUsageBytes",
                    type: {
                        name: "Number"
                    }
                }, snapshotTime: {
                    readOnly: true,
                    serializedName: "properties.snapshotTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var QueueServiceProperties = {
        serializedName: "QueueServiceProperties",
        type: {
            name: "Composite",
            className: "QueueServiceProperties",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { cors: {
                    serializedName: "properties.cors",
                    type: {
                        name: "Composite",
                        className: "CorsRules"
                    }
                } })
        }
    };
    var ListQueueServices = {
        serializedName: "ListQueueServices",
        type: {
            name: "Composite",
            className: "ListQueueServices",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QueueServiceProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageQueue = {
        serializedName: "StorageQueue",
        type: {
            name: "Composite",
            className: "StorageQueue",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, approximateMessageCount: {
                    readOnly: true,
                    serializedName: "properties.approximateMessageCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ListQueue = {
        serializedName: "ListQueue",
        type: {
            name: "Composite",
            className: "ListQueue",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var TableServiceProperties = {
        serializedName: "TableServiceProperties",
        type: {
            name: "Composite",
            className: "TableServiceProperties",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { cors: {
                    serializedName: "properties.cors",
                    type: {
                        name: "Composite",
                        className: "CorsRules"
                    }
                } })
        }
    };
    var ListTableServices = {
        serializedName: "ListTableServices",
        type: {
            name: "Composite",
            className: "ListTableServices",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TableServiceProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var Table = {
        serializedName: "Table",
        type: {
            name: "Composite",
            className: "Table",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tableName: {
                    readOnly: true,
                    serializedName: "properties.tableName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BlobContainersCreateOrUpdateImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-createorupdateimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersCreateOrUpdateImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersGetImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-getimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersGetImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersDeleteImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-deleteimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersDeleteImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersLockImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-lockimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersLockImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersExtendImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-extendimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersExtendImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageSkuListResult = {
        serializedName: "StorageSkuListResult",
        type: {
            name: "Composite",
            className: "StorageSkuListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuInformation"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountListResult = {
        serializedName: "StorageAccountListResult",
        type: {
            name: "Composite",
            className: "StorageAccountListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeletedAccountListResult = {
        serializedName: "DeletedAccountListResult",
        type: {
            name: "Composite",
            className: "DeletedAccountListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeletedAccount"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageListResult = {
        serializedName: "UsageListResult",
        type: {
            name: "Composite",
            className: "UsageListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListBlobInventoryPolicy = {
        serializedName: "ListBlobInventoryPolicy",
        type: {
            name: "Composite",
            className: "ListBlobInventoryPolicy",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BlobInventoryPolicy"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrivateEndpointConnectionListResult = {
        serializedName: "PrivateEndpointConnectionListResult",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateEndpointConnection"
                            }
                        }
                    }
                }
            }
        }
    };
    var ObjectReplicationPolicies = {
        serializedName: "ObjectReplicationPolicies",
        type: {
            name: "Composite",
            className: "ObjectReplicationPolicies",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ObjectReplicationPolicy"
                            }
                        }
                    }
                }
            }
        }
    };
    var EncryptionScopeListResult = {
        serializedName: "EncryptionScopeListResult",
        type: {
            name: "Composite",
            className: "EncryptionScopeListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EncryptionScope"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobServiceItems = {
        serializedName: "BlobServiceItems",
        type: {
            name: "Composite",
            className: "BlobServiceItems",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BlobServiceProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListContainerItems = {
        serializedName: "ListContainerItems",
        type: {
            name: "Composite",
            className: "ListContainerItems",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ListContainerItem"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileShareItems = {
        serializedName: "FileShareItems",
        type: {
            name: "Composite",
            className: "FileShareItems",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileShareItem"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListQueueResource = {
        serializedName: "ListQueueResource",
        type: {
            name: "Composite",
            className: "ListQueueResource",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ListQueue"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListTableResource = {
        serializedName: "ListTableResource",
        type: {
            name: "Composite",
            className: "ListTableResource",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Table"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification,
        Operation: Operation,
        StorageAccountCheckNameAvailabilityParameters: StorageAccountCheckNameAvailabilityParameters,
        SKUCapability: SKUCapability,
        Restriction: Restriction,
        SkuInformation: SkuInformation,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        CustomDomain: CustomDomain,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        KeyVaultProperties: KeyVaultProperties,
        EncryptionIdentity: EncryptionIdentity,
        Encryption: Encryption,
        UserAssignedIdentity: UserAssignedIdentity,
        ResourceAccessRule: ResourceAccessRule,
        VirtualNetworkRule: VirtualNetworkRule,
        IPRule: IPRule,
        NetworkRuleSet: NetworkRuleSet,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        RoutingPreference: RoutingPreference,
        Identity: Identity,
        ExtendedLocation: ExtendedLocation,
        Sku: Sku,
        StorageAccountCreateParameters: StorageAccountCreateParameters,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        Endpoints: Endpoints,
        GeoReplicationStats: GeoReplicationStats,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreStatus: BlobRestoreStatus,
        PrivateEndpoint: PrivateEndpoint,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        Resource: Resource,
        PrivateEndpointConnection: PrivateEndpointConnection,
        ProxyResource: ProxyResource,
        DeletedAccount: DeletedAccount,
        TrackedResource: TrackedResource,
        StorageAccount: StorageAccount,
        StorageAccountKey: StorageAccountKey,
        StorageAccountListKeysResult: StorageAccountListKeysResult,
        StorageAccountRegenerateKeyParameters: StorageAccountRegenerateKeyParameters,
        StorageAccountUpdateParameters: StorageAccountUpdateParameters,
        UsageName: UsageName,
        Usage: Usage,
        AccountSasParameters: AccountSasParameters,
        ListAccountSasResponse: ListAccountSasResponse,
        ServiceSasParameters: ServiceSasParameters,
        ListServiceSasResponse: ListServiceSasResponse,
        DateAfterModification: DateAfterModification,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        DateAfterCreation: DateAfterCreation,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        ManagementPolicyAction: ManagementPolicyAction,
        TagFilter: TagFilter,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicy: ManagementPolicy,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionScope: EncryptionScope,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        SystemData: SystemData,
        BlobInventoryPolicy: BlobInventoryPolicy,
        ErrorResponseBody: ErrorResponseBody,
        ErrorResponse: ErrorResponse,
        AzureEntityResource: AzureEntityResource,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceListResult: PrivateLinkResourceListResult,
        UpdateHistoryProperty: UpdateHistoryProperty,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        TagProperty: TagProperty,
        LegalHoldProperties: LegalHoldProperties,
        BlobContainer: BlobContainer,
        ImmutabilityPolicy: ImmutabilityPolicy,
        LegalHold: LegalHold,
        ListContainerItem: ListContainerItem,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        ChangeFeed: ChangeFeed,
        RestorePolicyProperties: RestorePolicyProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        BlobServiceProperties: BlobServiceProperties,
        LeaseContainerRequest: LeaseContainerRequest,
        LeaseContainerResponse: LeaseContainerResponse,
        Multichannel: Multichannel,
        SmbSetting: SmbSetting,
        ProtocolSettings: ProtocolSettings,
        FileServiceProperties: FileServiceProperties,
        FileServiceItems: FileServiceItems,
        FileShare: FileShare,
        DeletedShare: DeletedShare,
        FileShareItem: FileShareItem,
        QueueServiceProperties: QueueServiceProperties,
        ListQueueServices: ListQueueServices,
        StorageQueue: StorageQueue,
        ListQueue: ListQueue,
        TableServiceProperties: TableServiceProperties,
        ListTableServices: ListTableServices,
        Table: Table,
        BlobContainersCreateOrUpdateImmutabilityPolicyHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,
        BlobContainersGetImmutabilityPolicyHeaders: BlobContainersGetImmutabilityPolicyHeaders,
        BlobContainersDeleteImmutabilityPolicyHeaders: BlobContainersDeleteImmutabilityPolicyHeaders,
        BlobContainersLockImmutabilityPolicyHeaders: BlobContainersLockImmutabilityPolicyHeaders,
        BlobContainersExtendImmutabilityPolicyHeaders: BlobContainersExtendImmutabilityPolicyHeaders,
        OperationListResult: OperationListResult,
        StorageSkuListResult: StorageSkuListResult,
        StorageAccountListResult: StorageAccountListResult,
        DeletedAccountListResult: DeletedAccountListResult,
        UsageListResult: UsageListResult,
        ListBlobInventoryPolicy: ListBlobInventoryPolicy,
        PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
        ObjectReplicationPolicies: ObjectReplicationPolicies,
        EncryptionScopeListResult: EncryptionScopeListResult,
        BlobServiceItems: BlobServiceItems,
        ListContainerItems: ListContainerItems,
        FileShareItems: FileShareItems,
        ListQueueResource: ListQueueResource,
        ListTableResource: ListTableResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult,
        ServiceSpecification: ServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            constraints: {
                MaxLength: 24,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var blobInventoryPolicyName = {
        parameterPath: "blobInventoryPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "blobInventoryPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var blobServicesName = {
        parameterPath: "blobServicesName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "BlobServicesName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var containerName = {
        parameterPath: "containerName",
        mapper: {
            required: true,
            serializedName: "containerName",
            constraints: {
                MaxLength: 63,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var deletedAccountName = {
        parameterPath: "deletedAccountName",
        mapper: {
            required: true,
            serializedName: "deletedAccountName",
            constraints: {
                MaxLength: 24,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var encryptionScopeName = {
        parameterPath: "encryptionScopeName",
        mapper: {
            required: true,
            serializedName: "encryptionScopeName",
            constraints: {
                MaxLength: 63,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var expand0 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "geoReplicationStats",
                    "blobRestoreStatus"
                ]
            }
        }
    };
    var expand1 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "kerb"
                ]
            }
        }
    };
    var expand2 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "deleted",
                    "snapshots"
                ]
            }
        }
    };
    var expand3 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "snapshots"
                ]
            }
        }
    };
    var expand4 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "stats"
                ]
            }
        }
    };
    var fileServicesName = {
        parameterPath: "fileServicesName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "FileServicesName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch0 = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var immutabilityPolicyName = {
        parameterPath: "immutabilityPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "immutabilityPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var include = {
        parameterPath: [
            "options",
            "include"
        ],
        mapper: {
            serializedName: "$include",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var managementPolicyName = {
        parameterPath: "managementPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "managementPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var maxpagesize = {
        parameterPath: [
            "options",
            "maxpagesize"
        ],
        mapper: {
            serializedName: "$maxpagesize",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var objectReplicationPolicyId = {
        parameterPath: "objectReplicationPolicyId",
        mapper: {
            required: true,
            serializedName: "objectReplicationPolicyId",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var privateEndpointConnectionName = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
            required: true,
            serializedName: "privateEndpointConnectionName",
            type: {
                name: "String"
            }
        }
    };
    var queueName = {
        parameterPath: "queueName",
        mapper: {
            required: true,
            serializedName: "queueName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /^[a-z0-9]([a-z0-9]|(-(?!-))){1,61}[a-z0-9]$/
            },
            type: {
                name: "String"
            }
        }
    };
    var queueServiceName = {
        parameterPath: "queueServiceName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "queueServiceName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var shareName = {
        parameterPath: "shareName",
        mapper: {
            required: true,
            serializedName: "shareName",
            constraints: {
                MaxLength: 63,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var tableName = {
        parameterPath: "tableName",
        mapper: {
            required: true,
            serializedName: "tableName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /^[A-Za-z][A-Za-z0-9]{2,62}$/
            },
            type: {
                name: "String"
            }
        }
    };
    var tableServiceName = {
        parameterPath: "tableServiceName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "tableServiceName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var xMsSnapshot = {
        parameterPath: [
            "options",
            "xMsSnapshot"
        ],
        mapper: {
            serializedName: "x-ms-snapshot",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Storage/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Restriction: Restriction,
        SKUCapability: SKUCapability,
        SkuInformation: SkuInformation,
        StorageSkuListResult: StorageSkuListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Skus. */
    var Skus = /** @class */ (function () {
        /**
         * Create a Skus.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Skus(client) {
            this.client = client;
        }
        Skus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Skus;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageSkuListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccountSasParameters: AccountSasParameters,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListAccountSasResponse: ListAccountSasResponse,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ListServiceSasResponse: ListServiceSasResponse,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        ServiceSasParameters: ServiceSasParameters,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountCheckNameAvailabilityParameters: StorageAccountCheckNameAvailabilityParameters,
        StorageAccountCreateParameters: StorageAccountCreateParameters,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountKey: StorageAccountKey,
        StorageAccountListKeysResult: StorageAccountListKeysResult,
        StorageAccountListResult: StorageAccountListResult,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageAccountRegenerateKeyParameters: StorageAccountRegenerateKeyParameters,
        StorageAccountUpdateParameters: StorageAccountUpdateParameters,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageAccounts. */
    var StorageAccounts = /** @class */ (function () {
        /**
         * Create a StorageAccounts.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function StorageAccounts(client) {
            this.client = client;
        }
        StorageAccounts.prototype.checkNameAvailability = function (name, options, callback) {
            return this.client.sendOperationRequest({
                name: name,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is
         * already created and a subsequent create request is issued with different properties, the account
         * properties will be updated. If an account is already created and a subsequent create or update
         * request is issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param parameters The parameters to provide for the created account.
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageAccountsCreateResponse>
         */
        StorageAccounts.prototype.create = function (resourceGroupName, accountName, parameters, options) {
            return this.beginCreate(resourceGroupName, accountName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        StorageAccounts.prototype.deleteMethod = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        StorageAccounts.prototype.getProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getPropertiesOperationSpec, callback);
        };
        StorageAccounts.prototype.update = function (resourceGroupName, accountName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        StorageAccounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        StorageAccounts.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        StorageAccounts.prototype.listKeys = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listKeysOperationSpec, callback);
        };
        StorageAccounts.prototype.regenerateKey = function (resourceGroupName, accountName, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                keyName: keyName,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        StorageAccounts.prototype.listAccountSAS = function (resourceGroupName, accountName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, listAccountSASOperationSpec, callback);
        };
        StorageAccounts.prototype.listServiceSAS = function (resourceGroupName, accountName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, listServiceSASOperationSpec, callback);
        };
        /**
         * Failover request can be triggered for a storage account in case of availability issues. The
         * failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS
         * accounts. The secondary cluster will become primary after failover.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StorageAccounts.prototype.failover = function (resourceGroupName, accountName, options) {
            return this.beginFailover(resourceGroupName, accountName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restore blobs in the specified blob ranges
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param timeToRestore Restore blob to the specified time.
         * @param blobRanges Blob ranges to restore.
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageAccountsRestoreBlobRangesResponse>
         */
        StorageAccounts.prototype.restoreBlobRanges = function (resourceGroupName, accountName, timeToRestore, blobRanges, options) {
            return this.beginRestoreBlobRanges(resourceGroupName, accountName, timeToRestore, blobRanges, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        StorageAccounts.prototype.revokeUserDelegationKeys = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, revokeUserDelegationKeysOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is
         * already created and a subsequent create request is issued with different properties, the account
         * properties will be updated. If an account is already created and a subsequent create or update
         * request is issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param parameters The parameters to provide for the created account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccounts.prototype.beginCreate = function (resourceGroupName, accountName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Failover request can be triggered for a storage account in case of availability issues. The
         * failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS
         * accounts. The secondary cluster will become primary after failover.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccounts.prototype.beginFailover = function (resourceGroupName, accountName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, beginFailoverOperationSpec, options);
        };
        /**
         * Restore blobs in the specified blob ranges
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param timeToRestore Restore blob to the specified time.
         * @param blobRanges Blob ranges to restore.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccounts.prototype.beginRestoreBlobRanges = function (resourceGroupName, accountName, timeToRestore, blobRanges, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                timeToRestore: timeToRestore,
                blobRanges: blobRanges,
                options: options
            }, beginRestoreBlobRangesOperationSpec, options);
        };
        StorageAccounts.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        StorageAccounts.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return StorageAccounts;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign(__assign({}, StorageAccountCheckNameAvailabilityParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getPropertiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, StorageAccountUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            expand1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                keyName: "keyName"
            },
            mapper: __assign(__assign({}, StorageAccountRegenerateKeyParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccountListKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAccountSASOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AccountSasParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ListAccountSasResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listServiceSASOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ServiceSasParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ListServiceSasResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var revokeUserDelegationKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, StorageAccountCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccount
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginFailoverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginRestoreBlobRangesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/restoreBlobRanges",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                timeToRestore: "timeToRestore",
                blobRanges: "blobRanges"
            },
            mapper: __assign(__assign({}, BlobRestoreParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobRestoreStatus
            },
            202: {
                bodyMapper: BlobRestoreStatus
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeletedAccountListResult: DeletedAccountListResult,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ErrorResponse: ErrorResponse,
        ErrorResponseBody: ErrorResponseBody,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DeletedAccounts. */
    var DeletedAccounts = /** @class */ (function () {
        /**
         * Create a DeletedAccounts.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function DeletedAccounts(client) {
            this.client = client;
        }
        DeletedAccounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        DeletedAccounts.prototype.get = function (deletedAccountName, location, options, callback) {
            return this.client.sendOperationRequest({
                deletedAccountName: deletedAccountName,
                location: location,
                options: options
            }, getOperationSpec, callback);
        };
        DeletedAccounts.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return DeletedAccounts;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/deletedAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/deletedAccounts/{deletedAccountName}",
        urlParameters: [
            deletedAccountName,
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Usage: Usage,
        UsageListResult: UsageListResult,
        UsageName: UsageName
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.listByLocation = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagementPolicies. */
    var ManagementPolicies = /** @class */ (function () {
        /**
         * Create a ManagementPolicies.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function ManagementPolicies(client) {
            this.client = client;
        }
        ManagementPolicies.prototype.get = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getOperationSpec$1, callback);
        };
        ManagementPolicies.prototype.createOrUpdate = function (resourceGroupName, accountName, policy, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                policy: policy,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ManagementPolicies.prototype.deleteMethod = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        return ManagementPolicies;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            managementPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            managementPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                policy: "policy"
            },
            mapper: __assign(__assign({}, ManagementPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagementPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            managementPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ErrorResponse: ErrorResponse,
        ErrorResponseBody: ErrorResponseBody,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListBlobInventoryPolicy: ListBlobInventoryPolicy,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BlobInventoryPolicies. */
    var BlobInventoryPolicies = /** @class */ (function () {
        /**
         * Create a BlobInventoryPolicies.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function BlobInventoryPolicies(client) {
            this.client = client;
        }
        BlobInventoryPolicies.prototype.get = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getOperationSpec$2, callback);
        };
        BlobInventoryPolicies.prototype.createOrUpdate = function (resourceGroupName, accountName, policy, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                policy: policy,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        BlobInventoryPolicies.prototype.deleteMethod = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        BlobInventoryPolicies.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$4, callback);
        };
        return BlobInventoryPolicies;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobInventoryPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BlobInventoryPolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobInventoryPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                policy: "policy",
                systemData: [
                    "options",
                    "systemData"
                ]
            },
            mapper: __assign(__assign({}, BlobInventoryPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobInventoryPolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobInventoryPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListBlobInventoryPolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ErrorResponse: ErrorResponse,
        ErrorResponseBody: ErrorResponseBody,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PrivateEndpointConnections. */
    var PrivateEndpointConnections = /** @class */ (function () {
        /**
         * Create a PrivateEndpointConnections.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function PrivateEndpointConnections(client) {
            this.client = client;
        }
        PrivateEndpointConnections.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$5, callback);
        };
        PrivateEndpointConnections.prototype.get = function (resourceGroupName, accountName, privateEndpointConnectionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, getOperationSpec$3, callback);
        };
        PrivateEndpointConnections.prototype.put = function (resourceGroupName, accountName, privateEndpointConnectionName, properties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                properties: properties,
                options: options
            }, putOperationSpec, callback);
        };
        PrivateEndpointConnections.prototype.deleteMethod = function (resourceGroupName, accountName, privateEndpointConnectionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        return PrivateEndpointConnections;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            privateEndpointConnectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var putOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            privateEndpointConnectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "properties",
            mapper: __assign(__assign({}, PrivateEndpointConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            privateEndpointConnectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceListResult: PrivateLinkResourceListResult,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PrivateLinkResources. */
    var PrivateLinkResources = /** @class */ (function () {
        /**
         * Create a PrivateLinkResources.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function PrivateLinkResources(client) {
            this.client = client;
        }
        PrivateLinkResources.prototype.listByStorageAccount = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listByStorageAccountOperationSpec, callback);
        };
        return PrivateLinkResources;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listByStorageAccountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateLinkResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ErrorResponse: ErrorResponse,
        ErrorResponseBody: ErrorResponseBody,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicies: ObjectReplicationPolicies,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ObjectReplicationPoliciesOperations. */
    var ObjectReplicationPoliciesOperations = /** @class */ (function () {
        /**
         * Create a ObjectReplicationPoliciesOperations.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function ObjectReplicationPoliciesOperations(client) {
            this.client = client;
        }
        ObjectReplicationPoliciesOperations.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$6, callback);
        };
        ObjectReplicationPoliciesOperations.prototype.get = function (resourceGroupName, accountName, objectReplicationPolicyId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                objectReplicationPolicyId: objectReplicationPolicyId,
                options: options
            }, getOperationSpec$4, callback);
        };
        ObjectReplicationPoliciesOperations.prototype.createOrUpdate = function (resourceGroupName, accountName, objectReplicationPolicyId, properties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                objectReplicationPolicyId: objectReplicationPolicyId,
                properties: properties,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        ObjectReplicationPoliciesOperations.prototype.deleteMethod = function (resourceGroupName, accountName, objectReplicationPolicyId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                objectReplicationPolicyId: objectReplicationPolicyId,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        return ObjectReplicationPoliciesOperations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ObjectReplicationPolicies
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            objectReplicationPolicyId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ObjectReplicationPolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            objectReplicationPolicyId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "properties",
            mapper: __assign(__assign({}, ObjectReplicationPolicy), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ObjectReplicationPolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            objectReplicationPolicyId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionScopeListResult: EncryptionScopeListResult,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ErrorResponse: ErrorResponse,
        ErrorResponseBody: ErrorResponseBody,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EncryptionScopes. */
    var EncryptionScopes = /** @class */ (function () {
        /**
         * Create a EncryptionScopes.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function EncryptionScopes(client) {
            this.client = client;
        }
        EncryptionScopes.prototype.put = function (resourceGroupName, accountName, encryptionScopeName, encryptionScope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                encryptionScopeName: encryptionScopeName,
                encryptionScope: encryptionScope,
                options: options
            }, putOperationSpec$1, callback);
        };
        EncryptionScopes.prototype.patch = function (resourceGroupName, accountName, encryptionScopeName, encryptionScope, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                encryptionScopeName: encryptionScopeName,
                encryptionScope: encryptionScope,
                options: options
            }, patchOperationSpec, callback);
        };
        EncryptionScopes.prototype.get = function (resourceGroupName, accountName, encryptionScopeName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                encryptionScopeName: encryptionScopeName,
                options: options
            }, getOperationSpec$5, callback);
        };
        EncryptionScopes.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$7, callback);
        };
        EncryptionScopes.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return EncryptionScopes;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var putOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            encryptionScopeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "encryptionScope",
            mapper: __assign(__assign({}, EncryptionScope), { required: true })
        },
        responses: {
            200: {
                bodyMapper: EncryptionScope
            },
            201: {
                bodyMapper: EncryptionScope
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var patchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            encryptionScopeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "encryptionScope",
            mapper: __assign(__assign({}, EncryptionScope), { required: true })
        },
        responses: {
            200: {
                bodyMapper: EncryptionScope
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            encryptionScopeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionScope
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionScopeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionScopeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceItems: BlobServiceItems,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BlobServices. */
    var BlobServices = /** @class */ (function () {
        /**
         * Create a BlobServices.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function BlobServices(client) {
            this.client = client;
        }
        BlobServices.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$8, callback);
        };
        BlobServices.prototype.setServiceProperties = function (resourceGroupName, accountName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, setServicePropertiesOperationSpec, callback);
        };
        BlobServices.prototype.getServiceProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getServicePropertiesOperationSpec, callback);
        };
        return BlobServices;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BlobServiceItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var setServicePropertiesOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobServicesName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BlobServiceProperties), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getServicePropertiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobServicesName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BlobServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobContainersCreateOrUpdateImmutabilityPolicyHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,
        BlobContainersDeleteImmutabilityPolicyHeaders: BlobContainersDeleteImmutabilityPolicyHeaders,
        BlobContainersExtendImmutabilityPolicyHeaders: BlobContainersExtendImmutabilityPolicyHeaders,
        BlobContainersGetImmutabilityPolicyHeaders: BlobContainersGetImmutabilityPolicyHeaders,
        BlobContainersLockImmutabilityPolicyHeaders: BlobContainersLockImmutabilityPolicyHeaders,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LeaseContainerRequest: LeaseContainerRequest,
        LeaseContainerResponse: LeaseContainerResponse,
        LegalHold: LegalHold,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListContainerItems: ListContainerItems,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BlobContainers. */
    var BlobContainers = /** @class */ (function () {
        /**
         * Create a BlobContainers.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function BlobContainers(client) {
            this.client = client;
        }
        BlobContainers.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$9, callback);
        };
        BlobContainers.prototype.create = function (resourceGroupName, accountName, containerName, blobContainer, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                blobContainer: blobContainer,
                options: options
            }, createOperationSpec, callback);
        };
        BlobContainers.prototype.update = function (resourceGroupName, accountName, containerName, blobContainer, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                blobContainer: blobContainer,
                options: options
            }, updateOperationSpec$1, callback);
        };
        BlobContainers.prototype.get = function (resourceGroupName, accountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                options: options
            }, getOperationSpec$6, callback);
        };
        BlobContainers.prototype.deleteMethod = function (resourceGroupName, accountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        BlobContainers.prototype.setLegalHold = function (resourceGroupName, accountName, containerName, tags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                tags: tags,
                options: options
            }, setLegalHoldOperationSpec, callback);
        };
        BlobContainers.prototype.clearLegalHold = function (resourceGroupName, accountName, containerName, tags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                tags: tags,
                options: options
            }, clearLegalHoldOperationSpec, callback);
        };
        BlobContainers.prototype.createOrUpdateImmutabilityPolicy = function (resourceGroupName, accountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                options: options
            }, createOrUpdateImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.getImmutabilityPolicy = function (resourceGroupName, accountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                options: options
            }, getImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.deleteImmutabilityPolicy = function (resourceGroupName, accountName, containerName, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                ifMatch: ifMatch,
                options: options
            }, deleteImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.lockImmutabilityPolicy = function (resourceGroupName, accountName, containerName, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                ifMatch: ifMatch,
                options: options
            }, lockImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.extendImmutabilityPolicy = function (resourceGroupName, accountName, containerName, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                ifMatch: ifMatch,
                options: options
            }, extendImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.lease = function (resourceGroupName, accountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                containerName: containerName,
                options: options
            }, leaseOperationSpec, callback);
        };
        BlobContainers.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return BlobContainers;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxpagesize,
            filter,
            include
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListContainerItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "blobContainer",
            mapper: __assign(__assign({}, BlobContainer), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobContainer
            },
            201: {
                bodyMapper: BlobContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "blobContainer",
            mapper: __assign(__assign({}, BlobContainer), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BlobContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var setLegalHoldOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: "tags"
            },
            mapper: __assign(__assign({}, LegalHold), { required: true })
        },
        responses: {
            200: {
                bodyMapper: LegalHold
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var clearLegalHoldOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: "tags"
            },
            mapper: __assign(__assign({}, LegalHold), { required: true })
        },
        responses: {
            200: {
                bodyMapper: LegalHold
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var createOrUpdateImmutabilityPolicyOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            immutabilityPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                immutabilityPeriodSinceCreationInDays: [
                    "options",
                    "immutabilityPeriodSinceCreationInDays"
                ],
                allowProtectedAppendWrites: [
                    "options",
                    "allowProtectedAppendWrites"
                ]
            },
            mapper: ImmutabilityPolicy
        },
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders
            }
        },
        serializer: serializer$c
    };
    var getImmutabilityPolicyOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            immutabilityPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersGetImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: BlobContainersGetImmutabilityPolicyHeaders
            }
        },
        serializer: serializer$c
    };
    var deleteImmutabilityPolicyOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            immutabilityPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersDeleteImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: BlobContainersDeleteImmutabilityPolicyHeaders
            }
        },
        serializer: serializer$c
    };
    var lockImmutabilityPolicyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersLockImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: BlobContainersLockImmutabilityPolicyHeaders
            }
        },
        serializer: serializer$c
    };
    var extendImmutabilityPolicyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                immutabilityPeriodSinceCreationInDays: [
                    "options",
                    "immutabilityPeriodSinceCreationInDays"
                ],
                allowProtectedAppendWrites: [
                    "options",
                    "allowProtectedAppendWrites"
                ]
            },
            mapper: ImmutabilityPolicy
        },
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersExtendImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: BlobContainersExtendImmutabilityPolicyHeaders
            }
        },
        serializer: serializer$c
    };
    var leaseOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: LeaseContainerRequest
        },
        responses: {
            200: {
                bodyMapper: LeaseContainerResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            maxpagesize,
            filter,
            include
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListContainerItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceItems: FileServiceItems,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FileServices. */
    var FileServices = /** @class */ (function () {
        /**
         * Create a FileServices.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function FileServices(client) {
            this.client = client;
        }
        FileServices.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$a, callback);
        };
        FileServices.prototype.setServiceProperties = function (resourceGroupName, accountName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, setServicePropertiesOperationSpec$1, callback);
        };
        FileServices.prototype.getServiceProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getServicePropertiesOperationSpec$1, callback);
        };
        return FileServices;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServiceItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var setServicePropertiesOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/{FileServicesName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            fileServicesName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, FileServiceProperties), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FileServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getServicePropertiesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/{FileServicesName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            fileServicesName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeletedShare: DeletedShare,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        FileShareItems: FileShareItems,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FileShares. */
    var FileShares = /** @class */ (function () {
        /**
         * Create a FileShares.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function FileShares(client) {
            this.client = client;
        }
        FileShares.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$b, callback);
        };
        FileShares.prototype.create = function (resourceGroupName, accountName, shareName, fileShare, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                shareName: shareName,
                fileShare: fileShare,
                options: options
            }, createOperationSpec$1, callback);
        };
        FileShares.prototype.update = function (resourceGroupName, accountName, shareName, fileShare, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                shareName: shareName,
                fileShare: fileShare,
                options: options
            }, updateOperationSpec$2, callback);
        };
        FileShares.prototype.get = function (resourceGroupName, accountName, shareName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                shareName: shareName,
                options: options
            }, getOperationSpec$7, callback);
        };
        FileShares.prototype.deleteMethod = function (resourceGroupName, accountName, shareName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                shareName: shareName,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        FileShares.prototype.restore = function (resourceGroupName, accountName, shareName, deletedShareName, deletedShareVersion, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                shareName: shareName,
                deletedShareName: deletedShareName,
                deletedShareVersion: deletedShareVersion,
                options: options
            }, restoreOperationSpec, callback);
        };
        FileShares.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return FileShares;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxpagesize,
            filter,
            expand2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileShareItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            shareName,
            subscriptionId
        ],
        queryParameters: [
            expand3,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "fileShare",
            mapper: __assign(__assign({}, FileShare), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FileShare
            },
            201: {
                bodyMapper: FileShare
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            shareName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "fileShare",
            mapper: __assign(__assign({}, FileShare), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FileShare
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            shareName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            expand4
        ],
        headerParameters: [
            xMsSnapshot,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileShare
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            shareName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            xMsSnapshot,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var restoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}/restore",
        urlParameters: [
            resourceGroupName,
            accountName,
            shareName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                deletedShareName: "deletedShareName",
                deletedShareVersion: "deletedShareVersion"
            },
            mapper: __assign(__assign({}, DeletedShare), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            maxpagesize,
            filter,
            expand2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileShareItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ListQueueServices: ListQueueServices,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a QueueServices. */
    var QueueServices = /** @class */ (function () {
        /**
         * Create a QueueServices.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function QueueServices(client) {
            this.client = client;
        }
        QueueServices.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$c, callback);
        };
        QueueServices.prototype.setServiceProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, setServicePropertiesOperationSpec$2, callback);
        };
        QueueServices.prototype.getServiceProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getServicePropertiesOperationSpec$2, callback);
        };
        return QueueServices;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListQueueServices
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var setServicePropertiesOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/{queueServiceName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            queueServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                cors: [
                    "options",
                    "cors"
                ]
            },
            mapper: __assign(__assign({}, QueueServiceProperties), { required: true })
        },
        responses: {
            200: {
                bodyMapper: QueueServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getServicePropertiesOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/{queueServiceName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            queueServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: QueueServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ListQueueResource: ListQueueResource,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Queue. */
    var Queue = /** @class */ (function () {
        /**
         * Create a Queue.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Queue(client) {
            this.client = client;
        }
        Queue.prototype.create = function (resourceGroupName, accountName, queueName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                queueName: queueName,
                options: options
            }, createOperationSpec$2, callback);
        };
        Queue.prototype.update = function (resourceGroupName, accountName, queueName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                queueName: queueName,
                options: options
            }, updateOperationSpec$3, callback);
        };
        Queue.prototype.get = function (resourceGroupName, accountName, queueName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                queueName: queueName,
                options: options
            }, getOperationSpec$8, callback);
        };
        Queue.prototype.deleteMethod = function (resourceGroupName, accountName, queueName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                queueName: queueName,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        Queue.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$d, callback);
        };
        Queue.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return Queue;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            queueName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                metadata: [
                    "options",
                    "metadata"
                ]
            },
            mapper: __assign(__assign({}, StorageQueue), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageQueue
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            queueName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                metadata: [
                    "options",
                    "metadata"
                ]
            },
            mapper: __assign(__assign({}, StorageQueue), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageQueue
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            queueName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageQueue
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            queueName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxpagesize,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListQueueResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            maxpagesize,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListQueueResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ListTableServices: ListTableServices,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TableServices. */
    var TableServices = /** @class */ (function () {
        /**
         * Create a TableServices.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function TableServices(client) {
            this.client = client;
        }
        TableServices.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$e, callback);
        };
        TableServices.prototype.setServiceProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, setServicePropertiesOperationSpec$3, callback);
        };
        TableServices.prototype.getServiceProperties = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getServicePropertiesOperationSpec$3, callback);
        };
        return TableServices;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListTableServices
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var setServicePropertiesOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/{tableServiceName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            tableServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                cors: [
                    "options",
                    "cors"
                ]
            },
            mapper: __assign(__assign({}, TableServiceProperties), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TableServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getServicePropertiesOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/{tableServiceName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            tableServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TableServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ActiveDirectoryProperties: ActiveDirectoryProperties,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobInventoryPolicy: BlobInventoryPolicy,
        BlobInventoryPolicyDefinition: BlobInventoryPolicyDefinition,
        BlobInventoryPolicyFilter: BlobInventoryPolicyFilter,
        BlobInventoryPolicyRule: BlobInventoryPolicyRule,
        BlobInventoryPolicySchema: BlobInventoryPolicySchema,
        BlobRestoreParameters: BlobRestoreParameters,
        BlobRestoreRange: BlobRestoreRange,
        BlobRestoreStatus: BlobRestoreStatus,
        BlobServiceProperties: BlobServiceProperties,
        ChangeFeed: ChangeFeed,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeletedAccount: DeletedAccount,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionScope: EncryptionScope,
        EncryptionScopeKeyVaultProperties: EncryptionScopeKeyVaultProperties,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        ExtendedLocation: ExtendedLocation,
        FileServiceProperties: FileServiceProperties,
        FileShare: FileShare,
        FileShareItem: FileShareItem,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LastAccessTimeTrackingPolicy: LastAccessTimeTrackingPolicy,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListQueue: ListQueue,
        ListTableResource: ListTableResource,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyVersion: ManagementPolicyVersion,
        Multichannel: Multichannel,
        NetworkRuleSet: NetworkRuleSet,
        ObjectReplicationPolicy: ObjectReplicationPolicy,
        ObjectReplicationPolicyFilter: ObjectReplicationPolicyFilter,
        ObjectReplicationPolicyRule: ObjectReplicationPolicyRule,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        ProtocolSettings: ProtocolSettings,
        ProxyResource: ProxyResource,
        QueueServiceProperties: QueueServiceProperties,
        Resource: Resource,
        ResourceAccessRule: ResourceAccessRule,
        RestorePolicyProperties: RestorePolicyProperties,
        RoutingPreference: RoutingPreference,
        Sku: Sku,
        SmbSetting: SmbSetting,
        StorageAccount: StorageAccount,
        StorageAccountInternetEndpoints: StorageAccountInternetEndpoints,
        StorageAccountMicrosoftEndpoints: StorageAccountMicrosoftEndpoints,
        StorageQueue: StorageQueue,
        SystemData: SystemData,
        Table: Table,
        TableServiceProperties: TableServiceProperties,
        TagFilter: TagFilter,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        UserAssignedIdentity: UserAssignedIdentity,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TableOperations. */
    var TableOperations = /** @class */ (function () {
        /**
         * Create a TableOperations.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function TableOperations(client) {
            this.client = client;
        }
        TableOperations.prototype.create = function (resourceGroupName, accountName, tableName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                tableName: tableName,
                options: options
            }, createOperationSpec$3, callback);
        };
        TableOperations.prototype.update = function (resourceGroupName, accountName, tableName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                tableName: tableName,
                options: options
            }, updateOperationSpec$4, callback);
        };
        TableOperations.prototype.get = function (resourceGroupName, accountName, tableName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                tableName: tableName,
                options: options
            }, getOperationSpec$9, callback);
        };
        TableOperations.prototype.deleteMethod = function (resourceGroupName, accountName, tableName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                tableName: tableName,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        TableOperations.prototype.list = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listOperationSpec$f, callback);
        };
        TableOperations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return TableOperations;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var createOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            tableName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Table
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            tableName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Table
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            tableName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Table
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            tableName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListTableResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListTableResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-storage";
    var packageVersion = "15.3.0";
    var StorageManagementClientContext = /** @class */ (function (_super) {
        __extends(StorageManagementClientContext, _super);
        /**
         * Initializes a new instance of the StorageManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function StorageManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2021-01-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return StorageManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var StorageManagementClient = /** @class */ (function (_super) {
        __extends(StorageManagementClient, _super);
        /**
         * Initializes a new instance of the StorageManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function StorageManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.skus = new Skus(_this);
            _this.storageAccounts = new StorageAccounts(_this);
            _this.deletedAccounts = new DeletedAccounts(_this);
            _this.usages = new Usages(_this);
            _this.managementPolicies = new ManagementPolicies(_this);
            _this.blobInventoryPolicies = new BlobInventoryPolicies(_this);
            _this.privateEndpointConnections = new PrivateEndpointConnections(_this);
            _this.privateLinkResources = new PrivateLinkResources(_this);
            _this.objectReplicationPolicies = new ObjectReplicationPoliciesOperations(_this);
            _this.encryptionScopes = new EncryptionScopes(_this);
            _this.blobServices = new BlobServices(_this);
            _this.blobContainers = new BlobContainers(_this);
            _this.fileServices = new FileServices(_this);
            _this.fileShares = new FileShares(_this);
            _this.queueServices = new QueueServices(_this);
            _this.queue = new Queue(_this);
            _this.tableServices = new TableServices(_this);
            _this.table = new TableOperations(_this);
            return _this;
        }
        return StorageManagementClient;
    }(StorageManagementClientContext));

    exports.BlobContainers = BlobContainers;
    exports.BlobInventoryPolicies = BlobInventoryPolicies;
    exports.BlobServices = BlobServices;
    exports.DeletedAccounts = DeletedAccounts;
    exports.EncryptionScopes = EncryptionScopes;
    exports.FileServices = FileServices;
    exports.FileShares = FileShares;
    exports.ManagementPolicies = ManagementPolicies;
    exports.ObjectReplicationPoliciesOperations = ObjectReplicationPoliciesOperations;
    exports.Operations = Operations;
    exports.PrivateEndpointConnections = PrivateEndpointConnections;
    exports.PrivateLinkResources = PrivateLinkResources;
    exports.Queue = Queue;
    exports.QueueServices = QueueServices;
    exports.Skus = Skus;
    exports.StorageAccounts = StorageAccounts;
    exports.StorageManagementClient = StorageManagementClient;
    exports.StorageManagementClientContext = StorageManagementClientContext;
    exports.StorageManagementMappers = mappers;
    exports.StorageManagementModels = index;
    exports.TableOperations = TableOperations;
    exports.TableServices = TableServices;
    exports.Usages = Usages;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-storage.js.map
