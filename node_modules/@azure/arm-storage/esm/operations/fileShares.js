/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/fileSharesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a FileShares. */
var FileShares = /** @class */ (function () {
    /**
     * Create a FileShares.
     * @param {StorageManagementClientContext} client Reference to the service client.
     */
    function FileShares(client) {
        this.client = client;
    }
    FileShares.prototype.list = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, listOperationSpec, callback);
    };
    FileShares.prototype.create = function (resourceGroupName, accountName, shareName, fileShare, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            shareName: shareName,
            fileShare: fileShare,
            options: options
        }, createOperationSpec, callback);
    };
    FileShares.prototype.update = function (resourceGroupName, accountName, shareName, fileShare, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            shareName: shareName,
            fileShare: fileShare,
            options: options
        }, updateOperationSpec, callback);
    };
    FileShares.prototype.get = function (resourceGroupName, accountName, shareName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            shareName: shareName,
            options: options
        }, getOperationSpec, callback);
    };
    FileShares.prototype.deleteMethod = function (resourceGroupName, accountName, shareName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            shareName: shareName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    FileShares.prototype.restore = function (resourceGroupName, accountName, shareName, deletedShareName, deletedShareVersion, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            shareName: shareName,
            deletedShareName: deletedShareName,
            deletedShareVersion: deletedShareVersion,
            options: options
        }, restoreOperationSpec, callback);
    };
    FileShares.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return FileShares;
}());
export { FileShares };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.maxpagesize,
        Parameters.filter,
        Parameters.expand2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FileShareItems
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.shareName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand3,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "fileShare",
        mapper: __assign(__assign({}, Mappers.FileShare), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.FileShare
        },
        201: {
            bodyMapper: Mappers.FileShare
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.shareName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "fileShare",
        mapper: __assign(__assign({}, Mappers.FileShare), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.FileShare
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.shareName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.expand4
    ],
    headerParameters: [
        Parameters.xMsSnapshot,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FileShare
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.shareName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.xMsSnapshot,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var restoreOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}/restore",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.shareName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            deletedShareName: "deletedShareName",
            deletedShareVersion: "deletedShareVersion"
        },
        mapper: __assign(__assign({}, Mappers.DeletedShare), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.maxpagesize,
        Parameters.filter,
        Parameters.expand2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FileShareItems
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=fileShares.js.map