/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/blobServicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a BlobServices. */
var BlobServices = /** @class */ (function () {
    /**
     * Create a BlobServices.
     * @param {StorageManagementClientContext} client Reference to the service client.
     */
    function BlobServices(client) {
        this.client = client;
    }
    BlobServices.prototype.list = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, listOperationSpec, callback);
    };
    BlobServices.prototype.setServiceProperties = function (resourceGroupName, accountName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            parameters: parameters,
            options: options
        }, setServicePropertiesOperationSpec, callback);
    };
    BlobServices.prototype.getServiceProperties = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, getServicePropertiesOperationSpec, callback);
    };
    return BlobServices;
}());
export { BlobServices };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BlobServiceItems
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var setServicePropertiesOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.blobServicesName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.BlobServiceProperties), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BlobServiceProperties
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getServicePropertiesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.blobServicesName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BlobServiceProperties
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=blobServices.js.map