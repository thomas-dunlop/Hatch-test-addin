import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { StorageManagementClientContext } from "../storageManagementClientContext";
/** Class representing a EncryptionScopes. */
export declare class EncryptionScopes {
    private readonly client;
    /**
     * Create a EncryptionScopes.
     * @param {StorageManagementClientContext} client Reference to the service client.
     */
    constructor(client: StorageManagementClientContext);
    /**
     * Synchronously creates or updates an encryption scope under the specified storage account. If an
     * encryption scope is already created and a subsequent request is issued with different
     * properties, the encryption scope properties will be updated per the specified request.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param encryptionScope Encryption scope properties to be used for the create or update.
     * @param [options] The optional parameters
     * @returns Promise<Models.EncryptionScopesPutResponse>
     */
    put(resourceGroupName: string, accountName: string, encryptionScopeName: string, encryptionScope: Models.EncryptionScope, options?: msRest.RequestOptionsBase): Promise<Models.EncryptionScopesPutResponse>;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param encryptionScope Encryption scope properties to be used for the create or update.
     * @param callback The callback
     */
    put(resourceGroupName: string, accountName: string, encryptionScopeName: string, encryptionScope: Models.EncryptionScope, callback: msRest.ServiceCallback<Models.EncryptionScope>): void;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param encryptionScope Encryption scope properties to be used for the create or update.
     * @param options The optional parameters
     * @param callback The callback
     */
    put(resourceGroupName: string, accountName: string, encryptionScopeName: string, encryptionScope: Models.EncryptionScope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EncryptionScope>): void;
    /**
     * Update encryption scope properties as specified in the request body. Update fails if the
     * specified encryption scope does not already exist.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param encryptionScope Encryption scope properties to be used for the update.
     * @param [options] The optional parameters
     * @returns Promise<Models.EncryptionScopesPatchResponse>
     */
    patch(resourceGroupName: string, accountName: string, encryptionScopeName: string, encryptionScope: Models.EncryptionScope, options?: msRest.RequestOptionsBase): Promise<Models.EncryptionScopesPatchResponse>;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param encryptionScope Encryption scope properties to be used for the update.
     * @param callback The callback
     */
    patch(resourceGroupName: string, accountName: string, encryptionScopeName: string, encryptionScope: Models.EncryptionScope, callback: msRest.ServiceCallback<Models.EncryptionScope>): void;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param encryptionScope Encryption scope properties to be used for the update.
     * @param options The optional parameters
     * @param callback The callback
     */
    patch(resourceGroupName: string, accountName: string, encryptionScopeName: string, encryptionScope: Models.EncryptionScope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EncryptionScope>): void;
    /**
     * Returns the properties for the specified encryption scope.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param [options] The optional parameters
     * @returns Promise<Models.EncryptionScopesGetResponse>
     */
    get(resourceGroupName: string, accountName: string, encryptionScopeName: string, options?: msRest.RequestOptionsBase): Promise<Models.EncryptionScopesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param callback The callback
     */
    get(resourceGroupName: string, accountName: string, encryptionScopeName: string, callback: msRest.ServiceCallback<Models.EncryptionScope>): void;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param encryptionScopeName The name of the encryption scope within the specified storage
     * account. Encryption scope names must be between 3 and 63 characters in length and use numbers,
     * lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and
     * followed by a letter or number.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, accountName: string, encryptionScopeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EncryptionScope>): void;
    /**
     * Lists all the encryption scopes available under the specified storage account.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param [options] The optional parameters
     * @returns Promise<Models.EncryptionScopesListResponse>
     */
    list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.EncryptionScopesListResponse>;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param callback The callback
     */
    list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.EncryptionScopeListResult>): void;
    /**
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EncryptionScopeListResult>): void;
    /**
     * Lists all the encryption scopes available under the specified storage account.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.EncryptionScopesListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.EncryptionScopesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EncryptionScopeListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EncryptionScopeListResult>): void;
}
//# sourceMappingURL=encryptionScopes.d.ts.map