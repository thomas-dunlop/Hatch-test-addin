import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { StorageManagementClientContext } from "./storageManagementClientContext";
declare class StorageManagementClient extends StorageManagementClientContext {
    operations: operations.Operations;
    skus: operations.Skus;
    storageAccounts: operations.StorageAccounts;
    deletedAccounts: operations.DeletedAccounts;
    usages: operations.Usages;
    managementPolicies: operations.ManagementPolicies;
    blobInventoryPolicies: operations.BlobInventoryPolicies;
    privateEndpointConnections: operations.PrivateEndpointConnections;
    privateLinkResources: operations.PrivateLinkResources;
    objectReplicationPolicies: operations.ObjectReplicationPoliciesOperations;
    encryptionScopes: operations.EncryptionScopes;
    blobServices: operations.BlobServices;
    blobContainers: operations.BlobContainers;
    fileServices: operations.FileServices;
    fileShares: operations.FileShares;
    queueServices: operations.QueueServices;
    queue: operations.Queue;
    tableServices: operations.TableServices;
    table: operations.TableOperations;
    /**
     * Initializes a new instance of the StorageManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param subscriptionId The ID of the target subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.StorageManagementClientOptions);
}
export { StorageManagementClient, StorageManagementClientContext, Models as StorageManagementModels, Mappers as StorageManagementMappers };
export * from "./operations";
//# sourceMappingURL=storageManagementClient.d.ts.map