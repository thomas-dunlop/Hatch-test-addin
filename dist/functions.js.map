{"version":3,"file":"functions.js","mappings":"yBACA,IC+BMA,EAAkB,SAACC,EAAYC,GACnC,IAAMC,EAAQD,EAAY,GAAGE,WAAU,SAACC,GAAD,OAAaA,IAAYJ,CAAzB,IACvC,IAAe,IAAXE,EAKF,MAJY,IAAIG,gBAAgBC,MAC9BD,gBAAgBE,UAAUC,aADhB,UAEPR,EAFO,wDAMd,OAAOE,CACR,EAEDG,gBAAgBI,UAAU,kBApCnB,SAAwBC,EAAcC,EAAeC,EAAcX,GACxE,IAAMY,EAAoBd,EAAgB,eAAgBE,GACpDa,EAAqBf,EAAgB,gBAAiBE,GACtDc,EAAoBhB,EAAgB,eAAgBE,GACpDe,EAAqBjB,EAAgB,gBAAiBE,GAEtDgB,EAAchB,EAAYiB,MAC9B,SAACd,GAAD,OACEA,EAAQS,KAAuBH,GAC/BN,EAAQU,KAAwBH,GAChCP,EAAQW,KAAuBH,CAHjC,IAMF,IAAKK,EAKH,MAJY,IAAIZ,gBAAgBC,MAC9BD,gBAAgBE,UAAUY,aADhB,yDAEwCT,EAFxC,4BAEwEC,EAFxE,2BAEwGC,IAKtH,OAAOK,EAAYD,EACpB,G","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/**\n * @customfunction GetStreamValue\n * @param {string} streamNumber\n * @param {string} operatingCase\n * @param {string} propertyType\n * @param {string[][]} searchRange\n * @returns {string} of PropertyValue.\n */\nexport function getStreamValue(streamNumber, operatingCase, propertyType, searchRange) {\n  const streamNumberIndex = findHeaderIndex(\"StreamNumber\", searchRange);\n  const operatingCaseIndex = findHeaderIndex(\"OperatingCase\", searchRange);\n  const propertyTypeIndex = findHeaderIndex(\"PropertyType\", searchRange);\n  const propertyValueIndex = findHeaderIndex(\"PropertyValue\", searchRange);\n\n  const matchingRow = searchRange.find(\n    (element) =>\n      element[streamNumberIndex] === streamNumber &&\n      element[operatingCaseIndex] === operatingCase &&\n      element[propertyTypeIndex] === propertyType\n  );\n\n  if (!matchingRow) {\n    let error = new CustomFunctions.Error(\n      CustomFunctions.ErrorCode.notAvailable,\n      `Could not find PropertyValue for StreamNumber: ${streamNumber}, OperatingCase: ${operatingCase}, PropertyType: ${propertyType}`\n    );\n    throw error;\n  }\n\n  return matchingRow[propertyValueIndex];\n}\n\nconst findHeaderIndex = (headerName, searchRange) => {\n  const index = searchRange[0].findIndex((element) => element === headerName);\n  if (index === -1) {\n    let error = new CustomFunctions.Error(\n      CustomFunctions.ErrorCode.invalidValue,\n      `${headerName} not found in header row (first row of searchRange)`\n    );\n    throw error;\n  }\n  return index;\n};\n\nCustomFunctions.associate(\"GETSTREAMVALUE\", getStreamValue);"],"names":["findHeaderIndex","headerName","searchRange","index","findIndex","element","CustomFunctions","Error","ErrorCode","invalidValue","associate","streamNumber","operatingCase","propertyType","streamNumberIndex","operatingCaseIndex","propertyTypeIndex","propertyValueIndex","matchingRow","find","notAvailable"],"sourceRoot":""}